// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (
  modules,
  entry,
  mainEntry,
  parcelRequireName,
  externals,
  distDir,
  publicUrl,
  devServer
) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var importMap = previousRequire.i || {};
  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        if (externals[name]) {
          return externals[name];
        }
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        globalObject
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.require = nodeRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.distDir = distDir;
  newRequire.publicUrl = publicUrl;
  newRequire.devServer = devServer;
  newRequire.i = importMap;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  // Only insert newRequire.load when it is actually used.
  // The code in this file is linted against ES5, so dynamic import is not allowed.
  // INSERT_LOAD_HERE

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });
    }
  }
})({"eZFTg":[function(require,module,exports,__globalThis) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SERVER_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "439701173a9199ea";
var HMR_USE_SSE = false;
module.bundle.HMR_BUNDLE_ID = "9eacdeebc9112ede";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_SERVER_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_SERVER_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var HMR_USE_SSE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , disposedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ , bundleNotFound = false;
function getHostname() {
    return HMR_HOST || (typeof location !== 'undefined' && location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || (typeof location !== 'undefined' ? location.port : HMR_SERVER_PORT);
}
// eslint-disable-next-line no-redeclare
let WebSocket = globalThis.WebSocket;
if (!WebSocket && typeof module.bundle.root === 'function') try {
    // eslint-disable-next-line no-global-assign
    WebSocket = module.bundle.root('ws');
} catch  {
// ignore.
}
var hostname = getHostname();
var port = getPort();
var protocol = HMR_SECURE || typeof location !== 'undefined' && location.protocol === 'https:' && ![
    'localhost',
    '127.0.0.1',
    '0.0.0.0'
].includes(hostname) ? 'wss' : 'ws';
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if (!parent || !parent.isParcelRequire) {
    // Web extension context
    var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes('test.js');
    }
    var ws;
    if (HMR_USE_SSE) ws = new EventSource('/__parcel_hmr');
    else try {
        // If we're running in the dev server's node runner, listen for messages on the parent port.
        let { workerData, parentPort } = module.bundle.root('node:worker_threads') /*: any*/ ;
        if (workerData !== null && workerData !== void 0 && workerData.__parcel) {
            parentPort.on('message', async (message)=>{
                try {
                    await handleMessage(message);
                    parentPort.postMessage('updated');
                } catch  {
                    parentPort.postMessage('restart');
                }
            });
            // After the bundle has finished running, notify the dev server that the HMR update is complete.
            queueMicrotask(()=>parentPort.postMessage('ready'));
        }
    } catch  {
        if (typeof WebSocket !== 'undefined') try {
            ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
        } catch (err) {
            // Ignore cloudflare workers error.
            if (err.message && !err.message.includes('Disallowed operation called within global scope')) console.error(err.message);
        }
    }
    if (ws) {
        // $FlowFixMe
        ws.onmessage = async function(event /*: {data: string, ...} */ ) {
            var data /*: HMRMessage */  = JSON.parse(event.data);
            await handleMessage(data);
        };
        if (ws instanceof WebSocket) {
            ws.onerror = function(e) {
                if (e.message) console.error(e.message);
            };
            ws.onclose = function() {
                console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
            };
        }
    }
}
async function handleMessage(data /*: HMRMessage */ ) {
    checkedAssets = {} /*: {|[string]: boolean|} */ ;
    disposedAssets = {} /*: {|[string]: boolean|} */ ;
    assetsToAccept = [];
    assetsToDispose = [];
    bundleNotFound = false;
    if (data.type === 'reload') fullReload();
    else if (data.type === 'update') {
        // Remove error overlay if there is one
        if (typeof document !== 'undefined') removeErrorOverlay();
        let assets = data.assets;
        // Handle HMR Update
        let handled = assets.every((asset)=>{
            return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
        });
        // Dispatch a custom event in case a bundle was not found. This might mean
        // an asset on the server changed and we should reload the page. This event
        // gives the client an opportunity to refresh without losing state
        // (e.g. via React Server Components). If e.preventDefault() is not called,
        // we will trigger a full page reload.
        if (handled && bundleNotFound && assets.some((a)=>a.envHash !== HMR_ENV_HASH) && typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') handled = !window.dispatchEvent(new CustomEvent('parcelhmrreload', {
            cancelable: true
        }));
        if (handled) {
            console.clear();
            // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
            if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') window.dispatchEvent(new CustomEvent('parcelhmraccept'));
            await hmrApplyUpdates(assets);
            hmrDisposeQueue();
            // Run accept callbacks. This will also re-execute other disposed assets in topological order.
            let processedAssets = {};
            for(let i = 0; i < assetsToAccept.length; i++){
                let id = assetsToAccept[i][1];
                if (!processedAssets[id]) {
                    hmrAccept(assetsToAccept[i][0], id);
                    processedAssets[id] = true;
                }
            }
        } else fullReload();
    }
    if (data.type === 'error') {
        // Log parcel errors to console
        for (let ansiDiagnostic of data.diagnostics.ansi){
            let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
            console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
        }
        if (typeof document !== 'undefined') {
            // Render the fancy html overlay
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html);
            // $FlowFixMe
            document.body.appendChild(overlay);
        }
    }
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="${protocol === 'wss' ? 'https' : 'http'}://${hostname}:${port}/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, '') : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + '</div>').join('')}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ''}
      </div>
    `;
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if (typeof location !== 'undefined' && 'reload' in location) location.reload();
    else if (typeof extCtx !== 'undefined' && extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
    else try {
        let { workerData, parentPort } = module.bundle.root('node:worker_threads') /*: any*/ ;
        if (workerData !== null && workerData !== void 0 && workerData.__parcel) parentPort.postMessage('restart');
    } catch (err) {
        console.error("[parcel] \u26A0\uFE0F An HMR update was not accepted. Please restart the process.");
    }
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute('href');
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', // $FlowFixMe
    href.split('?')[0] + '?' + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout || typeof document === 'undefined') return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === 'js') {
        if (typeof document !== 'undefined') {
            let script = document.createElement('script');
            script.src = asset.url + '?t=' + Date.now();
            if (asset.outputFormat === 'esmodule') script.type = 'module';
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === 'function') {
            // Worker scripts
            if (asset.outputFormat === 'esmodule') return import(asset.url + '?t=' + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + '?t=' + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        }
        // Always traverse to the parent bundle, even if we already replaced the asset in this bundle.
        // This is required in case modules are duplicated. We need to ensure all instances have the updated code.
        if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    checkedAssets = {};
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else if (a !== null) {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) {
            bundleNotFound = true;
            return true;
        }
        return hmrAcceptCheckOne(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return null;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    if (!cached) return true;
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
    return false;
}
function hmrDisposeQueue() {
    // Dispose all old assets.
    for(let i = 0; i < assetsToDispose.length; i++){
        let id = assetsToDispose[i][1];
        if (!disposedAssets[id]) {
            hmrDispose(assetsToDispose[i][0], id);
            disposedAssets[id] = true;
        }
    }
    assetsToDispose = [];
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        let assetsToAlsoAccept = [];
        cached.hot._acceptCallbacks.forEach(function(cb) {
            let additionalAssets = cb(function() {
                return getParents(module.bundle.root, id);
            });
            if (Array.isArray(additionalAssets) && additionalAssets.length) assetsToAlsoAccept.push(...additionalAssets);
        });
        if (assetsToAlsoAccept.length) {
            let handled = assetsToAlsoAccept.every(function(a) {
                return hmrAcceptCheck(a[0], a[1]);
            });
            if (!handled) return fullReload();
            hmrDisposeQueue();
        }
    }
}

},{}],"9Fk10":[function(require,module,exports,__globalThis) {
var _api = require("@atproto/api");
var _oauthClientBrowser = require("@atproto/oauth-client-browser");
async function main() {
    const oauthClient = await (0, _oauthClientBrowser.BrowserOAuthClient).load({
        clientId: 'https://a2a0-2a02-aa14-f480-f180-b890-bc6-8709-71e0.ngrok-free.app/client-metadata.json',
        handleResolver: 'https://bsky.social/'
    });
    const result = await oauthClient.init();
    if (result) {
        if ('state' in result) console.log('The user was just redirected back from the authorization page');
        console.log(`The user is currently signed in as ${result.session.did}`);
    }
    const session = result?.session;
    if (!session) {
        const handle = prompt('Enter your atproto handle to authenticate');
        if (!handle) throw new Error('Authentication process canceled by the user');
        // Add required scopes to the authorization request
        const url = await oauthClient.authorize(handle, {
            scope: 'com.atproto.profile com.atproto.transitive transition:generic'
        });
        // Redirect the user to the authorization page
        window.open(url, '_self', 'noopener');
        // Protect against browser's back-forward cache
        await new Promise((resolve, reject)=>{
            setTimeout(reject, 10000, new Error('User navigated back from the authorization page'));
        });
    }
    if (session) {
        const agent = new (0, _api.Agent)(session);
        const fetchProfile = async ()=>{
            if (!agent.did) throw new Error('Agent DID is not defined');
            const profile = await agent.getProfile({
                actor: agent.did
            });
            return profile.data;
        };
        // Update the user interface
        document.body.textContent = `Authenticated as ${agent.did}`;
        const profileBtn = document.createElement('button');
        document.body.appendChild(profileBtn);
        profileBtn.textContent = 'Fetch Profile';
        profileBtn.onclick = async ()=>{
            const profile = await fetchProfile();
            outputPre.textContent = JSON.stringify(profile, null, 2);
        };
        const logoutBtn = document.createElement('button');
        document.body.appendChild(logoutBtn);
        logoutBtn.textContent = 'Logout';
        logoutBtn.onclick = async ()=>{
            await session.signOut();
            window.location.reload();
        };
        const outputPre = document.createElement('pre');
        document.body.appendChild(outputPre);
    }
}
document.addEventListener('DOMContentLoaded', main);

},{"@atproto/oauth-client-browser":"83eLc","@atproto/api":"fkrLB"}],"83eLc":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.buildLoopbackClientId = void 0;
require("b6d3029ab6fd26fb");
__exportStar(require("2004a3fc769f1731"), exports);
__exportStar(require("3ffeb7eeb95012f4"), exports);
__exportStar(require("149d8ac3ca06a507"), exports);
__exportStar(require("ffc3b615c3a9af12"), exports);
var util_js_1 = require("e73f387f19ae1743");
Object.defineProperty(exports, "buildLoopbackClientId", {
    enumerable: true,
    get: function() {
        return util_js_1.buildLoopbackClientId;
    }
});

},{"b6d3029ab6fd26fb":"B9ii9","2004a3fc769f1731":"8o5XE","3ffeb7eeb95012f4":"6S90m","149d8ac3ca06a507":"kke79","ffc3b615c3a9af12":"5Y1UF","e73f387f19ae1743":"fHNzi"}],"B9ii9":[function(require,module,exports,__globalThis) {
"use strict";
// Code compiled with tsc supports "using" and "await using" syntax. This
// features is supported by downleveling the code to ES2017. The downleveling
// relies on `Symbol.dispose` and `Symbol.asyncDispose` symbols. These symbols
// might not be available in all environments. This package provides a polyfill
// for these symbols.
// @ts-expect-error
Symbol.dispose ?? (Symbol.dispose = Symbol('@@dispose'));
// @ts-expect-error
Symbol.asyncDispose ?? (Symbol.asyncDispose = Symbol('@@asyncDispose'));

},{}],"8o5XE":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(require("2151b364c787d325"), exports);

},{"2151b364c787d325":"dNMjG"}],"dNMjG":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WebcryptoKey = exports.jwkWithAlgSchema = void 0;
const zod_1 = require("dd91c53c3b55e99b");
const jwk_1 = require("2e658d7c6e977d1b");
const jwk_jose_1 = require("bdc7ac05dd7f68fe");
const util_js_1 = require("a63c25820cf9a3bd");
// Webcrypto keys are bound to a single algorithm
exports.jwkWithAlgSchema = zod_1.z.intersection(jwk_1.jwkSchema, zod_1.z.object({
    alg: zod_1.z.string()
}));
class WebcryptoKey extends jwk_jose_1.JoseKey {
    // We need to override the static method generate from JoseKey because
    // the browser needs both the private and public keys
    static async generate(allowedAlgos = [
        'ES256'
    ], kid = crypto.randomUUID(), options) {
        const keyPair = await this.generateKeyPair(allowedAlgos, options);
        // Type safety only: in the browser, 'jose' always generates a CryptoKeyPair
        if (!(0, util_js_1.isCryptoKeyPair)(keyPair)) throw new TypeError('Invalid CryptoKeyPair');
        return this.fromKeypair(keyPair, kid);
    }
    static async fromKeypair(cryptoKeyPair, kid) {
        // https://datatracker.ietf.org/doc/html/rfc7517
        // > The "use" and "key_ops" JWK members SHOULD NOT be used together; [...]
        // > Applications should specify which of these members they use.
        const { key_ops, use, alg = (0, util_js_1.fromSubtleAlgorithm)(cryptoKeyPair.privateKey.algorithm), ...jwk } = await crypto.subtle.exportKey('jwk', cryptoKeyPair.privateKey.extractable ? cryptoKeyPair.privateKey : cryptoKeyPair.publicKey);
        if (use && use !== 'sig') throw new TypeError(`Unsupported JWK use "${use}"`);
        if (key_ops && !key_ops.some((o)=>o === 'sign' || o === 'verify')) // Make sure that "key_ops", if present, is compatible with "use"
        throw new TypeError(`Invalid key_ops "${key_ops}" for "sig" use`);
        return new WebcryptoKey(exports.jwkWithAlgSchema.parse({
            ...jwk,
            kid,
            alg,
            use: 'sig'
        }), cryptoKeyPair);
    }
    constructor(jwk, cryptoKeyPair){
        super(jwk);
        Object.defineProperty(this, "cryptoKeyPair", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cryptoKeyPair
        });
    }
    get isPrivate() {
        return true;
    }
    get privateJwk() {
        if (super.isPrivate) return this.jwk;
        throw new Error('Private Webcrypto Key not exportable');
    }
    async getKeyObj(alg) {
        if (this.jwk.alg !== alg) throw new jwk_1.JwkError(`Key cannot be used with algorithm "${alg}"`);
        return this.cryptoKeyPair.privateKey;
    }
}
exports.WebcryptoKey = WebcryptoKey;

},{"dd91c53c3b55e99b":"gcE23","2e658d7c6e977d1b":"hmTh2","bdc7ac05dd7f68fe":"5x1pN","a63c25820cf9a3bd":"lahft"}],"gcE23":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BRAND", ()=>BRAND);
parcelHelpers.export(exports, "DIRTY", ()=>DIRTY);
parcelHelpers.export(exports, "EMPTY_PATH", ()=>EMPTY_PATH);
parcelHelpers.export(exports, "INVALID", ()=>INVALID);
parcelHelpers.export(exports, "NEVER", ()=>NEVER);
parcelHelpers.export(exports, "OK", ()=>OK);
parcelHelpers.export(exports, "ParseStatus", ()=>ParseStatus);
parcelHelpers.export(exports, "Schema", ()=>ZodType);
parcelHelpers.export(exports, "ZodAny", ()=>ZodAny);
parcelHelpers.export(exports, "ZodArray", ()=>ZodArray);
parcelHelpers.export(exports, "ZodBigInt", ()=>ZodBigInt);
parcelHelpers.export(exports, "ZodBoolean", ()=>ZodBoolean);
parcelHelpers.export(exports, "ZodBranded", ()=>ZodBranded);
parcelHelpers.export(exports, "ZodCatch", ()=>ZodCatch);
parcelHelpers.export(exports, "ZodDate", ()=>ZodDate);
parcelHelpers.export(exports, "ZodDefault", ()=>ZodDefault);
parcelHelpers.export(exports, "ZodDiscriminatedUnion", ()=>ZodDiscriminatedUnion);
parcelHelpers.export(exports, "ZodEffects", ()=>ZodEffects);
parcelHelpers.export(exports, "ZodEnum", ()=>ZodEnum);
parcelHelpers.export(exports, "ZodError", ()=>ZodError);
parcelHelpers.export(exports, "ZodFirstPartyTypeKind", ()=>ZodFirstPartyTypeKind);
parcelHelpers.export(exports, "ZodFunction", ()=>ZodFunction);
parcelHelpers.export(exports, "ZodIntersection", ()=>ZodIntersection);
parcelHelpers.export(exports, "ZodIssueCode", ()=>ZodIssueCode);
parcelHelpers.export(exports, "ZodLazy", ()=>ZodLazy);
parcelHelpers.export(exports, "ZodLiteral", ()=>ZodLiteral);
parcelHelpers.export(exports, "ZodMap", ()=>ZodMap);
parcelHelpers.export(exports, "ZodNaN", ()=>ZodNaN);
parcelHelpers.export(exports, "ZodNativeEnum", ()=>ZodNativeEnum);
parcelHelpers.export(exports, "ZodNever", ()=>ZodNever);
parcelHelpers.export(exports, "ZodNull", ()=>ZodNull);
parcelHelpers.export(exports, "ZodNullable", ()=>ZodNullable);
parcelHelpers.export(exports, "ZodNumber", ()=>ZodNumber);
parcelHelpers.export(exports, "ZodObject", ()=>ZodObject);
parcelHelpers.export(exports, "ZodOptional", ()=>ZodOptional);
parcelHelpers.export(exports, "ZodParsedType", ()=>ZodParsedType);
parcelHelpers.export(exports, "ZodPipeline", ()=>ZodPipeline);
parcelHelpers.export(exports, "ZodPromise", ()=>ZodPromise);
parcelHelpers.export(exports, "ZodReadonly", ()=>ZodReadonly);
parcelHelpers.export(exports, "ZodRecord", ()=>ZodRecord);
parcelHelpers.export(exports, "ZodSchema", ()=>ZodType);
parcelHelpers.export(exports, "ZodSet", ()=>ZodSet);
parcelHelpers.export(exports, "ZodString", ()=>ZodString);
parcelHelpers.export(exports, "ZodSymbol", ()=>ZodSymbol);
parcelHelpers.export(exports, "ZodTransformer", ()=>ZodEffects);
parcelHelpers.export(exports, "ZodTuple", ()=>ZodTuple);
parcelHelpers.export(exports, "ZodType", ()=>ZodType);
parcelHelpers.export(exports, "ZodUndefined", ()=>ZodUndefined);
parcelHelpers.export(exports, "ZodUnion", ()=>ZodUnion);
parcelHelpers.export(exports, "ZodUnknown", ()=>ZodUnknown);
parcelHelpers.export(exports, "ZodVoid", ()=>ZodVoid);
parcelHelpers.export(exports, "addIssueToContext", ()=>addIssueToContext);
parcelHelpers.export(exports, "any", ()=>anyType);
parcelHelpers.export(exports, "array", ()=>arrayType);
parcelHelpers.export(exports, "bigint", ()=>bigIntType);
parcelHelpers.export(exports, "boolean", ()=>booleanType);
parcelHelpers.export(exports, "coerce", ()=>coerce);
parcelHelpers.export(exports, "custom", ()=>custom);
parcelHelpers.export(exports, "date", ()=>dateType);
parcelHelpers.export(exports, "datetimeRegex", ()=>datetimeRegex);
parcelHelpers.export(exports, "default", ()=>z);
parcelHelpers.export(exports, "defaultErrorMap", ()=>errorMap);
parcelHelpers.export(exports, "discriminatedUnion", ()=>discriminatedUnionType);
parcelHelpers.export(exports, "effect", ()=>effectsType);
parcelHelpers.export(exports, "enum", ()=>enumType);
parcelHelpers.export(exports, "function", ()=>functionType);
parcelHelpers.export(exports, "getErrorMap", ()=>getErrorMap);
parcelHelpers.export(exports, "getParsedType", ()=>getParsedType);
parcelHelpers.export(exports, "instanceof", ()=>instanceOfType);
parcelHelpers.export(exports, "intersection", ()=>intersectionType);
parcelHelpers.export(exports, "isAborted", ()=>isAborted);
parcelHelpers.export(exports, "isAsync", ()=>isAsync);
parcelHelpers.export(exports, "isDirty", ()=>isDirty);
parcelHelpers.export(exports, "isValid", ()=>isValid);
parcelHelpers.export(exports, "late", ()=>late);
parcelHelpers.export(exports, "lazy", ()=>lazyType);
parcelHelpers.export(exports, "literal", ()=>literalType);
parcelHelpers.export(exports, "makeIssue", ()=>makeIssue);
parcelHelpers.export(exports, "map", ()=>mapType);
parcelHelpers.export(exports, "nan", ()=>nanType);
parcelHelpers.export(exports, "nativeEnum", ()=>nativeEnumType);
parcelHelpers.export(exports, "never", ()=>neverType);
parcelHelpers.export(exports, "null", ()=>nullType);
parcelHelpers.export(exports, "nullable", ()=>nullableType);
parcelHelpers.export(exports, "number", ()=>numberType);
parcelHelpers.export(exports, "object", ()=>objectType);
parcelHelpers.export(exports, "objectUtil", ()=>objectUtil);
parcelHelpers.export(exports, "oboolean", ()=>oboolean);
parcelHelpers.export(exports, "onumber", ()=>onumber);
parcelHelpers.export(exports, "optional", ()=>optionalType);
parcelHelpers.export(exports, "ostring", ()=>ostring);
parcelHelpers.export(exports, "pipeline", ()=>pipelineType);
parcelHelpers.export(exports, "preprocess", ()=>preprocessType);
parcelHelpers.export(exports, "promise", ()=>promiseType);
parcelHelpers.export(exports, "quotelessJson", ()=>quotelessJson);
parcelHelpers.export(exports, "record", ()=>recordType);
parcelHelpers.export(exports, "set", ()=>setType);
parcelHelpers.export(exports, "setErrorMap", ()=>setErrorMap);
parcelHelpers.export(exports, "strictObject", ()=>strictObjectType);
parcelHelpers.export(exports, "string", ()=>stringType);
parcelHelpers.export(exports, "symbol", ()=>symbolType);
parcelHelpers.export(exports, "transformer", ()=>effectsType);
parcelHelpers.export(exports, "tuple", ()=>tupleType);
parcelHelpers.export(exports, "undefined", ()=>undefinedType);
parcelHelpers.export(exports, "union", ()=>unionType);
parcelHelpers.export(exports, "unknown", ()=>unknownType);
parcelHelpers.export(exports, "util", ()=>util);
parcelHelpers.export(exports, "void", ()=>voidType);
parcelHelpers.export(exports, "z", ()=>z);
var util;
(function(util) {
    util.assertEqual = (val)=>val;
    function assertIs(_arg) {}
    util.assertIs = assertIs;
    function assertNever(_x) {
        throw new Error();
    }
    util.assertNever = assertNever;
    util.arrayToEnum = (items)=>{
        const obj = {};
        for (const item of items)obj[item] = item;
        return obj;
    };
    util.getValidEnumValues = (obj)=>{
        const validKeys = util.objectKeys(obj).filter((k)=>typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys)filtered[k] = obj[k];
        return util.objectValues(filtered);
    };
    util.objectValues = (obj)=>{
        return util.objectKeys(obj).map(function(e) {
            return obj[e];
        });
    };
    util.objectKeys = typeof Object.keys === "function" // eslint-disable-line ban/ban
     ? (obj)=>Object.keys(obj) // eslint-disable-line ban/ban
     : (object)=>{
        const keys = [];
        for(const key in object)if (Object.prototype.hasOwnProperty.call(object, key)) keys.push(key);
        return keys;
    };
    util.find = (arr, checker)=>{
        for (const item of arr){
            if (checker(item)) return item;
        }
        return undefined;
    };
    util.isInteger = typeof Number.isInteger === "function" ? (val)=>Number.isInteger(val) // eslint-disable-line ban/ban
     : (val)=>typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
        return array.map((val)=>typeof val === "string" ? `'${val}'` : val).join(separator);
    }
    util.joinValues = joinValues;
    util.jsonStringifyReplacer = (_, value)=>{
        if (typeof value === "bigint") return value.toString();
        return value;
    };
})(util || (util = {}));
var objectUtil;
(function(objectUtil) {
    objectUtil.mergeShapes = (first, second)=>{
        return {
            ...first,
            ...second
        };
    };
})(objectUtil || (objectUtil = {}));
const ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set"
]);
const getParsedType = (data)=>{
    const t = typeof data;
    switch(t){
        case "undefined":
            return ZodParsedType.undefined;
        case "string":
            return ZodParsedType.string;
        case "number":
            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
        case "boolean":
            return ZodParsedType.boolean;
        case "function":
            return ZodParsedType.function;
        case "bigint":
            return ZodParsedType.bigint;
        case "symbol":
            return ZodParsedType.symbol;
        case "object":
            if (Array.isArray(data)) return ZodParsedType.array;
            if (data === null) return ZodParsedType.null;
            if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") return ZodParsedType.promise;
            if (typeof Map !== "undefined" && data instanceof Map) return ZodParsedType.map;
            if (typeof Set !== "undefined" && data instanceof Set) return ZodParsedType.set;
            if (typeof Date !== "undefined" && data instanceof Date) return ZodParsedType.date;
            return ZodParsedType.object;
        default:
            return ZodParsedType.unknown;
    }
};
const ZodIssueCode = util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite"
]);
const quotelessJson = (obj)=>{
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
};
class ZodError extends Error {
    get errors() {
        return this.issues;
    }
    constructor(issues){
        super();
        this.issues = [];
        this.addIssue = (sub)=>{
            this.issues = [
                ...this.issues,
                sub
            ];
        };
        this.addIssues = (subs = [])=>{
            this.issues = [
                ...this.issues,
                ...subs
            ];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) // eslint-disable-next-line ban/ban
        Object.setPrototypeOf(this, actualProto);
        else this.__proto__ = actualProto;
        this.name = "ZodError";
        this.issues = issues;
    }
    format(_mapper) {
        const mapper = _mapper || function(issue) {
            return issue.message;
        };
        const fieldErrors = {
            _errors: []
        };
        const processError = (error)=>{
            for (const issue of error.issues){
                if (issue.code === "invalid_union") issue.unionErrors.map(processError);
                else if (issue.code === "invalid_return_type") processError(issue.returnTypeError);
                else if (issue.code === "invalid_arguments") processError(issue.argumentsError);
                else if (issue.path.length === 0) fieldErrors._errors.push(mapper(issue));
                else {
                    let curr = fieldErrors;
                    let i = 0;
                    while(i < issue.path.length){
                        const el = issue.path[i];
                        const terminal = i === issue.path.length - 1;
                        if (!terminal) curr[el] = curr[el] || {
                            _errors: []
                        };
                        else {
                            curr[el] = curr[el] || {
                                _errors: []
                            };
                            curr[el]._errors.push(mapper(issue));
                        }
                        curr = curr[el];
                        i++;
                    }
                }
            }
        };
        processError(this);
        return fieldErrors;
    }
    static assert(value) {
        if (!(value instanceof ZodError)) throw new Error(`Not a ZodError: ${value}`);
    }
    toString() {
        return this.message;
    }
    get message() {
        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
        return this.issues.length === 0;
    }
    flatten(mapper = (issue)=>issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues)if (sub.path.length > 0) {
            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
            fieldErrors[sub.path[0]].push(mapper(sub));
        } else formErrors.push(mapper(sub));
        return {
            formErrors,
            fieldErrors
        };
    }
    get formErrors() {
        return this.flatten();
    }
}
ZodError.create = (issues)=>{
    const error = new ZodError(issues);
    return error;
};
const errorMap = (issue, _ctx)=>{
    let message;
    switch(issue.code){
        case ZodIssueCode.invalid_type:
            if (issue.received === ZodParsedType.undefined) message = "Required";
            else message = `Expected ${issue.expected}, received ${issue.received}`;
            break;
        case ZodIssueCode.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
            break;
        case ZodIssueCode.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
            break;
        case ZodIssueCode.invalid_union:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
            break;
        case ZodIssueCode.invalid_enum_value:
            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
            break;
        case ZodIssueCode.invalid_arguments:
            message = `Invalid function arguments`;
            break;
        case ZodIssueCode.invalid_return_type:
            message = `Invalid function return type`;
            break;
        case ZodIssueCode.invalid_date:
            message = `Invalid date`;
            break;
        case ZodIssueCode.invalid_string:
            if (typeof issue.validation === "object") {
                if ("includes" in issue.validation) {
                    message = `Invalid input: must include "${issue.validation.includes}"`;
                    if (typeof issue.validation.position === "number") message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
                } else if ("startsWith" in issue.validation) message = `Invalid input: must start with "${issue.validation.startsWith}"`;
                else if ("endsWith" in issue.validation) message = `Invalid input: must end with "${issue.validation.endsWith}"`;
                else util.assertNever(issue.validation);
            } else if (issue.validation !== "regex") message = `Invalid ${issue.validation}`;
            else message = "Invalid";
            break;
        case ZodIssueCode.too_small:
            if (issue.type === "array") message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string") message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
            else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
            else message = "Invalid input";
            break;
        case ZodIssueCode.too_big:
            if (issue.type === "array") message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string") message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number") message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "bigint") message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
            else if (issue.type === "date") message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
            else message = "Invalid input";
            break;
        case ZodIssueCode.custom:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
        case ZodIssueCode.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
        case ZodIssueCode.not_finite:
            message = "Number must be finite";
            break;
        default:
            message = _ctx.defaultError;
            util.assertNever(issue);
    }
    return {
        message
    };
};
let overrideErrorMap = errorMap;
function setErrorMap(map) {
    overrideErrorMap = map;
}
function getErrorMap() {
    return overrideErrorMap;
}
const makeIssue = (params)=>{
    const { data, path, errorMaps, issueData } = params;
    const fullPath = [
        ...path,
        ...issueData.path || []
    ];
    const fullIssue = {
        ...issueData,
        path: fullPath
    };
    if (issueData.message !== undefined) return {
        ...issueData,
        path: fullPath,
        message: issueData.message
    };
    let errorMessage = "";
    const maps = errorMaps.filter((m)=>!!m).slice().reverse();
    for (const map of maps)errorMessage = map(fullIssue, {
        data,
        defaultError: errorMessage
    }).message;
    return {
        ...issueData,
        path: fullPath,
        message: errorMessage
    };
};
const EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
    const overrideMap = getErrorMap();
    const issue = makeIssue({
        issueData: issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            overrideMap,
            overrideMap === errorMap ? undefined : errorMap
        ].filter((x)=>!!x)
    });
    ctx.common.issues.push(issue);
}
class ParseStatus {
    constructor(){
        this.value = "valid";
    }
    dirty() {
        if (this.value === "valid") this.value = "dirty";
    }
    abort() {
        if (this.value !== "aborted") this.value = "aborted";
    }
    static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results){
            if (s.status === "aborted") return INVALID;
            if (s.status === "dirty") status.dirty();
            arrayValue.push(s.value);
        }
        return {
            status: status.value,
            value: arrayValue
        };
    }
    static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs){
            const key = await pair.key;
            const value = await pair.value;
            syncPairs.push({
                key,
                value
            });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs){
            const { key, value } = pair;
            if (key.status === "aborted") return INVALID;
            if (value.status === "aborted") return INVALID;
            if (key.status === "dirty") status.dirty();
            if (value.status === "dirty") status.dirty();
            if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) finalObject[key.value] = value.value;
        }
        return {
            status: status.value,
            value: finalObject
        };
    }
}
const INVALID = Object.freeze({
    status: "aborted"
});
const DIRTY = (value)=>({
        status: "dirty",
        value
    });
const OK = (value)=>({
        status: "valid",
        value
    });
const isAborted = (x)=>x.status === "aborted";
const isDirty = (x)=>x.status === "dirty";
const isValid = (x)=>x.status === "valid";
const isAsync = (x)=>typeof Promise !== "undefined" && x instanceof Promise;
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
typeof SuppressedError === "function" && SuppressedError;
var errorUtil;
(function(errorUtil) {
    errorUtil.errToObj = (message)=>typeof message === "string" ? {
            message
        } : message || {};
    errorUtil.toString = (message)=>typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));
var _ZodEnum_cache, _ZodNativeEnum_cache;
class ParseInputLazyPath {
    constructor(parent, value, path, key){
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
    }
    get path() {
        if (!this._cachedPath.length) {
            if (this._key instanceof Array) this._cachedPath.push(...this._path, ...this._key);
            else this._cachedPath.push(...this._path, this._key);
        }
        return this._cachedPath;
    }
}
const handleResult = (ctx, result)=>{
    if (isValid(result)) return {
        success: true,
        data: result.value
    };
    else {
        if (!ctx.common.issues.length) throw new Error("Validation failed but no issues detected.");
        return {
            success: false,
            get error () {
                if (this._error) return this._error;
                const error = new ZodError(ctx.common.issues);
                this._error = error;
                return this._error;
            }
        };
    }
};
function processCreateParams(params) {
    if (!params) return {};
    const { errorMap, invalid_type_error, required_error, description } = params;
    if (errorMap && (invalid_type_error || required_error)) throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    if (errorMap) return {
        errorMap: errorMap,
        description
    };
    const customMap = (iss, ctx)=>{
        var _a, _b;
        const { message } = params;
        if (iss.code === "invalid_enum_value") return {
            message: message !== null && message !== void 0 ? message : ctx.defaultError
        };
        if (typeof ctx.data === "undefined") return {
            message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError
        };
        if (iss.code !== "invalid_type") return {
            message: ctx.defaultError
        };
        return {
            message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError
        };
    };
    return {
        errorMap: customMap,
        description
    };
}
class ZodType {
    get description() {
        return this._def.description;
    }
    _getType(input) {
        return getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
        return ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
        };
    }
    _processInputParams(input) {
        return {
            status: new ParseStatus(),
            ctx: {
                common: input.parent.common,
                data: input.data,
                parsedType: getParsedType(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent
            }
        };
    }
    _parseSync(input) {
        const result = this._parse(input);
        if (isAsync(result)) throw new Error("Synchronous parse encountered promise.");
        return result;
    }
    _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
    }
    parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success) return result.data;
        throw result.error;
    }
    safeParse(data, params) {
        var _a;
        const ctx = {
            common: {
                issues: [],
                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data)
        };
        const result = this._parseSync({
            data,
            path: ctx.path,
            parent: ctx
        });
        return handleResult(ctx, result);
    }
    "~validate"(data) {
        var _a, _b;
        const ctx = {
            common: {
                issues: [],
                async: !!this["~standard"].async
            },
            path: [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data)
        };
        if (!this["~standard"].async) try {
            const result = this._parseSync({
                data,
                path: [],
                parent: ctx
            });
            return isValid(result) ? {
                value: result.value
            } : {
                issues: ctx.common.issues
            };
        } catch (err) {
            if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes("encountered")) this["~standard"].async = true;
            ctx.common = {
                issues: [],
                async: true
            };
        }
        return this._parseAsync({
            data,
            path: [],
            parent: ctx
        }).then((result)=>isValid(result) ? {
                value: result.value
            } : {
                issues: ctx.common.issues
            });
    }
    async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success) return result.data;
        throw result.error;
    }
    async safeParseAsync(data, params) {
        const ctx = {
            common: {
                issues: [],
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                async: true
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data)
        };
        const maybeAsyncResult = this._parse({
            data,
            path: ctx.path,
            parent: ctx
        });
        const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
    }
    refine(check, message) {
        const getIssueProperties = (val)=>{
            if (typeof message === "string" || typeof message === "undefined") return {
                message
            };
            else if (typeof message === "function") return message(val);
            else return message;
        };
        return this._refinement((val, ctx)=>{
            const result = check(val);
            const setError = ()=>ctx.addIssue({
                    code: ZodIssueCode.custom,
                    ...getIssueProperties(val)
                });
            if (typeof Promise !== "undefined" && result instanceof Promise) return result.then((data)=>{
                if (!data) {
                    setError();
                    return false;
                } else return true;
            });
            if (!result) {
                setError();
                return false;
            } else return true;
        });
    }
    refinement(check, refinementData) {
        return this._refinement((val, ctx)=>{
            if (!check(val)) {
                ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
                return false;
            } else return true;
        });
    }
    _refinement(refinement) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: {
                type: "refinement",
                refinement
            }
        });
    }
    superRefine(refinement) {
        return this._refinement(refinement);
    }
    constructor(def){
        /** Alias of safeParseAsync */ this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
        this["~standard"] = {
            version: 1,
            vendor: "zod",
            validate: (data)=>this["~validate"](data)
        };
    }
    optional() {
        return ZodOptional.create(this, this._def);
    }
    nullable() {
        return ZodNullable.create(this, this._def);
    }
    nullish() {
        return this.nullable().optional();
    }
    array() {
        return ZodArray.create(this);
    }
    promise() {
        return ZodPromise.create(this, this._def);
    }
    or(option) {
        return ZodUnion.create([
            this,
            option
        ], this._def);
    }
    and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
        return new ZodEffects({
            ...processCreateParams(this._def),
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: {
                type: "transform",
                transform
            }
        });
    }
    default(def) {
        const defaultValueFunc = typeof def === "function" ? def : ()=>def;
        return new ZodDefault({
            ...processCreateParams(this._def),
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault
        });
    }
    brand() {
        return new ZodBranded({
            typeName: ZodFirstPartyTypeKind.ZodBranded,
            type: this,
            ...processCreateParams(this._def)
        });
    }
    catch(def) {
        const catchValueFunc = typeof def === "function" ? def : ()=>def;
        return new ZodCatch({
            ...processCreateParams(this._def),
            innerType: this,
            catchValue: catchValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodCatch
        });
    }
    describe(description) {
        const This = this.constructor;
        return new This({
            ...this._def,
            description
        });
    }
    pipe(target) {
        return ZodPipeline.create(this, target);
    }
    readonly() {
        return ZodReadonly.create(this);
    }
    isOptional() {
        return this.safeParse(undefined).success;
    }
    isNullable() {
        return this.safeParse(null).success;
    }
}
const cuidRegex = /^c[^\s-]{8,}$/i;
const cuid2Regex = /^[0-9a-z]+$/;
const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
// const uuidRegex =
//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
const nanoidRegex = /^[a-z0-9_-]{21}$/i;
const jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
const durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
// from https://stackoverflow.com/a/46181/1550155
// old version: too slow, didn't support unicode
// const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
//old email regex
// const emailRegex = /^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@((?!-)([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{1,})[^-<>()[\].,;:\s@"]$/i;
// eslint-disable-next-line
// const emailRegex =
//   /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
// const emailRegex =
//   /^[a-zA-Z0-9\.\!\#\$\%\&\'\*\+\/\=\?\^\_\`\{\|\}\~\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
// const emailRegex =
//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i;
const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
// const emailRegex =
//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\.[a-z0-9\-]+)*$/i;
// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression
const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
let emojiRegex;
// faster, simpler, safer
const ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
const ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
// const ipv6Regex =
// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
const ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
const ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript
const base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
// https://base64.guru/standards/base64url
const base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
// simple
// const dateRegexSource = `\\d{4}-\\d{2}-\\d{2}`;
// no leap year validation
// const dateRegexSource = `\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\d|2\\d))`;
// with leap year validation
const dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
const dateRegex = new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
    let secondsRegexSource = `[0-5]\\d`;
    if (args.precision) secondsRegexSource = `${secondsRegexSource}\\.\\d{${args.precision}}`;
    else if (args.precision == null) secondsRegexSource = `${secondsRegexSource}(\\.\\d+)?`;
    const secondsQuantifier = args.precision ? "+" : "?"; // require seconds if precision is nonzero
    return `([01]\\d|2[0-3]):[0-5]\\d(:${secondsRegexSource})${secondsQuantifier}`;
}
function timeRegex(args) {
    return new RegExp(`^${timeRegexSource(args)}$`);
}
// Adapted from https://stackoverflow.com/a/3143231
function datetimeRegex(args) {
    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
    const opts = [];
    opts.push(args.local ? `Z?` : `Z`);
    if (args.offset) opts.push(`([+-]\\d{2}:?\\d{2})`);
    regex = `${regex}(${opts.join("|")})`;
    return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version) {
    if ((version === "v4" || !version) && ipv4Regex.test(ip)) return true;
    if ((version === "v6" || !version) && ipv6Regex.test(ip)) return true;
    return false;
}
function isValidJWT(jwt, alg) {
    if (!jwtRegex.test(jwt)) return false;
    try {
        const [header] = jwt.split(".");
        // Convert base64url to base64
        const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
        const decoded = JSON.parse(atob(base64));
        if (typeof decoded !== "object" || decoded === null) return false;
        if (!decoded.typ || !decoded.alg) return false;
        if (alg && decoded.alg !== alg) return false;
        return true;
    } catch (_a) {
        return false;
    }
}
function isValidCidr(ip, version) {
    if ((version === "v4" || !version) && ipv4CidrRegex.test(ip)) return true;
    if ((version === "v6" || !version) && ipv6CidrRegex.test(ip)) return true;
    return false;
}
class ZodString extends ZodType {
    _parse(input) {
        if (this._def.coerce) input.data = String(input.data);
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.string) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.string,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks){
            if (check.kind === "min") {
                if (input.data.length < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                if (input.data.length > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "length") {
                const tooBig = input.data.length > check.value;
                const tooSmall = input.data.length < check.value;
                if (tooBig || tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    if (tooBig) addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: true,
                        message: check.message
                    });
                    else if (tooSmall) addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: true,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "email") {
                if (!emailRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "email",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "emoji") {
                if (!emojiRegex) emojiRegex = new RegExp(_emojiRegex, "u");
                if (!emojiRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "emoji",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "uuid") {
                if (!uuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "uuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "nanoid") {
                if (!nanoidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "nanoid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "cuid") {
                if (!cuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "cuid2") {
                if (!cuid2Regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid2",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "ulid") {
                if (!ulidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ulid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "url") try {
                new URL(input.data);
            } catch (_a) {
                ctx = this._getOrReturnCtx(input, ctx);
                addIssueToContext(ctx, {
                    validation: "url",
                    code: ZodIssueCode.invalid_string,
                    message: check.message
                });
                status.dirty();
            }
            else if (check.kind === "regex") {
                check.regex.lastIndex = 0;
                const testResult = check.regex.test(input.data);
                if (!testResult) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "regex",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "trim") input.data = input.data.trim();
            else if (check.kind === "includes") {
                if (!input.data.includes(check.value, check.position)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: {
                            includes: check.value,
                            position: check.position
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "toLowerCase") input.data = input.data.toLowerCase();
            else if (check.kind === "toUpperCase") input.data = input.data.toUpperCase();
            else if (check.kind === "startsWith") {
                if (!input.data.startsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: {
                            startsWith: check.value
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "endsWith") {
                if (!input.data.endsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: {
                            endsWith: check.value
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "datetime") {
                const regex = datetimeRegex(check);
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: "datetime",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "date") {
                const regex = dateRegex;
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: "date",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "time") {
                const regex = timeRegex(check);
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: "time",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "duration") {
                if (!durationRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "duration",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "ip") {
                if (!isValidIP(input.data, check.version)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ip",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "jwt") {
                if (!isValidJWT(input.data, check.alg)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "jwt",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "cidr") {
                if (!isValidCidr(input.data, check.version)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cidr",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "base64") {
                if (!base64Regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "base64",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "base64url") {
                if (!base64urlRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "base64url",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else util.assertNever(check);
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    _regex(regex, validation, message) {
        return this.refinement((data)=>regex.test(data), {
            validation,
            code: ZodIssueCode.invalid_string,
            ...errorUtil.errToObj(message)
        });
    }
    _addCheck(check) {
        return new ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    email(message) {
        return this._addCheck({
            kind: "email",
            ...errorUtil.errToObj(message)
        });
    }
    url(message) {
        return this._addCheck({
            kind: "url",
            ...errorUtil.errToObj(message)
        });
    }
    emoji(message) {
        return this._addCheck({
            kind: "emoji",
            ...errorUtil.errToObj(message)
        });
    }
    uuid(message) {
        return this._addCheck({
            kind: "uuid",
            ...errorUtil.errToObj(message)
        });
    }
    nanoid(message) {
        return this._addCheck({
            kind: "nanoid",
            ...errorUtil.errToObj(message)
        });
    }
    cuid(message) {
        return this._addCheck({
            kind: "cuid",
            ...errorUtil.errToObj(message)
        });
    }
    cuid2(message) {
        return this._addCheck({
            kind: "cuid2",
            ...errorUtil.errToObj(message)
        });
    }
    ulid(message) {
        return this._addCheck({
            kind: "ulid",
            ...errorUtil.errToObj(message)
        });
    }
    base64(message) {
        return this._addCheck({
            kind: "base64",
            ...errorUtil.errToObj(message)
        });
    }
    base64url(message) {
        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames
        return this._addCheck({
            kind: "base64url",
            ...errorUtil.errToObj(message)
        });
    }
    jwt(options) {
        return this._addCheck({
            kind: "jwt",
            ...errorUtil.errToObj(options)
        });
    }
    ip(options) {
        return this._addCheck({
            kind: "ip",
            ...errorUtil.errToObj(options)
        });
    }
    cidr(options) {
        return this._addCheck({
            kind: "cidr",
            ...errorUtil.errToObj(options)
        });
    }
    datetime(options) {
        var _a, _b;
        if (typeof options === "string") return this._addCheck({
            kind: "datetime",
            precision: null,
            offset: false,
            local: false,
            message: options
        });
        return this._addCheck({
            kind: "datetime",
            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
    }
    date(message) {
        return this._addCheck({
            kind: "date",
            message
        });
    }
    time(options) {
        if (typeof options === "string") return this._addCheck({
            kind: "time",
            precision: null,
            message: options
        });
        return this._addCheck({
            kind: "time",
            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
    }
    duration(message) {
        return this._addCheck({
            kind: "duration",
            ...errorUtil.errToObj(message)
        });
    }
    regex(regex, message) {
        return this._addCheck({
            kind: "regex",
            regex: regex,
            ...errorUtil.errToObj(message)
        });
    }
    includes(value, options) {
        return this._addCheck({
            kind: "includes",
            value: value,
            position: options === null || options === void 0 ? void 0 : options.position,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
    }
    startsWith(value, message) {
        return this._addCheck({
            kind: "startsWith",
            value: value,
            ...errorUtil.errToObj(message)
        });
    }
    endsWith(value, message) {
        return this._addCheck({
            kind: "endsWith",
            value: value,
            ...errorUtil.errToObj(message)
        });
    }
    min(minLength, message) {
        return this._addCheck({
            kind: "min",
            value: minLength,
            ...errorUtil.errToObj(message)
        });
    }
    max(maxLength, message) {
        return this._addCheck({
            kind: "max",
            value: maxLength,
            ...errorUtil.errToObj(message)
        });
    }
    length(len, message) {
        return this._addCheck({
            kind: "length",
            value: len,
            ...errorUtil.errToObj(message)
        });
    }
    /**
     * Equivalent to `.min(1)`
     */ nonempty(message) {
        return this.min(1, errorUtil.errToObj(message));
    }
    trim() {
        return new ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind: "trim"
                }
            ]
        });
    }
    toLowerCase() {
        return new ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind: "toLowerCase"
                }
            ]
        });
    }
    toUpperCase() {
        return new ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind: "toUpperCase"
                }
            ]
        });
    }
    get isDatetime() {
        return !!this._def.checks.find((ch)=>ch.kind === "datetime");
    }
    get isDate() {
        return !!this._def.checks.find((ch)=>ch.kind === "date");
    }
    get isTime() {
        return !!this._def.checks.find((ch)=>ch.kind === "time");
    }
    get isDuration() {
        return !!this._def.checks.find((ch)=>ch.kind === "duration");
    }
    get isEmail() {
        return !!this._def.checks.find((ch)=>ch.kind === "email");
    }
    get isURL() {
        return !!this._def.checks.find((ch)=>ch.kind === "url");
    }
    get isEmoji() {
        return !!this._def.checks.find((ch)=>ch.kind === "emoji");
    }
    get isUUID() {
        return !!this._def.checks.find((ch)=>ch.kind === "uuid");
    }
    get isNANOID() {
        return !!this._def.checks.find((ch)=>ch.kind === "nanoid");
    }
    get isCUID() {
        return !!this._def.checks.find((ch)=>ch.kind === "cuid");
    }
    get isCUID2() {
        return !!this._def.checks.find((ch)=>ch.kind === "cuid2");
    }
    get isULID() {
        return !!this._def.checks.find((ch)=>ch.kind === "ulid");
    }
    get isIP() {
        return !!this._def.checks.find((ch)=>ch.kind === "ip");
    }
    get isCIDR() {
        return !!this._def.checks.find((ch)=>ch.kind === "cidr");
    }
    get isBase64() {
        return !!this._def.checks.find((ch)=>ch.kind === "base64");
    }
    get isBase64url() {
        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames
        return !!this._def.checks.find((ch)=>ch.kind === "base64url");
    }
    get minLength() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxLength() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
}
ZodString.create = (params)=>{
    var _a;
    return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params)
    });
};
// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return valInt % stepInt / Math.pow(10, decCount);
}
class ZodNumber extends ZodType {
    constructor(){
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
    }
    _parse(input) {
        if (this._def.coerce) input.data = Number(input.data);
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.number) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.number,
                received: ctx.parsedType
            });
            return INVALID;
        }
        let ctx = undefined;
        const status = new ParseStatus();
        for (const check of this._def.checks){
            if (check.kind === "int") {
                if (!util.isInteger(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_type,
                        expected: "integer",
                        received: "float",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "min") {
                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "multipleOf") {
                if (floatSafeRemainder(input.data, check.value) !== 0) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "finite") {
                if (!Number.isFinite(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_finite,
                        message: check.message
                    });
                    status.dirty();
                }
            } else util.assertNever(check);
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message)
                }
            ]
        });
    }
    _addCheck(check) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    int(message) {
        return this._addCheck({
            kind: "int",
            message: errorUtil.toString(message)
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message)
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message)
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message)
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message)
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value: value,
            message: errorUtil.toString(message)
        });
    }
    finite(message) {
        return this._addCheck({
            kind: "finite",
            message: errorUtil.toString(message)
        });
    }
    safe(message) {
        return this._addCheck({
            kind: "min",
            inclusive: true,
            value: Number.MIN_SAFE_INTEGER,
            message: errorUtil.toString(message)
        })._addCheck({
            kind: "max",
            inclusive: true,
            value: Number.MAX_SAFE_INTEGER,
            message: errorUtil.toString(message)
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
    get isInt() {
        return !!this._def.checks.find((ch)=>ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
    }
    get isFinite() {
        let max = null, min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") return true;
            else if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            } else if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return Number.isFinite(min) && Number.isFinite(max);
    }
}
ZodNumber.create = (params)=>{
    return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
    });
};
class ZodBigInt extends ZodType {
    constructor(){
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
    }
    _parse(input) {
        if (this._def.coerce) try {
            input.data = BigInt(input.data);
        } catch (_a) {
            return this._getInvalidInput(input);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.bigint) return this._getInvalidInput(input);
        let ctx = undefined;
        const status = new ParseStatus();
        for (const check of this._def.checks){
            if (check.kind === "min") {
                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        type: "bigint",
                        minimum: check.value,
                        inclusive: check.inclusive,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        type: "bigint",
                        maximum: check.value,
                        inclusive: check.inclusive,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "multipleOf") {
                if (input.data % check.value !== BigInt(0)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message
                    });
                    status.dirty();
                }
            } else util.assertNever(check);
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    _getInvalidInput(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.bigint,
            received: ctx.parsedType
        });
        return INVALID;
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodBigInt({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message)
                }
            ]
        });
    }
    _addCheck(check) {
        return new ZodBigInt({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message)
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message)
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message)
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message)
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil.toString(message)
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
}
ZodBigInt.create = (params)=>{
    var _a;
    return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params)
    });
};
class ZodBoolean extends ZodType {
    _parse(input) {
        if (this._def.coerce) input.data = Boolean(input.data);
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.boolean,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodBoolean.create = (params)=>{
    return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
    });
};
class ZodDate extends ZodType {
    _parse(input) {
        if (this._def.coerce) input.data = new Date(input.data);
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.date) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.date,
                received: ctx.parsedType
            });
            return INVALID;
        }
        if (isNaN(input.data.getTime())) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_date
            });
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks){
            if (check.kind === "min") {
                if (input.data.getTime() < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        minimum: check.value,
                        type: "date"
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                if (input.data.getTime() > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        maximum: check.value,
                        type: "date"
                    });
                    status.dirty();
                }
            } else util.assertNever(check);
        }
        return {
            status: status.value,
            value: new Date(input.data.getTime())
        };
    }
    _addCheck(check) {
        return new ZodDate({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    min(minDate, message) {
        return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: errorUtil.toString(message)
        });
    }
    max(maxDate, message) {
        return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: errorUtil.toString(message)
        });
    }
    get minDate() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min != null ? new Date(min) : null;
    }
    get maxDate() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max != null ? new Date(max) : null;
    }
}
ZodDate.create = (params)=>{
    return new ZodDate({
        checks: [],
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params)
    });
};
class ZodSymbol extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.symbol) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.symbol,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodSymbol.create = (params)=>{
    return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params)
    });
};
class ZodUndefined extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.undefined,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodUndefined.create = (params)=>{
    return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params)
    });
};
class ZodNull extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.null,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodNull.create = (params)=>{
    return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params)
    });
};
class ZodAny extends ZodType {
    constructor(){
        super(...arguments);
        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
        this._any = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodAny.create = (params)=>{
    return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params)
    });
};
class ZodUnknown extends ZodType {
    constructor(){
        super(...arguments);
        // required
        this._unknown = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodUnknown.create = (params)=>{
    return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params)
    });
};
class ZodNever extends ZodType {
    _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.never,
            received: ctx.parsedType
        });
        return INVALID;
    }
}
ZodNever.create = (params)=>{
    return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params)
    });
};
class ZodVoid extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.void,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodVoid.create = (params)=>{
    return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params)
    });
};
class ZodArray extends ZodType {
    _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType
            });
            return INVALID;
        }
        if (def.exactLength !== null) {
            const tooBig = ctx.data.length > def.exactLength.value;
            const tooSmall = ctx.data.length < def.exactLength.value;
            if (tooBig || tooSmall) {
                addIssueToContext(ctx, {
                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
                    minimum: tooSmall ? def.exactLength.value : undefined,
                    maximum: tooBig ? def.exactLength.value : undefined,
                    type: "array",
                    inclusive: true,
                    exact: true,
                    message: def.exactLength.message
                });
                status.dirty();
            }
        }
        if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.minLength.message
                });
                status.dirty();
            }
        }
        if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.maxLength.message
                });
                status.dirty();
            }
        }
        if (ctx.common.async) return Promise.all([
            ...ctx.data
        ].map((item, i)=>{
            return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        })).then((result)=>{
            return ParseStatus.mergeArray(status, result);
        });
        const result = [
            ...ctx.data
        ].map((item, i)=>{
            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return ParseStatus.mergeArray(status, result);
    }
    get element() {
        return this._def.type;
    }
    min(minLength, message) {
        return new ZodArray({
            ...this._def,
            minLength: {
                value: minLength,
                message: errorUtil.toString(message)
            }
        });
    }
    max(maxLength, message) {
        return new ZodArray({
            ...this._def,
            maxLength: {
                value: maxLength,
                message: errorUtil.toString(message)
            }
        });
    }
    length(len, message) {
        return new ZodArray({
            ...this._def,
            exactLength: {
                value: len,
                message: errorUtil.toString(message)
            }
        });
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodArray.create = (schema, params)=>{
    return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params)
    });
};
function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
        const newShape = {};
        for(const key in schema.shape){
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
            ...schema._def,
            shape: ()=>newShape
        });
    } else if (schema instanceof ZodArray) return new ZodArray({
        ...schema._def,
        type: deepPartialify(schema.element)
    });
    else if (schema instanceof ZodOptional) return ZodOptional.create(deepPartialify(schema.unwrap()));
    else if (schema instanceof ZodNullable) return ZodNullable.create(deepPartialify(schema.unwrap()));
    else if (schema instanceof ZodTuple) return ZodTuple.create(schema.items.map((item)=>deepPartialify(item)));
    else return schema;
}
class ZodObject extends ZodType {
    constructor(){
        super(...arguments);
        this._cached = null;
        /**
         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
         * If you want to pass through unknown properties, use `.passthrough()` instead.
         */ this.nonstrict = this.passthrough;
        // extend<
        //   Augmentation extends ZodRawShape,
        //   NewOutput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
        //       ? Augmentation[k]["_output"]
        //       : k extends keyof Output
        //       ? Output[k]
        //       : never;
        //   }>,
        //   NewInput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
        //       ? Augmentation[k]["_input"]
        //       : k extends keyof Input
        //       ? Input[k]
        //       : never;
        //   }>
        // >(
        //   augmentation: Augmentation
        // ): ZodObject<
        //   extendShape<T, Augmentation>,
        //   UnknownKeys,
        //   Catchall,
        //   NewOutput,
        //   NewInput
        // > {
        //   return new ZodObject({
        //     ...this._def,
        //     shape: () => ({
        //       ...this._def.shape(),
        //       ...augmentation,
        //     }),
        //   }) as any;
        // }
        /**
         * @deprecated Use `.extend` instead
         *  */ this.augment = this.extend;
    }
    _getCached() {
        if (this._cached !== null) return this._cached;
        const shape = this._def.shape();
        const keys = util.objectKeys(shape);
        return this._cached = {
            shape,
            keys
        };
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.object) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
            for(const key in ctx.data)if (!shapeKeys.includes(key)) extraKeys.push(key);
        }
        const pairs = [];
        for (const key of shapeKeys){
            const keyValidator = shape[key];
            const value = ctx.data[key];
            pairs.push({
                key: {
                    status: "valid",
                    value: key
                },
                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
                alwaysSet: key in ctx.data
            });
        }
        if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") for (const key of extraKeys)pairs.push({
                key: {
                    status: "valid",
                    value: key
                },
                value: {
                    status: "valid",
                    value: ctx.data[key]
                }
            });
            else if (unknownKeys === "strict") {
                if (extraKeys.length > 0) {
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.unrecognized_keys,
                        keys: extraKeys
                    });
                    status.dirty();
                }
            } else if (unknownKeys === "strip") ;
            else throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
        } else {
            // run catchall validation
            const catchall = this._def.catchall;
            for (const key of extraKeys){
                const value = ctx.data[key];
                pairs.push({
                    key: {
                        status: "valid",
                        value: key
                    },
                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)
                    ),
                    alwaysSet: key in ctx.data
                });
            }
        }
        if (ctx.common.async) return Promise.resolve().then(async ()=>{
            const syncPairs = [];
            for (const pair of pairs){
                const key = await pair.key;
                const value = await pair.value;
                syncPairs.push({
                    key,
                    value,
                    alwaysSet: pair.alwaysSet
                });
            }
            return syncPairs;
        }).then((syncPairs)=>{
            return ParseStatus.mergeObjectSync(status, syncPairs);
        });
        else return ParseStatus.mergeObjectSync(status, pairs);
    }
    get shape() {
        return this._def.shape();
    }
    strict(message) {
        errorUtil.errToObj;
        return new ZodObject({
            ...this._def,
            unknownKeys: "strict",
            ...message !== undefined ? {
                errorMap: (issue, ctx)=>{
                    var _a, _b, _c, _d;
                    const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                    if (issue.code === "unrecognized_keys") return {
                        message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
                    };
                    return {
                        message: defaultError
                    };
                }
            } : {}
        });
    }
    strip() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "strip"
        });
    }
    passthrough() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "passthrough"
        });
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(augmentation) {
        return new ZodObject({
            ...this._def,
            shape: ()=>({
                    ...this._def.shape(),
                    ...augmentation
                })
        });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */ merge(merging) {
        const merged = new ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: ()=>({
                    ...this._def.shape(),
                    ...merging._def.shape()
                }),
            typeName: ZodFirstPartyTypeKind.ZodObject
        });
        return merged;
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(key, schema) {
        return this.augment({
            [key]: schema
        });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(index) {
        return new ZodObject({
            ...this._def,
            catchall: index
        });
    }
    pick(mask) {
        const shape = {};
        util.objectKeys(mask).forEach((key)=>{
            if (mask[key] && this.shape[key]) shape[key] = this.shape[key];
        });
        return new ZodObject({
            ...this._def,
            shape: ()=>shape
        });
    }
    omit(mask) {
        const shape = {};
        util.objectKeys(this.shape).forEach((key)=>{
            if (!mask[key]) shape[key] = this.shape[key];
        });
        return new ZodObject({
            ...this._def,
            shape: ()=>shape
        });
    }
    /**
     * @deprecated
     */ deepPartial() {
        return deepPartialify(this);
    }
    partial(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key)=>{
            const fieldSchema = this.shape[key];
            if (mask && !mask[key]) newShape[key] = fieldSchema;
            else newShape[key] = fieldSchema.optional();
        });
        return new ZodObject({
            ...this._def,
            shape: ()=>newShape
        });
    }
    required(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key)=>{
            if (mask && !mask[key]) newShape[key] = this.shape[key];
            else {
                const fieldSchema = this.shape[key];
                let newField = fieldSchema;
                while(newField instanceof ZodOptional)newField = newField._def.innerType;
                newShape[key] = newField;
            }
        });
        return new ZodObject({
            ...this._def,
            shape: ()=>newShape
        });
    }
    keyof() {
        return createZodEnum(util.objectKeys(this.shape));
    }
}
ZodObject.create = (shape, params)=>{
    return new ZodObject({
        shape: ()=>shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
    });
};
ZodObject.strictCreate = (shape, params)=>{
    return new ZodObject({
        shape: ()=>shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
    });
};
ZodObject.lazycreate = (shape, params)=>{
    return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
    });
};
class ZodUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
            // return first issue-free validation if it exists
            for (const result of results){
                if (result.result.status === "valid") return result.result;
            }
            for (const result of results)if (result.result.status === "dirty") {
                // add issues from dirty option
                ctx.common.issues.push(...result.ctx.common.issues);
                return result.result;
            }
            // return invalid
            const unionErrors = results.map((result)=>new ZodError(result.ctx.common.issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors
            });
            return INVALID;
        }
        if (ctx.common.async) return Promise.all(options.map(async (option)=>{
            const childCtx = {
                ...ctx,
                common: {
                    ...ctx.common,
                    issues: []
                },
                parent: null
            };
            return {
                result: await option._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx
                }),
                ctx: childCtx
            };
        })).then(handleResults);
        else {
            let dirty = undefined;
            const issues = [];
            for (const option of options){
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: []
                    },
                    parent: null
                };
                const result = option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx
                });
                if (result.status === "valid") return result;
                else if (result.status === "dirty" && !dirty) dirty = {
                    result,
                    ctx: childCtx
                };
                if (childCtx.common.issues.length) issues.push(childCtx.common.issues);
            }
            if (dirty) {
                ctx.common.issues.push(...dirty.ctx.common.issues);
                return dirty.result;
            }
            const unionErrors = issues.map((issues)=>new ZodError(issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors
            });
            return INVALID;
        }
    }
    get options() {
        return this._def.options;
    }
}
ZodUnion.create = (types, params)=>{
    return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params)
    });
};
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
//////////                                 //////////
//////////      ZodDiscriminatedUnion      //////////
//////////                                 //////////
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
const getDiscriminator = (type)=>{
    if (type instanceof ZodLazy) return getDiscriminator(type.schema);
    else if (type instanceof ZodEffects) return getDiscriminator(type.innerType());
    else if (type instanceof ZodLiteral) return [
        type.value
    ];
    else if (type instanceof ZodEnum) return type.options;
    else if (type instanceof ZodNativeEnum) // eslint-disable-next-line ban/ban
    return util.objectValues(type.enum);
    else if (type instanceof ZodDefault) return getDiscriminator(type._def.innerType);
    else if (type instanceof ZodUndefined) return [
        undefined
    ];
    else if (type instanceof ZodNull) return [
        null
    ];
    else if (type instanceof ZodOptional) return [
        undefined,
        ...getDiscriminator(type.unwrap())
    ];
    else if (type instanceof ZodNullable) return [
        null,
        ...getDiscriminator(type.unwrap())
    ];
    else if (type instanceof ZodBranded) return getDiscriminator(type.unwrap());
    else if (type instanceof ZodReadonly) return getDiscriminator(type.unwrap());
    else if (type instanceof ZodCatch) return getDiscriminator(type._def.innerType);
    else return [];
};
class ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union_discriminator,
                options: Array.from(this.optionsMap.keys()),
                path: [
                    discriminator
                ]
            });
            return INVALID;
        }
        if (ctx.common.async) return option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        });
        else return option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        });
    }
    get discriminator() {
        return this._def.discriminator;
    }
    get options() {
        return this._def.options;
    }
    get optionsMap() {
        return this._def.optionsMap;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */ static create(discriminator, options, params) {
        // Get all the valid discriminator values
        const optionsMap = new Map();
        // try {
        for (const type of options){
            const discriminatorValues = getDiscriminator(type.shape[discriminator]);
            if (!discriminatorValues.length) throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
            for (const value of discriminatorValues){
                if (optionsMap.has(value)) throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
                optionsMap.set(value, type);
            }
        }
        return new ZodDiscriminatedUnion({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            optionsMap,
            ...processCreateParams(params)
        });
    }
}
function mergeValues(a, b) {
    const aType = getParsedType(a);
    const bType = getParsedType(b);
    if (a === b) return {
        valid: true,
        data: a
    };
    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
        const bKeys = util.objectKeys(b);
        const sharedKeys = util.objectKeys(a).filter((key)=>bKeys.indexOf(key) !== -1);
        const newObj = {
            ...a,
            ...b
        };
        for (const key of sharedKeys){
            const sharedValue = mergeValues(a[key], b[key]);
            if (!sharedValue.valid) return {
                valid: false
            };
            newObj[key] = sharedValue.data;
        }
        return {
            valid: true,
            data: newObj
        };
    } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
        if (a.length !== b.length) return {
            valid: false
        };
        const newArray = [];
        for(let index = 0; index < a.length; index++){
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue = mergeValues(itemA, itemB);
            if (!sharedValue.valid) return {
                valid: false
            };
            newArray.push(sharedValue.data);
        }
        return {
            valid: true,
            data: newArray
        };
    } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) return {
        valid: true,
        data: a
    };
    else return {
        valid: false
    };
}
class ZodIntersection extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight)=>{
            if (isAborted(parsedLeft) || isAborted(parsedRight)) return INVALID;
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_intersection_types
                });
                return INVALID;
            }
            if (isDirty(parsedLeft) || isDirty(parsedRight)) status.dirty();
            return {
                status: status.value,
                value: merged.data
            };
        };
        if (ctx.common.async) return Promise.all([
            this._def.left._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }),
            this._def.right._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            })
        ]).then(([left, right])=>handleParsed(left, right));
        else return handleParsed(this._def.left._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        }), this._def.right._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        }));
    }
}
ZodIntersection.create = (left, right, params)=>{
    return new ZodIntersection({
        left: left,
        right: right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params)
    });
};
class ZodTuple extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType
            });
            return INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array"
            });
            return INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array"
            });
            status.dirty();
        }
        const items = [
            ...ctx.data
        ].map((item, itemIndex)=>{
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema) return null;
            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        }).filter((x)=>!!x); // filter nulls
        if (ctx.common.async) return Promise.all(items).then((results)=>{
            return ParseStatus.mergeArray(status, results);
        });
        else return ParseStatus.mergeArray(status, items);
    }
    get items() {
        return this._def.items;
    }
    rest(rest) {
        return new ZodTuple({
            ...this._def,
            rest
        });
    }
}
ZodTuple.create = (schemas, params)=>{
    if (!Array.isArray(schemas)) throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params)
    });
};
class ZodRecord extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for(const key in ctx.data)pairs.push({
            key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
            value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
            alwaysSet: key in ctx.data
        });
        if (ctx.common.async) return ParseStatus.mergeObjectAsync(status, pairs);
        else return ParseStatus.mergeObjectSync(status, pairs);
    }
    get element() {
        return this._def.valueType;
    }
    static create(first, second, third) {
        if (second instanceof ZodType) return new ZodRecord({
            keyType: first,
            valueType: second,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(third)
        });
        return new ZodRecord({
            keyType: ZodString.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(second)
        });
    }
}
class ZodMap extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.map) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.map,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [
            ...ctx.data.entries()
        ].map(([key, value], index)=>{
            return {
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [
                    index,
                    "key"
                ])),
                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [
                    index,
                    "value"
                ]))
            };
        });
        if (ctx.common.async) {
            const finalMap = new Map();
            return Promise.resolve().then(async ()=>{
                for (const pair of pairs){
                    const key = await pair.key;
                    const value = await pair.value;
                    if (key.status === "aborted" || value.status === "aborted") return INVALID;
                    if (key.status === "dirty" || value.status === "dirty") status.dirty();
                    finalMap.set(key.value, value.value);
                }
                return {
                    status: status.value,
                    value: finalMap
                };
            });
        } else {
            const finalMap = new Map();
            for (const pair of pairs){
                const key = pair.key;
                const value = pair.value;
                if (key.status === "aborted" || value.status === "aborted") return INVALID;
                if (key.status === "dirty" || value.status === "dirty") status.dirty();
                finalMap.set(key.value, value.value);
            }
            return {
                status: status.value,
                value: finalMap
            };
        }
    }
}
ZodMap.create = (keyType, valueType, params)=>{
    return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params)
    });
};
class ZodSet extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.set) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.set,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.minSize.message
                });
                status.dirty();
            }
        }
        if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.maxSize.message
                });
                status.dirty();
            }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements) {
            const parsedSet = new Set();
            for (const element of elements){
                if (element.status === "aborted") return INVALID;
                if (element.status === "dirty") status.dirty();
                parsedSet.add(element.value);
            }
            return {
                status: status.value,
                value: parsedSet
            };
        }
        const elements = [
            ...ctx.data.values()
        ].map((item, i)=>valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) return Promise.all(elements).then((elements)=>finalizeSet(elements));
        else return finalizeSet(elements);
    }
    min(minSize, message) {
        return new ZodSet({
            ...this._def,
            minSize: {
                value: minSize,
                message: errorUtil.toString(message)
            }
        });
    }
    max(maxSize, message) {
        return new ZodSet({
            ...this._def,
            maxSize: {
                value: maxSize,
                message: errorUtil.toString(message)
            }
        });
    }
    size(size, message) {
        return this.min(size, message).max(size, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodSet.create = (valueType, params)=>{
    return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params)
    });
};
class ZodFunction extends ZodType {
    constructor(){
        super(...arguments);
        this.validate = this.implement;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.function) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.function,
                received: ctx.parsedType
            });
            return INVALID;
        }
        function makeArgsIssue(args, error) {
            return makeIssue({
                data: args,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap
                ].filter((x)=>!!x),
                issueData: {
                    code: ZodIssueCode.invalid_arguments,
                    argumentsError: error
                }
            });
        }
        function makeReturnsIssue(returns, error) {
            return makeIssue({
                data: returns,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap
                ].filter((x)=>!!x),
                issueData: {
                    code: ZodIssueCode.invalid_return_type,
                    returnTypeError: error
                }
            });
        }
        const params = {
            errorMap: ctx.common.contextualErrorMap
        };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
            // Would love a way to avoid disabling this rule, but we need
            // an alias (using an arrow function was what caused 2651).
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const me = this;
            return OK(async function(...args) {
                const error = new ZodError([]);
                const parsedArgs = await me._def.args.parseAsync(args, params).catch((e)=>{
                    error.addIssue(makeArgsIssue(args, e));
                    throw error;
                });
                const result = await Reflect.apply(fn, this, parsedArgs);
                const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e)=>{
                    error.addIssue(makeReturnsIssue(result, e));
                    throw error;
                });
                return parsedReturns;
            });
        } else {
            // Would love a way to avoid disabling this rule, but we need
            // an alias (using an arrow function was what caused 2651).
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const me = this;
            return OK(function(...args) {
                const parsedArgs = me._def.args.safeParse(args, params);
                if (!parsedArgs.success) throw new ZodError([
                    makeArgsIssue(args, parsedArgs.error)
                ]);
                const result = Reflect.apply(fn, this, parsedArgs.data);
                const parsedReturns = me._def.returns.safeParse(result, params);
                if (!parsedReturns.success) throw new ZodError([
                    makeReturnsIssue(result, parsedReturns.error)
                ]);
                return parsedReturns.data;
            });
        }
    }
    parameters() {
        return this._def.args;
    }
    returnType() {
        return this._def.returns;
    }
    args(...items) {
        return new ZodFunction({
            ...this._def,
            args: ZodTuple.create(items).rest(ZodUnknown.create())
        });
    }
    returns(returnType) {
        return new ZodFunction({
            ...this._def,
            returns: returnType
        });
    }
    implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    static create(args, returns, params) {
        return new ZodFunction({
            args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
            returns: returns || ZodUnknown.create(),
            typeName: ZodFirstPartyTypeKind.ZodFunction,
            ...processCreateParams(params)
        });
    }
}
class ZodLazy extends ZodType {
    get schema() {
        return this._def.getter();
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        });
    }
}
ZodLazy.create = (getter, params)=>{
    return new ZodLazy({
        getter: getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params)
    });
};
class ZodLiteral extends ZodType {
    _parse(input) {
        if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_literal,
                expected: this._def.value
            });
            return INVALID;
        }
        return {
            status: "valid",
            value: input.data
        };
    }
    get value() {
        return this._def.value;
    }
}
ZodLiteral.create = (value, params)=>{
    return new ZodLiteral({
        value: value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params)
    });
};
function createZodEnum(values, params) {
    return new ZodEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params)
    });
}
class ZodEnum extends ZodType {
    constructor(){
        super(...arguments);
        _ZodEnum_cache.set(this, void 0);
    }
    _parse(input) {
        if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type
            });
            return INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
        if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get options() {
        return this._def.values;
    }
    get enum() {
        const enumValues = {};
        for (const val of this._def.values)enumValues[val] = val;
        return enumValues;
    }
    get Values() {
        const enumValues = {};
        for (const val of this._def.values)enumValues[val] = val;
        return enumValues;
    }
    get Enum() {
        const enumValues = {};
        for (const val of this._def.values)enumValues[val] = val;
        return enumValues;
    }
    extract(values, newDef = this._def) {
        return ZodEnum.create(values, {
            ...this._def,
            ...newDef
        });
    }
    exclude(values, newDef = this._def) {
        return ZodEnum.create(this.options.filter((opt)=>!values.includes(opt)), {
            ...this._def,
            ...newDef
        });
    }
}
_ZodEnum_cache = new WeakMap();
ZodEnum.create = createZodEnum;
class ZodNativeEnum extends ZodType {
    constructor(){
        super(...arguments);
        _ZodNativeEnum_cache.set(this, void 0);
    }
    _parse(input) {
        const nativeEnumValues = util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type
            });
            return INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), "f");
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get enum() {
        return this._def.values;
    }
}
_ZodNativeEnum_cache = new WeakMap();
ZodNativeEnum.create = (values, params)=>{
    return new ZodNativeEnum({
        values: values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params)
    });
};
class ZodPromise extends ZodType {
    unwrap() {
        return this._def.type;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.promise,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
        return OK(promisified.then((data)=>{
            return this._def.type.parseAsync(data, {
                path: ctx.path,
                errorMap: ctx.common.contextualErrorMap
            });
        }));
    }
}
ZodPromise.create = (schema, params)=>{
    return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params)
    });
};
class ZodEffects extends ZodType {
    innerType() {
        return this._def.schema;
    }
    sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
            addIssue: (arg)=>{
                addIssueToContext(ctx, arg);
                if (arg.fatal) status.abort();
                else status.dirty();
            },
            get path () {
                return ctx.path;
            }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data, checkCtx);
            if (ctx.common.async) return Promise.resolve(processed).then(async (processed)=>{
                if (status.value === "aborted") return INVALID;
                const result = await this._def.schema._parseAsync({
                    data: processed,
                    path: ctx.path,
                    parent: ctx
                });
                if (result.status === "aborted") return INVALID;
                if (result.status === "dirty") return DIRTY(result.value);
                if (status.value === "dirty") return DIRTY(result.value);
                return result;
            });
            else {
                if (status.value === "aborted") return INVALID;
                const result = this._def.schema._parseSync({
                    data: processed,
                    path: ctx.path,
                    parent: ctx
                });
                if (result.status === "aborted") return INVALID;
                if (result.status === "dirty") return DIRTY(result.value);
                if (status.value === "dirty") return DIRTY(result.value);
                return result;
            }
        }
        if (effect.type === "refinement") {
            const executeRefinement = (acc)=>{
                const result = effect.refinement(acc, checkCtx);
                if (ctx.common.async) return Promise.resolve(result);
                if (result instanceof Promise) throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                return acc;
            };
            if (ctx.common.async === false) {
                const inner = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (inner.status === "aborted") return INVALID;
                if (inner.status === "dirty") status.dirty();
                // return value is ignored
                executeRefinement(inner.value);
                return {
                    status: status.value,
                    value: inner.value
                };
            } else return this._def.schema._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }).then((inner)=>{
                if (inner.status === "aborted") return INVALID;
                if (inner.status === "dirty") status.dirty();
                return executeRefinement(inner.value).then(()=>{
                    return {
                        status: status.value,
                        value: inner.value
                    };
                });
            });
        }
        if (effect.type === "transform") {
            if (ctx.common.async === false) {
                const base = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (!isValid(base)) return base;
                const result = effect.transform(base.value, checkCtx);
                if (result instanceof Promise) throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                return {
                    status: status.value,
                    value: result
                };
            } else return this._def.schema._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }).then((base)=>{
                if (!isValid(base)) return base;
                return Promise.resolve(effect.transform(base.value, checkCtx)).then((result)=>({
                        status: status.value,
                        value: result
                    }));
            });
        }
        util.assertNever(effect);
    }
}
ZodEffects.create = (schema, effect, params)=>{
    return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params)
    });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params)=>{
    return new ZodEffects({
        schema,
        effect: {
            type: "preprocess",
            transform: preprocess
        },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params)
    });
};
class ZodOptional extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.undefined) return OK(undefined);
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodOptional.create = (type, params)=>{
    return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params)
    });
};
class ZodNullable extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.null) return OK(null);
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodNullable.create = (type, params)=>{
    return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params)
    });
};
class ZodDefault extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType.undefined) data = this._def.defaultValue();
        return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx
        });
    }
    removeDefault() {
        return this._def.innerType;
    }
}
ZodDefault.create = (type, params)=>{
    return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function" ? params.default : ()=>params.default,
        ...processCreateParams(params)
    });
};
class ZodCatch extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        // newCtx is used to not collect issues from inner types in ctx
        const newCtx = {
            ...ctx,
            common: {
                ...ctx.common,
                issues: []
            }
        };
        const result = this._def.innerType._parse({
            data: newCtx.data,
            path: newCtx.path,
            parent: {
                ...newCtx
            }
        });
        if (isAsync(result)) return result.then((result)=>{
            return {
                status: "valid",
                value: result.status === "valid" ? result.value : this._def.catchValue({
                    get error () {
                        return new ZodError(newCtx.common.issues);
                    },
                    input: newCtx.data
                })
            };
        });
        else return {
            status: "valid",
            value: result.status === "valid" ? result.value : this._def.catchValue({
                get error () {
                    return new ZodError(newCtx.common.issues);
                },
                input: newCtx.data
            })
        };
    }
    removeCatch() {
        return this._def.innerType;
    }
}
ZodCatch.create = (type, params)=>{
    return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : ()=>params.catch,
        ...processCreateParams(params)
    });
};
class ZodNaN extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.nan,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return {
            status: "valid",
            value: input.data
        };
    }
}
ZodNaN.create = (params)=>{
    return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params)
    });
};
const BRAND = Symbol("zod_brand");
class ZodBranded extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
            data,
            path: ctx.path,
            parent: ctx
        });
    }
    unwrap() {
        return this._def.type;
    }
}
class ZodPipeline extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
            const handleAsync = async ()=>{
                const inResult = await this._def.in._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (inResult.status === "aborted") return INVALID;
                if (inResult.status === "dirty") {
                    status.dirty();
                    return DIRTY(inResult.value);
                } else return this._def.out._parseAsync({
                    data: inResult.value,
                    path: ctx.path,
                    parent: ctx
                });
            };
            return handleAsync();
        } else {
            const inResult = this._def.in._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            });
            if (inResult.status === "aborted") return INVALID;
            if (inResult.status === "dirty") {
                status.dirty();
                return {
                    status: "dirty",
                    value: inResult.value
                };
            } else return this._def.out._parseSync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
            });
        }
    }
    static create(a, b) {
        return new ZodPipeline({
            in: a,
            out: b,
            typeName: ZodFirstPartyTypeKind.ZodPipeline
        });
    }
}
class ZodReadonly extends ZodType {
    _parse(input) {
        const result = this._def.innerType._parse(input);
        const freeze = (data)=>{
            if (isValid(data)) data.value = Object.freeze(data.value);
            return data;
        };
        return isAsync(result) ? result.then((data)=>freeze(data)) : freeze(result);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodReadonly.create = (type, params)=>{
    return new ZodReadonly({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodReadonly,
        ...processCreateParams(params)
    });
};
////////////////////////////////////////
////////////////////////////////////////
//////////                    //////////
//////////      z.custom      //////////
//////////                    //////////
////////////////////////////////////////
////////////////////////////////////////
function cleanParams(params, data) {
    const p = typeof params === "function" ? params(data) : typeof params === "string" ? {
        message: params
    } : params;
    const p2 = typeof p === "string" ? {
        message: p
    } : p;
    return p2;
}
function custom(check, _params = {}, /**
 * @deprecated
 *
 * Pass `fatal` into the params object instead:
 *
 * ```ts
 * z.string().custom((val) => val.length > 5, { fatal: false })
 * ```
 *
 */ fatal) {
    if (check) return ZodAny.create().superRefine((data, ctx)=>{
        var _a, _b;
        const r = check(data);
        if (r instanceof Promise) return r.then((r)=>{
            var _a, _b;
            if (!r) {
                const params = cleanParams(_params, data);
                const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
                ctx.addIssue({
                    code: "custom",
                    ...params,
                    fatal: _fatal
                });
            }
        });
        if (!r) {
            const params = cleanParams(_params, data);
            const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
            ctx.addIssue({
                code: "custom",
                ...params,
                fatal: _fatal
            });
        }
        return;
    });
    return ZodAny.create();
}
const late = {
    object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind) {
    ZodFirstPartyTypeKind["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind["ZodPipeline"] = "ZodPipeline";
    ZodFirstPartyTypeKind["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
const instanceOfType = (// const instanceOfType = <T extends new (...args: any[]) => any>(
cls, params = {
    message: `Input not instance of ${cls.name}`
})=>custom((data)=>data instanceof cls, params);
const stringType = ZodString.create;
const numberType = ZodNumber.create;
const nanType = ZodNaN.create;
const bigIntType = ZodBigInt.create;
const booleanType = ZodBoolean.create;
const dateType = ZodDate.create;
const symbolType = ZodSymbol.create;
const undefinedType = ZodUndefined.create;
const nullType = ZodNull.create;
const anyType = ZodAny.create;
const unknownType = ZodUnknown.create;
const neverType = ZodNever.create;
const voidType = ZodVoid.create;
const arrayType = ZodArray.create;
const objectType = ZodObject.create;
const strictObjectType = ZodObject.strictCreate;
const unionType = ZodUnion.create;
const discriminatedUnionType = ZodDiscriminatedUnion.create;
const intersectionType = ZodIntersection.create;
const tupleType = ZodTuple.create;
const recordType = ZodRecord.create;
const mapType = ZodMap.create;
const setType = ZodSet.create;
const functionType = ZodFunction.create;
const lazyType = ZodLazy.create;
const literalType = ZodLiteral.create;
const enumType = ZodEnum.create;
const nativeEnumType = ZodNativeEnum.create;
const promiseType = ZodPromise.create;
const effectsType = ZodEffects.create;
const optionalType = ZodOptional.create;
const nullableType = ZodNullable.create;
const preprocessType = ZodEffects.createWithPreprocess;
const pipelineType = ZodPipeline.create;
const ostring = ()=>stringType().optional();
const onumber = ()=>numberType().optional();
const oboolean = ()=>booleanType().optional();
const coerce = {
    string: (arg)=>ZodString.create({
            ...arg,
            coerce: true
        }),
    number: (arg)=>ZodNumber.create({
            ...arg,
            coerce: true
        }),
    boolean: (arg)=>ZodBoolean.create({
            ...arg,
            coerce: true
        }),
    bigint: (arg)=>ZodBigInt.create({
            ...arg,
            coerce: true
        }),
    date: (arg)=>ZodDate.create({
            ...arg,
            coerce: true
        })
};
const NEVER = INVALID;
var z = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    defaultErrorMap: errorMap,
    setErrorMap: setErrorMap,
    getErrorMap: getErrorMap,
    makeIssue: makeIssue,
    EMPTY_PATH: EMPTY_PATH,
    addIssueToContext: addIssueToContext,
    ParseStatus: ParseStatus,
    INVALID: INVALID,
    DIRTY: DIRTY,
    OK: OK,
    isAborted: isAborted,
    isDirty: isDirty,
    isValid: isValid,
    isAsync: isAsync,
    get util () {
        return util;
    },
    get objectUtil () {
        return objectUtil;
    },
    ZodParsedType: ZodParsedType,
    getParsedType: getParsedType,
    ZodType: ZodType,
    datetimeRegex: datetimeRegex,
    ZodString: ZodString,
    ZodNumber: ZodNumber,
    ZodBigInt: ZodBigInt,
    ZodBoolean: ZodBoolean,
    ZodDate: ZodDate,
    ZodSymbol: ZodSymbol,
    ZodUndefined: ZodUndefined,
    ZodNull: ZodNull,
    ZodAny: ZodAny,
    ZodUnknown: ZodUnknown,
    ZodNever: ZodNever,
    ZodVoid: ZodVoid,
    ZodArray: ZodArray,
    ZodObject: ZodObject,
    ZodUnion: ZodUnion,
    ZodDiscriminatedUnion: ZodDiscriminatedUnion,
    ZodIntersection: ZodIntersection,
    ZodTuple: ZodTuple,
    ZodRecord: ZodRecord,
    ZodMap: ZodMap,
    ZodSet: ZodSet,
    ZodFunction: ZodFunction,
    ZodLazy: ZodLazy,
    ZodLiteral: ZodLiteral,
    ZodEnum: ZodEnum,
    ZodNativeEnum: ZodNativeEnum,
    ZodPromise: ZodPromise,
    ZodEffects: ZodEffects,
    ZodTransformer: ZodEffects,
    ZodOptional: ZodOptional,
    ZodNullable: ZodNullable,
    ZodDefault: ZodDefault,
    ZodCatch: ZodCatch,
    ZodNaN: ZodNaN,
    BRAND: BRAND,
    ZodBranded: ZodBranded,
    ZodPipeline: ZodPipeline,
    ZodReadonly: ZodReadonly,
    custom: custom,
    Schema: ZodType,
    ZodSchema: ZodType,
    late: late,
    get ZodFirstPartyTypeKind () {
        return ZodFirstPartyTypeKind;
    },
    coerce: coerce,
    any: anyType,
    array: arrayType,
    bigint: bigIntType,
    boolean: booleanType,
    date: dateType,
    discriminatedUnion: discriminatedUnionType,
    effect: effectsType,
    'enum': enumType,
    'function': functionType,
    'instanceof': instanceOfType,
    intersection: intersectionType,
    lazy: lazyType,
    literal: literalType,
    map: mapType,
    nan: nanType,
    nativeEnum: nativeEnumType,
    never: neverType,
    'null': nullType,
    nullable: nullableType,
    number: numberType,
    object: objectType,
    oboolean: oboolean,
    onumber: onumber,
    optional: optionalType,
    ostring: ostring,
    pipeline: pipelineType,
    preprocess: preprocessType,
    promise: promiseType,
    record: recordType,
    set: setType,
    strictObject: strictObjectType,
    string: stringType,
    symbol: symbolType,
    transformer: effectsType,
    tuple: tupleType,
    'undefined': undefinedType,
    union: unionType,
    unknown: unknownType,
    'void': voidType,
    NEVER: NEVER,
    ZodIssueCode: ZodIssueCode,
    quotelessJson: quotelessJson,
    ZodError: ZodError
});

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jnFvT":[function(require,module,exports,__globalThis) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"hmTh2":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ValidationError = void 0;
// Since we expose zod schemas, let's expose ZodError (under a generic name) so
// that dependents can catch schema parsing errors without requiring an explicit
// dependency on zod, or risking a conflict in case of mismatching zob versions.
var zod_1 = require("b9d8cba73b81c575");
Object.defineProperty(exports, "ValidationError", {
    enumerable: true,
    get: function() {
        return zod_1.ZodError;
    }
});
__exportStar(require("38d8c1ade8898312"), exports);
__exportStar(require("b93d1ed58efdd4e9"), exports);
__exportStar(require("5c1b6a84fad6b4cd"), exports);
__exportStar(require("b0f6b568d66ed0a6"), exports);
__exportStar(require("db96dc628f675d05"), exports);
__exportStar(require("beffd1b696baf15e"), exports);
__exportStar(require("88edb623cbb3016"), exports);
__exportStar(require("2301f4ee1607cedf"), exports);
__exportStar(require("3904d536d7966676"), exports);
__exportStar(require("892fa151b6831a91"), exports);

},{"b9d8cba73b81c575":"gcE23","38d8c1ade8898312":"lzFmg","b93d1ed58efdd4e9":"8VJsC","5c1b6a84fad6b4cd":"3blhu","b0f6b568d66ed0a6":"8PggI","db96dc628f675d05":"kc69u","beffd1b696baf15e":"jKDmR","88edb623cbb3016":"jeV1E","2301f4ee1607cedf":"epzby","3904d536d7966676":"5q75y","892fa151b6831a91":"c5xd7"}],"lzFmg":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.jwkAlgorithms = jwkAlgorithms;
const errors_js_1 = require("f5152c0faac35339");
// Copy variable to prevent bundlers from automatically polyfilling "process" (e.g. parcel)
const { process } = globalThis;
const IS_NODE_RUNTIME = typeof process !== 'undefined' && typeof process?.versions?.node === 'string';
function* jwkAlgorithms(jwk) {
    // Ed25519, Ed448, and secp256k1 always have "alg"
    // OKP always has "use"
    if (jwk.alg) {
        yield jwk.alg;
        return;
    }
    switch(jwk.kty){
        case 'EC':
            if (jwk.use === 'enc' || jwk.use === undefined) {
                yield 'ECDH-ES';
                yield 'ECDH-ES+A128KW';
                yield 'ECDH-ES+A192KW';
                yield 'ECDH-ES+A256KW';
            }
            if (jwk.use === 'sig' || jwk.use === undefined) {
                const crv = 'crv' in jwk ? jwk.crv : undefined;
                switch(crv){
                    case 'P-256':
                    case 'P-384':
                        yield `ES${crv.slice(-3)}`;
                        break;
                    case 'P-521':
                        yield 'ES512';
                        break;
                    case 'secp256k1':
                        if (IS_NODE_RUNTIME) yield 'ES256K';
                        break;
                    default:
                        throw new errors_js_1.JwkError(`Unsupported crv "${crv}"`);
                }
            }
            return;
        case 'OKP':
            if (!jwk.use) throw new errors_js_1.JwkError('Missing "use" Parameter value');
            yield 'ECDH-ES';
            yield 'ECDH-ES+A128KW';
            yield 'ECDH-ES+A192KW';
            yield 'ECDH-ES+A256KW';
            return;
        case 'RSA':
            if (jwk.use === 'enc' || jwk.use === undefined) {
                yield 'RSA-OAEP';
                yield 'RSA-OAEP-256';
                yield 'RSA-OAEP-384';
                yield 'RSA-OAEP-512';
                if (IS_NODE_RUNTIME) yield 'RSA1_5';
            }
            if (jwk.use === 'sig' || jwk.use === undefined) {
                yield 'PS256';
                yield 'PS384';
                yield 'PS512';
                yield 'RS256';
                yield 'RS384';
                yield 'RS512';
            }
            return;
        case 'oct':
            if (jwk.use === 'enc' || jwk.use === undefined) {
                yield 'A128GCMKW';
                yield 'A192GCMKW';
                yield 'A256GCMKW';
                yield 'A128KW';
                yield 'A192KW';
                yield 'A256KW';
            }
            if (jwk.use === 'sig' || jwk.use === undefined) {
                yield 'HS256';
                yield 'HS384';
                yield 'HS512';
            }
            return;
        default:
            throw new errors_js_1.JwkError(`Unsupported kty "${jwk.kty}"`);
    }
}

},{"f5152c0faac35339":"8VJsC"}],"8VJsC":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.JwtVerifyError = exports.JwtCreateError = exports.JwkError = exports.ERR_JWT_VERIFY = exports.ERR_JWT_CREATE = exports.ERR_JWT_INVALID = exports.ERR_JWK_NOT_FOUND = exports.ERR_JWK_INVALID = exports.ERR_JWKS_NO_MATCHING_KEY = void 0;
exports.ERR_JWKS_NO_MATCHING_KEY = 'ERR_JWKS_NO_MATCHING_KEY';
exports.ERR_JWK_INVALID = 'ERR_JWK_INVALID';
exports.ERR_JWK_NOT_FOUND = 'ERR_JWK_NOT_FOUND';
exports.ERR_JWT_INVALID = 'ERR_JWT_INVALID';
exports.ERR_JWT_CREATE = 'ERR_JWT_CREATE';
exports.ERR_JWT_VERIFY = 'ERR_JWT_VERIFY';
class JwkError extends TypeError {
    constructor(message = 'JWK error', code = exports.ERR_JWK_INVALID, options){
        super(message, options);
        Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: code
        });
    }
}
exports.JwkError = JwkError;
class JwtCreateError extends Error {
    constructor(message = 'Unable to create JWT', code = exports.ERR_JWT_CREATE, options){
        super(message, options);
        Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: code
        });
    }
    static from(cause, code, message) {
        if (cause instanceof JwtCreateError) return cause;
        if (cause instanceof JwkError) return new JwtCreateError(message, cause.code, {
            cause
        });
        return new JwtCreateError(message, code, {
            cause
        });
    }
}
exports.JwtCreateError = JwtCreateError;
class JwtVerifyError extends Error {
    constructor(message = 'Invalid JWT', code = exports.ERR_JWT_VERIFY, options){
        super(message, options);
        Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: code
        });
    }
    static from(cause, code, message) {
        if (cause instanceof JwtVerifyError) return cause;
        if (cause instanceof JwkError) return new JwtVerifyError(message, cause.code, {
            cause
        });
        return new JwtVerifyError(message, code, {
            cause
        });
    }
}
exports.JwtVerifyError = JwtVerifyError;

},{}],"3blhu":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.jwkPubSchema = exports.jwkValidator = exports.jwkSchema = exports.jwkUnknownKeySchema = exports.jwkSymKeySchema = exports.jwkOkpKeySchema = exports.jwkEcSecp256k1KeySchema = exports.jwkEcKeySchema = exports.jwkRsaKeySchema = exports.jwkBaseSchema = exports.keyUsageSchema = void 0;
const zod_1 = require("a320bcf7de23c8b0");
exports.keyUsageSchema = zod_1.z.enum([
    'sign',
    'verify',
    'encrypt',
    'decrypt',
    'wrapKey',
    'unwrapKey',
    'deriveKey',
    'deriveBits'
]);
/**
 * The "use" and "key_ops" JWK members SHOULD NOT be used together;
 * however, if both are used, the information they convey MUST be
 * consistent.  Applications should specify which of these members they
 * use, if either is to be used by the application.
 *
 * @todo Actually check that "use" and "key_ops" are consistent when both are present.
 * @see {@link https://datatracker.ietf.org/doc/html/rfc7517#section-4.3}
 */ exports.jwkBaseSchema = zod_1.z.object({
    kty: zod_1.z.string().min(1),
    alg: zod_1.z.string().min(1).optional(),
    kid: zod_1.z.string().min(1).optional(),
    ext: zod_1.z.boolean().optional(),
    use: zod_1.z.enum([
        'sig',
        'enc'
    ]).optional(),
    key_ops: zod_1.z.array(exports.keyUsageSchema).optional(),
    x5c: zod_1.z.array(zod_1.z.string()).optional(),
    x5t: zod_1.z.string().min(1).optional(),
    'x5t#S256': zod_1.z.string().min(1).optional(),
    x5u: zod_1.z.string().url().optional()
});
/**
 * @todo: properly implement this
 */ exports.jwkRsaKeySchema = exports.jwkBaseSchema.extend({
    kty: zod_1.z.literal('RSA'),
    alg: zod_1.z.enum([
        'RS256',
        'RS384',
        'RS512',
        'PS256',
        'PS384',
        'PS512'
    ]).optional(),
    n: zod_1.z.string().min(1),
    e: zod_1.z.string().min(1),
    d: zod_1.z.string().min(1).optional(),
    p: zod_1.z.string().min(1).optional(),
    q: zod_1.z.string().min(1).optional(),
    dp: zod_1.z.string().min(1).optional(),
    dq: zod_1.z.string().min(1).optional(),
    qi: zod_1.z.string().min(1).optional(),
    oth: zod_1.z.array(zod_1.z.object({
        r: zod_1.z.string().optional(),
        d: zod_1.z.string().optional(),
        t: zod_1.z.string().optional()
    })).nonempty().optional()
});
exports.jwkEcKeySchema = exports.jwkBaseSchema.extend({
    kty: zod_1.z.literal('EC'),
    alg: zod_1.z.enum([
        'ES256',
        'ES384',
        'ES512'
    ]).optional(),
    crv: zod_1.z.enum([
        'P-256',
        'P-384',
        'P-521'
    ]),
    x: zod_1.z.string().min(1),
    y: zod_1.z.string().min(1),
    d: zod_1.z.string().min(1).optional()
});
exports.jwkEcSecp256k1KeySchema = exports.jwkBaseSchema.extend({
    kty: zod_1.z.literal('EC'),
    alg: zod_1.z.enum([
        'ES256K'
    ]).optional(),
    crv: zod_1.z.enum([
        'secp256k1'
    ]),
    x: zod_1.z.string().min(1),
    y: zod_1.z.string().min(1),
    d: zod_1.z.string().min(1).optional()
});
exports.jwkOkpKeySchema = exports.jwkBaseSchema.extend({
    kty: zod_1.z.literal('OKP'),
    alg: zod_1.z.enum([
        'EdDSA'
    ]).optional(),
    crv: zod_1.z.enum([
        'Ed25519',
        'Ed448'
    ]),
    x: zod_1.z.string().min(1),
    d: zod_1.z.string().min(1).optional()
});
exports.jwkSymKeySchema = exports.jwkBaseSchema.extend({
    kty: zod_1.z.literal('oct'),
    alg: zod_1.z.enum([
        'HS256',
        'HS384',
        'HS512'
    ]).optional(),
    k: zod_1.z.string()
});
exports.jwkUnknownKeySchema = exports.jwkBaseSchema.extend({
    kty: zod_1.z.string().refine((v)=>v !== 'RSA' && v !== 'EC' && v !== 'OKP' && v !== 'oct')
});
exports.jwkSchema = zod_1.z.union([
    exports.jwkUnknownKeySchema,
    exports.jwkRsaKeySchema,
    exports.jwkEcKeySchema,
    exports.jwkEcSecp256k1KeySchema,
    exports.jwkOkpKeySchema,
    exports.jwkSymKeySchema
]);
exports.jwkValidator = exports.jwkSchema.refine((k)=>k.use != null || k.key_ops != null, 'use or key_ops required').refine((k)=>!k.use || !k.key_ops || k.key_ops.every((o)=>k.use === 'sig' ? o === 'sign' || o === 'verify' : o === 'encrypt' || o === 'decrypt'), 'use and key_ops must be consistent');
exports.jwkPubSchema = exports.jwkValidator.refine((k)=>k.kid != null, 'kid is required').refine((k)=>!('k' in k) && !('d' in k), 'private key not allowed');

},{"a320bcf7de23c8b0":"gcE23"}],"8PggI":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.jwksPubSchema = exports.jwksSchema = void 0;
const zod_1 = require("8a449fdc82d4cb6f");
const jwk_js_1 = require("86c84a6726edd853");
exports.jwksSchema = zod_1.z.object({
    keys: zod_1.z.array(jwk_js_1.jwkSchema)
});
exports.jwksPubSchema = zod_1.z.object({
    keys: zod_1.z.array(jwk_js_1.jwkPubSchema)
});

},{"8a449fdc82d4cb6f":"gcE23","86c84a6726edd853":"3blhu"}],"kc69u":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.unsafeDecodeJwt = unsafeDecodeJwt;
const errors_js_1 = require("58d05c9fcd430220");
const jwt_js_1 = require("e2b781414d173124");
const util_js_1 = require("30ca2beb479efabe");
function unsafeDecodeJwt(jwt) {
    const { 0: headerEnc, 1: payloadEnc, length } = jwt.split('.');
    if (length > 3 || length < 2) throw new errors_js_1.JwtVerifyError(undefined, errors_js_1.ERR_JWT_INVALID);
    const header = jwt_js_1.jwtHeaderSchema.parse((0, util_js_1.parseB64uJson)(headerEnc));
    if (length === 2 && header?.alg !== 'none') throw new errors_js_1.JwtVerifyError(undefined, errors_js_1.ERR_JWT_INVALID);
    const payload = jwt_js_1.jwtPayloadSchema.parse((0, util_js_1.parseB64uJson)(payloadEnc));
    return {
        header,
        payload
    };
}

},{"58d05c9fcd430220":"8VJsC","e2b781414d173124":"jeV1E","30ca2beb479efabe":"c5xd7"}],"jeV1E":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.jwtPayloadSchema = exports.jwtHeaderSchema = exports.isUnsignedJwt = exports.unsignedJwtSchema = exports.isSignedJwt = exports.signedJwtSchema = void 0;
const zod_1 = require("533ae4fc61e45974");
const jwk_js_1 = require("896787e2d6b7076");
const util_js_1 = require("3e8358feddfd62a9");
exports.signedJwtSchema = zod_1.z.string().superRefine(util_js_1.jwtCharsRefinement).superRefine((0, util_js_1.segmentedStringRefinementFactory)(3));
const isSignedJwt = (data)=>exports.signedJwtSchema.safeParse(data).success;
exports.isSignedJwt = isSignedJwt;
exports.unsignedJwtSchema = zod_1.z.string().superRefine(util_js_1.jwtCharsRefinement).superRefine((0, util_js_1.segmentedStringRefinementFactory)(2));
const isUnsignedJwt = (data)=>exports.unsignedJwtSchema.safeParse(data).success;
exports.isUnsignedJwt = isUnsignedJwt;
/**
 * @see {@link https://www.rfc-editor.org/rfc/rfc7515.html#section-4}
 */ exports.jwtHeaderSchema = zod_1.z.object({
    /** "alg" (Algorithm) Header Parameter */ alg: zod_1.z.string(),
    /** "jku" (JWK Set URL) Header Parameter */ jku: zod_1.z.string().url().optional(),
    /** "jwk" (JSON Web Key) Header Parameter */ jwk: zod_1.z.object({
        kty: zod_1.z.string(),
        crv: zod_1.z.string().optional(),
        x: zod_1.z.string().optional(),
        y: zod_1.z.string().optional(),
        e: zod_1.z.string().optional(),
        n: zod_1.z.string().optional()
    }).optional(),
    /** "kid" (Key ID) Header Parameter */ kid: zod_1.z.string().optional(),
    /** "x5u" (X.509 URL) Header Parameter */ x5u: zod_1.z.string().optional(),
    /** "x5c" (X.509 Certificate Chain) Header Parameter */ x5c: zod_1.z.array(zod_1.z.string()).optional(),
    /** "x5t" (X.509 Certificate SHA-1 Thumbprint) Header Parameter */ x5t: zod_1.z.string().optional(),
    /** "x5t#S256" (X.509 Certificate SHA-256 Thumbprint) Header Parameter */ 'x5t#S256': zod_1.z.string().optional(),
    /** "typ" (Type) Header Parameter */ typ: zod_1.z.string().optional(),
    /** "cty" (Content Type) Header Parameter */ cty: zod_1.z.string().optional(),
    /** "crit" (Critical) Header Parameter */ crit: zod_1.z.array(zod_1.z.string()).optional()
}).passthrough();
// https://www.iana.org/assignments/jwt/jwt.xhtml
exports.jwtPayloadSchema = zod_1.z.object({
    iss: zod_1.z.string().optional(),
    aud: zod_1.z.union([
        zod_1.z.string(),
        zod_1.z.array(zod_1.z.string()).nonempty()
    ]).optional(),
    sub: zod_1.z.string().optional(),
    exp: zod_1.z.number().int().optional(),
    nbf: zod_1.z.number().int().optional(),
    iat: zod_1.z.number().int().optional(),
    jti: zod_1.z.string().optional(),
    htm: zod_1.z.string().optional(),
    htu: zod_1.z.string().optional(),
    ath: zod_1.z.string().optional(),
    acr: zod_1.z.string().optional(),
    azp: zod_1.z.string().optional(),
    amr: zod_1.z.array(zod_1.z.string()).optional(),
    // https://datatracker.ietf.org/doc/html/rfc7800
    cnf: zod_1.z.object({
        kid: zod_1.z.string().optional(),
        jwk: jwk_js_1.jwkPubSchema.optional(),
        jwe: zod_1.z.string().optional(),
        jku: zod_1.z.string().url().optional(),
        // https://datatracker.ietf.org/doc/html/rfc9449#section-6.1
        jkt: zod_1.z.string().optional(),
        // https://datatracker.ietf.org/doc/html/rfc8705
        'x5t#S256': zod_1.z.string().optional(),
        // https://datatracker.ietf.org/doc/html/rfc9203
        osc: zod_1.z.string().optional()
    }).optional(),
    client_id: zod_1.z.string().optional(),
    scope: zod_1.z.string().optional(),
    nonce: zod_1.z.string().optional(),
    at_hash: zod_1.z.string().optional(),
    c_hash: zod_1.z.string().optional(),
    s_hash: zod_1.z.string().optional(),
    auth_time: zod_1.z.number().int().optional(),
    // https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims
    // OpenID: "profile" scope
    name: zod_1.z.string().optional(),
    family_name: zod_1.z.string().optional(),
    given_name: zod_1.z.string().optional(),
    middle_name: zod_1.z.string().optional(),
    nickname: zod_1.z.string().optional(),
    preferred_username: zod_1.z.string().optional(),
    gender: zod_1.z.string().optional(),
    picture: zod_1.z.string().url().optional(),
    profile: zod_1.z.string().url().optional(),
    website: zod_1.z.string().url().optional(),
    birthdate: zod_1.z.string().regex(/\d{4}-\d{2}-\d{2}/) // YYYY-MM-DD
    .optional(),
    zoneinfo: zod_1.z.string().regex(/^[A-Za-z0-9_/]+$/).optional(),
    locale: zod_1.z.string().regex(/^[a-z]{2,3}(-[A-Z]{2})?$/).optional(),
    updated_at: zod_1.z.number().int().optional(),
    // OpenID: "email" scope
    email: zod_1.z.string().optional(),
    email_verified: zod_1.z.boolean().optional(),
    // OpenID: "phone" scope
    phone_number: zod_1.z.string().optional(),
    phone_number_verified: zod_1.z.boolean().optional(),
    // OpenID: "address" scope
    // https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim
    address: zod_1.z.object({
        formatted: zod_1.z.string().optional(),
        street_address: zod_1.z.string().optional(),
        locality: zod_1.z.string().optional(),
        region: zod_1.z.string().optional(),
        postal_code: zod_1.z.string().optional(),
        country: zod_1.z.string().optional()
    }).optional(),
    // https://datatracker.ietf.org/doc/html/rfc9396#section-14.2
    authorization_details: zod_1.z.array(zod_1.z.object({
        type: zod_1.z.string(),
        // https://datatracker.ietf.org/doc/html/rfc9396#section-2.2
        locations: zod_1.z.array(zod_1.z.string()).optional(),
        actions: zod_1.z.array(zod_1.z.string()).optional(),
        datatypes: zod_1.z.array(zod_1.z.string()).optional(),
        identifier: zod_1.z.string().optional(),
        privileges: zod_1.z.array(zod_1.z.string()).optional()
    }).passthrough()).optional()
}).passthrough();

},{"533ae4fc61e45974":"gcE23","896787e2d6b7076":"3blhu","3e8358feddfd62a9":"c5xd7"}],"c5xd7":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.segmentedStringRefinementFactory = exports.jwtCharsRefinement = exports.cachedGetter = exports.preferredOrderCmp = exports.isDefined = void 0;
exports.matchesAny = matchesAny;
exports.parseB64uJson = parseB64uJson;
const base64_1 = require("7bd52388e08be9bd");
const zod_1 = require("bb9032826c78a6d5");
const isDefined = (i)=>i !== undefined;
exports.isDefined = isDefined;
const preferredOrderCmp = (order)=>(a, b)=>{
        const aIdx = order.indexOf(a);
        const bIdx = order.indexOf(b);
        if (aIdx === bIdx) return 0;
        if (aIdx === -1) return 1;
        if (bIdx === -1) return -1;
        return aIdx - bIdx;
    };
exports.preferredOrderCmp = preferredOrderCmp;
function matchesAny(value) {
    return value == null ? (v)=>true : Array.isArray(value) ? (v)=>value.includes(v) : (v)=>v === value;
}
/**
 * Decorator to cache the result of a getter on a class instance.
 */ const cachedGetter = (target, _context)=>{
    return function() {
        const value = target.call(this);
        Object.defineProperty(this, target.name, {
            get: ()=>value,
            enumerable: true,
            configurable: true
        });
        return value;
    };
};
exports.cachedGetter = cachedGetter;
const decoder = new TextDecoder();
function parseB64uJson(input) {
    const inputBytes = base64_1.base64url.baseDecode(input);
    const json = decoder.decode(inputBytes);
    return JSON.parse(json);
}
/**
 * @example
 * ```ts
 * // jwtSchema will only allow base64url chars & "." (dot)
 * const jwtSchema = z.string().superRefine(jwtCharsRefinement)
 * ```
 */ const jwtCharsRefinement = (data, ctx)=>{
    // Note: this is a hot path, let's avoid using a RegExp
    let char;
    for(let i = 0; i < data.length; i++){
        char = data.charCodeAt(i);
        if (// Base64 URL encoding (most frequent)
        65 <= char && char <= 90 || // A-Z
        97 <= char && char <= 122 || // a-z
        48 <= char && char <= 57 || // 0-9
        char === 45 || // -
        char === 95 || // _
        // Boundary (least frequent, check last)
        char === 46 // .
        ) ;
        else {
            // Invalid char might be a surrogate pair
            const invalidChar = String.fromCodePoint(data.codePointAt(i));
            return ctx.addIssue({
                code: zod_1.ZodIssueCode.custom,
                message: `Invalid character "${invalidChar}" in JWT at position ${i}`
            });
        }
    }
};
exports.jwtCharsRefinement = jwtCharsRefinement;
/**
 * @example
 * ```ts
 * const jwtSchema = z.string().superRefine(segmentedStringRefinementFactory(3))
 * type Jwt = z.infer<typeof jwtSchema> // `${string}.${string}.${string}`
 * ```
 */ const segmentedStringRefinementFactory = (count, minPartLength = 2)=>{
    if (!Number.isFinite(count) || count < 1 || (count | 0) !== count) throw new TypeError(`Count must be a natural number (got ${count})`);
    const minTotalLength = count * minPartLength + (count - 1);
    const errorPrefix = `Invalid JWT format`;
    return (data, ctx)=>{
        if (data.length < minTotalLength) {
            ctx.addIssue({
                code: zod_1.ZodIssueCode.custom,
                message: `${errorPrefix}: too short`
            });
            return false;
        }
        let currentStart = 0;
        for(let i = 0; i < count - 1; i++){
            const nextDot = data.indexOf('.', currentStart);
            if (nextDot === -1) {
                ctx.addIssue({
                    code: zod_1.ZodIssueCode.custom,
                    message: `${errorPrefix}: expected ${count} segments, got ${i + 1}`
                });
                return false;
            }
            if (nextDot - currentStart < minPartLength) {
                ctx.addIssue({
                    code: zod_1.ZodIssueCode.custom,
                    message: `${errorPrefix}: segment ${i + 1} is too short`
                });
                return false;
            }
            currentStart = nextDot + 1;
        }
        if (data.indexOf('.', currentStart) !== -1) {
            ctx.addIssue({
                code: zod_1.ZodIssueCode.custom,
                message: `${errorPrefix}: too many segments`
            });
            return false;
        }
        if (data.length - currentStart < minPartLength) {
            ctx.addIssue({
                code: zod_1.ZodIssueCode.custom,
                message: `${errorPrefix}: last segment is too short`
            });
            return false;
        }
        return true;
    };
};
exports.segmentedStringRefinementFactory = segmentedStringRefinementFactory;

},{"7bd52388e08be9bd":"jzjLH","bb9032826c78a6d5":"gcE23"}],"jzjLH":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var base = require("20a9eb25cf44f8a3");
const base64 = base.rfc4648({
    prefix: 'm',
    name: 'base64',
    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
    bitsPerChar: 6
});
const base64pad = base.rfc4648({
    prefix: 'M',
    name: 'base64pad',
    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
    bitsPerChar: 6
});
const base64url = base.rfc4648({
    prefix: 'u',
    name: 'base64url',
    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
    bitsPerChar: 6
});
const base64urlpad = base.rfc4648({
    prefix: 'U',
    name: 'base64urlpad',
    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',
    bitsPerChar: 6
});
exports.base64 = base64;
exports.base64pad = base64pad;
exports.base64url = base64url;
exports.base64urlpad = base64urlpad;

},{"20a9eb25cf44f8a3":"eEt2D"}],"eEt2D":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var baseX$1 = require("e2b0538244b8b4c6");
var bytes = require("e0493e14db98d36e");
class Encoder {
    constructor(name, prefix, baseEncode){
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
    }
    encode(bytes) {
        if (bytes instanceof Uint8Array) return `${this.prefix}${this.baseEncode(bytes)}`;
        else throw Error('Unknown type, must be binary type');
    }
}
class Decoder {
    constructor(name, prefix, baseDecode){
        this.name = name;
        this.prefix = prefix;
        if (prefix.codePointAt(0) === undefined) throw new Error('Invalid prefix character');
        this.prefixCodePoint = prefix.codePointAt(0);
        this.baseDecode = baseDecode;
    }
    decode(text) {
        if (typeof text === 'string') {
            if (text.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            return this.baseDecode(text.slice(this.prefix.length));
        } else throw Error('Can only multibase decode strings');
    }
    or(decoder) {
        return or(this, decoder);
    }
}
class ComposedDecoder {
    constructor(decoders){
        this.decoders = decoders;
    }
    or(decoder) {
        return or(this, decoder);
    }
    decode(input) {
        const prefix = input[0];
        const decoder = this.decoders[prefix];
        if (decoder) return decoder.decode(input);
        else throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
}
const or = (left, right)=>new ComposedDecoder({
        ...left.decoders || {
            [left.prefix]: left
        },
        ...right.decoders || {
            [right.prefix]: right
        }
    });
class Codec {
    constructor(name, prefix, baseEncode, baseDecode){
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
        this.baseDecode = baseDecode;
        this.encoder = new Encoder(name, prefix, baseEncode);
        this.decoder = new Decoder(name, prefix, baseDecode);
    }
    encode(input) {
        return this.encoder.encode(input);
    }
    decode(input) {
        return this.decoder.decode(input);
    }
}
const from = ({ name, prefix, encode, decode })=>new Codec(name, prefix, encode, decode);
const baseX = ({ prefix, name, alphabet })=>{
    const { encode, decode } = baseX$1(alphabet, name);
    return from({
        prefix,
        name,
        encode,
        decode: (text)=>bytes.coerce(decode(text))
    });
};
const decode = (string, alphabet, bitsPerChar, name)=>{
    const codes = {};
    for(let i = 0; i < alphabet.length; ++i)codes[alphabet[i]] = i;
    let end = string.length;
    while(string[end - 1] === '=')--end;
    const out = new Uint8Array(end * bitsPerChar / 8 | 0);
    let bits = 0;
    let buffer = 0;
    let written = 0;
    for(let i = 0; i < end; ++i){
        const value = codes[string[i]];
        if (value === undefined) throw new SyntaxError(`Non-${name} character`);
        buffer = buffer << bitsPerChar | value;
        bits += bitsPerChar;
        if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer >> bits;
        }
    }
    if (bits >= bitsPerChar || 255 & buffer << 8 - bits) throw new SyntaxError('Unexpected end of data');
    return out;
};
const encode = (data, alphabet, bitsPerChar)=>{
    const pad = alphabet[alphabet.length - 1] === '=';
    const mask = (1 << bitsPerChar) - 1;
    let out = '';
    let bits = 0;
    let buffer = 0;
    for(let i = 0; i < data.length; ++i){
        buffer = buffer << 8 | data[i];
        bits += 8;
        while(bits > bitsPerChar){
            bits -= bitsPerChar;
            out += alphabet[mask & buffer >> bits];
        }
    }
    if (bits) out += alphabet[mask & buffer << bitsPerChar - bits];
    if (pad) while(out.length * bitsPerChar & 7)out += '=';
    return out;
};
const rfc4648 = ({ name, prefix, bitsPerChar, alphabet })=>{
    return from({
        prefix,
        name,
        encode (input) {
            return encode(input, alphabet, bitsPerChar);
        },
        decode (input) {
            return decode(input, alphabet, bitsPerChar, name);
        }
    });
};
exports.Codec = Codec;
exports.baseX = baseX;
exports.from = from;
exports.or = or;
exports.rfc4648 = rfc4648;

},{"e2b0538244b8b4c6":"9Q1Pe","e0493e14db98d36e":"lENC2"}],"9Q1Pe":[function(require,module,exports,__globalThis) {
'use strict';
function base(ALPHABET, name) {
    if (ALPHABET.length >= 255) throw new TypeError('Alphabet too long');
    var BASE_MAP = new Uint8Array(256);
    for(var j = 0; j < BASE_MAP.length; j++)BASE_MAP[j] = 255;
    for(var i = 0; i < ALPHABET.length; i++){
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) throw new TypeError(x + ' is ambiguous');
        BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode(source) {
        if (source instanceof Uint8Array) ;
        else if (ArrayBuffer.isView(source)) source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        else if (Array.isArray(source)) source = Uint8Array.from(source);
        if (!(source instanceof Uint8Array)) throw new TypeError('Expected Uint8Array');
        if (source.length === 0) return '';
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while(pbegin !== pend && source[pbegin] === 0){
            pbegin++;
            zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while(pbegin !== pend){
            var carry = source[pbegin];
            var i = 0;
            for(var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++){
                carry += 256 * b58[it1] >>> 0;
                b58[it1] = carry % BASE >>> 0;
                carry = carry / BASE >>> 0;
            }
            if (carry !== 0) throw new Error('Non-zero carry');
            length = i;
            pbegin++;
        }
        var it2 = size - length;
        while(it2 !== size && b58[it2] === 0)it2++;
        var str = LEADER.repeat(zeroes);
        for(; it2 < size; ++it2)str += ALPHABET.charAt(b58[it2]);
        return str;
    }
    function decodeUnsafe(source) {
        if (typeof source !== 'string') throw new TypeError('Expected String');
        if (source.length === 0) return new Uint8Array();
        var psz = 0;
        if (source[psz] === ' ') return;
        var zeroes = 0;
        var length = 0;
        while(source[psz] === LEADER){
            zeroes++;
            psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while(source[psz]){
            var carry = BASE_MAP[source.charCodeAt(psz)];
            if (carry === 255) return;
            var i = 0;
            for(var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++){
                carry += BASE * b256[it3] >>> 0;
                b256[it3] = carry % 256 >>> 0;
                carry = carry / 256 >>> 0;
            }
            if (carry !== 0) throw new Error('Non-zero carry');
            length = i;
            psz++;
        }
        if (source[psz] === ' ') return;
        var it4 = size - length;
        while(it4 !== size && b256[it4] === 0)it4++;
        var vch = new Uint8Array(zeroes + (size - it4));
        var j = zeroes;
        while(it4 !== size)vch[j++] = b256[it4++];
        return vch;
    }
    function decode(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) return buffer;
        throw new Error(`Non-${name} character`);
    }
    return {
        encode: encode,
        decodeUnsafe: decodeUnsafe,
        decode: decode
    };
}
var src = base;
var _brrp__multiformats_scope_baseX = src;
module.exports = _brrp__multiformats_scope_baseX;

},{}],"lENC2":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
const empty = new Uint8Array(0);
const toHex = (d)=>d.reduce((hex, byte)=>hex + byte.toString(16).padStart(2, '0'), '');
const fromHex = (hex)=>{
    const hexes = hex.match(/../g);
    return hexes ? new Uint8Array(hexes.map((b)=>parseInt(b, 16))) : empty;
};
const equals = (aa, bb)=>{
    if (aa === bb) return true;
    if (aa.byteLength !== bb.byteLength) return false;
    for(let ii = 0; ii < aa.byteLength; ii++){
        if (aa[ii] !== bb[ii]) return false;
    }
    return true;
};
const coerce = (o)=>{
    if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o;
    if (o instanceof ArrayBuffer) return new Uint8Array(o);
    if (ArrayBuffer.isView(o)) return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
    throw new Error('Unknown type, must be binary type');
};
const isBinary = (o)=>o instanceof ArrayBuffer || ArrayBuffer.isView(o);
const fromString = (str)=>new TextEncoder().encode(str);
const toString = (b)=>new TextDecoder().decode(b);
exports.coerce = coerce;
exports.empty = empty;
exports.equals = equals;
exports.fromHex = fromHex;
exports.fromString = fromString;
exports.isBinary = isBinary;
exports.toHex = toHex;
exports.toString = toString;

},{}],"jKDmR":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"epzby":[function(require,module,exports,__globalThis) {
"use strict";
var __runInitializers = this && this.__runInitializers || function(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    return useValue ? value : void 0;
};
var __esDecorate = this && this.__esDecorate || function(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
        if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
        return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for(var i = decorators.length - 1; i >= 0; i--){
        var context = {};
        for(var p in contextIn)context[p] = p === "access" ? {} : contextIn[p];
        for(var p in contextIn.access)context.access[p] = contextIn.access[p];
        context.addInitializer = function(f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(kind === "accessor" ? {
            get: descriptor.get,
            set: descriptor.set
        } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        } else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Key = void 0;
const alg_js_1 = require("5c57be7554124490");
const errors_js_1 = require("3628d2a827b5fd29");
const jwk_js_1 = require("f724b362ca6b7dfe");
const util_js_1 = require("f638f1accb4a0cfa");
const jwkSchemaReadonly = jwk_js_1.jwkSchema.readonly();
let Key = (()=>{
    var _a;
    let _instanceExtraInitializers = [];
    let _get_publicJwk_decorators;
    let _get_bareJwk_decorators;
    let _get_algorithms_decorators;
    return _a = class Key {
        constructor(jwk){
            Object.defineProperty(this, "jwk", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: (__runInitializers(this, _instanceExtraInitializers), jwk)
            });
            // A key should always be used either for signing or encryption.
            if (!jwk.use) throw new errors_js_1.JwkError('Missing "use" Parameter value');
        }
        get isPrivate() {
            const { jwk } = this;
            if ('d' in jwk && jwk.d !== undefined) return true;
            if ('k' in jwk && jwk.k !== undefined) return true;
            return false;
        }
        get isSymetric() {
            const { jwk } = this;
            if ('k' in jwk && jwk.k !== undefined) return true;
            return false;
        }
        get privateJwk() {
            return this.isPrivate ? this.jwk : undefined;
        }
        get publicJwk() {
            if (this.isSymetric) return undefined;
            return jwkSchemaReadonly.parse({
                ...this.jwk,
                d: undefined,
                k: undefined
            });
        }
        get bareJwk() {
            if (this.isSymetric) return undefined;
            const { kty, crv, e, n, x, y } = this.jwk;
            return jwkSchemaReadonly.parse({
                crv,
                e,
                kty,
                n,
                x,
                y
            });
        }
        get use() {
            return this.jwk.use;
        }
        /**
             * The (forced) algorithm to use. If not provided, the key will be usable with
             * any of the algorithms in {@link algorithms}.
             *
             * @see {@link https://datatracker.ietf.org/doc/html/rfc7518#section-3.1 | "alg" (Algorithm) Header Parameter Values for JWS}
             */ get alg() {
            return this.jwk.alg;
        }
        get kid() {
            return this.jwk.kid;
        }
        get crv() {
            return this.jwk.crv;
        }
        /**
             * All the algorithms that this key can be used with. If `alg` is provided,
             * this set will only contain that algorithm.
             */ get algorithms() {
            return Object.freeze(Array.from((0, alg_js_1.jwkAlgorithms)(this.jwk)));
        }
    }, (()=>{
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
        _get_publicJwk_decorators = [
            util_js_1.cachedGetter
        ];
        _get_bareJwk_decorators = [
            util_js_1.cachedGetter
        ];
        _get_algorithms_decorators = [
            util_js_1.cachedGetter
        ];
        __esDecorate(_a, null, _get_publicJwk_decorators, {
            kind: "getter",
            name: "publicJwk",
            static: false,
            private: false,
            access: {
                has: (obj)=>"publicJwk" in obj,
                get: (obj)=>obj.publicJwk
            },
            metadata: _metadata
        }, null, _instanceExtraInitializers);
        __esDecorate(_a, null, _get_bareJwk_decorators, {
            kind: "getter",
            name: "bareJwk",
            static: false,
            private: false,
            access: {
                has: (obj)=>"bareJwk" in obj,
                get: (obj)=>obj.bareJwk
            },
            metadata: _metadata
        }, null, _instanceExtraInitializers);
        __esDecorate(_a, null, _get_algorithms_decorators, {
            kind: "getter",
            name: "algorithms",
            static: false,
            private: false,
            access: {
                has: (obj)=>"algorithms" in obj,
                get: (obj)=>obj.algorithms
            },
            metadata: _metadata
        }, null, _instanceExtraInitializers);
        if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _metadata
        });
    })(), _a;
})();
exports.Key = Key;

},{"5c57be7554124490":"lzFmg","3628d2a827b5fd29":"8VJsC","f724b362ca6b7dfe":"3blhu","f638f1accb4a0cfa":"c5xd7"}],"5q75y":[function(require,module,exports,__globalThis) {
"use strict";
var __runInitializers = this && this.__runInitializers || function(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    return useValue ? value : void 0;
};
var __esDecorate = this && this.__esDecorate || function(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
        if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
        return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for(var i = decorators.length - 1; i >= 0; i--){
        var context = {};
        for(var p in contextIn)context[p] = p === "access" ? {} : contextIn[p];
        for(var p in contextIn.access)context.access[p] = contextIn.access[p];
        context.addInitializer = function(f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(kind === "accessor" ? {
            get: descriptor.get,
            set: descriptor.set
        } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        } else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Keyset = void 0;
const errors_js_1 = require("d92912dcebe36f2d");
const jwt_decode_js_1 = require("7f01ccfbdeabd9f8");
const util_js_1 = require("d73b4f60fe78f363");
const extractPrivateJwk = (key)=>key.privateJwk;
const extractPublicJwk = (key)=>key.publicJwk;
let Keyset = (()=>{
    var _a;
    let _instanceExtraInitializers = [];
    let _get_signAlgorithms_decorators;
    let _get_publicJwks_decorators;
    let _get_privateJwks_decorators;
    return _a = class Keyset {
        constructor(iterable, /**
             * The preferred algorithms to use when signing a JWT using this keyset.
             *
             * @see {@link https://datatracker.ietf.org/doc/html/rfc7518#section-3.1}
             */ preferredSigningAlgorithms = iterable instanceof _a ? [
            ...iterable.preferredSigningAlgorithms
        ] : [
            // Prefer elliptic curve algorithms
            'EdDSA',
            'ES256K',
            'ES256',
            // https://datatracker.ietf.org/doc/html/rfc7518#section-3.5
            'PS256',
            'PS384',
            'PS512',
            'HS256',
            'HS384',
            'HS512'
        ]){
            Object.defineProperty(this, "preferredSigningAlgorithms", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: (__runInitializers(this, _instanceExtraInitializers), preferredSigningAlgorithms)
            });
            Object.defineProperty(this, "keys", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            const keys = [];
            const kids = new Set();
            for (const key of iterable){
                if (!key) continue;
                keys.push(key);
                if (key.kid) {
                    if (kids.has(key.kid)) throw new errors_js_1.JwkError(`Duplicate key: ${key.kid}`);
                    else kids.add(key.kid);
                }
            }
            this.keys = Object.freeze(keys);
        }
        get size() {
            return this.keys.length;
        }
        get signAlgorithms() {
            const algorithms = new Set();
            for (const key of this){
                if (key.use !== 'sig') continue;
                for (const alg of key.algorithms)algorithms.add(alg);
            }
            return Object.freeze([
                ...algorithms
            ].sort((0, util_js_1.preferredOrderCmp)(this.preferredSigningAlgorithms)));
        }
        get publicJwks() {
            return {
                keys: Array.from(this, extractPublicJwk).filter(util_js_1.isDefined)
            };
        }
        get privateJwks() {
            return {
                keys: Array.from(this, extractPrivateJwk).filter(util_js_1.isDefined)
            };
        }
        has(kid) {
            return this.keys.some((key)=>key.kid === kid);
        }
        get(search) {
            for (const key of this.list(search))return key;
            throw new errors_js_1.JwkError(`Key not found ${search.kid || search.alg || '<unknown>'}`, errors_js_1.ERR_JWK_NOT_FOUND);
        }
        *list(search) {
            // Optimization: Empty string or empty array will not match any key
            if (search.kid?.length === 0) return;
            if (search.alg?.length === 0) return;
            for (const key of this){
                if (search.use && key.use !== search.use) continue;
                if (Array.isArray(search.kid)) {
                    if (!key.kid || !search.kid.includes(key.kid)) continue;
                } else if (search.kid) {
                    if (key.kid !== search.kid) continue;
                }
                if (Array.isArray(search.alg)) {
                    if (!search.alg.some((a)=>key.algorithms.includes(a))) continue;
                } else if (typeof search.alg === 'string') {
                    if (!key.algorithms.includes(search.alg)) continue;
                }
                yield key;
            }
        }
        findKey({ kid, alg, use }) {
            const matchingKeys = [];
            for (const key of this.list({
                kid,
                alg,
                use
            })){
                // Not a signing key
                if (!key.isPrivate) continue;
                // Skip negotiation if a specific "alg" was provided
                if (typeof alg === 'string') return [
                    key,
                    alg
                ];
                matchingKeys.push(key);
            }
            const isAllowedAlg = (0, util_js_1.matchesAny)(alg);
            const candidates = matchingKeys.map((key)=>[
                    key,
                    key.algorithms.filter(isAllowedAlg)
                ]);
            // Return the first candidates that matches the preferred algorithms
            for (const prefAlg of this.preferredSigningAlgorithms)for (const [matchingKey, matchingAlgs] of candidates){
                if (matchingAlgs.includes(prefAlg)) return [
                    matchingKey,
                    prefAlg
                ];
            }
            // Return any candidate
            for (const [matchingKey, matchingAlgs] of candidates){
                for (const alg of matchingAlgs)return [
                    matchingKey,
                    alg
                ];
            }
            throw new errors_js_1.JwkError(`No signing key found for ${kid || alg || use || '<unknown>'}`, errors_js_1.ERR_JWK_NOT_FOUND);
        }
        [(_get_signAlgorithms_decorators = [
            util_js_1.cachedGetter
        ], _get_publicJwks_decorators = [
            util_js_1.cachedGetter
        ], _get_privateJwks_decorators = [
            util_js_1.cachedGetter
        ], Symbol.iterator)]() {
            return this.keys.values();
        }
        async createJwt({ alg: sAlg, kid: sKid, ...header }, payload) {
            try {
                const [key, alg] = this.findKey({
                    alg: sAlg,
                    kid: sKid,
                    use: 'sig'
                });
                const protectedHeader = {
                    ...header,
                    alg,
                    kid: key.kid
                };
                if (typeof payload === 'function') payload = await payload(protectedHeader, key);
                return await key.createJwt(protectedHeader, payload);
            } catch (err) {
                throw errors_js_1.JwtCreateError.from(err);
            }
        }
        async verifyJwt(token, options) {
            const { header } = (0, jwt_decode_js_1.unsafeDecodeJwt)(token);
            const { kid, alg } = header;
            const errors = [];
            for (const key of this.list({
                kid,
                alg
            }))try {
                const result = await key.verifyJwt(token, options);
                return {
                    ...result,
                    key
                };
            } catch (err) {
                errors.push(err);
            }
            switch(errors.length){
                case 0:
                    throw new errors_js_1.JwtVerifyError('No key matched', errors_js_1.ERR_JWKS_NO_MATCHING_KEY);
                case 1:
                    throw errors_js_1.JwtVerifyError.from(errors[0], errors_js_1.ERR_JWT_INVALID);
                default:
                    throw errors_js_1.JwtVerifyError.from(errors, errors_js_1.ERR_JWT_INVALID);
            }
        }
        toJSON() {
            // Make a copy to prevent mutation of the original keyset
            return structuredClone(this.publicJwks);
        }
    }, (()=>{
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
        __esDecorate(_a, null, _get_signAlgorithms_decorators, {
            kind: "getter",
            name: "signAlgorithms",
            static: false,
            private: false,
            access: {
                has: (obj)=>"signAlgorithms" in obj,
                get: (obj)=>obj.signAlgorithms
            },
            metadata: _metadata
        }, null, _instanceExtraInitializers);
        __esDecorate(_a, null, _get_publicJwks_decorators, {
            kind: "getter",
            name: "publicJwks",
            static: false,
            private: false,
            access: {
                has: (obj)=>"publicJwks" in obj,
                get: (obj)=>obj.publicJwks
            },
            metadata: _metadata
        }, null, _instanceExtraInitializers);
        __esDecorate(_a, null, _get_privateJwks_decorators, {
            kind: "getter",
            name: "privateJwks",
            static: false,
            private: false,
            access: {
                has: (obj)=>"privateJwks" in obj,
                get: (obj)=>obj.privateJwks
            },
            metadata: _metadata
        }, null, _instanceExtraInitializers);
        if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _metadata
        });
    })(), _a;
})();
exports.Keyset = Keyset;

},{"d92912dcebe36f2d":"8VJsC","7f01ccfbdeabd9f8":"kc69u","d73b4f60fe78f363":"c5xd7"}],"5x1pN":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(require("ad8461c15e8e4132"), exports);

},{"ad8461c15e8e4132":"b8oQG"}],"b8oQG":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.JoseKey = void 0;
const jose_1 = require("a9fba66f6aa8ab93");
const jwk_1 = require("116f7581a0e6b10c");
const util_1 = require("7ef7a1ede6a58f47");
const { JOSEError } = jose_1.errors;
class JoseKey extends jwk_1.Key {
    /**
     * Some runtimes (e.g. Bun) require an `alg` second argument to be set when
     * invoking `importJWK`. In order to be compatible with these runtimes, we
     * provide the following method to ensure the `alg` is always set. We also
     * take the opportunity to ensure that the `alg` is compatible with this key.
     */ async getKeyObj(alg) {
        if (!this.algorithms.includes(alg)) throw new jwk_1.JwkError(`Key cannot be used with algorithm "${alg}"`);
        try {
            return await (0, jose_1.importJWK)(this.jwk, alg);
        } catch (cause) {
            throw new jwk_1.JwkError('Failed to import JWK', undefined, {
                cause
            });
        }
    }
    async createJwt(header, payload) {
        try {
            const { kid } = header;
            if (kid && kid !== this.kid) throw new jwk_1.JwtCreateError(`Invalid "kid" (${kid}) used to sign with key "${this.kid}"`);
            const { alg } = header;
            if (!alg) throw new jwk_1.JwtCreateError('Missing "alg" in JWT header');
            const keyObj = await this.getKeyObj(alg);
            const jwtBuilder = new jose_1.SignJWT(payload).setProtectedHeader({
                ...header,
                alg,
                kid: this.kid
            });
            const signedJwt = await jwtBuilder.sign(keyObj);
            return signedJwt;
        } catch (cause) {
            if (cause instanceof JOSEError) throw new jwk_1.JwtCreateError(cause.message, cause.code, {
                cause
            });
            else throw jwk_1.JwtCreateError.from(cause);
        }
    }
    async verifyJwt(token, options) {
        try {
            const result = await (0, jose_1.jwtVerify)(token, async ({ alg })=>this.getKeyObj(alg), {
                ...options,
                algorithms: this.algorithms
            });
            // @NOTE if all tokens are signed exclusively through createJwt(), then
            // there should be no need to parse the payload and headers here. But
            // since the JWT could have been signed with the same key from somewhere
            // else, let's parse it to ensure the integrity (and type safety) of the
            // data.
            const headerParsed = jwk_1.jwtHeaderSchema.safeParse(result.protectedHeader);
            if (!headerParsed.success) throw new jwk_1.JwtVerifyError('Invalid JWT header', undefined, {
                cause: headerParsed.error
            });
            const payloadParsed = jwk_1.jwtPayloadSchema.safeParse(result.payload);
            if (!payloadParsed.success) throw new jwk_1.JwtVerifyError('Invalid JWT payload', undefined, {
                cause: payloadParsed.error
            });
            return {
                protectedHeader: headerParsed.data,
                // "requiredClaims" enforced by jwtVerify()
                payload: payloadParsed.data
            };
        } catch (cause) {
            if (cause instanceof JOSEError) throw new jwk_1.JwtVerifyError(cause.message, cause.code, {
                cause
            });
            else throw jwk_1.JwtVerifyError.from(cause);
        }
    }
    static async generateKeyPair(allowedAlgos = [
        'ES256'
    ], options) {
        if (!allowedAlgos.length) throw new jwk_1.JwkError('No algorithms provided for key generation');
        const errors = [];
        for (const alg of allowedAlgos)try {
            return await (0, jose_1.generateKeyPair)(alg, options);
        } catch (err) {
            errors.push(err);
        }
        throw new jwk_1.JwkError('Failed to generate key pair', undefined, {
            cause: new AggregateError(errors, 'None of the algorithms worked')
        });
    }
    static async generate(allowedAlgos = [
        'ES256'
    ], kid, options) {
        const kp = await this.generateKeyPair(allowedAlgos, {
            ...options,
            extractable: true
        });
        return this.fromImportable(kp.privateKey, kid);
    }
    static async fromImportable(input, kid) {
        if (typeof input === 'string') {
            // PKCS8
            if (input.startsWith('-----')) // The "alg" is only needed in WebCrypto (NodeJS will be fine)
            return this.fromPKCS8(input, '', kid);
            // Jwk (string)
            if (input.startsWith('{')) return this.fromJWK(input, kid);
            throw new jwk_1.JwkError('Invalid input');
        }
        if (typeof input === 'object') {
            // Jwk
            if ('kty' in input || 'alg' in input) return this.fromJWK(input, kid);
            // KeyLike
            return this.fromKeyLike(input, kid);
        }
        throw new jwk_1.JwkError('Invalid input');
    }
    /**
     * @see {@link exportJWK}
     */ static async fromKeyLike(keyLike, kid, alg) {
        const jwk = await (0, jose_1.exportJWK)(keyLike);
        if (alg) {
            if (!jwk.alg) jwk.alg = alg;
            else if (jwk.alg !== alg) throw new jwk_1.JwkError('Invalid "alg" in JWK');
        }
        return this.fromJWK(jwk, kid);
    }
    /**
     * @see {@link importPKCS8}
     */ static async fromPKCS8(pem, alg, kid) {
        const keyLike = await (0, jose_1.importPKCS8)(pem, alg, {
            extractable: true
        });
        return this.fromKeyLike(keyLike, kid);
    }
    static async fromJWK(input, inputKid) {
        const jwk = typeof input === 'string' ? JSON.parse(input) : input;
        if (!jwk || typeof jwk !== 'object') throw new jwk_1.JwkError('Invalid JWK');
        const kid = (0, util_1.either)(jwk.kid, inputKid);
        const use = jwk.use || 'sig';
        return new JoseKey(jwk_1.jwkValidator.parse({
            ...jwk,
            kid,
            use
        }));
    }
}
exports.JoseKey = JoseKey;

},{"a9fba66f6aa8ab93":"80NDr","116f7581a0e6b10c":"hmTh2","7ef7a1ede6a58f47":"aNmWK"}],"80NDr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compactDecrypt", ()=>(0, _decryptJs.compactDecrypt));
parcelHelpers.export(exports, "flattenedDecrypt", ()=>(0, _decryptJs1.flattenedDecrypt));
parcelHelpers.export(exports, "generalDecrypt", ()=>(0, _decryptJs2.generalDecrypt));
parcelHelpers.export(exports, "GeneralEncrypt", ()=>(0, _encryptJs.GeneralEncrypt));
parcelHelpers.export(exports, "compactVerify", ()=>(0, _verifyJs.compactVerify));
parcelHelpers.export(exports, "flattenedVerify", ()=>(0, _verifyJs1.flattenedVerify));
parcelHelpers.export(exports, "generalVerify", ()=>(0, _verifyJs2.generalVerify));
parcelHelpers.export(exports, "jwtVerify", ()=>(0, _verifyJs3.jwtVerify));
parcelHelpers.export(exports, "jwtDecrypt", ()=>(0, _decryptJs3.jwtDecrypt));
parcelHelpers.export(exports, "CompactEncrypt", ()=>(0, _encryptJs1.CompactEncrypt));
parcelHelpers.export(exports, "FlattenedEncrypt", ()=>(0, _encryptJs2.FlattenedEncrypt));
parcelHelpers.export(exports, "CompactSign", ()=>(0, _signJs.CompactSign));
parcelHelpers.export(exports, "FlattenedSign", ()=>(0, _signJs1.FlattenedSign));
parcelHelpers.export(exports, "GeneralSign", ()=>(0, _signJs2.GeneralSign));
parcelHelpers.export(exports, "SignJWT", ()=>(0, _signJs3.SignJWT));
parcelHelpers.export(exports, "EncryptJWT", ()=>(0, _encryptJs3.EncryptJWT));
parcelHelpers.export(exports, "calculateJwkThumbprint", ()=>(0, _thumbprintJs.calculateJwkThumbprint));
parcelHelpers.export(exports, "calculateJwkThumbprintUri", ()=>(0, _thumbprintJs.calculateJwkThumbprintUri));
parcelHelpers.export(exports, "EmbeddedJWK", ()=>(0, _embeddedJs.EmbeddedJWK));
parcelHelpers.export(exports, "createLocalJWKSet", ()=>(0, _localJs.createLocalJWKSet));
parcelHelpers.export(exports, "createRemoteJWKSet", ()=>(0, _remoteJs.createRemoteJWKSet));
parcelHelpers.export(exports, "jwksCache", ()=>(0, _remoteJs.jwksCache));
parcelHelpers.export(exports, "experimental_jwksCache", ()=>(0, _remoteJs.experimental_jwksCache));
parcelHelpers.export(exports, "UnsecuredJWT", ()=>(0, _unsecuredJs.UnsecuredJWT));
parcelHelpers.export(exports, "exportPKCS8", ()=>(0, _exportJs.exportPKCS8));
parcelHelpers.export(exports, "exportSPKI", ()=>(0, _exportJs.exportSPKI));
parcelHelpers.export(exports, "exportJWK", ()=>(0, _exportJs.exportJWK));
parcelHelpers.export(exports, "importSPKI", ()=>(0, _importJs.importSPKI));
parcelHelpers.export(exports, "importPKCS8", ()=>(0, _importJs.importPKCS8));
parcelHelpers.export(exports, "importX509", ()=>(0, _importJs.importX509));
parcelHelpers.export(exports, "importJWK", ()=>(0, _importJs.importJWK));
parcelHelpers.export(exports, "decodeProtectedHeader", ()=>(0, _decodeProtectedHeaderJs.decodeProtectedHeader));
parcelHelpers.export(exports, "decodeJwt", ()=>(0, _decodeJwtJs.decodeJwt));
parcelHelpers.export(exports, "errors", ()=>_errorsJs);
parcelHelpers.export(exports, "generateKeyPair", ()=>(0, _generateKeyPairJs.generateKeyPair));
parcelHelpers.export(exports, "generateSecret", ()=>(0, _generateSecretJs.generateSecret));
parcelHelpers.export(exports, "base64url", ()=>_base64UrlJs);
parcelHelpers.export(exports, "cryptoRuntime", ()=>(0, _runtimeJsDefault.default));
var _decryptJs = require("./jwe/compact/decrypt.js");
var _decryptJs1 = require("./jwe/flattened/decrypt.js");
var _decryptJs2 = require("./jwe/general/decrypt.js");
var _encryptJs = require("./jwe/general/encrypt.js");
var _verifyJs = require("./jws/compact/verify.js");
var _verifyJs1 = require("./jws/flattened/verify.js");
var _verifyJs2 = require("./jws/general/verify.js");
var _verifyJs3 = require("./jwt/verify.js");
var _decryptJs3 = require("./jwt/decrypt.js");
var _encryptJs1 = require("./jwe/compact/encrypt.js");
var _encryptJs2 = require("./jwe/flattened/encrypt.js");
var _signJs = require("./jws/compact/sign.js");
var _signJs1 = require("./jws/flattened/sign.js");
var _signJs2 = require("./jws/general/sign.js");
var _signJs3 = require("./jwt/sign.js");
var _encryptJs3 = require("./jwt/encrypt.js");
var _thumbprintJs = require("./jwk/thumbprint.js");
var _embeddedJs = require("./jwk/embedded.js");
var _localJs = require("./jwks/local.js");
var _remoteJs = require("./jwks/remote.js");
var _unsecuredJs = require("./jwt/unsecured.js");
var _exportJs = require("./key/export.js");
var _importJs = require("./key/import.js");
var _decodeProtectedHeaderJs = require("./util/decode_protected_header.js");
var _decodeJwtJs = require("./util/decode_jwt.js");
var _errorsJs = require("./util/errors.js");
var _generateKeyPairJs = require("./key/generate_key_pair.js");
var _generateSecretJs = require("./key/generate_secret.js");
var _base64UrlJs = require("./util/base64url.js");
var _runtimeJs = require("./util/runtime.js");
var _runtimeJsDefault = parcelHelpers.interopDefault(_runtimeJs);

},{"./jwe/compact/decrypt.js":"aRaar","./jwe/flattened/decrypt.js":"jGuls","./jwe/general/decrypt.js":"iYOzJ","./jwe/general/encrypt.js":"93WLj","./jws/compact/verify.js":"e1sJY","./jws/flattened/verify.js":"9kMwY","./jws/general/verify.js":"afsWj","./jwt/verify.js":"6mf3t","./jwt/decrypt.js":"zT60K","./jwe/compact/encrypt.js":"jV286","./jwe/flattened/encrypt.js":"46C8R","./jws/compact/sign.js":"h85r4","./jws/flattened/sign.js":"k3wVp","./jws/general/sign.js":"fdViL","./jwt/sign.js":"2xK9f","./jwt/encrypt.js":"jJPUI","./jwk/thumbprint.js":"1LCWm","./jwk/embedded.js":"8aDeU","./jwks/local.js":"jpAM0","./jwks/remote.js":"gnekA","./jwt/unsecured.js":"b7LxK","./key/export.js":"04SHK","./key/import.js":"gu3Vs","./util/decode_protected_header.js":"3o6CH","./util/decode_jwt.js":"jHDLT","./util/errors.js":"drZrx","./key/generate_key_pair.js":"9auQ1","./key/generate_secret.js":"glscP","./util/base64url.js":"414VB","./util/runtime.js":"fbS2R","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"aRaar":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compactDecrypt", ()=>compactDecrypt);
var _decryptJs = require("../flattened/decrypt.js");
var _errorsJs = require("../../util/errors.js");
var _bufferUtilsJs = require("../../lib/buffer_utils.js");
async function compactDecrypt(jwe, key, options) {
    if (jwe instanceof Uint8Array) jwe = (0, _bufferUtilsJs.decoder).decode(jwe);
    if (typeof jwe !== 'string') throw new (0, _errorsJs.JWEInvalid)('Compact JWE must be a string or Uint8Array');
    const { 0: protectedHeader, 1: encryptedKey, 2: iv, 3: ciphertext, 4: tag, length } = jwe.split('.');
    if (length !== 5) throw new (0, _errorsJs.JWEInvalid)('Invalid Compact JWE');
    const decrypted = await (0, _decryptJs.flattenedDecrypt)({
        ciphertext,
        iv: iv || undefined,
        protected: protectedHeader,
        tag: tag || undefined,
        encrypted_key: encryptedKey || undefined
    }, key, options);
    const result = {
        plaintext: decrypted.plaintext,
        protectedHeader: decrypted.protectedHeader
    };
    if (typeof key === 'function') return {
        ...result,
        key: decrypted.key
    };
    return result;
}

},{"../flattened/decrypt.js":"jGuls","../../util/errors.js":"drZrx","../../lib/buffer_utils.js":"6CiRi","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jGuls":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flattenedDecrypt", ()=>flattenedDecrypt);
var _base64UrlJs = require("../../runtime/base64url.js");
var _decryptJs = require("../../runtime/decrypt.js");
var _decryptJsDefault = parcelHelpers.interopDefault(_decryptJs);
var _errorsJs = require("../../util/errors.js");
var _isDisjointJs = require("../../lib/is_disjoint.js");
var _isDisjointJsDefault = parcelHelpers.interopDefault(_isDisjointJs);
var _isObjectJs = require("../../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _decryptKeyManagementJs = require("../../lib/decrypt_key_management.js");
var _decryptKeyManagementJsDefault = parcelHelpers.interopDefault(_decryptKeyManagementJs);
var _bufferUtilsJs = require("../../lib/buffer_utils.js");
var _cekJs = require("../../lib/cek.js");
var _cekJsDefault = parcelHelpers.interopDefault(_cekJs);
var _validateCritJs = require("../../lib/validate_crit.js");
var _validateCritJsDefault = parcelHelpers.interopDefault(_validateCritJs);
var _validateAlgorithmsJs = require("../../lib/validate_algorithms.js");
var _validateAlgorithmsJsDefault = parcelHelpers.interopDefault(_validateAlgorithmsJs);
async function flattenedDecrypt(jwe, key, options) {
    if (!(0, _isObjectJsDefault.default)(jwe)) throw new (0, _errorsJs.JWEInvalid)('Flattened JWE must be an object');
    if (jwe.protected === undefined && jwe.header === undefined && jwe.unprotected === undefined) throw new (0, _errorsJs.JWEInvalid)('JOSE Header missing');
    if (jwe.iv !== undefined && typeof jwe.iv !== 'string') throw new (0, _errorsJs.JWEInvalid)('JWE Initialization Vector incorrect type');
    if (typeof jwe.ciphertext !== 'string') throw new (0, _errorsJs.JWEInvalid)('JWE Ciphertext missing or incorrect type');
    if (jwe.tag !== undefined && typeof jwe.tag !== 'string') throw new (0, _errorsJs.JWEInvalid)('JWE Authentication Tag incorrect type');
    if (jwe.protected !== undefined && typeof jwe.protected !== 'string') throw new (0, _errorsJs.JWEInvalid)('JWE Protected Header incorrect type');
    if (jwe.encrypted_key !== undefined && typeof jwe.encrypted_key !== 'string') throw new (0, _errorsJs.JWEInvalid)('JWE Encrypted Key incorrect type');
    if (jwe.aad !== undefined && typeof jwe.aad !== 'string') throw new (0, _errorsJs.JWEInvalid)('JWE AAD incorrect type');
    if (jwe.header !== undefined && !(0, _isObjectJsDefault.default)(jwe.header)) throw new (0, _errorsJs.JWEInvalid)('JWE Shared Unprotected Header incorrect type');
    if (jwe.unprotected !== undefined && !(0, _isObjectJsDefault.default)(jwe.unprotected)) throw new (0, _errorsJs.JWEInvalid)('JWE Per-Recipient Unprotected Header incorrect type');
    let parsedProt;
    if (jwe.protected) try {
        const protectedHeader = (0, _base64UrlJs.decode)(jwe.protected);
        parsedProt = JSON.parse((0, _bufferUtilsJs.decoder).decode(protectedHeader));
    } catch  {
        throw new (0, _errorsJs.JWEInvalid)('JWE Protected Header is invalid');
    }
    if (!(0, _isDisjointJsDefault.default)(parsedProt, jwe.header, jwe.unprotected)) throw new (0, _errorsJs.JWEInvalid)('JWE Protected, JWE Unprotected Header, and JWE Per-Recipient Unprotected Header Parameter names must be disjoint');
    const joseHeader = {
        ...parsedProt,
        ...jwe.header,
        ...jwe.unprotected
    };
    (0, _validateCritJsDefault.default)((0, _errorsJs.JWEInvalid), new Map(), options?.crit, parsedProt, joseHeader);
    if (joseHeader.zip !== undefined) throw new (0, _errorsJs.JOSENotSupported)('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');
    const { alg, enc } = joseHeader;
    if (typeof alg !== 'string' || !alg) throw new (0, _errorsJs.JWEInvalid)('missing JWE Algorithm (alg) in JWE Header');
    if (typeof enc !== 'string' || !enc) throw new (0, _errorsJs.JWEInvalid)('missing JWE Encryption Algorithm (enc) in JWE Header');
    const keyManagementAlgorithms = options && (0, _validateAlgorithmsJsDefault.default)('keyManagementAlgorithms', options.keyManagementAlgorithms);
    const contentEncryptionAlgorithms = options && (0, _validateAlgorithmsJsDefault.default)('contentEncryptionAlgorithms', options.contentEncryptionAlgorithms);
    if (keyManagementAlgorithms && !keyManagementAlgorithms.has(alg) || !keyManagementAlgorithms && alg.startsWith('PBES2')) throw new (0, _errorsJs.JOSEAlgNotAllowed)('"alg" (Algorithm) Header Parameter value not allowed');
    if (contentEncryptionAlgorithms && !contentEncryptionAlgorithms.has(enc)) throw new (0, _errorsJs.JOSEAlgNotAllowed)('"enc" (Encryption Algorithm) Header Parameter value not allowed');
    let encryptedKey;
    if (jwe.encrypted_key !== undefined) try {
        encryptedKey = (0, _base64UrlJs.decode)(jwe.encrypted_key);
    } catch  {
        throw new (0, _errorsJs.JWEInvalid)('Failed to base64url decode the encrypted_key');
    }
    let resolvedKey = false;
    if (typeof key === 'function') {
        key = await key(parsedProt, jwe);
        resolvedKey = true;
    }
    let cek;
    try {
        cek = await (0, _decryptKeyManagementJsDefault.default)(alg, key, encryptedKey, joseHeader, options);
    } catch (err) {
        if (err instanceof TypeError || err instanceof (0, _errorsJs.JWEInvalid) || err instanceof (0, _errorsJs.JOSENotSupported)) throw err;
        cek = (0, _cekJsDefault.default)(enc);
    }
    let iv;
    let tag;
    if (jwe.iv !== undefined) try {
        iv = (0, _base64UrlJs.decode)(jwe.iv);
    } catch  {
        throw new (0, _errorsJs.JWEInvalid)('Failed to base64url decode the iv');
    }
    if (jwe.tag !== undefined) try {
        tag = (0, _base64UrlJs.decode)(jwe.tag);
    } catch  {
        throw new (0, _errorsJs.JWEInvalid)('Failed to base64url decode the tag');
    }
    const protectedHeader = (0, _bufferUtilsJs.encoder).encode(jwe.protected ?? '');
    let additionalData;
    if (jwe.aad !== undefined) additionalData = (0, _bufferUtilsJs.concat)(protectedHeader, (0, _bufferUtilsJs.encoder).encode('.'), (0, _bufferUtilsJs.encoder).encode(jwe.aad));
    else additionalData = protectedHeader;
    let ciphertext;
    try {
        ciphertext = (0, _base64UrlJs.decode)(jwe.ciphertext);
    } catch  {
        throw new (0, _errorsJs.JWEInvalid)('Failed to base64url decode the ciphertext');
    }
    const plaintext = await (0, _decryptJsDefault.default)(enc, cek, ciphertext, iv, tag, additionalData);
    const result = {
        plaintext
    };
    if (jwe.protected !== undefined) result.protectedHeader = parsedProt;
    if (jwe.aad !== undefined) try {
        result.additionalAuthenticatedData = (0, _base64UrlJs.decode)(jwe.aad);
    } catch  {
        throw new (0, _errorsJs.JWEInvalid)('Failed to base64url decode the aad');
    }
    if (jwe.unprotected !== undefined) result.sharedUnprotectedHeader = jwe.unprotected;
    if (jwe.header !== undefined) result.unprotectedHeader = jwe.header;
    if (resolvedKey) return {
        ...result,
        key
    };
    return result;
}

},{"../../runtime/base64url.js":"hmfX7","../../runtime/decrypt.js":"80xlZ","../../util/errors.js":"drZrx","../../lib/is_disjoint.js":"8SDOv","../../lib/is_object.js":"6AeNj","../../lib/decrypt_key_management.js":"lvL7L","../../lib/buffer_utils.js":"6CiRi","../../lib/cek.js":"3wQoI","../../lib/validate_crit.js":"czux9","../../lib/validate_algorithms.js":"5vOPm","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"hmfX7":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encodeBase64", ()=>encodeBase64);
parcelHelpers.export(exports, "encode", ()=>encode);
parcelHelpers.export(exports, "decodeBase64", ()=>decodeBase64);
parcelHelpers.export(exports, "decode", ()=>decode);
var _bufferUtilsJs = require("../lib/buffer_utils.js");
const encodeBase64 = (input)=>{
    let unencoded = input;
    if (typeof unencoded === 'string') unencoded = (0, _bufferUtilsJs.encoder).encode(unencoded);
    const CHUNK_SIZE = 0x8000;
    const arr = [];
    for(let i = 0; i < unencoded.length; i += CHUNK_SIZE)arr.push(String.fromCharCode.apply(null, unencoded.subarray(i, i + CHUNK_SIZE)));
    return btoa(arr.join(''));
};
const encode = (input)=>{
    return encodeBase64(input).replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
};
const decodeBase64 = (encoded)=>{
    const binary = atob(encoded);
    const bytes = new Uint8Array(binary.length);
    for(let i = 0; i < binary.length; i++)bytes[i] = binary.charCodeAt(i);
    return bytes;
};
const decode = (input)=>{
    let encoded = input;
    if (encoded instanceof Uint8Array) encoded = (0, _bufferUtilsJs.decoder).decode(encoded);
    encoded = encoded.replace(/-/g, '+').replace(/_/g, '/').replace(/\s/g, '');
    try {
        return decodeBase64(encoded);
    } catch  {
        throw new TypeError('The input to be decoded is not correctly encoded.');
    }
};

},{"../lib/buffer_utils.js":"6CiRi","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"6CiRi":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encoder", ()=>encoder);
parcelHelpers.export(exports, "decoder", ()=>decoder);
parcelHelpers.export(exports, "concat", ()=>concat);
parcelHelpers.export(exports, "p2s", ()=>p2s);
parcelHelpers.export(exports, "uint64be", ()=>uint64be);
parcelHelpers.export(exports, "uint32be", ()=>uint32be);
parcelHelpers.export(exports, "lengthAndInput", ()=>lengthAndInput);
parcelHelpers.export(exports, "concatKdf", ()=>concatKdf);
var _digestJs = require("../runtime/digest.js");
var _digestJsDefault = parcelHelpers.interopDefault(_digestJs);
const encoder = new TextEncoder();
const decoder = new TextDecoder();
const MAX_INT32 = 2 ** 32;
function concat(...buffers) {
    const size = buffers.reduce((acc, { length })=>acc + length, 0);
    const buf = new Uint8Array(size);
    let i = 0;
    for (const buffer of buffers){
        buf.set(buffer, i);
        i += buffer.length;
    }
    return buf;
}
function p2s(alg, p2sInput) {
    return concat(encoder.encode(alg), new Uint8Array([
        0
    ]), p2sInput);
}
function writeUInt32BE(buf, value, offset) {
    if (value < 0 || value >= MAX_INT32) throw new RangeError(`value must be >= 0 and <= ${MAX_INT32 - 1}. Received ${value}`);
    buf.set([
        value >>> 24,
        value >>> 16,
        value >>> 8,
        value & 0xff
    ], offset);
}
function uint64be(value) {
    const high = Math.floor(value / MAX_INT32);
    const low = value % MAX_INT32;
    const buf = new Uint8Array(8);
    writeUInt32BE(buf, high, 0);
    writeUInt32BE(buf, low, 4);
    return buf;
}
function uint32be(value) {
    const buf = new Uint8Array(4);
    writeUInt32BE(buf, value);
    return buf;
}
function lengthAndInput(input) {
    return concat(uint32be(input.length), input);
}
async function concatKdf(secret, bits, value) {
    const iterations = Math.ceil((bits >> 3) / 32);
    const res = new Uint8Array(iterations * 32);
    for(let iter = 0; iter < iterations; iter++){
        const buf = new Uint8Array(4 + secret.length + value.length);
        buf.set(uint32be(iter + 1));
        buf.set(secret, 4);
        buf.set(value, 4 + secret.length);
        res.set(await (0, _digestJsDefault.default)('sha256', buf), iter * 32);
    }
    return res.slice(0, bits >> 3);
}

},{"../runtime/digest.js":"fDsy9","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"fDsy9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
const digest = async (algorithm, data)=>{
    const subtleDigest = `SHA-${algorithm.slice(-3)}`;
    return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.digest(subtleDigest, data));
};
exports.default = digest;

},{"./webcrypto.js":"crCKY","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"crCKY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isCryptoKey", ()=>isCryptoKey);
exports.default = crypto;
const isCryptoKey = (key)=>key instanceof CryptoKey;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"80xlZ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _checkIvLengthJs = require("../lib/check_iv_length.js");
var _checkIvLengthJsDefault = parcelHelpers.interopDefault(_checkIvLengthJs);
var _checkCekLengthJs = require("./check_cek_length.js");
var _checkCekLengthJsDefault = parcelHelpers.interopDefault(_checkCekLengthJs);
var _timingSafeEqualJs = require("./timing_safe_equal.js");
var _timingSafeEqualJsDefault = parcelHelpers.interopDefault(_timingSafeEqualJs);
var _errorsJs = require("../util/errors.js");
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _cryptoKeyJs = require("../lib/crypto_key.js");
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _isKeyLikeJs = require("./is_key_like.js");
async function cbcDecrypt(enc, cek, ciphertext, iv, tag, aad) {
    if (!(cek instanceof Uint8Array)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(cek, 'Uint8Array'));
    const keySize = parseInt(enc.slice(1, 4), 10);
    const encKey = await (0, _webcryptoJsDefault.default).subtle.importKey('raw', cek.subarray(keySize >> 3), 'AES-CBC', false, [
        'decrypt'
    ]);
    const macKey = await (0, _webcryptoJsDefault.default).subtle.importKey('raw', cek.subarray(0, keySize >> 3), {
        hash: `SHA-${keySize << 1}`,
        name: 'HMAC'
    }, false, [
        'sign'
    ]);
    const macData = (0, _bufferUtilsJs.concat)(aad, iv, ciphertext, (0, _bufferUtilsJs.uint64be)(aad.length << 3));
    const expectedTag = new Uint8Array((await (0, _webcryptoJsDefault.default).subtle.sign('HMAC', macKey, macData)).slice(0, keySize >> 3));
    let macCheckPassed;
    try {
        macCheckPassed = (0, _timingSafeEqualJsDefault.default)(tag, expectedTag);
    } catch  {}
    if (!macCheckPassed) throw new (0, _errorsJs.JWEDecryptionFailed)();
    let plaintext;
    try {
        plaintext = new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.decrypt({
            iv,
            name: 'AES-CBC'
        }, encKey, ciphertext));
    } catch  {}
    if (!plaintext) throw new (0, _errorsJs.JWEDecryptionFailed)();
    return plaintext;
}
async function gcmDecrypt(enc, cek, ciphertext, iv, tag, aad) {
    let encKey;
    if (cek instanceof Uint8Array) encKey = await (0, _webcryptoJsDefault.default).subtle.importKey('raw', cek, 'AES-GCM', false, [
        'decrypt'
    ]);
    else {
        (0, _cryptoKeyJs.checkEncCryptoKey)(cek, enc, 'decrypt');
        encKey = cek;
    }
    try {
        return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.decrypt({
            additionalData: aad,
            iv,
            name: 'AES-GCM',
            tagLength: 128
        }, encKey, (0, _bufferUtilsJs.concat)(ciphertext, tag)));
    } catch  {
        throw new (0, _errorsJs.JWEDecryptionFailed)();
    }
}
const decrypt = async (enc, cek, ciphertext, iv, tag, aad)=>{
    if (!(0, _webcryptoJs.isCryptoKey)(cek) && !(cek instanceof Uint8Array)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(cek, ...(0, _isKeyLikeJs.types), 'Uint8Array'));
    if (!iv) throw new (0, _errorsJs.JWEInvalid)('JWE Initialization Vector missing');
    if (!tag) throw new (0, _errorsJs.JWEInvalid)('JWE Authentication Tag missing');
    (0, _checkIvLengthJsDefault.default)(enc, iv);
    switch(enc){
        case 'A128CBC-HS256':
        case 'A192CBC-HS384':
        case 'A256CBC-HS512':
            if (cek instanceof Uint8Array) (0, _checkCekLengthJsDefault.default)(cek, parseInt(enc.slice(-3), 10));
            return cbcDecrypt(enc, cek, ciphertext, iv, tag, aad);
        case 'A128GCM':
        case 'A192GCM':
        case 'A256GCM':
            if (cek instanceof Uint8Array) (0, _checkCekLengthJsDefault.default)(cek, parseInt(enc.slice(1, 4), 10));
            return gcmDecrypt(enc, cek, ciphertext, iv, tag, aad);
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Unsupported JWE Content Encryption Algorithm');
    }
};
exports.default = decrypt;

},{"../lib/buffer_utils.js":"6CiRi","../lib/check_iv_length.js":"dubN1","./check_cek_length.js":"gAO1L","./timing_safe_equal.js":"948rw","../util/errors.js":"drZrx","./webcrypto.js":"crCKY","../lib/crypto_key.js":"547bG","../lib/invalid_key_input.js":"hHcMf","./is_key_like.js":"aRx6e","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"dubN1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _errorsJs = require("../util/errors.js");
var _ivJs = require("./iv.js");
const checkIvLength = (enc, iv)=>{
    if (iv.length << 3 !== (0, _ivJs.bitLength)(enc)) throw new (0, _errorsJs.JWEInvalid)('Invalid Initialization Vector length');
};
exports.default = checkIvLength;

},{"../util/errors.js":"drZrx","./iv.js":"7ae98","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"drZrx":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "JOSEError", ()=>JOSEError);
parcelHelpers.export(exports, "JWTClaimValidationFailed", ()=>JWTClaimValidationFailed);
parcelHelpers.export(exports, "JWTExpired", ()=>JWTExpired);
parcelHelpers.export(exports, "JOSEAlgNotAllowed", ()=>JOSEAlgNotAllowed);
parcelHelpers.export(exports, "JOSENotSupported", ()=>JOSENotSupported);
parcelHelpers.export(exports, "JWEDecryptionFailed", ()=>JWEDecryptionFailed);
parcelHelpers.export(exports, "JWEInvalid", ()=>JWEInvalid);
parcelHelpers.export(exports, "JWSInvalid", ()=>JWSInvalid);
parcelHelpers.export(exports, "JWTInvalid", ()=>JWTInvalid);
parcelHelpers.export(exports, "JWKInvalid", ()=>JWKInvalid);
parcelHelpers.export(exports, "JWKSInvalid", ()=>JWKSInvalid);
parcelHelpers.export(exports, "JWKSNoMatchingKey", ()=>JWKSNoMatchingKey);
parcelHelpers.export(exports, "JWKSMultipleMatchingKeys", ()=>JWKSMultipleMatchingKeys);
parcelHelpers.export(exports, "JWKSTimeout", ()=>JWKSTimeout);
parcelHelpers.export(exports, "JWSSignatureVerificationFailed", ()=>JWSSignatureVerificationFailed);
class JOSEError extends Error {
    constructor(message, options){
        super(message, options);
        this.code = 'ERR_JOSE_GENERIC';
        this.name = this.constructor.name;
        Error.captureStackTrace?.(this, this.constructor);
    }
}
JOSEError.code = 'ERR_JOSE_GENERIC';
class JWTClaimValidationFailed extends JOSEError {
    constructor(message, payload, claim = 'unspecified', reason = 'unspecified'){
        super(message, {
            cause: {
                claim,
                reason,
                payload
            }
        });
        this.code = 'ERR_JWT_CLAIM_VALIDATION_FAILED';
        this.claim = claim;
        this.reason = reason;
        this.payload = payload;
    }
}
JWTClaimValidationFailed.code = 'ERR_JWT_CLAIM_VALIDATION_FAILED';
class JWTExpired extends JOSEError {
    constructor(message, payload, claim = 'unspecified', reason = 'unspecified'){
        super(message, {
            cause: {
                claim,
                reason,
                payload
            }
        });
        this.code = 'ERR_JWT_EXPIRED';
        this.claim = claim;
        this.reason = reason;
        this.payload = payload;
    }
}
JWTExpired.code = 'ERR_JWT_EXPIRED';
class JOSEAlgNotAllowed extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = 'ERR_JOSE_ALG_NOT_ALLOWED';
    }
}
JOSEAlgNotAllowed.code = 'ERR_JOSE_ALG_NOT_ALLOWED';
class JOSENotSupported extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = 'ERR_JOSE_NOT_SUPPORTED';
    }
}
JOSENotSupported.code = 'ERR_JOSE_NOT_SUPPORTED';
class JWEDecryptionFailed extends JOSEError {
    constructor(message = 'decryption operation failed', options){
        super(message, options);
        this.code = 'ERR_JWE_DECRYPTION_FAILED';
    }
}
JWEDecryptionFailed.code = 'ERR_JWE_DECRYPTION_FAILED';
class JWEInvalid extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = 'ERR_JWE_INVALID';
    }
}
JWEInvalid.code = 'ERR_JWE_INVALID';
class JWSInvalid extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = 'ERR_JWS_INVALID';
    }
}
JWSInvalid.code = 'ERR_JWS_INVALID';
class JWTInvalid extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = 'ERR_JWT_INVALID';
    }
}
JWTInvalid.code = 'ERR_JWT_INVALID';
class JWKInvalid extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = 'ERR_JWK_INVALID';
    }
}
JWKInvalid.code = 'ERR_JWK_INVALID';
class JWKSInvalid extends JOSEError {
    constructor(){
        super(...arguments);
        this.code = 'ERR_JWKS_INVALID';
    }
}
JWKSInvalid.code = 'ERR_JWKS_INVALID';
class JWKSNoMatchingKey extends JOSEError {
    constructor(message = 'no applicable key found in the JSON Web Key Set', options){
        super(message, options);
        this.code = 'ERR_JWKS_NO_MATCHING_KEY';
    }
}
JWKSNoMatchingKey.code = 'ERR_JWKS_NO_MATCHING_KEY';
class JWKSMultipleMatchingKeys extends JOSEError {
    constructor(message = 'multiple matching keys found in the JSON Web Key Set', options){
        super(message, options);
        this.code = 'ERR_JWKS_MULTIPLE_MATCHING_KEYS';
    }
}
Symbol.asyncIterator;
JWKSMultipleMatchingKeys.code = 'ERR_JWKS_MULTIPLE_MATCHING_KEYS';
class JWKSTimeout extends JOSEError {
    constructor(message = 'request timed out', options){
        super(message, options);
        this.code = 'ERR_JWKS_TIMEOUT';
    }
}
JWKSTimeout.code = 'ERR_JWKS_TIMEOUT';
class JWSSignatureVerificationFailed extends JOSEError {
    constructor(message = 'signature verification failed', options){
        super(message, options);
        this.code = 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';
    }
}
JWSSignatureVerificationFailed.code = 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"7ae98":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bitLength", ()=>bitLength);
var _errorsJs = require("../util/errors.js");
var _randomJs = require("../runtime/random.js");
var _randomJsDefault = parcelHelpers.interopDefault(_randomJs);
function bitLength(alg) {
    switch(alg){
        case 'A128GCM':
        case 'A128GCMKW':
        case 'A192GCM':
        case 'A192GCMKW':
        case 'A256GCM':
        case 'A256GCMKW':
            return 96;
        case 'A128CBC-HS256':
        case 'A192CBC-HS384':
        case 'A256CBC-HS512':
            return 128;
        default:
            throw new (0, _errorsJs.JOSENotSupported)(`Unsupported JWE Algorithm: ${alg}`);
    }
}
exports.default = (alg)=>(0, _randomJsDefault.default)(new Uint8Array(bitLength(alg) >> 3));

},{"../util/errors.js":"drZrx","../runtime/random.js":"2Msed","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"2Msed":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
exports.default = (0, _webcryptoJsDefault.default).getRandomValues.bind((0, _webcryptoJsDefault.default));

},{"./webcrypto.js":"crCKY","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"gAO1L":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _errorsJs = require("../util/errors.js");
const checkCekLength = (cek, expected)=>{
    const actual = cek.byteLength << 3;
    if (actual !== expected) throw new (0, _errorsJs.JWEInvalid)(`Invalid Content Encryption Key length. Expected ${expected} bits, got ${actual} bits`);
};
exports.default = checkCekLength;

},{"../util/errors.js":"drZrx","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"948rw":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const timingSafeEqual = (a, b)=>{
    if (!(a instanceof Uint8Array)) throw new TypeError('First argument must be a buffer');
    if (!(b instanceof Uint8Array)) throw new TypeError('Second argument must be a buffer');
    if (a.length !== b.length) throw new TypeError('Input buffers must have the same length');
    const len = a.length;
    let out = 0;
    let i = -1;
    while(++i < len)out |= a[i] ^ b[i];
    return out === 0;
};
exports.default = timingSafeEqual;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"547bG":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkSigCryptoKey", ()=>checkSigCryptoKey);
parcelHelpers.export(exports, "checkEncCryptoKey", ()=>checkEncCryptoKey);
function unusable(name, prop = 'algorithm.name') {
    return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);
}
function isAlgorithm(algorithm, name) {
    return algorithm.name === name;
}
function getHashLength(hash) {
    return parseInt(hash.name.slice(4), 10);
}
function getNamedCurve(alg) {
    switch(alg){
        case 'ES256':
            return 'P-256';
        case 'ES384':
            return 'P-384';
        case 'ES512':
            return 'P-521';
        default:
            throw new Error('unreachable');
    }
}
function checkUsage(key, usages) {
    if (usages.length && !usages.some((expected)=>key.usages.includes(expected))) {
        let msg = 'CryptoKey does not support this operation, its usages must include ';
        if (usages.length > 2) {
            const last = usages.pop();
            msg += `one of ${usages.join(', ')}, or ${last}.`;
        } else if (usages.length === 2) msg += `one of ${usages[0]} or ${usages[1]}.`;
        else msg += `${usages[0]}.`;
        throw new TypeError(msg);
    }
}
function checkSigCryptoKey(key, alg, ...usages) {
    switch(alg){
        case 'HS256':
        case 'HS384':
        case 'HS512':
            {
                if (!isAlgorithm(key.algorithm, 'HMAC')) throw unusable('HMAC');
                const expected = parseInt(alg.slice(2), 10);
                const actual = getHashLength(key.algorithm.hash);
                if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');
                break;
            }
        case 'RS256':
        case 'RS384':
        case 'RS512':
            {
                if (!isAlgorithm(key.algorithm, 'RSASSA-PKCS1-v1_5')) throw unusable('RSASSA-PKCS1-v1_5');
                const expected = parseInt(alg.slice(2), 10);
                const actual = getHashLength(key.algorithm.hash);
                if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');
                break;
            }
        case 'PS256':
        case 'PS384':
        case 'PS512':
            {
                if (!isAlgorithm(key.algorithm, 'RSA-PSS')) throw unusable('RSA-PSS');
                const expected = parseInt(alg.slice(2), 10);
                const actual = getHashLength(key.algorithm.hash);
                if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');
                break;
            }
        case 'EdDSA':
            if (key.algorithm.name !== 'Ed25519' && key.algorithm.name !== 'Ed448') throw unusable('Ed25519 or Ed448');
            break;
        case 'Ed25519':
            if (!isAlgorithm(key.algorithm, 'Ed25519')) throw unusable('Ed25519');
            break;
        case 'ES256':
        case 'ES384':
        case 'ES512':
            {
                if (!isAlgorithm(key.algorithm, 'ECDSA')) throw unusable('ECDSA');
                const expected = getNamedCurve(alg);
                const actual = key.algorithm.namedCurve;
                if (actual !== expected) throw unusable(expected, 'algorithm.namedCurve');
                break;
            }
        default:
            throw new TypeError('CryptoKey does not support this operation');
    }
    checkUsage(key, usages);
}
function checkEncCryptoKey(key, alg, ...usages) {
    switch(alg){
        case 'A128GCM':
        case 'A192GCM':
        case 'A256GCM':
            {
                if (!isAlgorithm(key.algorithm, 'AES-GCM')) throw unusable('AES-GCM');
                const expected = parseInt(alg.slice(1, 4), 10);
                const actual = key.algorithm.length;
                if (actual !== expected) throw unusable(expected, 'algorithm.length');
                break;
            }
        case 'A128KW':
        case 'A192KW':
        case 'A256KW':
            {
                if (!isAlgorithm(key.algorithm, 'AES-KW')) throw unusable('AES-KW');
                const expected = parseInt(alg.slice(1, 4), 10);
                const actual = key.algorithm.length;
                if (actual !== expected) throw unusable(expected, 'algorithm.length');
                break;
            }
        case 'ECDH':
            switch(key.algorithm.name){
                case 'ECDH':
                case 'X25519':
                case 'X448':
                    break;
                default:
                    throw unusable('ECDH, X25519, or X448');
            }
            break;
        case 'PBES2-HS256+A128KW':
        case 'PBES2-HS384+A192KW':
        case 'PBES2-HS512+A256KW':
            if (!isAlgorithm(key.algorithm, 'PBKDF2')) throw unusable('PBKDF2');
            break;
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512':
            {
                if (!isAlgorithm(key.algorithm, 'RSA-OAEP')) throw unusable('RSA-OAEP');
                const expected = parseInt(alg.slice(9), 10) || 1;
                const actual = getHashLength(key.algorithm.hash);
                if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');
                break;
            }
        default:
            throw new TypeError('CryptoKey does not support this operation');
    }
    checkUsage(key, usages);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"hHcMf":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "withAlg", ()=>withAlg);
function message(msg, actual, ...types) {
    types = types.filter(Boolean);
    if (types.length > 2) {
        const last = types.pop();
        msg += `one of type ${types.join(', ')}, or ${last}.`;
    } else if (types.length === 2) msg += `one of type ${types[0]} or ${types[1]}.`;
    else msg += `of type ${types[0]}.`;
    if (actual == null) msg += ` Received ${actual}`;
    else if (typeof actual === 'function' && actual.name) msg += ` Received function ${actual.name}`;
    else if (typeof actual === 'object' && actual != null) {
        if (actual.constructor?.name) msg += ` Received an instance of ${actual.constructor.name}`;
    }
    return msg;
}
exports.default = (actual, ...types)=>{
    return message('Key must be ', actual, ...types);
};
function withAlg(alg, actual, ...types) {
    return message(`Key for the ${alg} algorithm must be `, actual, ...types);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"aRx6e":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "types", ()=>types);
var _webcryptoJs = require("./webcrypto.js");
exports.default = (key)=>{
    if ((0, _webcryptoJs.isCryptoKey)(key)) return true;
    return key?.[Symbol.toStringTag] === 'KeyObject';
};
const types = [
    'CryptoKey'
];

},{"./webcrypto.js":"crCKY","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"8SDOv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const isDisjoint = (...headers)=>{
    const sources = headers.filter(Boolean);
    if (sources.length === 0 || sources.length === 1) return true;
    let acc;
    for (const header of sources){
        const parameters = Object.keys(header);
        if (!acc || acc.size === 0) {
            acc = new Set(parameters);
            continue;
        }
        for (const parameter of parameters){
            if (acc.has(parameter)) return false;
            acc.add(parameter);
        }
    }
    return true;
};
exports.default = isDisjoint;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"6AeNj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isObject);
function isObjectLike(value) {
    return typeof value === 'object' && value !== null;
}
function isObject(input) {
    if (!isObjectLike(input) || Object.prototype.toString.call(input) !== '[object Object]') return false;
    if (Object.getPrototypeOf(input) === null) return true;
    let proto = input;
    while(Object.getPrototypeOf(proto) !== null)proto = Object.getPrototypeOf(proto);
    return Object.getPrototypeOf(input) === proto;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"lvL7L":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _aeskwJs = require("../runtime/aeskw.js");
var _ecdhesJs = require("../runtime/ecdhes.js");
var _pbes2KwJs = require("../runtime/pbes2kw.js");
var _rsaesJs = require("../runtime/rsaes.js");
var _base64UrlJs = require("../runtime/base64url.js");
var _normalizeKeyJs = require("../runtime/normalize_key.js");
var _normalizeKeyJsDefault = parcelHelpers.interopDefault(_normalizeKeyJs);
var _errorsJs = require("../util/errors.js");
var _cekJs = require("../lib/cek.js");
var _importJs = require("../key/import.js");
var _checkKeyTypeJs = require("./check_key_type.js");
var _checkKeyTypeJsDefault = parcelHelpers.interopDefault(_checkKeyTypeJs);
var _isObjectJs = require("./is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _aesgcmkwJs = require("./aesgcmkw.js");
async function decryptKeyManagement(alg, key, encryptedKey, joseHeader, options) {
    (0, _checkKeyTypeJsDefault.default)(alg, key, 'decrypt');
    key = await (0, _normalizeKeyJsDefault.default).normalizePrivateKey?.(key, alg) || key;
    switch(alg){
        case 'dir':
            if (encryptedKey !== undefined) throw new (0, _errorsJs.JWEInvalid)('Encountered unexpected JWE Encrypted Key');
            return key;
        case 'ECDH-ES':
            if (encryptedKey !== undefined) throw new (0, _errorsJs.JWEInvalid)('Encountered unexpected JWE Encrypted Key');
        case 'ECDH-ES+A128KW':
        case 'ECDH-ES+A192KW':
        case 'ECDH-ES+A256KW':
            {
                if (!(0, _isObjectJsDefault.default)(joseHeader.epk)) throw new (0, _errorsJs.JWEInvalid)(`JOSE Header "epk" (Ephemeral Public Key) missing or invalid`);
                if (!_ecdhesJs.ecdhAllowed(key)) throw new (0, _errorsJs.JOSENotSupported)('ECDH with the provided key is not allowed or not supported by your javascript runtime');
                const epk = await (0, _importJs.importJWK)(joseHeader.epk, alg);
                let partyUInfo;
                let partyVInfo;
                if (joseHeader.apu !== undefined) {
                    if (typeof joseHeader.apu !== 'string') throw new (0, _errorsJs.JWEInvalid)(`JOSE Header "apu" (Agreement PartyUInfo) invalid`);
                    try {
                        partyUInfo = (0, _base64UrlJs.decode)(joseHeader.apu);
                    } catch  {
                        throw new (0, _errorsJs.JWEInvalid)('Failed to base64url decode the apu');
                    }
                }
                if (joseHeader.apv !== undefined) {
                    if (typeof joseHeader.apv !== 'string') throw new (0, _errorsJs.JWEInvalid)(`JOSE Header "apv" (Agreement PartyVInfo) invalid`);
                    try {
                        partyVInfo = (0, _base64UrlJs.decode)(joseHeader.apv);
                    } catch  {
                        throw new (0, _errorsJs.JWEInvalid)('Failed to base64url decode the apv');
                    }
                }
                const sharedSecret = await _ecdhesJs.deriveKey(epk, key, alg === 'ECDH-ES' ? joseHeader.enc : alg, alg === 'ECDH-ES' ? (0, _cekJs.bitLength)(joseHeader.enc) : parseInt(alg.slice(-5, -2), 10), partyUInfo, partyVInfo);
                if (alg === 'ECDH-ES') return sharedSecret;
                if (encryptedKey === undefined) throw new (0, _errorsJs.JWEInvalid)('JWE Encrypted Key missing');
                return (0, _aeskwJs.unwrap)(alg.slice(-6), sharedSecret, encryptedKey);
            }
        case 'RSA1_5':
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512':
            if (encryptedKey === undefined) throw new (0, _errorsJs.JWEInvalid)('JWE Encrypted Key missing');
            return (0, _rsaesJs.decrypt)(alg, key, encryptedKey);
        case 'PBES2-HS256+A128KW':
        case 'PBES2-HS384+A192KW':
        case 'PBES2-HS512+A256KW':
            {
                if (encryptedKey === undefined) throw new (0, _errorsJs.JWEInvalid)('JWE Encrypted Key missing');
                if (typeof joseHeader.p2c !== 'number') throw new (0, _errorsJs.JWEInvalid)(`JOSE Header "p2c" (PBES2 Count) missing or invalid`);
                const p2cLimit = options?.maxPBES2Count || 10000;
                if (joseHeader.p2c > p2cLimit) throw new (0, _errorsJs.JWEInvalid)(`JOSE Header "p2c" (PBES2 Count) out is of acceptable bounds`);
                if (typeof joseHeader.p2s !== 'string') throw new (0, _errorsJs.JWEInvalid)(`JOSE Header "p2s" (PBES2 Salt) missing or invalid`);
                let p2s;
                try {
                    p2s = (0, _base64UrlJs.decode)(joseHeader.p2s);
                } catch  {
                    throw new (0, _errorsJs.JWEInvalid)('Failed to base64url decode the p2s');
                }
                return (0, _pbes2KwJs.decrypt)(alg, key, encryptedKey, joseHeader.p2c, p2s);
            }
        case 'A128KW':
        case 'A192KW':
        case 'A256KW':
            if (encryptedKey === undefined) throw new (0, _errorsJs.JWEInvalid)('JWE Encrypted Key missing');
            return (0, _aeskwJs.unwrap)(alg, key, encryptedKey);
        case 'A128GCMKW':
        case 'A192GCMKW':
        case 'A256GCMKW':
            {
                if (encryptedKey === undefined) throw new (0, _errorsJs.JWEInvalid)('JWE Encrypted Key missing');
                if (typeof joseHeader.iv !== 'string') throw new (0, _errorsJs.JWEInvalid)(`JOSE Header "iv" (Initialization Vector) missing or invalid`);
                if (typeof joseHeader.tag !== 'string') throw new (0, _errorsJs.JWEInvalid)(`JOSE Header "tag" (Authentication Tag) missing or invalid`);
                let iv;
                try {
                    iv = (0, _base64UrlJs.decode)(joseHeader.iv);
                } catch  {
                    throw new (0, _errorsJs.JWEInvalid)('Failed to base64url decode the iv');
                }
                let tag;
                try {
                    tag = (0, _base64UrlJs.decode)(joseHeader.tag);
                } catch  {
                    throw new (0, _errorsJs.JWEInvalid)('Failed to base64url decode the tag');
                }
                return (0, _aesgcmkwJs.unwrap)(alg, key, encryptedKey, iv, tag);
            }
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported "alg" (JWE Algorithm) header value');
    }
}
exports.default = decryptKeyManagement;

},{"../runtime/aeskw.js":"iEW9A","../runtime/ecdhes.js":"9Kf4C","../runtime/pbes2kw.js":"2SPYY","../runtime/rsaes.js":"d5vYq","../runtime/base64url.js":"hmfX7","../runtime/normalize_key.js":"7DsFX","../util/errors.js":"drZrx","../lib/cek.js":"3wQoI","../key/import.js":"gu3Vs","./check_key_type.js":"kziQH","./is_object.js":"6AeNj","./aesgcmkw.js":"jiF4B","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"iEW9A":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "wrap", ()=>wrap);
parcelHelpers.export(exports, "unwrap", ()=>unwrap);
var _bogusJs = require("./bogus.js");
var _bogusJsDefault = parcelHelpers.interopDefault(_bogusJs);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _cryptoKeyJs = require("../lib/crypto_key.js");
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _isKeyLikeJs = require("./is_key_like.js");
function checkKeySize(key, alg) {
    if (key.algorithm.length !== parseInt(alg.slice(1, 4), 10)) throw new TypeError(`Invalid key size for alg: ${alg}`);
}
function getCryptoKey(key, alg, usage) {
    if ((0, _webcryptoJs.isCryptoKey)(key)) {
        (0, _cryptoKeyJs.checkEncCryptoKey)(key, alg, usage);
        return key;
    }
    if (key instanceof Uint8Array) return (0, _webcryptoJsDefault.default).subtle.importKey('raw', key, 'AES-KW', true, [
        usage
    ]);
    throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types), 'Uint8Array'));
}
const wrap = async (alg, key, cek)=>{
    const cryptoKey = await getCryptoKey(key, alg, 'wrapKey');
    checkKeySize(cryptoKey, alg);
    const cryptoKeyCek = await (0, _webcryptoJsDefault.default).subtle.importKey('raw', cek, ...(0, _bogusJsDefault.default));
    return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.wrapKey('raw', cryptoKeyCek, cryptoKey, 'AES-KW'));
};
const unwrap = async (alg, key, encryptedKey)=>{
    const cryptoKey = await getCryptoKey(key, alg, 'unwrapKey');
    checkKeySize(cryptoKey, alg);
    const cryptoKeyCek = await (0, _webcryptoJsDefault.default).subtle.unwrapKey('raw', encryptedKey, cryptoKey, 'AES-KW', ...(0, _bogusJsDefault.default));
    return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.exportKey('raw', cryptoKeyCek));
};

},{"./bogus.js":"ftBoP","./webcrypto.js":"crCKY","../lib/crypto_key.js":"547bG","../lib/invalid_key_input.js":"hHcMf","./is_key_like.js":"aRx6e","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"ftBoP":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const bogusWebCrypto = [
    {
        hash: 'SHA-256',
        name: 'HMAC'
    },
    true,
    [
        'sign'
    ]
];
exports.default = bogusWebCrypto;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"9Kf4C":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deriveKey", ()=>deriveKey);
parcelHelpers.export(exports, "generateEpk", ()=>generateEpk);
parcelHelpers.export(exports, "ecdhAllowed", ()=>ecdhAllowed);
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _cryptoKeyJs = require("../lib/crypto_key.js");
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _isKeyLikeJs = require("./is_key_like.js");
async function deriveKey(publicKey, privateKey, algorithm, keyLength, apu = new Uint8Array(0), apv = new Uint8Array(0)) {
    if (!(0, _webcryptoJs.isCryptoKey)(publicKey)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(publicKey, ...(0, _isKeyLikeJs.types)));
    (0, _cryptoKeyJs.checkEncCryptoKey)(publicKey, 'ECDH');
    if (!(0, _webcryptoJs.isCryptoKey)(privateKey)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(privateKey, ...(0, _isKeyLikeJs.types)));
    (0, _cryptoKeyJs.checkEncCryptoKey)(privateKey, 'ECDH', 'deriveBits');
    const value = (0, _bufferUtilsJs.concat)((0, _bufferUtilsJs.lengthAndInput)((0, _bufferUtilsJs.encoder).encode(algorithm)), (0, _bufferUtilsJs.lengthAndInput)(apu), (0, _bufferUtilsJs.lengthAndInput)(apv), (0, _bufferUtilsJs.uint32be)(keyLength));
    let length;
    if (publicKey.algorithm.name === 'X25519') length = 256;
    else if (publicKey.algorithm.name === 'X448') length = 448;
    else length = Math.ceil(parseInt(publicKey.algorithm.namedCurve.substr(-3), 10) / 8) << 3;
    const sharedSecret = new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.deriveBits({
        name: publicKey.algorithm.name,
        public: publicKey
    }, privateKey, length));
    return (0, _bufferUtilsJs.concatKdf)(sharedSecret, keyLength, value);
}
async function generateEpk(key) {
    if (!(0, _webcryptoJs.isCryptoKey)(key)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types)));
    return (0, _webcryptoJsDefault.default).subtle.generateKey(key.algorithm, true, [
        'deriveBits'
    ]);
}
function ecdhAllowed(key) {
    if (!(0, _webcryptoJs.isCryptoKey)(key)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types)));
    return [
        'P-256',
        'P-384',
        'P-521'
    ].includes(key.algorithm.namedCurve) || key.algorithm.name === 'X25519' || key.algorithm.name === 'X448';
}

},{"../lib/buffer_utils.js":"6CiRi","./webcrypto.js":"crCKY","../lib/crypto_key.js":"547bG","../lib/invalid_key_input.js":"hHcMf","./is_key_like.js":"aRx6e","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"2SPYY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encrypt", ()=>encrypt);
parcelHelpers.export(exports, "decrypt", ()=>decrypt);
var _randomJs = require("./random.js");
var _randomJsDefault = parcelHelpers.interopDefault(_randomJs);
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _base64UrlJs = require("./base64url.js");
var _aeskwJs = require("./aeskw.js");
var _checkP2SJs = require("../lib/check_p2s.js");
var _checkP2SJsDefault = parcelHelpers.interopDefault(_checkP2SJs);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _cryptoKeyJs = require("../lib/crypto_key.js");
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _isKeyLikeJs = require("./is_key_like.js");
function getCryptoKey(key, alg) {
    if (key instanceof Uint8Array) return (0, _webcryptoJsDefault.default).subtle.importKey('raw', key, 'PBKDF2', false, [
        'deriveBits'
    ]);
    if ((0, _webcryptoJs.isCryptoKey)(key)) {
        (0, _cryptoKeyJs.checkEncCryptoKey)(key, alg, 'deriveBits', 'deriveKey');
        return key;
    }
    throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types), 'Uint8Array'));
}
async function deriveKey(p2s, alg, p2c, key) {
    (0, _checkP2SJsDefault.default)(p2s);
    const salt = (0, _bufferUtilsJs.p2s)(alg, p2s);
    const keylen = parseInt(alg.slice(13, 16), 10);
    const subtleAlg = {
        hash: `SHA-${alg.slice(8, 11)}`,
        iterations: p2c,
        name: 'PBKDF2',
        salt
    };
    const wrapAlg = {
        length: keylen,
        name: 'AES-KW'
    };
    const cryptoKey = await getCryptoKey(key, alg);
    if (cryptoKey.usages.includes('deriveBits')) return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.deriveBits(subtleAlg, cryptoKey, keylen));
    if (cryptoKey.usages.includes('deriveKey')) return (0, _webcryptoJsDefault.default).subtle.deriveKey(subtleAlg, cryptoKey, wrapAlg, false, [
        'wrapKey',
        'unwrapKey'
    ]);
    throw new TypeError('PBKDF2 key "usages" must include "deriveBits" or "deriveKey"');
}
const encrypt = async (alg, key, cek, p2c = 2048, p2s = (0, _randomJsDefault.default)(new Uint8Array(16)))=>{
    const derived = await deriveKey(p2s, alg, p2c, key);
    const encryptedKey = await (0, _aeskwJs.wrap)(alg.slice(-6), derived, cek);
    return {
        encryptedKey,
        p2c,
        p2s: (0, _base64UrlJs.encode)(p2s)
    };
};
const decrypt = async (alg, key, encryptedKey, p2c, p2s)=>{
    const derived = await deriveKey(p2s, alg, p2c, key);
    return (0, _aeskwJs.unwrap)(alg.slice(-6), derived, encryptedKey);
};

},{"./random.js":"2Msed","../lib/buffer_utils.js":"6CiRi","./base64url.js":"hmfX7","./aeskw.js":"iEW9A","../lib/check_p2s.js":"jkgIv","./webcrypto.js":"crCKY","../lib/crypto_key.js":"547bG","../lib/invalid_key_input.js":"hHcMf","./is_key_like.js":"aRx6e","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jkgIv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>checkP2s);
var _errorsJs = require("../util/errors.js");
function checkP2s(p2s) {
    if (!(p2s instanceof Uint8Array) || p2s.length < 8) throw new (0, _errorsJs.JWEInvalid)('PBES2 Salt Input must be 8 or more octets');
}

},{"../util/errors.js":"drZrx","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"d5vYq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encrypt", ()=>encrypt);
parcelHelpers.export(exports, "decrypt", ()=>decrypt);
var _subtleRsaesJs = require("./subtle_rsaes.js");
var _subtleRsaesJsDefault = parcelHelpers.interopDefault(_subtleRsaesJs);
var _bogusJs = require("./bogus.js");
var _bogusJsDefault = parcelHelpers.interopDefault(_bogusJs);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _cryptoKeyJs = require("../lib/crypto_key.js");
var _checkKeyLengthJs = require("./check_key_length.js");
var _checkKeyLengthJsDefault = parcelHelpers.interopDefault(_checkKeyLengthJs);
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _isKeyLikeJs = require("./is_key_like.js");
const encrypt = async (alg, key, cek)=>{
    if (!(0, _webcryptoJs.isCryptoKey)(key)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types)));
    (0, _cryptoKeyJs.checkEncCryptoKey)(key, alg, 'encrypt', 'wrapKey');
    (0, _checkKeyLengthJsDefault.default)(alg, key);
    if (key.usages.includes('encrypt')) return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.encrypt((0, _subtleRsaesJsDefault.default)(alg), key, cek));
    if (key.usages.includes('wrapKey')) {
        const cryptoKeyCek = await (0, _webcryptoJsDefault.default).subtle.importKey('raw', cek, ...(0, _bogusJsDefault.default));
        return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.wrapKey('raw', cryptoKeyCek, key, (0, _subtleRsaesJsDefault.default)(alg)));
    }
    throw new TypeError('RSA-OAEP key "usages" must include "encrypt" or "wrapKey" for this operation');
};
const decrypt = async (alg, key, encryptedKey)=>{
    if (!(0, _webcryptoJs.isCryptoKey)(key)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types)));
    (0, _cryptoKeyJs.checkEncCryptoKey)(key, alg, 'decrypt', 'unwrapKey');
    (0, _checkKeyLengthJsDefault.default)(alg, key);
    if (key.usages.includes('decrypt')) return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.decrypt((0, _subtleRsaesJsDefault.default)(alg), key, encryptedKey));
    if (key.usages.includes('unwrapKey')) {
        const cryptoKeyCek = await (0, _webcryptoJsDefault.default).subtle.unwrapKey('raw', encryptedKey, key, (0, _subtleRsaesJsDefault.default)(alg), ...(0, _bogusJsDefault.default));
        return new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.exportKey('raw', cryptoKeyCek));
    }
    throw new TypeError('RSA-OAEP key "usages" must include "decrypt" or "unwrapKey" for this operation');
};

},{"./subtle_rsaes.js":"ao8Zf","./bogus.js":"ftBoP","./webcrypto.js":"crCKY","../lib/crypto_key.js":"547bG","./check_key_length.js":"5tUbx","../lib/invalid_key_input.js":"hHcMf","./is_key_like.js":"aRx6e","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"ao8Zf":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>subtleRsaEs);
var _errorsJs = require("../util/errors.js");
function subtleRsaEs(alg) {
    switch(alg){
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512':
            return 'RSA-OAEP';
        default:
            throw new (0, _errorsJs.JOSENotSupported)(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
    }
}

},{"../util/errors.js":"drZrx","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"5tUbx":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (alg, key)=>{
    if (alg.startsWith('RS') || alg.startsWith('PS')) {
        const { modulusLength } = key.algorithm;
        if (typeof modulusLength !== 'number' || modulusLength < 2048) throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"7DsFX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isJwkJs = require("../lib/is_jwk.js");
var _base64UrlJs = require("./base64url.js");
var _jwkToKeyJs = require("./jwk_to_key.js");
var _jwkToKeyJsDefault = parcelHelpers.interopDefault(_jwkToKeyJs);
const exportKeyValue = (k)=>(0, _base64UrlJs.decode)(k);
let privCache;
let pubCache;
const isKeyObject = (key)=>{
    return key?.[Symbol.toStringTag] === 'KeyObject';
};
const importAndCache = async (cache, key, jwk, alg, freeze = false)=>{
    let cached = cache.get(key);
    if (cached?.[alg]) return cached[alg];
    const cryptoKey = await (0, _jwkToKeyJsDefault.default)({
        ...jwk,
        alg
    });
    if (freeze) Object.freeze(key);
    if (!cached) cache.set(key, {
        [alg]: cryptoKey
    });
    else cached[alg] = cryptoKey;
    return cryptoKey;
};
const normalizePublicKey = (key, alg)=>{
    if (isKeyObject(key)) {
        let jwk = key.export({
            format: 'jwk'
        });
        delete jwk.d;
        delete jwk.dp;
        delete jwk.dq;
        delete jwk.p;
        delete jwk.q;
        delete jwk.qi;
        if (jwk.k) return exportKeyValue(jwk.k);
        pubCache || (pubCache = new WeakMap());
        return importAndCache(pubCache, key, jwk, alg);
    }
    if ((0, _isJwkJs.isJWK)(key)) {
        if (key.k) return (0, _base64UrlJs.decode)(key.k);
        pubCache || (pubCache = new WeakMap());
        const cryptoKey = importAndCache(pubCache, key, key, alg, true);
        return cryptoKey;
    }
    return key;
};
const normalizePrivateKey = (key, alg)=>{
    if (isKeyObject(key)) {
        let jwk = key.export({
            format: 'jwk'
        });
        if (jwk.k) return exportKeyValue(jwk.k);
        privCache || (privCache = new WeakMap());
        return importAndCache(privCache, key, jwk, alg);
    }
    if ((0, _isJwkJs.isJWK)(key)) {
        if (key.k) return (0, _base64UrlJs.decode)(key.k);
        privCache || (privCache = new WeakMap());
        const cryptoKey = importAndCache(privCache, key, key, alg, true);
        return cryptoKey;
    }
    return key;
};
exports.default = {
    normalizePublicKey,
    normalizePrivateKey
};

},{"../lib/is_jwk.js":"2jsOK","./base64url.js":"hmfX7","./jwk_to_key.js":"a41gV","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"2jsOK":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isJWK", ()=>isJWK);
parcelHelpers.export(exports, "isPrivateJWK", ()=>isPrivateJWK);
parcelHelpers.export(exports, "isPublicJWK", ()=>isPublicJWK);
parcelHelpers.export(exports, "isSecretJWK", ()=>isSecretJWK);
var _isObjectJs = require("./is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
function isJWK(key) {
    return (0, _isObjectJsDefault.default)(key) && typeof key.kty === 'string';
}
function isPrivateJWK(key) {
    return key.kty !== 'oct' && typeof key.d === 'string';
}
function isPublicJWK(key) {
    return key.kty !== 'oct' && typeof key.d === 'undefined';
}
function isSecretJWK(key) {
    return isJWK(key) && key.kty === 'oct' && typeof key.k === 'string';
}

},{"./is_object.js":"6AeNj","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"a41gV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _errorsJs = require("../util/errors.js");
function subtleMapping(jwk) {
    let algorithm;
    let keyUsages;
    switch(jwk.kty){
        case 'RSA':
            switch(jwk.alg){
                case 'PS256':
                case 'PS384':
                case 'PS512':
                    algorithm = {
                        name: 'RSA-PSS',
                        hash: `SHA-${jwk.alg.slice(-3)}`
                    };
                    keyUsages = jwk.d ? [
                        'sign'
                    ] : [
                        'verify'
                    ];
                    break;
                case 'RS256':
                case 'RS384':
                case 'RS512':
                    algorithm = {
                        name: 'RSASSA-PKCS1-v1_5',
                        hash: `SHA-${jwk.alg.slice(-3)}`
                    };
                    keyUsages = jwk.d ? [
                        'sign'
                    ] : [
                        'verify'
                    ];
                    break;
                case 'RSA-OAEP':
                case 'RSA-OAEP-256':
                case 'RSA-OAEP-384':
                case 'RSA-OAEP-512':
                    algorithm = {
                        name: 'RSA-OAEP',
                        hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`
                    };
                    keyUsages = jwk.d ? [
                        'decrypt',
                        'unwrapKey'
                    ] : [
                        'encrypt',
                        'wrapKey'
                    ];
                    break;
                default:
                    throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
            }
            break;
        case 'EC':
            switch(jwk.alg){
                case 'ES256':
                    algorithm = {
                        name: 'ECDSA',
                        namedCurve: 'P-256'
                    };
                    keyUsages = jwk.d ? [
                        'sign'
                    ] : [
                        'verify'
                    ];
                    break;
                case 'ES384':
                    algorithm = {
                        name: 'ECDSA',
                        namedCurve: 'P-384'
                    };
                    keyUsages = jwk.d ? [
                        'sign'
                    ] : [
                        'verify'
                    ];
                    break;
                case 'ES512':
                    algorithm = {
                        name: 'ECDSA',
                        namedCurve: 'P-521'
                    };
                    keyUsages = jwk.d ? [
                        'sign'
                    ] : [
                        'verify'
                    ];
                    break;
                case 'ECDH-ES':
                case 'ECDH-ES+A128KW':
                case 'ECDH-ES+A192KW':
                case 'ECDH-ES+A256KW':
                    algorithm = {
                        name: 'ECDH',
                        namedCurve: jwk.crv
                    };
                    keyUsages = jwk.d ? [
                        'deriveBits'
                    ] : [];
                    break;
                default:
                    throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
            }
            break;
        case 'OKP':
            switch(jwk.alg){
                case 'Ed25519':
                    algorithm = {
                        name: 'Ed25519'
                    };
                    keyUsages = jwk.d ? [
                        'sign'
                    ] : [
                        'verify'
                    ];
                    break;
                case 'EdDSA':
                    algorithm = {
                        name: jwk.crv
                    };
                    keyUsages = jwk.d ? [
                        'sign'
                    ] : [
                        'verify'
                    ];
                    break;
                case 'ECDH-ES':
                case 'ECDH-ES+A128KW':
                case 'ECDH-ES+A192KW':
                case 'ECDH-ES+A256KW':
                    algorithm = {
                        name: jwk.crv
                    };
                    keyUsages = jwk.d ? [
                        'deriveBits'
                    ] : [];
                    break;
                default:
                    throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
            }
            break;
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported JWK "kty" (Key Type) Parameter value');
    }
    return {
        algorithm,
        keyUsages
    };
}
const parse = async (jwk)=>{
    if (!jwk.alg) throw new TypeError('"alg" argument is required when "jwk.alg" is not present');
    const { algorithm, keyUsages } = subtleMapping(jwk);
    const rest = [
        algorithm,
        jwk.ext ?? false,
        jwk.key_ops ?? keyUsages
    ];
    const keyData = {
        ...jwk
    };
    delete keyData.alg;
    delete keyData.use;
    return (0, _webcryptoJsDefault.default).subtle.importKey('jwk', keyData, ...rest);
};
exports.default = parse;

},{"./webcrypto.js":"crCKY","../util/errors.js":"drZrx","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"3wQoI":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bitLength", ()=>bitLength);
var _errorsJs = require("../util/errors.js");
var _randomJs = require("../runtime/random.js");
var _randomJsDefault = parcelHelpers.interopDefault(_randomJs);
function bitLength(alg) {
    switch(alg){
        case 'A128GCM':
            return 128;
        case 'A192GCM':
            return 192;
        case 'A256GCM':
        case 'A128CBC-HS256':
            return 256;
        case 'A192CBC-HS384':
            return 384;
        case 'A256CBC-HS512':
            return 512;
        default:
            throw new (0, _errorsJs.JOSENotSupported)(`Unsupported JWE Algorithm: ${alg}`);
    }
}
exports.default = (alg)=>(0, _randomJsDefault.default)(new Uint8Array(bitLength(alg) >> 3));

},{"../util/errors.js":"drZrx","../runtime/random.js":"2Msed","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"gu3Vs":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "importSPKI", ()=>importSPKI);
parcelHelpers.export(exports, "importX509", ()=>importX509);
parcelHelpers.export(exports, "importPKCS8", ()=>importPKCS8);
parcelHelpers.export(exports, "importJWK", ()=>importJWK);
var _base64UrlJs = require("../runtime/base64url.js");
var _asn1Js = require("../runtime/asn1.js");
var _jwkToKeyJs = require("../runtime/jwk_to_key.js");
var _jwkToKeyJsDefault = parcelHelpers.interopDefault(_jwkToKeyJs);
var _errorsJs = require("../util/errors.js");
var _isObjectJs = require("../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
async function importSPKI(spki, alg, options) {
    if (typeof spki !== 'string' || spki.indexOf('-----BEGIN PUBLIC KEY-----') !== 0) throw new TypeError('"spki" must be SPKI formatted string');
    return (0, _asn1Js.fromSPKI)(spki, alg, options);
}
async function importX509(x509, alg, options) {
    if (typeof x509 !== 'string' || x509.indexOf('-----BEGIN CERTIFICATE-----') !== 0) throw new TypeError('"x509" must be X.509 formatted string');
    return (0, _asn1Js.fromX509)(x509, alg, options);
}
async function importPKCS8(pkcs8, alg, options) {
    if (typeof pkcs8 !== 'string' || pkcs8.indexOf('-----BEGIN PRIVATE KEY-----') !== 0) throw new TypeError('"pkcs8" must be PKCS#8 formatted string');
    return (0, _asn1Js.fromPKCS8)(pkcs8, alg, options);
}
async function importJWK(jwk, alg) {
    if (!(0, _isObjectJsDefault.default)(jwk)) throw new TypeError('JWK must be an object');
    alg || (alg = jwk.alg);
    switch(jwk.kty){
        case 'oct':
            if (typeof jwk.k !== 'string' || !jwk.k) throw new TypeError('missing "k" (Key Value) Parameter value');
            return (0, _base64UrlJs.decode)(jwk.k);
        case 'RSA':
            if ('oth' in jwk && jwk.oth !== undefined) throw new (0, _errorsJs.JOSENotSupported)('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');
        case 'EC':
        case 'OKP':
            return (0, _jwkToKeyJsDefault.default)({
                ...jwk,
                alg
            });
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Unsupported "kty" (Key Type) Parameter value');
    }
}

},{"../runtime/base64url.js":"hmfX7","../runtime/asn1.js":"2EEbo","../runtime/jwk_to_key.js":"a41gV","../util/errors.js":"drZrx","../lib/is_object.js":"6AeNj","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"2EEbo":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toSPKI", ()=>toSPKI);
parcelHelpers.export(exports, "toPKCS8", ()=>toPKCS8);
parcelHelpers.export(exports, "fromPKCS8", ()=>fromPKCS8);
parcelHelpers.export(exports, "fromSPKI", ()=>fromSPKI);
parcelHelpers.export(exports, "fromX509", ()=>fromX509);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _base64UrlJs = require("./base64url.js");
var _formatPemJs = require("../lib/format_pem.js");
var _formatPemJsDefault = parcelHelpers.interopDefault(_formatPemJs);
var _errorsJs = require("../util/errors.js");
var _isKeyLikeJs = require("./is_key_like.js");
const genericExport = async (keyType, keyFormat, key)=>{
    if (!(0, _webcryptoJs.isCryptoKey)(key)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types)));
    if (!key.extractable) throw new TypeError('CryptoKey is not extractable');
    if (key.type !== keyType) throw new TypeError(`key is not a ${keyType} key`);
    return (0, _formatPemJsDefault.default)((0, _base64UrlJs.encodeBase64)(new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.exportKey(keyFormat, key))), `${keyType.toUpperCase()} KEY`);
};
const toSPKI = (key)=>{
    return genericExport('public', 'spki', key);
};
const toPKCS8 = (key)=>{
    return genericExport('private', 'pkcs8', key);
};
const findOid = (keyData, oid, from = 0)=>{
    if (from === 0) {
        oid.unshift(oid.length);
        oid.unshift(0x06);
    }
    const i = keyData.indexOf(oid[0], from);
    if (i === -1) return false;
    const sub = keyData.subarray(i, i + oid.length);
    if (sub.length !== oid.length) return false;
    return sub.every((value, index)=>value === oid[index]) || findOid(keyData, oid, i + 1);
};
const getNamedCurve = (keyData)=>{
    switch(true){
        case findOid(keyData, [
            0x2a,
            0x86,
            0x48,
            0xce,
            0x3d,
            0x03,
            0x01,
            0x07
        ]):
            return 'P-256';
        case findOid(keyData, [
            0x2b,
            0x81,
            0x04,
            0x00,
            0x22
        ]):
            return 'P-384';
        case findOid(keyData, [
            0x2b,
            0x81,
            0x04,
            0x00,
            0x23
        ]):
            return 'P-521';
        case findOid(keyData, [
            0x2b,
            0x65,
            0x6e
        ]):
            return 'X25519';
        case findOid(keyData, [
            0x2b,
            0x65,
            0x6f
        ]):
            return 'X448';
        case findOid(keyData, [
            0x2b,
            0x65,
            0x70
        ]):
            return 'Ed25519';
        case findOid(keyData, [
            0x2b,
            0x65,
            0x71
        ]):
            return 'Ed448';
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported EC Key Curve or OKP Key Sub Type');
    }
};
const genericImport = async (replace, keyFormat, pem, alg, options)=>{
    let algorithm;
    let keyUsages;
    const keyData = new Uint8Array(atob(pem.replace(replace, '')).split('').map((c)=>c.charCodeAt(0)));
    const isPublic = keyFormat === 'spki';
    switch(alg){
        case 'PS256':
        case 'PS384':
        case 'PS512':
            algorithm = {
                name: 'RSA-PSS',
                hash: `SHA-${alg.slice(-3)}`
            };
            keyUsages = isPublic ? [
                'verify'
            ] : [
                'sign'
            ];
            break;
        case 'RS256':
        case 'RS384':
        case 'RS512':
            algorithm = {
                name: 'RSASSA-PKCS1-v1_5',
                hash: `SHA-${alg.slice(-3)}`
            };
            keyUsages = isPublic ? [
                'verify'
            ] : [
                'sign'
            ];
            break;
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512':
            algorithm = {
                name: 'RSA-OAEP',
                hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`
            };
            keyUsages = isPublic ? [
                'encrypt',
                'wrapKey'
            ] : [
                'decrypt',
                'unwrapKey'
            ];
            break;
        case 'ES256':
            algorithm = {
                name: 'ECDSA',
                namedCurve: 'P-256'
            };
            keyUsages = isPublic ? [
                'verify'
            ] : [
                'sign'
            ];
            break;
        case 'ES384':
            algorithm = {
                name: 'ECDSA',
                namedCurve: 'P-384'
            };
            keyUsages = isPublic ? [
                'verify'
            ] : [
                'sign'
            ];
            break;
        case 'ES512':
            algorithm = {
                name: 'ECDSA',
                namedCurve: 'P-521'
            };
            keyUsages = isPublic ? [
                'verify'
            ] : [
                'sign'
            ];
            break;
        case 'ECDH-ES':
        case 'ECDH-ES+A128KW':
        case 'ECDH-ES+A192KW':
        case 'ECDH-ES+A256KW':
            {
                const namedCurve = getNamedCurve(keyData);
                algorithm = namedCurve.startsWith('P-') ? {
                    name: 'ECDH',
                    namedCurve
                } : {
                    name: namedCurve
                };
                keyUsages = isPublic ? [] : [
                    'deriveBits'
                ];
                break;
            }
        case 'Ed25519':
            algorithm = {
                name: 'Ed25519'
            };
            keyUsages = isPublic ? [
                'verify'
            ] : [
                'sign'
            ];
            break;
        case 'EdDSA':
            algorithm = {
                name: getNamedCurve(keyData)
            };
            keyUsages = isPublic ? [
                'verify'
            ] : [
                'sign'
            ];
            break;
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported "alg" (Algorithm) value');
    }
    return (0, _webcryptoJsDefault.default).subtle.importKey(keyFormat, keyData, algorithm, options?.extractable ?? false, keyUsages);
};
const fromPKCS8 = (pem, alg, options)=>{
    return genericImport(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\s)/g, 'pkcs8', pem, alg, options);
};
const fromSPKI = (pem, alg, options)=>{
    return genericImport(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\s)/g, 'spki', pem, alg, options);
};
function getElement(seq) {
    const result = [];
    let next = 0;
    while(next < seq.length){
        const nextPart = parseElement(seq.subarray(next));
        result.push(nextPart);
        next += nextPart.byteLength;
    }
    return result;
}
function parseElement(bytes) {
    let position = 0;
    let tag = bytes[0] & 0x1f;
    position++;
    if (tag === 0x1f) {
        tag = 0;
        while(bytes[position] >= 0x80){
            tag = tag * 128 + bytes[position] - 0x80;
            position++;
        }
        tag = tag * 128 + bytes[position] - 0x80;
        position++;
    }
    let length = 0;
    if (bytes[position] < 0x80) {
        length = bytes[position];
        position++;
    } else if (length === 0x80) {
        length = 0;
        while(bytes[position + length] !== 0 || bytes[position + length + 1] !== 0){
            if (length > bytes.byteLength) throw new TypeError('invalid indefinite form length');
            length++;
        }
        const byteLength = position + length + 2;
        return {
            byteLength,
            contents: bytes.subarray(position, position + length),
            raw: bytes.subarray(0, byteLength)
        };
    } else {
        const numberOfDigits = bytes[position] & 0x7f;
        position++;
        length = 0;
        for(let i = 0; i < numberOfDigits; i++){
            length = length * 256 + bytes[position];
            position++;
        }
    }
    const byteLength = position + length;
    return {
        byteLength,
        contents: bytes.subarray(position, byteLength),
        raw: bytes.subarray(0, byteLength)
    };
}
function spkiFromX509(buf) {
    const tbsCertificate = getElement(getElement(parseElement(buf).contents)[0].contents);
    return (0, _base64UrlJs.encodeBase64)(tbsCertificate[tbsCertificate[0].raw[0] === 0xa0 ? 6 : 5].raw);
}
function getSPKI(x509) {
    const pem = x509.replace(/(?:-----(?:BEGIN|END) CERTIFICATE-----|\s)/g, '');
    const raw = (0, _base64UrlJs.decodeBase64)(pem);
    return (0, _formatPemJsDefault.default)(spkiFromX509(raw), 'PUBLIC KEY');
}
const fromX509 = (pem, alg, options)=>{
    let spki;
    try {
        spki = getSPKI(pem);
    } catch (cause) {
        throw new TypeError('Failed to parse the X.509 certificate', {
            cause
        });
    }
    return fromSPKI(spki, alg, options);
};

},{"./webcrypto.js":"crCKY","../lib/invalid_key_input.js":"hHcMf","./base64url.js":"hmfX7","../lib/format_pem.js":"gWatt","../util/errors.js":"drZrx","./is_key_like.js":"aRx6e","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"gWatt":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (b64, descriptor)=>{
    const newlined = (b64.match(/.{1,64}/g) || []).join('\n');
    return `-----BEGIN ${descriptor}-----\n${newlined}\n-----END ${descriptor}-----`;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"kziQH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "checkKeyTypeWithJwk", ()=>checkKeyTypeWithJwk);
var _invalidKeyInputJs = require("./invalid_key_input.js");
var _isKeyLikeJs = require("../runtime/is_key_like.js");
var _isKeyLikeJsDefault = parcelHelpers.interopDefault(_isKeyLikeJs);
var _isJwkJs = require("./is_jwk.js");
const tag = (key)=>key?.[Symbol.toStringTag];
const jwkMatchesOp = (alg, key, usage)=>{
    if (key.use !== undefined && key.use !== 'sig') throw new TypeError('Invalid key for this operation, when present its use must be sig');
    if (key.key_ops !== undefined && key.key_ops.includes?.(usage) !== true) throw new TypeError(`Invalid key for this operation, when present its key_ops must include ${usage}`);
    if (key.alg !== undefined && key.alg !== alg) throw new TypeError(`Invalid key for this operation, when present its alg must be ${alg}`);
    return true;
};
const symmetricTypeCheck = (alg, key, usage, allowJwk)=>{
    if (key instanceof Uint8Array) return;
    if (allowJwk && _isJwkJs.isJWK(key)) {
        if (_isJwkJs.isSecretJWK(key) && jwkMatchesOp(alg, key, usage)) return;
        throw new TypeError(`JSON Web Key for symmetric algorithms must have JWK "kty" (Key Type) equal to "oct" and the JWK "k" (Key Value) present`);
    }
    if (!(0, _isKeyLikeJsDefault.default)(key)) throw new TypeError((0, _invalidKeyInputJs.withAlg)(alg, key, ...(0, _isKeyLikeJs.types), 'Uint8Array', allowJwk ? 'JSON Web Key' : null));
    if (key.type !== 'secret') throw new TypeError(`${tag(key)} instances for symmetric algorithms must be of type "secret"`);
};
const asymmetricTypeCheck = (alg, key, usage, allowJwk)=>{
    if (allowJwk && _isJwkJs.isJWK(key)) switch(usage){
        case 'sign':
            if (_isJwkJs.isPrivateJWK(key) && jwkMatchesOp(alg, key, usage)) return;
            throw new TypeError(`JSON Web Key for this operation be a private JWK`);
        case 'verify':
            if (_isJwkJs.isPublicJWK(key) && jwkMatchesOp(alg, key, usage)) return;
            throw new TypeError(`JSON Web Key for this operation be a public JWK`);
    }
    if (!(0, _isKeyLikeJsDefault.default)(key)) throw new TypeError((0, _invalidKeyInputJs.withAlg)(alg, key, ...(0, _isKeyLikeJs.types), allowJwk ? 'JSON Web Key' : null));
    if (key.type === 'secret') throw new TypeError(`${tag(key)} instances for asymmetric algorithms must not be of type "secret"`);
    if (usage === 'sign' && key.type === 'public') throw new TypeError(`${tag(key)} instances for asymmetric algorithm signing must be of type "private"`);
    if (usage === 'decrypt' && key.type === 'public') throw new TypeError(`${tag(key)} instances for asymmetric algorithm decryption must be of type "private"`);
    if (key.algorithm && usage === 'verify' && key.type === 'private') throw new TypeError(`${tag(key)} instances for asymmetric algorithm verifying must be of type "public"`);
    if (key.algorithm && usage === 'encrypt' && key.type === 'private') throw new TypeError(`${tag(key)} instances for asymmetric algorithm encryption must be of type "public"`);
};
function checkKeyType(allowJwk, alg, key, usage) {
    const symmetric = alg.startsWith('HS') || alg === 'dir' || alg.startsWith('PBES2') || /^A\d{3}(?:GCM)?KW$/.test(alg);
    if (symmetric) symmetricTypeCheck(alg, key, usage, allowJwk);
    else asymmetricTypeCheck(alg, key, usage, allowJwk);
}
exports.default = checkKeyType.bind(undefined, false);
const checkKeyTypeWithJwk = checkKeyType.bind(undefined, true);

},{"./invalid_key_input.js":"hHcMf","../runtime/is_key_like.js":"aRx6e","./is_jwk.js":"2jsOK","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jiF4B":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "wrap", ()=>wrap);
parcelHelpers.export(exports, "unwrap", ()=>unwrap);
var _encryptJs = require("../runtime/encrypt.js");
var _encryptJsDefault = parcelHelpers.interopDefault(_encryptJs);
var _decryptJs = require("../runtime/decrypt.js");
var _decryptJsDefault = parcelHelpers.interopDefault(_decryptJs);
var _base64UrlJs = require("../runtime/base64url.js");
async function wrap(alg, key, cek, iv) {
    const jweAlgorithm = alg.slice(0, 7);
    const wrapped = await (0, _encryptJsDefault.default)(jweAlgorithm, cek, key, iv, new Uint8Array(0));
    return {
        encryptedKey: wrapped.ciphertext,
        iv: (0, _base64UrlJs.encode)(wrapped.iv),
        tag: (0, _base64UrlJs.encode)(wrapped.tag)
    };
}
async function unwrap(alg, key, encryptedKey, iv, tag) {
    const jweAlgorithm = alg.slice(0, 7);
    return (0, _decryptJsDefault.default)(jweAlgorithm, key, encryptedKey, iv, tag, new Uint8Array(0));
}

},{"../runtime/encrypt.js":"4qqfM","../runtime/decrypt.js":"80xlZ","../runtime/base64url.js":"hmfX7","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"4qqfM":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _checkIvLengthJs = require("../lib/check_iv_length.js");
var _checkIvLengthJsDefault = parcelHelpers.interopDefault(_checkIvLengthJs);
var _checkCekLengthJs = require("./check_cek_length.js");
var _checkCekLengthJsDefault = parcelHelpers.interopDefault(_checkCekLengthJs);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _cryptoKeyJs = require("../lib/crypto_key.js");
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _ivJs = require("../lib/iv.js");
var _ivJsDefault = parcelHelpers.interopDefault(_ivJs);
var _errorsJs = require("../util/errors.js");
var _isKeyLikeJs = require("./is_key_like.js");
async function cbcEncrypt(enc, plaintext, cek, iv, aad) {
    if (!(cek instanceof Uint8Array)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(cek, 'Uint8Array'));
    const keySize = parseInt(enc.slice(1, 4), 10);
    const encKey = await (0, _webcryptoJsDefault.default).subtle.importKey('raw', cek.subarray(keySize >> 3), 'AES-CBC', false, [
        'encrypt'
    ]);
    const macKey = await (0, _webcryptoJsDefault.default).subtle.importKey('raw', cek.subarray(0, keySize >> 3), {
        hash: `SHA-${keySize << 1}`,
        name: 'HMAC'
    }, false, [
        'sign'
    ]);
    const ciphertext = new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.encrypt({
        iv,
        name: 'AES-CBC'
    }, encKey, plaintext));
    const macData = (0, _bufferUtilsJs.concat)(aad, iv, ciphertext, (0, _bufferUtilsJs.uint64be)(aad.length << 3));
    const tag = new Uint8Array((await (0, _webcryptoJsDefault.default).subtle.sign('HMAC', macKey, macData)).slice(0, keySize >> 3));
    return {
        ciphertext,
        tag,
        iv
    };
}
async function gcmEncrypt(enc, plaintext, cek, iv, aad) {
    let encKey;
    if (cek instanceof Uint8Array) encKey = await (0, _webcryptoJsDefault.default).subtle.importKey('raw', cek, 'AES-GCM', false, [
        'encrypt'
    ]);
    else {
        (0, _cryptoKeyJs.checkEncCryptoKey)(cek, enc, 'encrypt');
        encKey = cek;
    }
    const encrypted = new Uint8Array(await (0, _webcryptoJsDefault.default).subtle.encrypt({
        additionalData: aad,
        iv,
        name: 'AES-GCM',
        tagLength: 128
    }, encKey, plaintext));
    const tag = encrypted.slice(-16);
    const ciphertext = encrypted.slice(0, -16);
    return {
        ciphertext,
        tag,
        iv
    };
}
const encrypt = async (enc, plaintext, cek, iv, aad)=>{
    if (!(0, _webcryptoJs.isCryptoKey)(cek) && !(cek instanceof Uint8Array)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(cek, ...(0, _isKeyLikeJs.types), 'Uint8Array'));
    if (iv) (0, _checkIvLengthJsDefault.default)(enc, iv);
    else iv = (0, _ivJsDefault.default)(enc);
    switch(enc){
        case 'A128CBC-HS256':
        case 'A192CBC-HS384':
        case 'A256CBC-HS512':
            if (cek instanceof Uint8Array) (0, _checkCekLengthJsDefault.default)(cek, parseInt(enc.slice(-3), 10));
            return cbcEncrypt(enc, plaintext, cek, iv, aad);
        case 'A128GCM':
        case 'A192GCM':
        case 'A256GCM':
            if (cek instanceof Uint8Array) (0, _checkCekLengthJsDefault.default)(cek, parseInt(enc.slice(1, 4), 10));
            return gcmEncrypt(enc, plaintext, cek, iv, aad);
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Unsupported JWE Content Encryption Algorithm');
    }
};
exports.default = encrypt;

},{"../lib/buffer_utils.js":"6CiRi","../lib/check_iv_length.js":"dubN1","./check_cek_length.js":"gAO1L","./webcrypto.js":"crCKY","../lib/crypto_key.js":"547bG","../lib/invalid_key_input.js":"hHcMf","../lib/iv.js":"7ae98","../util/errors.js":"drZrx","./is_key_like.js":"aRx6e","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"czux9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _errorsJs = require("../util/errors.js");
function validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {
    if (joseHeader.crit !== undefined && protectedHeader?.crit === undefined) throw new Err('"crit" (Critical) Header Parameter MUST be integrity protected');
    if (!protectedHeader || protectedHeader.crit === undefined) return new Set();
    if (!Array.isArray(protectedHeader.crit) || protectedHeader.crit.length === 0 || protectedHeader.crit.some((input)=>typeof input !== 'string' || input.length === 0)) throw new Err('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');
    let recognized;
    if (recognizedOption !== undefined) recognized = new Map([
        ...Object.entries(recognizedOption),
        ...recognizedDefault.entries()
    ]);
    else recognized = recognizedDefault;
    for (const parameter of protectedHeader.crit){
        if (!recognized.has(parameter)) throw new (0, _errorsJs.JOSENotSupported)(`Extension Header Parameter "${parameter}" is not recognized`);
        if (joseHeader[parameter] === undefined) throw new Err(`Extension Header Parameter "${parameter}" is missing`);
        if (recognized.get(parameter) && protectedHeader[parameter] === undefined) throw new Err(`Extension Header Parameter "${parameter}" MUST be integrity protected`);
    }
    return new Set(protectedHeader.crit);
}
exports.default = validateCrit;

},{"../util/errors.js":"drZrx","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"5vOPm":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const validateAlgorithms = (option, algorithms)=>{
    if (algorithms !== undefined && (!Array.isArray(algorithms) || algorithms.some((s)=>typeof s !== 'string'))) throw new TypeError(`"${option}" option must be an array of strings`);
    if (!algorithms) return undefined;
    return new Set(algorithms);
};
exports.default = validateAlgorithms;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"iYOzJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generalDecrypt", ()=>generalDecrypt);
var _decryptJs = require("../flattened/decrypt.js");
var _errorsJs = require("../../util/errors.js");
var _isObjectJs = require("../../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
async function generalDecrypt(jwe, key, options) {
    if (!(0, _isObjectJsDefault.default)(jwe)) throw new (0, _errorsJs.JWEInvalid)('General JWE must be an object');
    if (!Array.isArray(jwe.recipients) || !jwe.recipients.every((0, _isObjectJsDefault.default))) throw new (0, _errorsJs.JWEInvalid)('JWE Recipients missing or incorrect type');
    if (!jwe.recipients.length) throw new (0, _errorsJs.JWEInvalid)('JWE Recipients has no members');
    for (const recipient of jwe.recipients)try {
        return await (0, _decryptJs.flattenedDecrypt)({
            aad: jwe.aad,
            ciphertext: jwe.ciphertext,
            encrypted_key: recipient.encrypted_key,
            header: recipient.header,
            iv: jwe.iv,
            protected: jwe.protected,
            tag: jwe.tag,
            unprotected: jwe.unprotected
        }, key, options);
    } catch  {}
    throw new (0, _errorsJs.JWEDecryptionFailed)();
}

},{"../flattened/decrypt.js":"jGuls","../../util/errors.js":"drZrx","../../lib/is_object.js":"6AeNj","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"93WLj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GeneralEncrypt", ()=>GeneralEncrypt);
var _encryptJs = require("../flattened/encrypt.js");
var _privateSymbolsJs = require("../../lib/private_symbols.js");
var _errorsJs = require("../../util/errors.js");
var _cekJs = require("../../lib/cek.js");
var _cekJsDefault = parcelHelpers.interopDefault(_cekJs);
var _isDisjointJs = require("../../lib/is_disjoint.js");
var _isDisjointJsDefault = parcelHelpers.interopDefault(_isDisjointJs);
var _encryptKeyManagementJs = require("../../lib/encrypt_key_management.js");
var _encryptKeyManagementJsDefault = parcelHelpers.interopDefault(_encryptKeyManagementJs);
var _base64UrlJs = require("../../runtime/base64url.js");
var _validateCritJs = require("../../lib/validate_crit.js");
var _validateCritJsDefault = parcelHelpers.interopDefault(_validateCritJs);
class IndividualRecipient {
    constructor(enc, key, options){
        this.parent = enc;
        this.key = key;
        this.options = options;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this.unprotectedHeader) throw new TypeError('setUnprotectedHeader can only be called once');
        this.unprotectedHeader = unprotectedHeader;
        return this;
    }
    addRecipient(...args) {
        return this.parent.addRecipient(...args);
    }
    encrypt(...args) {
        return this.parent.encrypt(...args);
    }
    done() {
        return this.parent;
    }
}
class GeneralEncrypt {
    constructor(plaintext){
        this._recipients = [];
        this._plaintext = plaintext;
    }
    addRecipient(key, options) {
        const recipient = new IndividualRecipient(this, key, {
            crit: options?.crit
        });
        this._recipients.push(recipient);
        return recipient;
    }
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) throw new TypeError('setProtectedHeader can only be called once');
        this._protectedHeader = protectedHeader;
        return this;
    }
    setSharedUnprotectedHeader(sharedUnprotectedHeader) {
        if (this._unprotectedHeader) throw new TypeError('setSharedUnprotectedHeader can only be called once');
        this._unprotectedHeader = sharedUnprotectedHeader;
        return this;
    }
    setAdditionalAuthenticatedData(aad) {
        this._aad = aad;
        return this;
    }
    async encrypt() {
        if (!this._recipients.length) throw new (0, _errorsJs.JWEInvalid)('at least one recipient must be added');
        if (this._recipients.length === 1) {
            const [recipient] = this._recipients;
            const flattened = await new (0, _encryptJs.FlattenedEncrypt)(this._plaintext).setAdditionalAuthenticatedData(this._aad).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(recipient.unprotectedHeader).encrypt(recipient.key, {
                ...recipient.options
            });
            const jwe = {
                ciphertext: flattened.ciphertext,
                iv: flattened.iv,
                recipients: [
                    {}
                ],
                tag: flattened.tag
            };
            if (flattened.aad) jwe.aad = flattened.aad;
            if (flattened.protected) jwe.protected = flattened.protected;
            if (flattened.unprotected) jwe.unprotected = flattened.unprotected;
            if (flattened.encrypted_key) jwe.recipients[0].encrypted_key = flattened.encrypted_key;
            if (flattened.header) jwe.recipients[0].header = flattened.header;
            return jwe;
        }
        let enc;
        for(let i = 0; i < this._recipients.length; i++){
            const recipient = this._recipients[i];
            if (!(0, _isDisjointJsDefault.default)(this._protectedHeader, this._unprotectedHeader, recipient.unprotectedHeader)) throw new (0, _errorsJs.JWEInvalid)('JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint');
            const joseHeader = {
                ...this._protectedHeader,
                ...this._unprotectedHeader,
                ...recipient.unprotectedHeader
            };
            const { alg } = joseHeader;
            if (typeof alg !== 'string' || !alg) throw new (0, _errorsJs.JWEInvalid)('JWE "alg" (Algorithm) Header Parameter missing or invalid');
            if (alg === 'dir' || alg === 'ECDH-ES') throw new (0, _errorsJs.JWEInvalid)('"dir" and "ECDH-ES" alg may only be used with a single recipient');
            if (typeof joseHeader.enc !== 'string' || !joseHeader.enc) throw new (0, _errorsJs.JWEInvalid)('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
            if (!enc) enc = joseHeader.enc;
            else if (enc !== joseHeader.enc) throw new (0, _errorsJs.JWEInvalid)('JWE "enc" (Encryption Algorithm) Header Parameter must be the same for all recipients');
            (0, _validateCritJsDefault.default)((0, _errorsJs.JWEInvalid), new Map(), recipient.options.crit, this._protectedHeader, joseHeader);
            if (joseHeader.zip !== undefined) throw new (0, _errorsJs.JOSENotSupported)('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');
        }
        const cek = (0, _cekJsDefault.default)(enc);
        const jwe = {
            ciphertext: '',
            iv: '',
            recipients: [],
            tag: ''
        };
        for(let i = 0; i < this._recipients.length; i++){
            const recipient = this._recipients[i];
            const target = {};
            jwe.recipients.push(target);
            const joseHeader = {
                ...this._protectedHeader,
                ...this._unprotectedHeader,
                ...recipient.unprotectedHeader
            };
            const p2c = joseHeader.alg.startsWith('PBES2') ? 2048 + i : undefined;
            if (i === 0) {
                const flattened = await new (0, _encryptJs.FlattenedEncrypt)(this._plaintext).setAdditionalAuthenticatedData(this._aad).setContentEncryptionKey(cek).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(recipient.unprotectedHeader).setKeyManagementParameters({
                    p2c
                }).encrypt(recipient.key, {
                    ...recipient.options,
                    [(0, _privateSymbolsJs.unprotected)]: true
                });
                jwe.ciphertext = flattened.ciphertext;
                jwe.iv = flattened.iv;
                jwe.tag = flattened.tag;
                if (flattened.aad) jwe.aad = flattened.aad;
                if (flattened.protected) jwe.protected = flattened.protected;
                if (flattened.unprotected) jwe.unprotected = flattened.unprotected;
                target.encrypted_key = flattened.encrypted_key;
                if (flattened.header) target.header = flattened.header;
                continue;
            }
            const { encryptedKey, parameters } = await (0, _encryptKeyManagementJsDefault.default)(recipient.unprotectedHeader?.alg || this._protectedHeader?.alg || this._unprotectedHeader?.alg, enc, recipient.key, cek, {
                p2c
            });
            target.encrypted_key = (0, _base64UrlJs.encode)(encryptedKey);
            if (recipient.unprotectedHeader || parameters) target.header = {
                ...recipient.unprotectedHeader,
                ...parameters
            };
        }
        return jwe;
    }
}

},{"../flattened/encrypt.js":"46C8R","../../lib/private_symbols.js":"4xdsk","../../util/errors.js":"drZrx","../../lib/cek.js":"3wQoI","../../lib/is_disjoint.js":"8SDOv","../../lib/encrypt_key_management.js":"5ts3H","../../runtime/base64url.js":"hmfX7","../../lib/validate_crit.js":"czux9","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"46C8R":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FlattenedEncrypt", ()=>FlattenedEncrypt);
var _base64UrlJs = require("../../runtime/base64url.js");
var _privateSymbolsJs = require("../../lib/private_symbols.js");
var _encryptJs = require("../../runtime/encrypt.js");
var _encryptJsDefault = parcelHelpers.interopDefault(_encryptJs);
var _encryptKeyManagementJs = require("../../lib/encrypt_key_management.js");
var _encryptKeyManagementJsDefault = parcelHelpers.interopDefault(_encryptKeyManagementJs);
var _errorsJs = require("../../util/errors.js");
var _isDisjointJs = require("../../lib/is_disjoint.js");
var _isDisjointJsDefault = parcelHelpers.interopDefault(_isDisjointJs);
var _bufferUtilsJs = require("../../lib/buffer_utils.js");
var _validateCritJs = require("../../lib/validate_crit.js");
var _validateCritJsDefault = parcelHelpers.interopDefault(_validateCritJs);
class FlattenedEncrypt {
    constructor(plaintext){
        if (!(plaintext instanceof Uint8Array)) throw new TypeError('plaintext must be an instance of Uint8Array');
        this._plaintext = plaintext;
    }
    setKeyManagementParameters(parameters) {
        if (this._keyManagementParameters) throw new TypeError('setKeyManagementParameters can only be called once');
        this._keyManagementParameters = parameters;
        return this;
    }
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) throw new TypeError('setProtectedHeader can only be called once');
        this._protectedHeader = protectedHeader;
        return this;
    }
    setSharedUnprotectedHeader(sharedUnprotectedHeader) {
        if (this._sharedUnprotectedHeader) throw new TypeError('setSharedUnprotectedHeader can only be called once');
        this._sharedUnprotectedHeader = sharedUnprotectedHeader;
        return this;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this._unprotectedHeader) throw new TypeError('setUnprotectedHeader can only be called once');
        this._unprotectedHeader = unprotectedHeader;
        return this;
    }
    setAdditionalAuthenticatedData(aad) {
        this._aad = aad;
        return this;
    }
    setContentEncryptionKey(cek) {
        if (this._cek) throw new TypeError('setContentEncryptionKey can only be called once');
        this._cek = cek;
        return this;
    }
    setInitializationVector(iv) {
        if (this._iv) throw new TypeError('setInitializationVector can only be called once');
        this._iv = iv;
        return this;
    }
    async encrypt(key, options) {
        if (!this._protectedHeader && !this._unprotectedHeader && !this._sharedUnprotectedHeader) throw new (0, _errorsJs.JWEInvalid)('either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()');
        if (!(0, _isDisjointJsDefault.default)(this._protectedHeader, this._unprotectedHeader, this._sharedUnprotectedHeader)) throw new (0, _errorsJs.JWEInvalid)('JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint');
        const joseHeader = {
            ...this._protectedHeader,
            ...this._unprotectedHeader,
            ...this._sharedUnprotectedHeader
        };
        (0, _validateCritJsDefault.default)((0, _errorsJs.JWEInvalid), new Map(), options?.crit, this._protectedHeader, joseHeader);
        if (joseHeader.zip !== undefined) throw new (0, _errorsJs.JOSENotSupported)('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');
        const { alg, enc } = joseHeader;
        if (typeof alg !== 'string' || !alg) throw new (0, _errorsJs.JWEInvalid)('JWE "alg" (Algorithm) Header Parameter missing or invalid');
        if (typeof enc !== 'string' || !enc) throw new (0, _errorsJs.JWEInvalid)('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
        let encryptedKey;
        if (this._cek && (alg === 'dir' || alg === 'ECDH-ES')) throw new TypeError(`setContentEncryptionKey cannot be called with JWE "alg" (Algorithm) Header ${alg}`);
        let cek;
        {
            let parameters;
            ({ cek, encryptedKey, parameters } = await (0, _encryptKeyManagementJsDefault.default)(alg, enc, key, this._cek, this._keyManagementParameters));
            if (parameters) {
                if (options && (0, _privateSymbolsJs.unprotected) in options) {
                    if (!this._unprotectedHeader) this.setUnprotectedHeader(parameters);
                    else this._unprotectedHeader = {
                        ...this._unprotectedHeader,
                        ...parameters
                    };
                } else if (!this._protectedHeader) this.setProtectedHeader(parameters);
                else this._protectedHeader = {
                    ...this._protectedHeader,
                    ...parameters
                };
            }
        }
        let additionalData;
        let protectedHeader;
        let aadMember;
        if (this._protectedHeader) protectedHeader = (0, _bufferUtilsJs.encoder).encode((0, _base64UrlJs.encode)(JSON.stringify(this._protectedHeader)));
        else protectedHeader = (0, _bufferUtilsJs.encoder).encode('');
        if (this._aad) {
            aadMember = (0, _base64UrlJs.encode)(this._aad);
            additionalData = (0, _bufferUtilsJs.concat)(protectedHeader, (0, _bufferUtilsJs.encoder).encode('.'), (0, _bufferUtilsJs.encoder).encode(aadMember));
        } else additionalData = protectedHeader;
        const { ciphertext, tag, iv } = await (0, _encryptJsDefault.default)(enc, this._plaintext, cek, this._iv, additionalData);
        const jwe = {
            ciphertext: (0, _base64UrlJs.encode)(ciphertext)
        };
        if (iv) jwe.iv = (0, _base64UrlJs.encode)(iv);
        if (tag) jwe.tag = (0, _base64UrlJs.encode)(tag);
        if (encryptedKey) jwe.encrypted_key = (0, _base64UrlJs.encode)(encryptedKey);
        if (aadMember) jwe.aad = aadMember;
        if (this._protectedHeader) jwe.protected = (0, _bufferUtilsJs.decoder).decode(protectedHeader);
        if (this._sharedUnprotectedHeader) jwe.unprotected = this._sharedUnprotectedHeader;
        if (this._unprotectedHeader) jwe.header = this._unprotectedHeader;
        return jwe;
    }
}

},{"../../runtime/base64url.js":"hmfX7","../../lib/private_symbols.js":"4xdsk","../../runtime/encrypt.js":"4qqfM","../../lib/encrypt_key_management.js":"5ts3H","../../util/errors.js":"drZrx","../../lib/is_disjoint.js":"8SDOv","../../lib/buffer_utils.js":"6CiRi","../../lib/validate_crit.js":"czux9","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"4xdsk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unprotected", ()=>unprotected);
const unprotected = Symbol();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"5ts3H":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _aeskwJs = require("../runtime/aeskw.js");
var _ecdhesJs = require("../runtime/ecdhes.js");
var _pbes2KwJs = require("../runtime/pbes2kw.js");
var _rsaesJs = require("../runtime/rsaes.js");
var _base64UrlJs = require("../runtime/base64url.js");
var _normalizeKeyJs = require("../runtime/normalize_key.js");
var _normalizeKeyJsDefault = parcelHelpers.interopDefault(_normalizeKeyJs);
var _cekJs = require("../lib/cek.js");
var _cekJsDefault = parcelHelpers.interopDefault(_cekJs);
var _errorsJs = require("../util/errors.js");
var _exportJs = require("../key/export.js");
var _checkKeyTypeJs = require("./check_key_type.js");
var _checkKeyTypeJsDefault = parcelHelpers.interopDefault(_checkKeyTypeJs);
var _aesgcmkwJs = require("./aesgcmkw.js");
async function encryptKeyManagement(alg, enc, key, providedCek, providedParameters = {}) {
    let encryptedKey;
    let parameters;
    let cek;
    (0, _checkKeyTypeJsDefault.default)(alg, key, 'encrypt');
    key = await (0, _normalizeKeyJsDefault.default).normalizePublicKey?.(key, alg) || key;
    switch(alg){
        case 'dir':
            cek = key;
            break;
        case 'ECDH-ES':
        case 'ECDH-ES+A128KW':
        case 'ECDH-ES+A192KW':
        case 'ECDH-ES+A256KW':
            {
                if (!_ecdhesJs.ecdhAllowed(key)) throw new (0, _errorsJs.JOSENotSupported)('ECDH with the provided key is not allowed or not supported by your javascript runtime');
                const { apu, apv } = providedParameters;
                let { epk: ephemeralKey } = providedParameters;
                ephemeralKey || (ephemeralKey = (await _ecdhesJs.generateEpk(key)).privateKey);
                const { x, y, crv, kty } = await (0, _exportJs.exportJWK)(ephemeralKey);
                const sharedSecret = await _ecdhesJs.deriveKey(key, ephemeralKey, alg === 'ECDH-ES' ? enc : alg, alg === 'ECDH-ES' ? (0, _cekJs.bitLength)(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);
                parameters = {
                    epk: {
                        x,
                        crv,
                        kty
                    }
                };
                if (kty === 'EC') parameters.epk.y = y;
                if (apu) parameters.apu = (0, _base64UrlJs.encode)(apu);
                if (apv) parameters.apv = (0, _base64UrlJs.encode)(apv);
                if (alg === 'ECDH-ES') {
                    cek = sharedSecret;
                    break;
                }
                cek = providedCek || (0, _cekJsDefault.default)(enc);
                const kwAlg = alg.slice(-6);
                encryptedKey = await (0, _aeskwJs.wrap)(kwAlg, sharedSecret, cek);
                break;
            }
        case 'RSA1_5':
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512':
            cek = providedCek || (0, _cekJsDefault.default)(enc);
            encryptedKey = await (0, _rsaesJs.encrypt)(alg, key, cek);
            break;
        case 'PBES2-HS256+A128KW':
        case 'PBES2-HS384+A192KW':
        case 'PBES2-HS512+A256KW':
            {
                cek = providedCek || (0, _cekJsDefault.default)(enc);
                const { p2c, p2s } = providedParameters;
                ({ encryptedKey, ...parameters } = await (0, _pbes2KwJs.encrypt)(alg, key, cek, p2c, p2s));
                break;
            }
        case 'A128KW':
        case 'A192KW':
        case 'A256KW':
            cek = providedCek || (0, _cekJsDefault.default)(enc);
            encryptedKey = await (0, _aeskwJs.wrap)(alg, key, cek);
            break;
        case 'A128GCMKW':
        case 'A192GCMKW':
        case 'A256GCMKW':
            {
                cek = providedCek || (0, _cekJsDefault.default)(enc);
                const { iv } = providedParameters;
                ({ encryptedKey, ...parameters } = await (0, _aesgcmkwJs.wrap)(alg, key, cek, iv));
                break;
            }
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported "alg" (JWE Algorithm) header value');
    }
    return {
        cek,
        encryptedKey,
        parameters
    };
}
exports.default = encryptKeyManagement;

},{"../runtime/aeskw.js":"iEW9A","../runtime/ecdhes.js":"9Kf4C","../runtime/pbes2kw.js":"2SPYY","../runtime/rsaes.js":"d5vYq","../runtime/base64url.js":"hmfX7","../runtime/normalize_key.js":"7DsFX","../lib/cek.js":"3wQoI","../util/errors.js":"drZrx","../key/export.js":"04SHK","./check_key_type.js":"kziQH","./aesgcmkw.js":"jiF4B","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"04SHK":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "exportSPKI", ()=>exportSPKI);
parcelHelpers.export(exports, "exportPKCS8", ()=>exportPKCS8);
parcelHelpers.export(exports, "exportJWK", ()=>exportJWK);
var _asn1Js = require("../runtime/asn1.js");
var _keyToJwkJs = require("../runtime/key_to_jwk.js");
var _keyToJwkJsDefault = parcelHelpers.interopDefault(_keyToJwkJs);
async function exportSPKI(key) {
    return (0, _asn1Js.toSPKI)(key);
}
async function exportPKCS8(key) {
    return (0, _asn1Js.toPKCS8)(key);
}
async function exportJWK(key) {
    return (0, _keyToJwkJsDefault.default)(key);
}

},{"../runtime/asn1.js":"2EEbo","../runtime/key_to_jwk.js":"guLeD","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"guLeD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _base64UrlJs = require("./base64url.js");
var _isKeyLikeJs = require("./is_key_like.js");
const keyToJWK = async (key)=>{
    if (key instanceof Uint8Array) return {
        kty: 'oct',
        k: (0, _base64UrlJs.encode)(key)
    };
    if (!(0, _webcryptoJs.isCryptoKey)(key)) throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types), 'Uint8Array'));
    if (!key.extractable) throw new TypeError('non-extractable CryptoKey cannot be exported as a JWK');
    const { ext, key_ops, alg, use, ...jwk } = await (0, _webcryptoJsDefault.default).subtle.exportKey('jwk', key);
    return jwk;
};
exports.default = keyToJWK;

},{"./webcrypto.js":"crCKY","../lib/invalid_key_input.js":"hHcMf","./base64url.js":"hmfX7","./is_key_like.js":"aRx6e","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"e1sJY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compactVerify", ()=>compactVerify);
var _verifyJs = require("../flattened/verify.js");
var _errorsJs = require("../../util/errors.js");
var _bufferUtilsJs = require("../../lib/buffer_utils.js");
async function compactVerify(jws, key, options) {
    if (jws instanceof Uint8Array) jws = (0, _bufferUtilsJs.decoder).decode(jws);
    if (typeof jws !== 'string') throw new (0, _errorsJs.JWSInvalid)('Compact JWS must be a string or Uint8Array');
    const { 0: protectedHeader, 1: payload, 2: signature, length } = jws.split('.');
    if (length !== 3) throw new (0, _errorsJs.JWSInvalid)('Invalid Compact JWS');
    const verified = await (0, _verifyJs.flattenedVerify)({
        payload,
        protected: protectedHeader,
        signature
    }, key, options);
    const result = {
        payload: verified.payload,
        protectedHeader: verified.protectedHeader
    };
    if (typeof key === 'function') return {
        ...result,
        key: verified.key
    };
    return result;
}

},{"../flattened/verify.js":"9kMwY","../../util/errors.js":"drZrx","../../lib/buffer_utils.js":"6CiRi","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"9kMwY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flattenedVerify", ()=>flattenedVerify);
var _base64UrlJs = require("../../runtime/base64url.js");
var _verifyJs = require("../../runtime/verify.js");
var _verifyJsDefault = parcelHelpers.interopDefault(_verifyJs);
var _errorsJs = require("../../util/errors.js");
var _bufferUtilsJs = require("../../lib/buffer_utils.js");
var _isDisjointJs = require("../../lib/is_disjoint.js");
var _isDisjointJsDefault = parcelHelpers.interopDefault(_isDisjointJs);
var _isObjectJs = require("../../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _checkKeyTypeJs = require("../../lib/check_key_type.js");
var _validateCritJs = require("../../lib/validate_crit.js");
var _validateCritJsDefault = parcelHelpers.interopDefault(_validateCritJs);
var _validateAlgorithmsJs = require("../../lib/validate_algorithms.js");
var _validateAlgorithmsJsDefault = parcelHelpers.interopDefault(_validateAlgorithmsJs);
var _isJwkJs = require("../../lib/is_jwk.js");
var _importJs = require("../../key/import.js");
async function flattenedVerify(jws, key, options) {
    if (!(0, _isObjectJsDefault.default)(jws)) throw new (0, _errorsJs.JWSInvalid)('Flattened JWS must be an object');
    if (jws.protected === undefined && jws.header === undefined) throw new (0, _errorsJs.JWSInvalid)('Flattened JWS must have either of the "protected" or "header" members');
    if (jws.protected !== undefined && typeof jws.protected !== 'string') throw new (0, _errorsJs.JWSInvalid)('JWS Protected Header incorrect type');
    if (jws.payload === undefined) throw new (0, _errorsJs.JWSInvalid)('JWS Payload missing');
    if (typeof jws.signature !== 'string') throw new (0, _errorsJs.JWSInvalid)('JWS Signature missing or incorrect type');
    if (jws.header !== undefined && !(0, _isObjectJsDefault.default)(jws.header)) throw new (0, _errorsJs.JWSInvalid)('JWS Unprotected Header incorrect type');
    let parsedProt = {};
    if (jws.protected) try {
        const protectedHeader = (0, _base64UrlJs.decode)(jws.protected);
        parsedProt = JSON.parse((0, _bufferUtilsJs.decoder).decode(protectedHeader));
    } catch  {
        throw new (0, _errorsJs.JWSInvalid)('JWS Protected Header is invalid');
    }
    if (!(0, _isDisjointJsDefault.default)(parsedProt, jws.header)) throw new (0, _errorsJs.JWSInvalid)('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');
    const joseHeader = {
        ...parsedProt,
        ...jws.header
    };
    const extensions = (0, _validateCritJsDefault.default)((0, _errorsJs.JWSInvalid), new Map([
        [
            'b64',
            true
        ]
    ]), options?.crit, parsedProt, joseHeader);
    let b64 = true;
    if (extensions.has('b64')) {
        b64 = parsedProt.b64;
        if (typeof b64 !== 'boolean') throw new (0, _errorsJs.JWSInvalid)('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
    }
    const { alg } = joseHeader;
    if (typeof alg !== 'string' || !alg) throw new (0, _errorsJs.JWSInvalid)('JWS "alg" (Algorithm) Header Parameter missing or invalid');
    const algorithms = options && (0, _validateAlgorithmsJsDefault.default)('algorithms', options.algorithms);
    if (algorithms && !algorithms.has(alg)) throw new (0, _errorsJs.JOSEAlgNotAllowed)('"alg" (Algorithm) Header Parameter value not allowed');
    if (b64) {
        if (typeof jws.payload !== 'string') throw new (0, _errorsJs.JWSInvalid)('JWS Payload must be a string');
    } else if (typeof jws.payload !== 'string' && !(jws.payload instanceof Uint8Array)) throw new (0, _errorsJs.JWSInvalid)('JWS Payload must be a string or an Uint8Array instance');
    let resolvedKey = false;
    if (typeof key === 'function') {
        key = await key(parsedProt, jws);
        resolvedKey = true;
        (0, _checkKeyTypeJs.checkKeyTypeWithJwk)(alg, key, 'verify');
        if ((0, _isJwkJs.isJWK)(key)) key = await (0, _importJs.importJWK)(key, alg);
    } else (0, _checkKeyTypeJs.checkKeyTypeWithJwk)(alg, key, 'verify');
    const data = (0, _bufferUtilsJs.concat)((0, _bufferUtilsJs.encoder).encode(jws.protected ?? ''), (0, _bufferUtilsJs.encoder).encode('.'), typeof jws.payload === 'string' ? (0, _bufferUtilsJs.encoder).encode(jws.payload) : jws.payload);
    let signature;
    try {
        signature = (0, _base64UrlJs.decode)(jws.signature);
    } catch  {
        throw new (0, _errorsJs.JWSInvalid)('Failed to base64url decode the signature');
    }
    const verified = await (0, _verifyJsDefault.default)(alg, key, signature, data);
    if (!verified) throw new (0, _errorsJs.JWSSignatureVerificationFailed)();
    let payload;
    if (b64) try {
        payload = (0, _base64UrlJs.decode)(jws.payload);
    } catch  {
        throw new (0, _errorsJs.JWSInvalid)('Failed to base64url decode the payload');
    }
    else if (typeof jws.payload === 'string') payload = (0, _bufferUtilsJs.encoder).encode(jws.payload);
    else payload = jws.payload;
    const result = {
        payload
    };
    if (jws.protected !== undefined) result.protectedHeader = parsedProt;
    if (jws.header !== undefined) result.unprotectedHeader = jws.header;
    if (resolvedKey) return {
        ...result,
        key
    };
    return result;
}

},{"../../runtime/base64url.js":"hmfX7","../../runtime/verify.js":"bAXhY","../../util/errors.js":"drZrx","../../lib/buffer_utils.js":"6CiRi","../../lib/is_disjoint.js":"8SDOv","../../lib/is_object.js":"6AeNj","../../lib/check_key_type.js":"kziQH","../../lib/validate_crit.js":"czux9","../../lib/validate_algorithms.js":"5vOPm","../../lib/is_jwk.js":"2jsOK","../../key/import.js":"gu3Vs","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"bAXhY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _subtleDsaJs = require("./subtle_dsa.js");
var _subtleDsaJsDefault = parcelHelpers.interopDefault(_subtleDsaJs);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _checkKeyLengthJs = require("./check_key_length.js");
var _checkKeyLengthJsDefault = parcelHelpers.interopDefault(_checkKeyLengthJs);
var _getSignVerifyKeyJs = require("./get_sign_verify_key.js");
var _getSignVerifyKeyJsDefault = parcelHelpers.interopDefault(_getSignVerifyKeyJs);
const verify = async (alg, key, signature, data)=>{
    const cryptoKey = await (0, _getSignVerifyKeyJsDefault.default)(alg, key, 'verify');
    (0, _checkKeyLengthJsDefault.default)(alg, cryptoKey);
    const algorithm = (0, _subtleDsaJsDefault.default)(alg, cryptoKey.algorithm);
    try {
        return await (0, _webcryptoJsDefault.default).subtle.verify(algorithm, cryptoKey, signature, data);
    } catch  {
        return false;
    }
};
exports.default = verify;

},{"./subtle_dsa.js":"91W6q","./webcrypto.js":"crCKY","./check_key_length.js":"5tUbx","./get_sign_verify_key.js":"cq6Qr","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"91W6q":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>subtleDsa);
var _errorsJs = require("../util/errors.js");
function subtleDsa(alg, algorithm) {
    const hash = `SHA-${alg.slice(-3)}`;
    switch(alg){
        case 'HS256':
        case 'HS384':
        case 'HS512':
            return {
                hash,
                name: 'HMAC'
            };
        case 'PS256':
        case 'PS384':
        case 'PS512':
            return {
                hash,
                name: 'RSA-PSS',
                saltLength: alg.slice(-3) >> 3
            };
        case 'RS256':
        case 'RS384':
        case 'RS512':
            return {
                hash,
                name: 'RSASSA-PKCS1-v1_5'
            };
        case 'ES256':
        case 'ES384':
        case 'ES512':
            return {
                hash,
                name: 'ECDSA',
                namedCurve: algorithm.namedCurve
            };
        case 'Ed25519':
            return {
                name: 'Ed25519'
            };
        case 'EdDSA':
            return {
                name: algorithm.name
            };
        default:
            throw new (0, _errorsJs.JOSENotSupported)(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
    }
}

},{"../util/errors.js":"drZrx","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"cq6Qr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getCryptoKey);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _cryptoKeyJs = require("../lib/crypto_key.js");
var _invalidKeyInputJs = require("../lib/invalid_key_input.js");
var _invalidKeyInputJsDefault = parcelHelpers.interopDefault(_invalidKeyInputJs);
var _isKeyLikeJs = require("./is_key_like.js");
var _normalizeKeyJs = require("./normalize_key.js");
var _normalizeKeyJsDefault = parcelHelpers.interopDefault(_normalizeKeyJs);
async function getCryptoKey(alg, key, usage) {
    if (usage === 'sign') key = await (0, _normalizeKeyJsDefault.default).normalizePrivateKey(key, alg);
    if (usage === 'verify') key = await (0, _normalizeKeyJsDefault.default).normalizePublicKey(key, alg);
    if ((0, _webcryptoJs.isCryptoKey)(key)) {
        (0, _cryptoKeyJs.checkSigCryptoKey)(key, alg, usage);
        return key;
    }
    if (key instanceof Uint8Array) {
        if (!alg.startsWith('HS')) throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types)));
        return (0, _webcryptoJsDefault.default).subtle.importKey('raw', key, {
            hash: `SHA-${alg.slice(-3)}`,
            name: 'HMAC'
        }, false, [
            usage
        ]);
    }
    throw new TypeError((0, _invalidKeyInputJsDefault.default)(key, ...(0, _isKeyLikeJs.types), 'Uint8Array', 'JSON Web Key'));
}

},{"./webcrypto.js":"crCKY","../lib/crypto_key.js":"547bG","../lib/invalid_key_input.js":"hHcMf","./is_key_like.js":"aRx6e","./normalize_key.js":"7DsFX","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"afsWj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generalVerify", ()=>generalVerify);
var _verifyJs = require("../flattened/verify.js");
var _errorsJs = require("../../util/errors.js");
var _isObjectJs = require("../../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
async function generalVerify(jws, key, options) {
    if (!(0, _isObjectJsDefault.default)(jws)) throw new (0, _errorsJs.JWSInvalid)('General JWS must be an object');
    if (!Array.isArray(jws.signatures) || !jws.signatures.every((0, _isObjectJsDefault.default))) throw new (0, _errorsJs.JWSInvalid)('JWS Signatures missing or incorrect type');
    for (const signature of jws.signatures)try {
        return await (0, _verifyJs.flattenedVerify)({
            header: signature.header,
            payload: jws.payload,
            protected: signature.protected,
            signature: signature.signature
        }, key, options);
    } catch  {}
    throw new (0, _errorsJs.JWSSignatureVerificationFailed)();
}

},{"../flattened/verify.js":"9kMwY","../../util/errors.js":"drZrx","../../lib/is_object.js":"6AeNj","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"6mf3t":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "jwtVerify", ()=>jwtVerify);
var _verifyJs = require("../jws/compact/verify.js");
var _jwtClaimsSetJs = require("../lib/jwt_claims_set.js");
var _jwtClaimsSetJsDefault = parcelHelpers.interopDefault(_jwtClaimsSetJs);
var _errorsJs = require("../util/errors.js");
async function jwtVerify(jwt, key, options) {
    const verified = await (0, _verifyJs.compactVerify)(jwt, key, options);
    if (verified.protectedHeader.crit?.includes('b64') && verified.protectedHeader.b64 === false) throw new (0, _errorsJs.JWTInvalid)('JWTs MUST NOT use unencoded payload');
    const payload = (0, _jwtClaimsSetJsDefault.default)(verified.protectedHeader, verified.payload, options);
    const result = {
        payload,
        protectedHeader: verified.protectedHeader
    };
    if (typeof key === 'function') return {
        ...result,
        key: verified.key
    };
    return result;
}

},{"../jws/compact/verify.js":"e1sJY","../lib/jwt_claims_set.js":"bz6vN","../util/errors.js":"drZrx","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"bz6vN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _errorsJs = require("../util/errors.js");
var _bufferUtilsJs = require("./buffer_utils.js");
var _epochJs = require("./epoch.js");
var _epochJsDefault = parcelHelpers.interopDefault(_epochJs);
var _secsJs = require("./secs.js");
var _secsJsDefault = parcelHelpers.interopDefault(_secsJs);
var _isObjectJs = require("./is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
const normalizeTyp = (value)=>value.toLowerCase().replace(/^application\//, '');
const checkAudiencePresence = (audPayload, audOption)=>{
    if (typeof audPayload === 'string') return audOption.includes(audPayload);
    if (Array.isArray(audPayload)) return audOption.some(Set.prototype.has.bind(new Set(audPayload)));
    return false;
};
exports.default = (protectedHeader, encodedPayload, options = {})=>{
    let payload;
    try {
        payload = JSON.parse((0, _bufferUtilsJs.decoder).decode(encodedPayload));
    } catch  {}
    if (!(0, _isObjectJsDefault.default)(payload)) throw new (0, _errorsJs.JWTInvalid)('JWT Claims Set must be a top-level JSON object');
    const { typ } = options;
    if (typ && (typeof protectedHeader.typ !== 'string' || normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ))) throw new (0, _errorsJs.JWTClaimValidationFailed)('unexpected "typ" JWT header value', payload, 'typ', 'check_failed');
    const { requiredClaims = [], issuer, subject, audience, maxTokenAge } = options;
    const presenceCheck = [
        ...requiredClaims
    ];
    if (maxTokenAge !== undefined) presenceCheck.push('iat');
    if (audience !== undefined) presenceCheck.push('aud');
    if (subject !== undefined) presenceCheck.push('sub');
    if (issuer !== undefined) presenceCheck.push('iss');
    for (const claim of new Set(presenceCheck.reverse())){
        if (!(claim in payload)) throw new (0, _errorsJs.JWTClaimValidationFailed)(`missing required "${claim}" claim`, payload, claim, 'missing');
    }
    if (issuer && !(Array.isArray(issuer) ? issuer : [
        issuer
    ]).includes(payload.iss)) throw new (0, _errorsJs.JWTClaimValidationFailed)('unexpected "iss" claim value', payload, 'iss', 'check_failed');
    if (subject && payload.sub !== subject) throw new (0, _errorsJs.JWTClaimValidationFailed)('unexpected "sub" claim value', payload, 'sub', 'check_failed');
    if (audience && !checkAudiencePresence(payload.aud, typeof audience === 'string' ? [
        audience
    ] : audience)) throw new (0, _errorsJs.JWTClaimValidationFailed)('unexpected "aud" claim value', payload, 'aud', 'check_failed');
    let tolerance;
    switch(typeof options.clockTolerance){
        case 'string':
            tolerance = (0, _secsJsDefault.default)(options.clockTolerance);
            break;
        case 'number':
            tolerance = options.clockTolerance;
            break;
        case 'undefined':
            tolerance = 0;
            break;
        default:
            throw new TypeError('Invalid clockTolerance option type');
    }
    const { currentDate } = options;
    const now = (0, _epochJsDefault.default)(currentDate || new Date());
    if ((payload.iat !== undefined || maxTokenAge) && typeof payload.iat !== 'number') throw new (0, _errorsJs.JWTClaimValidationFailed)('"iat" claim must be a number', payload, 'iat', 'invalid');
    if (payload.nbf !== undefined) {
        if (typeof payload.nbf !== 'number') throw new (0, _errorsJs.JWTClaimValidationFailed)('"nbf" claim must be a number', payload, 'nbf', 'invalid');
        if (payload.nbf > now + tolerance) throw new (0, _errorsJs.JWTClaimValidationFailed)('"nbf" claim timestamp check failed', payload, 'nbf', 'check_failed');
    }
    if (payload.exp !== undefined) {
        if (typeof payload.exp !== 'number') throw new (0, _errorsJs.JWTClaimValidationFailed)('"exp" claim must be a number', payload, 'exp', 'invalid');
        if (payload.exp <= now - tolerance) throw new (0, _errorsJs.JWTExpired)('"exp" claim timestamp check failed', payload, 'exp', 'check_failed');
    }
    if (maxTokenAge) {
        const age = now - payload.iat;
        const max = typeof maxTokenAge === 'number' ? maxTokenAge : (0, _secsJsDefault.default)(maxTokenAge);
        if (age - tolerance > max) throw new (0, _errorsJs.JWTExpired)('"iat" claim timestamp check failed (too far in the past)', payload, 'iat', 'check_failed');
        if (age < 0 - tolerance) throw new (0, _errorsJs.JWTClaimValidationFailed)('"iat" claim timestamp check failed (it should be in the past)', payload, 'iat', 'check_failed');
    }
    return payload;
};

},{"../util/errors.js":"drZrx","./buffer_utils.js":"6CiRi","./epoch.js":"1Jyqm","./secs.js":"iCDy8","./is_object.js":"6AeNj","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"1Jyqm":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (date)=>Math.floor(date.getTime() / 1000);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"iCDy8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const minute = 60;
const hour = minute * 60;
const day = hour * 24;
const week = day * 7;
const year = day * 365.25;
const REGEX = /^(\+|\-)? ?(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)(?: (ago|from now))?$/i;
exports.default = (str)=>{
    const matched = REGEX.exec(str);
    if (!matched || matched[4] && matched[1]) throw new TypeError('Invalid time period format');
    const value = parseFloat(matched[2]);
    const unit = matched[3].toLowerCase();
    let numericDate;
    switch(unit){
        case 'sec':
        case 'secs':
        case 'second':
        case 'seconds':
        case 's':
            numericDate = Math.round(value);
            break;
        case 'minute':
        case 'minutes':
        case 'min':
        case 'mins':
        case 'm':
            numericDate = Math.round(value * minute);
            break;
        case 'hour':
        case 'hours':
        case 'hr':
        case 'hrs':
        case 'h':
            numericDate = Math.round(value * hour);
            break;
        case 'day':
        case 'days':
        case 'd':
            numericDate = Math.round(value * day);
            break;
        case 'week':
        case 'weeks':
        case 'w':
            numericDate = Math.round(value * week);
            break;
        default:
            numericDate = Math.round(value * year);
            break;
    }
    if (matched[1] === '-' || matched[4] === 'ago') return -numericDate;
    return numericDate;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"zT60K":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "jwtDecrypt", ()=>jwtDecrypt);
var _decryptJs = require("../jwe/compact/decrypt.js");
var _jwtClaimsSetJs = require("../lib/jwt_claims_set.js");
var _jwtClaimsSetJsDefault = parcelHelpers.interopDefault(_jwtClaimsSetJs);
var _errorsJs = require("../util/errors.js");
async function jwtDecrypt(jwt, key, options) {
    const decrypted = await (0, _decryptJs.compactDecrypt)(jwt, key, options);
    const payload = (0, _jwtClaimsSetJsDefault.default)(decrypted.protectedHeader, decrypted.plaintext, options);
    const { protectedHeader } = decrypted;
    if (protectedHeader.iss !== undefined && protectedHeader.iss !== payload.iss) throw new (0, _errorsJs.JWTClaimValidationFailed)('replicated "iss" claim header parameter mismatch', payload, 'iss', 'mismatch');
    if (protectedHeader.sub !== undefined && protectedHeader.sub !== payload.sub) throw new (0, _errorsJs.JWTClaimValidationFailed)('replicated "sub" claim header parameter mismatch', payload, 'sub', 'mismatch');
    if (protectedHeader.aud !== undefined && JSON.stringify(protectedHeader.aud) !== JSON.stringify(payload.aud)) throw new (0, _errorsJs.JWTClaimValidationFailed)('replicated "aud" claim header parameter mismatch', payload, 'aud', 'mismatch');
    const result = {
        payload,
        protectedHeader
    };
    if (typeof key === 'function') return {
        ...result,
        key: decrypted.key
    };
    return result;
}

},{"../jwe/compact/decrypt.js":"aRaar","../lib/jwt_claims_set.js":"bz6vN","../util/errors.js":"drZrx","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jV286":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CompactEncrypt", ()=>CompactEncrypt);
var _encryptJs = require("../flattened/encrypt.js");
class CompactEncrypt {
    constructor(plaintext){
        this._flattened = new (0, _encryptJs.FlattenedEncrypt)(plaintext);
    }
    setContentEncryptionKey(cek) {
        this._flattened.setContentEncryptionKey(cek);
        return this;
    }
    setInitializationVector(iv) {
        this._flattened.setInitializationVector(iv);
        return this;
    }
    setProtectedHeader(protectedHeader) {
        this._flattened.setProtectedHeader(protectedHeader);
        return this;
    }
    setKeyManagementParameters(parameters) {
        this._flattened.setKeyManagementParameters(parameters);
        return this;
    }
    async encrypt(key, options) {
        const jwe = await this._flattened.encrypt(key, options);
        return [
            jwe.protected,
            jwe.encrypted_key,
            jwe.iv,
            jwe.ciphertext,
            jwe.tag
        ].join('.');
    }
}

},{"../flattened/encrypt.js":"46C8R","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"h85r4":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CompactSign", ()=>CompactSign);
var _signJs = require("../flattened/sign.js");
class CompactSign {
    constructor(payload){
        this._flattened = new (0, _signJs.FlattenedSign)(payload);
    }
    setProtectedHeader(protectedHeader) {
        this._flattened.setProtectedHeader(protectedHeader);
        return this;
    }
    async sign(key, options) {
        const jws = await this._flattened.sign(key, options);
        if (jws.payload === undefined) throw new TypeError('use the flattened module for creating JWS with b64: false');
        return `${jws.protected}.${jws.payload}.${jws.signature}`;
    }
}

},{"../flattened/sign.js":"k3wVp","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"k3wVp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FlattenedSign", ()=>FlattenedSign);
var _base64UrlJs = require("../../runtime/base64url.js");
var _signJs = require("../../runtime/sign.js");
var _signJsDefault = parcelHelpers.interopDefault(_signJs);
var _isDisjointJs = require("../../lib/is_disjoint.js");
var _isDisjointJsDefault = parcelHelpers.interopDefault(_isDisjointJs);
var _errorsJs = require("../../util/errors.js");
var _bufferUtilsJs = require("../../lib/buffer_utils.js");
var _checkKeyTypeJs = require("../../lib/check_key_type.js");
var _validateCritJs = require("../../lib/validate_crit.js");
var _validateCritJsDefault = parcelHelpers.interopDefault(_validateCritJs);
class FlattenedSign {
    constructor(payload){
        if (!(payload instanceof Uint8Array)) throw new TypeError('payload must be an instance of Uint8Array');
        this._payload = payload;
    }
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) throw new TypeError('setProtectedHeader can only be called once');
        this._protectedHeader = protectedHeader;
        return this;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this._unprotectedHeader) throw new TypeError('setUnprotectedHeader can only be called once');
        this._unprotectedHeader = unprotectedHeader;
        return this;
    }
    async sign(key, options) {
        if (!this._protectedHeader && !this._unprotectedHeader) throw new (0, _errorsJs.JWSInvalid)('either setProtectedHeader or setUnprotectedHeader must be called before #sign()');
        if (!(0, _isDisjointJsDefault.default)(this._protectedHeader, this._unprotectedHeader)) throw new (0, _errorsJs.JWSInvalid)('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');
        const joseHeader = {
            ...this._protectedHeader,
            ...this._unprotectedHeader
        };
        const extensions = (0, _validateCritJsDefault.default)((0, _errorsJs.JWSInvalid), new Map([
            [
                'b64',
                true
            ]
        ]), options?.crit, this._protectedHeader, joseHeader);
        let b64 = true;
        if (extensions.has('b64')) {
            b64 = this._protectedHeader.b64;
            if (typeof b64 !== 'boolean') throw new (0, _errorsJs.JWSInvalid)('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
        }
        const { alg } = joseHeader;
        if (typeof alg !== 'string' || !alg) throw new (0, _errorsJs.JWSInvalid)('JWS "alg" (Algorithm) Header Parameter missing or invalid');
        (0, _checkKeyTypeJs.checkKeyTypeWithJwk)(alg, key, 'sign');
        let payload = this._payload;
        if (b64) payload = (0, _bufferUtilsJs.encoder).encode((0, _base64UrlJs.encode)(payload));
        let protectedHeader;
        if (this._protectedHeader) protectedHeader = (0, _bufferUtilsJs.encoder).encode((0, _base64UrlJs.encode)(JSON.stringify(this._protectedHeader)));
        else protectedHeader = (0, _bufferUtilsJs.encoder).encode('');
        const data = (0, _bufferUtilsJs.concat)(protectedHeader, (0, _bufferUtilsJs.encoder).encode('.'), payload);
        const signature = await (0, _signJsDefault.default)(alg, key, data);
        const jws = {
            signature: (0, _base64UrlJs.encode)(signature),
            payload: ''
        };
        if (b64) jws.payload = (0, _bufferUtilsJs.decoder).decode(payload);
        if (this._unprotectedHeader) jws.header = this._unprotectedHeader;
        if (this._protectedHeader) jws.protected = (0, _bufferUtilsJs.decoder).decode(protectedHeader);
        return jws;
    }
}

},{"../../runtime/base64url.js":"hmfX7","../../runtime/sign.js":"7Cw3j","../../lib/is_disjoint.js":"8SDOv","../../util/errors.js":"drZrx","../../lib/buffer_utils.js":"6CiRi","../../lib/check_key_type.js":"kziQH","../../lib/validate_crit.js":"czux9","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"7Cw3j":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _subtleDsaJs = require("./subtle_dsa.js");
var _subtleDsaJsDefault = parcelHelpers.interopDefault(_subtleDsaJs);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _checkKeyLengthJs = require("./check_key_length.js");
var _checkKeyLengthJsDefault = parcelHelpers.interopDefault(_checkKeyLengthJs);
var _getSignVerifyKeyJs = require("./get_sign_verify_key.js");
var _getSignVerifyKeyJsDefault = parcelHelpers.interopDefault(_getSignVerifyKeyJs);
const sign = async (alg, key, data)=>{
    const cryptoKey = await (0, _getSignVerifyKeyJsDefault.default)(alg, key, 'sign');
    (0, _checkKeyLengthJsDefault.default)(alg, cryptoKey);
    const signature = await (0, _webcryptoJsDefault.default).subtle.sign((0, _subtleDsaJsDefault.default)(alg, cryptoKey.algorithm), cryptoKey, data);
    return new Uint8Array(signature);
};
exports.default = sign;

},{"./subtle_dsa.js":"91W6q","./webcrypto.js":"crCKY","./check_key_length.js":"5tUbx","./get_sign_verify_key.js":"cq6Qr","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"fdViL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GeneralSign", ()=>GeneralSign);
var _signJs = require("../flattened/sign.js");
var _errorsJs = require("../../util/errors.js");
class IndividualSignature {
    constructor(sig, key, options){
        this.parent = sig;
        this.key = key;
        this.options = options;
    }
    setProtectedHeader(protectedHeader) {
        if (this.protectedHeader) throw new TypeError('setProtectedHeader can only be called once');
        this.protectedHeader = protectedHeader;
        return this;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this.unprotectedHeader) throw new TypeError('setUnprotectedHeader can only be called once');
        this.unprotectedHeader = unprotectedHeader;
        return this;
    }
    addSignature(...args) {
        return this.parent.addSignature(...args);
    }
    sign(...args) {
        return this.parent.sign(...args);
    }
    done() {
        return this.parent;
    }
}
class GeneralSign {
    constructor(payload){
        this._signatures = [];
        this._payload = payload;
    }
    addSignature(key, options) {
        const signature = new IndividualSignature(this, key, options);
        this._signatures.push(signature);
        return signature;
    }
    async sign() {
        if (!this._signatures.length) throw new (0, _errorsJs.JWSInvalid)('at least one signature must be added');
        const jws = {
            signatures: [],
            payload: ''
        };
        for(let i = 0; i < this._signatures.length; i++){
            const signature = this._signatures[i];
            const flattened = new (0, _signJs.FlattenedSign)(this._payload);
            flattened.setProtectedHeader(signature.protectedHeader);
            flattened.setUnprotectedHeader(signature.unprotectedHeader);
            const { payload, ...rest } = await flattened.sign(signature.key, signature.options);
            if (i === 0) jws.payload = payload;
            else if (jws.payload !== payload) throw new (0, _errorsJs.JWSInvalid)('inconsistent use of JWS Unencoded Payload (RFC7797)');
            jws.signatures.push(rest);
        }
        return jws;
    }
}

},{"../flattened/sign.js":"k3wVp","../../util/errors.js":"drZrx","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"2xK9f":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SignJWT", ()=>SignJWT);
var _signJs = require("../jws/compact/sign.js");
var _errorsJs = require("../util/errors.js");
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _produceJs = require("./produce.js");
class SignJWT extends (0, _produceJs.ProduceJWT) {
    setProtectedHeader(protectedHeader) {
        this._protectedHeader = protectedHeader;
        return this;
    }
    async sign(key, options) {
        const sig = new (0, _signJs.CompactSign)((0, _bufferUtilsJs.encoder).encode(JSON.stringify(this._payload)));
        sig.setProtectedHeader(this._protectedHeader);
        if (Array.isArray(this._protectedHeader?.crit) && this._protectedHeader.crit.includes('b64') && this._protectedHeader.b64 === false) throw new (0, _errorsJs.JWTInvalid)('JWTs MUST NOT use unencoded payload');
        return sig.sign(key, options);
    }
}

},{"../jws/compact/sign.js":"h85r4","../util/errors.js":"drZrx","../lib/buffer_utils.js":"6CiRi","./produce.js":"l8xt5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"l8xt5":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ProduceJWT", ()=>ProduceJWT);
var _epochJs = require("../lib/epoch.js");
var _epochJsDefault = parcelHelpers.interopDefault(_epochJs);
var _isObjectJs = require("../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _secsJs = require("../lib/secs.js");
var _secsJsDefault = parcelHelpers.interopDefault(_secsJs);
function validateInput(label, input) {
    if (!Number.isFinite(input)) throw new TypeError(`Invalid ${label} input`);
    return input;
}
class ProduceJWT {
    constructor(payload = {}){
        if (!(0, _isObjectJsDefault.default)(payload)) throw new TypeError('JWT Claims Set MUST be an object');
        this._payload = payload;
    }
    setIssuer(issuer) {
        this._payload = {
            ...this._payload,
            iss: issuer
        };
        return this;
    }
    setSubject(subject) {
        this._payload = {
            ...this._payload,
            sub: subject
        };
        return this;
    }
    setAudience(audience) {
        this._payload = {
            ...this._payload,
            aud: audience
        };
        return this;
    }
    setJti(jwtId) {
        this._payload = {
            ...this._payload,
            jti: jwtId
        };
        return this;
    }
    setNotBefore(input) {
        if (typeof input === 'number') this._payload = {
            ...this._payload,
            nbf: validateInput('setNotBefore', input)
        };
        else if (input instanceof Date) this._payload = {
            ...this._payload,
            nbf: validateInput('setNotBefore', (0, _epochJsDefault.default)(input))
        };
        else this._payload = {
            ...this._payload,
            nbf: (0, _epochJsDefault.default)(new Date()) + (0, _secsJsDefault.default)(input)
        };
        return this;
    }
    setExpirationTime(input) {
        if (typeof input === 'number') this._payload = {
            ...this._payload,
            exp: validateInput('setExpirationTime', input)
        };
        else if (input instanceof Date) this._payload = {
            ...this._payload,
            exp: validateInput('setExpirationTime', (0, _epochJsDefault.default)(input))
        };
        else this._payload = {
            ...this._payload,
            exp: (0, _epochJsDefault.default)(new Date()) + (0, _secsJsDefault.default)(input)
        };
        return this;
    }
    setIssuedAt(input) {
        if (typeof input === 'undefined') this._payload = {
            ...this._payload,
            iat: (0, _epochJsDefault.default)(new Date())
        };
        else if (input instanceof Date) this._payload = {
            ...this._payload,
            iat: validateInput('setIssuedAt', (0, _epochJsDefault.default)(input))
        };
        else if (typeof input === 'string') this._payload = {
            ...this._payload,
            iat: validateInput('setIssuedAt', (0, _epochJsDefault.default)(new Date()) + (0, _secsJsDefault.default)(input))
        };
        else this._payload = {
            ...this._payload,
            iat: validateInput('setIssuedAt', input)
        };
        return this;
    }
}

},{"../lib/epoch.js":"1Jyqm","../lib/is_object.js":"6AeNj","../lib/secs.js":"iCDy8","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jJPUI":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EncryptJWT", ()=>EncryptJWT);
var _encryptJs = require("../jwe/compact/encrypt.js");
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _produceJs = require("./produce.js");
class EncryptJWT extends (0, _produceJs.ProduceJWT) {
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) throw new TypeError('setProtectedHeader can only be called once');
        this._protectedHeader = protectedHeader;
        return this;
    }
    setKeyManagementParameters(parameters) {
        if (this._keyManagementParameters) throw new TypeError('setKeyManagementParameters can only be called once');
        this._keyManagementParameters = parameters;
        return this;
    }
    setContentEncryptionKey(cek) {
        if (this._cek) throw new TypeError('setContentEncryptionKey can only be called once');
        this._cek = cek;
        return this;
    }
    setInitializationVector(iv) {
        if (this._iv) throw new TypeError('setInitializationVector can only be called once');
        this._iv = iv;
        return this;
    }
    replicateIssuerAsHeader() {
        this._replicateIssuerAsHeader = true;
        return this;
    }
    replicateSubjectAsHeader() {
        this._replicateSubjectAsHeader = true;
        return this;
    }
    replicateAudienceAsHeader() {
        this._replicateAudienceAsHeader = true;
        return this;
    }
    async encrypt(key, options) {
        const enc = new (0, _encryptJs.CompactEncrypt)((0, _bufferUtilsJs.encoder).encode(JSON.stringify(this._payload)));
        if (this._replicateIssuerAsHeader) this._protectedHeader = {
            ...this._protectedHeader,
            iss: this._payload.iss
        };
        if (this._replicateSubjectAsHeader) this._protectedHeader = {
            ...this._protectedHeader,
            sub: this._payload.sub
        };
        if (this._replicateAudienceAsHeader) this._protectedHeader = {
            ...this._protectedHeader,
            aud: this._payload.aud
        };
        enc.setProtectedHeader(this._protectedHeader);
        if (this._iv) enc.setInitializationVector(this._iv);
        if (this._cek) enc.setContentEncryptionKey(this._cek);
        if (this._keyManagementParameters) enc.setKeyManagementParameters(this._keyManagementParameters);
        return enc.encrypt(key, options);
    }
}

},{"../jwe/compact/encrypt.js":"jV286","../lib/buffer_utils.js":"6CiRi","./produce.js":"l8xt5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"1LCWm":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calculateJwkThumbprint", ()=>calculateJwkThumbprint);
parcelHelpers.export(exports, "calculateJwkThumbprintUri", ()=>calculateJwkThumbprintUri);
var _digestJs = require("../runtime/digest.js");
var _digestJsDefault = parcelHelpers.interopDefault(_digestJs);
var _base64UrlJs = require("../runtime/base64url.js");
var _errorsJs = require("../util/errors.js");
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _isObjectJs = require("../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
const check = (value, description)=>{
    if (typeof value !== 'string' || !value) throw new (0, _errorsJs.JWKInvalid)(`${description} missing or invalid`);
};
async function calculateJwkThumbprint(jwk, digestAlgorithm) {
    if (!(0, _isObjectJsDefault.default)(jwk)) throw new TypeError('JWK must be an object');
    digestAlgorithm ?? (digestAlgorithm = 'sha256');
    if (digestAlgorithm !== 'sha256' && digestAlgorithm !== 'sha384' && digestAlgorithm !== 'sha512') throw new TypeError('digestAlgorithm must one of "sha256", "sha384", or "sha512"');
    let components;
    switch(jwk.kty){
        case 'EC':
            check(jwk.crv, '"crv" (Curve) Parameter');
            check(jwk.x, '"x" (X Coordinate) Parameter');
            check(jwk.y, '"y" (Y Coordinate) Parameter');
            components = {
                crv: jwk.crv,
                kty: jwk.kty,
                x: jwk.x,
                y: jwk.y
            };
            break;
        case 'OKP':
            check(jwk.crv, '"crv" (Subtype of Key Pair) Parameter');
            check(jwk.x, '"x" (Public Key) Parameter');
            components = {
                crv: jwk.crv,
                kty: jwk.kty,
                x: jwk.x
            };
            break;
        case 'RSA':
            check(jwk.e, '"e" (Exponent) Parameter');
            check(jwk.n, '"n" (Modulus) Parameter');
            components = {
                e: jwk.e,
                kty: jwk.kty,
                n: jwk.n
            };
            break;
        case 'oct':
            check(jwk.k, '"k" (Key Value) Parameter');
            components = {
                k: jwk.k,
                kty: jwk.kty
            };
            break;
        default:
            throw new (0, _errorsJs.JOSENotSupported)('"kty" (Key Type) Parameter missing or unsupported');
    }
    const data = (0, _bufferUtilsJs.encoder).encode(JSON.stringify(components));
    return (0, _base64UrlJs.encode)(await (0, _digestJsDefault.default)(digestAlgorithm, data));
}
async function calculateJwkThumbprintUri(jwk, digestAlgorithm) {
    digestAlgorithm ?? (digestAlgorithm = 'sha256');
    const thumbprint = await calculateJwkThumbprint(jwk, digestAlgorithm);
    return `urn:ietf:params:oauth:jwk-thumbprint:sha-${digestAlgorithm.slice(-3)}:${thumbprint}`;
}

},{"../runtime/digest.js":"fDsy9","../runtime/base64url.js":"hmfX7","../util/errors.js":"drZrx","../lib/buffer_utils.js":"6CiRi","../lib/is_object.js":"6AeNj","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"8aDeU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EmbeddedJWK", ()=>EmbeddedJWK);
var _importJs = require("../key/import.js");
var _isObjectJs = require("../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _errorsJs = require("../util/errors.js");
async function EmbeddedJWK(protectedHeader, token) {
    const joseHeader = {
        ...protectedHeader,
        ...token?.header
    };
    if (!(0, _isObjectJsDefault.default)(joseHeader.jwk)) throw new (0, _errorsJs.JWSInvalid)('"jwk" (JSON Web Key) Header Parameter must be a JSON object');
    const key = await (0, _importJs.importJWK)({
        ...joseHeader.jwk,
        ext: true
    }, joseHeader.alg);
    if (key instanceof Uint8Array || key.type !== 'public') throw new (0, _errorsJs.JWSInvalid)('"jwk" (JSON Web Key) Header Parameter must be a public key');
    return key;
}

},{"../key/import.js":"gu3Vs","../lib/is_object.js":"6AeNj","../util/errors.js":"drZrx","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jpAM0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createLocalJWKSet", ()=>createLocalJWKSet);
var _importJs = require("../key/import.js");
var _errorsJs = require("../util/errors.js");
var _isObjectJs = require("../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
function getKtyFromAlg(alg) {
    switch(typeof alg === 'string' && alg.slice(0, 2)){
        case 'RS':
        case 'PS':
            return 'RSA';
        case 'ES':
            return 'EC';
        case 'Ed':
            return 'OKP';
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Unsupported "alg" value for a JSON Web Key Set');
    }
}
function isJWKSLike(jwks) {
    return jwks && typeof jwks === 'object' && Array.isArray(jwks.keys) && jwks.keys.every(isJWKLike);
}
function isJWKLike(key) {
    return (0, _isObjectJsDefault.default)(key);
}
function clone(obj) {
    if (typeof structuredClone === 'function') return structuredClone(obj);
    return JSON.parse(JSON.stringify(obj));
}
class LocalJWKSet {
    constructor(jwks){
        this._cached = new WeakMap();
        if (!isJWKSLike(jwks)) throw new (0, _errorsJs.JWKSInvalid)('JSON Web Key Set malformed');
        this._jwks = clone(jwks);
    }
    async getKey(protectedHeader, token) {
        const { alg, kid } = {
            ...protectedHeader,
            ...token?.header
        };
        const kty = getKtyFromAlg(alg);
        const candidates = this._jwks.keys.filter((jwk)=>{
            let candidate = kty === jwk.kty;
            if (candidate && typeof kid === 'string') candidate = kid === jwk.kid;
            if (candidate && typeof jwk.alg === 'string') candidate = alg === jwk.alg;
            if (candidate && typeof jwk.use === 'string') candidate = jwk.use === 'sig';
            if (candidate && Array.isArray(jwk.key_ops)) candidate = jwk.key_ops.includes('verify');
            if (candidate) switch(alg){
                case 'ES256':
                    candidate = jwk.crv === 'P-256';
                    break;
                case 'ES256K':
                    candidate = jwk.crv === 'secp256k1';
                    break;
                case 'ES384':
                    candidate = jwk.crv === 'P-384';
                    break;
                case 'ES512':
                    candidate = jwk.crv === 'P-521';
                    break;
                case 'Ed25519':
                    candidate = jwk.crv === 'Ed25519';
                    break;
                case 'EdDSA':
                    candidate = jwk.crv === 'Ed25519' || jwk.crv === 'Ed448';
                    break;
            }
            return candidate;
        });
        const { 0: jwk, length } = candidates;
        if (length === 0) throw new (0, _errorsJs.JWKSNoMatchingKey)();
        if (length !== 1) {
            const error = new (0, _errorsJs.JWKSMultipleMatchingKeys)();
            const { _cached } = this;
            error[Symbol.asyncIterator] = async function*() {
                for (const jwk of candidates)try {
                    yield await importWithAlgCache(_cached, jwk, alg);
                } catch  {}
            };
            throw error;
        }
        return importWithAlgCache(this._cached, jwk, alg);
    }
}
async function importWithAlgCache(cache, jwk, alg) {
    const cached = cache.get(jwk) || cache.set(jwk, {}).get(jwk);
    if (cached[alg] === undefined) {
        const key = await (0, _importJs.importJWK)({
            ...jwk,
            ext: true
        }, alg);
        if (key instanceof Uint8Array || key.type !== 'public') throw new (0, _errorsJs.JWKSInvalid)('JSON Web Key Set members must be public keys');
        cached[alg] = key;
    }
    return cached[alg];
}
function createLocalJWKSet(jwks) {
    const set = new LocalJWKSet(jwks);
    const localJWKSet = async (protectedHeader, token)=>set.getKey(protectedHeader, token);
    Object.defineProperties(localJWKSet, {
        jwks: {
            value: ()=>clone(set._jwks),
            enumerable: true,
            configurable: false,
            writable: false
        }
    });
    return localJWKSet;
}

},{"../key/import.js":"gu3Vs","../util/errors.js":"drZrx","../lib/is_object.js":"6AeNj","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"gnekA":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "jwksCache", ()=>jwksCache);
parcelHelpers.export(exports, "createRemoteJWKSet", ()=>createRemoteJWKSet);
parcelHelpers.export(exports, "experimental_jwksCache", ()=>experimental_jwksCache);
var _fetchJwksJs = require("../runtime/fetch_jwks.js");
var _fetchJwksJsDefault = parcelHelpers.interopDefault(_fetchJwksJs);
var _errorsJs = require("../util/errors.js");
var _localJs = require("./local.js");
var _isObjectJs = require("../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
function isCloudflareWorkers() {
    return typeof WebSocketPair !== 'undefined' || typeof navigator !== 'undefined' && navigator.userAgent === 'Cloudflare-Workers' || typeof EdgeRuntime !== 'undefined' && EdgeRuntime === 'vercel';
}
let USER_AGENT;
if (typeof navigator === 'undefined' || !navigator.userAgent?.startsWith?.('Mozilla/5.0 ')) {
    const NAME = 'jose';
    const VERSION = 'v5.10.0';
    USER_AGENT = `${NAME}/${VERSION}`;
}
const jwksCache = Symbol();
function isFreshJwksCache(input, cacheMaxAge) {
    if (typeof input !== 'object' || input === null) return false;
    if (!('uat' in input) || typeof input.uat !== 'number' || Date.now() - input.uat >= cacheMaxAge) return false;
    if (!('jwks' in input) || !(0, _isObjectJsDefault.default)(input.jwks) || !Array.isArray(input.jwks.keys) || !Array.prototype.every.call(input.jwks.keys, (0, _isObjectJsDefault.default))) return false;
    return true;
}
class RemoteJWKSet {
    constructor(url, options){
        if (!(url instanceof URL)) throw new TypeError('url must be an instance of URL');
        this._url = new URL(url.href);
        this._options = {
            agent: options?.agent,
            headers: options?.headers
        };
        this._timeoutDuration = typeof options?.timeoutDuration === 'number' ? options?.timeoutDuration : 5000;
        this._cooldownDuration = typeof options?.cooldownDuration === 'number' ? options?.cooldownDuration : 30000;
        this._cacheMaxAge = typeof options?.cacheMaxAge === 'number' ? options?.cacheMaxAge : 600000;
        if (options?.[jwksCache] !== undefined) {
            this._cache = options?.[jwksCache];
            if (isFreshJwksCache(options?.[jwksCache], this._cacheMaxAge)) {
                this._jwksTimestamp = this._cache.uat;
                this._local = (0, _localJs.createLocalJWKSet)(this._cache.jwks);
            }
        }
    }
    coolingDown() {
        return typeof this._jwksTimestamp === 'number' ? Date.now() < this._jwksTimestamp + this._cooldownDuration : false;
    }
    fresh() {
        return typeof this._jwksTimestamp === 'number' ? Date.now() < this._jwksTimestamp + this._cacheMaxAge : false;
    }
    async getKey(protectedHeader, token) {
        if (!this._local || !this.fresh()) await this.reload();
        try {
            return await this._local(protectedHeader, token);
        } catch (err) {
            if (err instanceof (0, _errorsJs.JWKSNoMatchingKey)) {
                if (this.coolingDown() === false) {
                    await this.reload();
                    return this._local(protectedHeader, token);
                }
            }
            throw err;
        }
    }
    async reload() {
        if (this._pendingFetch && isCloudflareWorkers()) this._pendingFetch = undefined;
        const headers = new Headers(this._options.headers);
        if (USER_AGENT && !headers.has('User-Agent')) {
            headers.set('User-Agent', USER_AGENT);
            this._options.headers = Object.fromEntries(headers.entries());
        }
        this._pendingFetch || (this._pendingFetch = (0, _fetchJwksJsDefault.default)(this._url, this._timeoutDuration, this._options).then((json)=>{
            this._local = (0, _localJs.createLocalJWKSet)(json);
            if (this._cache) {
                this._cache.uat = Date.now();
                this._cache.jwks = json;
            }
            this._jwksTimestamp = Date.now();
            this._pendingFetch = undefined;
        }).catch((err)=>{
            this._pendingFetch = undefined;
            throw err;
        }));
        await this._pendingFetch;
    }
}
function createRemoteJWKSet(url, options) {
    const set = new RemoteJWKSet(url, options);
    const remoteJWKSet = async (protectedHeader, token)=>set.getKey(protectedHeader, token);
    Object.defineProperties(remoteJWKSet, {
        coolingDown: {
            get: ()=>set.coolingDown(),
            enumerable: true,
            configurable: false
        },
        fresh: {
            get: ()=>set.fresh(),
            enumerable: true,
            configurable: false
        },
        reload: {
            value: ()=>set.reload(),
            enumerable: true,
            configurable: false,
            writable: false
        },
        reloading: {
            get: ()=>!!set._pendingFetch,
            enumerable: true,
            configurable: false
        },
        jwks: {
            value: ()=>set._local?.jwks(),
            enumerable: true,
            configurable: false,
            writable: false
        }
    });
    return remoteJWKSet;
}
const experimental_jwksCache = jwksCache;

},{"../runtime/fetch_jwks.js":"evXMh","../util/errors.js":"drZrx","./local.js":"jpAM0","../lib/is_object.js":"6AeNj","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"evXMh":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _errorsJs = require("../util/errors.js");
const fetchJwks = async (url, timeout, options)=>{
    let controller;
    let id;
    let timedOut = false;
    if (typeof AbortController === 'function') {
        controller = new AbortController();
        id = setTimeout(()=>{
            timedOut = true;
            controller.abort();
        }, timeout);
    }
    const response = await fetch(url.href, {
        signal: controller ? controller.signal : undefined,
        redirect: 'manual',
        headers: options.headers
    }).catch((err)=>{
        if (timedOut) throw new (0, _errorsJs.JWKSTimeout)();
        throw err;
    });
    if (id !== undefined) clearTimeout(id);
    if (response.status !== 200) throw new (0, _errorsJs.JOSEError)('Expected 200 OK from the JSON Web Key Set HTTP response');
    try {
        return await response.json();
    } catch  {
        throw new (0, _errorsJs.JOSEError)('Failed to parse the JSON Web Key Set HTTP response as JSON');
    }
};
exports.default = fetchJwks;

},{"../util/errors.js":"drZrx","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"b7LxK":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnsecuredJWT", ()=>UnsecuredJWT);
var _base64UrlJs = require("../runtime/base64url.js");
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _errorsJs = require("../util/errors.js");
var _jwtClaimsSetJs = require("../lib/jwt_claims_set.js");
var _jwtClaimsSetJsDefault = parcelHelpers.interopDefault(_jwtClaimsSetJs);
var _produceJs = require("./produce.js");
class UnsecuredJWT extends (0, _produceJs.ProduceJWT) {
    encode() {
        const header = _base64UrlJs.encode(JSON.stringify({
            alg: 'none'
        }));
        const payload = _base64UrlJs.encode(JSON.stringify(this._payload));
        return `${header}.${payload}.`;
    }
    static decode(jwt, options) {
        if (typeof jwt !== 'string') throw new (0, _errorsJs.JWTInvalid)('Unsecured JWT must be a string');
        const { 0: encodedHeader, 1: encodedPayload, 2: signature, length } = jwt.split('.');
        if (length !== 3 || signature !== '') throw new (0, _errorsJs.JWTInvalid)('Invalid Unsecured JWT');
        let header;
        try {
            header = JSON.parse((0, _bufferUtilsJs.decoder).decode(_base64UrlJs.decode(encodedHeader)));
            if (header.alg !== 'none') throw new Error();
        } catch  {
            throw new (0, _errorsJs.JWTInvalid)('Invalid Unsecured JWT');
        }
        const payload = (0, _jwtClaimsSetJsDefault.default)(header, _base64UrlJs.decode(encodedPayload), options);
        return {
            payload,
            header
        };
    }
}

},{"../runtime/base64url.js":"hmfX7","../lib/buffer_utils.js":"6CiRi","../util/errors.js":"drZrx","../lib/jwt_claims_set.js":"bz6vN","./produce.js":"l8xt5","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"3o6CH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "decodeProtectedHeader", ()=>decodeProtectedHeader);
var _base64UrlJs = require("./base64url.js");
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _isObjectJs = require("../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
function decodeProtectedHeader(token) {
    let protectedB64u;
    if (typeof token === 'string') {
        const parts = token.split('.');
        if (parts.length === 3 || parts.length === 5) [protectedB64u] = parts;
    } else if (typeof token === 'object' && token) {
        if ('protected' in token) protectedB64u = token.protected;
        else throw new TypeError('Token does not contain a Protected Header');
    }
    try {
        if (typeof protectedB64u !== 'string' || !protectedB64u) throw new Error();
        const result = JSON.parse((0, _bufferUtilsJs.decoder).decode((0, _base64UrlJs.decode)(protectedB64u)));
        if (!(0, _isObjectJsDefault.default)(result)) throw new Error();
        return result;
    } catch  {
        throw new TypeError('Invalid Token or Protected Header formatting');
    }
}

},{"./base64url.js":"414VB","../lib/buffer_utils.js":"6CiRi","../lib/is_object.js":"6AeNj","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"414VB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "encode", ()=>encode);
parcelHelpers.export(exports, "decode", ()=>decode);
var _base64UrlJs = require("../runtime/base64url.js");
const encode = _base64UrlJs.encode;
const decode = _base64UrlJs.decode;

},{"../runtime/base64url.js":"hmfX7","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jHDLT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "decodeJwt", ()=>decodeJwt);
var _base64UrlJs = require("./base64url.js");
var _bufferUtilsJs = require("../lib/buffer_utils.js");
var _isObjectJs = require("../lib/is_object.js");
var _isObjectJsDefault = parcelHelpers.interopDefault(_isObjectJs);
var _errorsJs = require("./errors.js");
function decodeJwt(jwt) {
    if (typeof jwt !== 'string') throw new (0, _errorsJs.JWTInvalid)('JWTs must use Compact JWS serialization, JWT must be a string');
    const { 1: payload, length } = jwt.split('.');
    if (length === 5) throw new (0, _errorsJs.JWTInvalid)('Only JWTs using Compact JWS serialization can be decoded');
    if (length !== 3) throw new (0, _errorsJs.JWTInvalid)('Invalid JWT');
    if (!payload) throw new (0, _errorsJs.JWTInvalid)('JWTs must contain a payload');
    let decoded;
    try {
        decoded = (0, _base64UrlJs.decode)(payload);
    } catch  {
        throw new (0, _errorsJs.JWTInvalid)('Failed to base64url decode the payload');
    }
    let result;
    try {
        result = JSON.parse((0, _bufferUtilsJs.decoder).decode(decoded));
    } catch  {
        throw new (0, _errorsJs.JWTInvalid)('Failed to parse the decoded payload as JSON');
    }
    if (!(0, _isObjectJsDefault.default)(result)) throw new (0, _errorsJs.JWTInvalid)('Invalid JWT Claims Set');
    return result;
}

},{"./base64url.js":"414VB","../lib/buffer_utils.js":"6CiRi","../lib/is_object.js":"6AeNj","./errors.js":"drZrx","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"9auQ1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateKeyPair", ()=>generateKeyPair);
var _generateJs = require("../runtime/generate.js");
async function generateKeyPair(alg, options) {
    return (0, _generateJs.generateKeyPair)(alg, options);
}

},{"../runtime/generate.js":"jJUio","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"jJUio":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateSecret", ()=>generateSecret);
parcelHelpers.export(exports, "generateKeyPair", ()=>generateKeyPair);
var _webcryptoJs = require("./webcrypto.js");
var _webcryptoJsDefault = parcelHelpers.interopDefault(_webcryptoJs);
var _errorsJs = require("../util/errors.js");
var _randomJs = require("./random.js");
var _randomJsDefault = parcelHelpers.interopDefault(_randomJs);
async function generateSecret(alg, options) {
    let length;
    let algorithm;
    let keyUsages;
    switch(alg){
        case 'HS256':
        case 'HS384':
        case 'HS512':
            length = parseInt(alg.slice(-3), 10);
            algorithm = {
                name: 'HMAC',
                hash: `SHA-${length}`,
                length
            };
            keyUsages = [
                'sign',
                'verify'
            ];
            break;
        case 'A128CBC-HS256':
        case 'A192CBC-HS384':
        case 'A256CBC-HS512':
            length = parseInt(alg.slice(-3), 10);
            return (0, _randomJsDefault.default)(new Uint8Array(length >> 3));
        case 'A128KW':
        case 'A192KW':
        case 'A256KW':
            length = parseInt(alg.slice(1, 4), 10);
            algorithm = {
                name: 'AES-KW',
                length
            };
            keyUsages = [
                'wrapKey',
                'unwrapKey'
            ];
            break;
        case 'A128GCMKW':
        case 'A192GCMKW':
        case 'A256GCMKW':
        case 'A128GCM':
        case 'A192GCM':
        case 'A256GCM':
            length = parseInt(alg.slice(1, 4), 10);
            algorithm = {
                name: 'AES-GCM',
                length
            };
            keyUsages = [
                'encrypt',
                'decrypt'
            ];
            break;
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
    }
    return (0, _webcryptoJsDefault.default).subtle.generateKey(algorithm, options?.extractable ?? false, keyUsages);
}
function getModulusLengthOption(options) {
    const modulusLength = options?.modulusLength ?? 2048;
    if (typeof modulusLength !== 'number' || modulusLength < 2048) throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used');
    return modulusLength;
}
async function generateKeyPair(alg, options) {
    let algorithm;
    let keyUsages;
    switch(alg){
        case 'PS256':
        case 'PS384':
        case 'PS512':
            algorithm = {
                name: 'RSA-PSS',
                hash: `SHA-${alg.slice(-3)}`,
                publicExponent: new Uint8Array([
                    0x01,
                    0x00,
                    0x01
                ]),
                modulusLength: getModulusLengthOption(options)
            };
            keyUsages = [
                'sign',
                'verify'
            ];
            break;
        case 'RS256':
        case 'RS384':
        case 'RS512':
            algorithm = {
                name: 'RSASSA-PKCS1-v1_5',
                hash: `SHA-${alg.slice(-3)}`,
                publicExponent: new Uint8Array([
                    0x01,
                    0x00,
                    0x01
                ]),
                modulusLength: getModulusLengthOption(options)
            };
            keyUsages = [
                'sign',
                'verify'
            ];
            break;
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512':
            algorithm = {
                name: 'RSA-OAEP',
                hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,
                publicExponent: new Uint8Array([
                    0x01,
                    0x00,
                    0x01
                ]),
                modulusLength: getModulusLengthOption(options)
            };
            keyUsages = [
                'decrypt',
                'unwrapKey',
                'encrypt',
                'wrapKey'
            ];
            break;
        case 'ES256':
            algorithm = {
                name: 'ECDSA',
                namedCurve: 'P-256'
            };
            keyUsages = [
                'sign',
                'verify'
            ];
            break;
        case 'ES384':
            algorithm = {
                name: 'ECDSA',
                namedCurve: 'P-384'
            };
            keyUsages = [
                'sign',
                'verify'
            ];
            break;
        case 'ES512':
            algorithm = {
                name: 'ECDSA',
                namedCurve: 'P-521'
            };
            keyUsages = [
                'sign',
                'verify'
            ];
            break;
        case 'Ed25519':
            algorithm = {
                name: 'Ed25519'
            };
            keyUsages = [
                'sign',
                'verify'
            ];
            break;
        case 'EdDSA':
            {
                keyUsages = [
                    'sign',
                    'verify'
                ];
                const crv = options?.crv ?? 'Ed25519';
                switch(crv){
                    case 'Ed25519':
                    case 'Ed448':
                        algorithm = {
                            name: crv
                        };
                        break;
                    default:
                        throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported crv option provided');
                }
                break;
            }
        case 'ECDH-ES':
        case 'ECDH-ES+A128KW':
        case 'ECDH-ES+A192KW':
        case 'ECDH-ES+A256KW':
            {
                keyUsages = [
                    'deriveKey',
                    'deriveBits'
                ];
                const crv = options?.crv ?? 'P-256';
                switch(crv){
                    case 'P-256':
                    case 'P-384':
                    case 'P-521':
                        algorithm = {
                            name: 'ECDH',
                            namedCurve: crv
                        };
                        break;
                    case 'X25519':
                    case 'X448':
                        algorithm = {
                            name: crv
                        };
                        break;
                    default:
                        throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported crv option provided, supported values are P-256, P-384, P-521, X25519, and X448');
                }
                break;
            }
        default:
            throw new (0, _errorsJs.JOSENotSupported)('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
    }
    return (0, _webcryptoJsDefault.default).subtle.generateKey(algorithm, options?.extractable ?? false, keyUsages);
}

},{"./webcrypto.js":"crCKY","../util/errors.js":"drZrx","./random.js":"2Msed","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"glscP":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateSecret", ()=>generateSecret);
var _generateJs = require("../runtime/generate.js");
async function generateSecret(alg, options) {
    return (0, _generateJs.generateSecret)(alg, options);
}

},{"../runtime/generate.js":"jJUio","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"fbS2R":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _runtimeJs = require("../runtime/runtime.js");
var _runtimeJsDefault = parcelHelpers.interopDefault(_runtimeJs);
exports.default = (0, _runtimeJsDefault.default);

},{"../runtime/runtime.js":"32Jr2","@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"32Jr2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = 'WebCryptoAPI';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"aNmWK":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.either = either;
function either(a, b) {
    if (a != null && b != null && a !== b) throw new TypeError(`Expected "${b}", got "${a}"`);
    return a ?? b ?? undefined;
}

},{}],"lahft":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toSubtleAlgorithm = toSubtleAlgorithm;
exports.fromSubtleAlgorithm = fromSubtleAlgorithm;
exports.isCryptoKeyPair = isCryptoKeyPair;
function toSubtleAlgorithm(alg, crv, options) {
    switch(alg){
        case 'PS256':
        case 'PS384':
        case 'PS512':
            return {
                name: 'RSA-PSS',
                hash: `SHA-${alg.slice(-3)}`,
                modulusLength: options?.modulusLength ?? 2048,
                publicExponent: new Uint8Array([
                    0x01,
                    0x00,
                    0x01
                ])
            };
        case 'RS256':
        case 'RS384':
        case 'RS512':
            return {
                name: 'RSASSA-PKCS1-v1_5',
                hash: `SHA-${alg.slice(-3)}`,
                modulusLength: options?.modulusLength ?? 2048,
                publicExponent: new Uint8Array([
                    0x01,
                    0x00,
                    0x01
                ])
            };
        case 'ES256':
        case 'ES384':
            return {
                name: 'ECDSA',
                namedCurve: `P-${alg.slice(-3)}`
            };
        case 'ES512':
            return {
                name: 'ECDSA',
                namedCurve: 'P-521'
            };
        default:
            // https://github.com/w3c/webcrypto/issues/82#issuecomment-849856773
            throw new TypeError(`Unsupported alg "${alg}"`);
    }
}
function fromSubtleAlgorithm(algorithm) {
    switch(algorithm.name){
        case 'RSA-PSS':
        case 'RSASSA-PKCS1-v1_5':
            {
                const hash = algorithm.hash.name;
                switch(hash){
                    case 'SHA-256':
                    case 'SHA-384':
                    case 'SHA-512':
                        {
                            const prefix = algorithm.name === 'RSA-PSS' ? 'PS' : 'RS';
                            return `${prefix}${hash.slice(-3)}`;
                        }
                    default:
                        throw new TypeError('unsupported RsaHashedKeyAlgorithm hash');
                }
            }
        case 'ECDSA':
            {
                const namedCurve = algorithm.namedCurve;
                switch(namedCurve){
                    case 'P-256':
                    case 'P-384':
                    case 'P-512':
                        return `ES${namedCurve.slice(-3)}`;
                    case 'P-521':
                        return 'ES512';
                    default:
                        throw new TypeError('unsupported EcKeyAlgorithm namedCurve');
                }
            }
        case 'Ed448':
        case 'Ed25519':
            return 'EdDSA';
        default:
            // https://github.com/w3c/webcrypto/issues/82#issuecomment-849856773
            throw new TypeError(`Unexpected algorithm "${algorithm.name}"`);
    }
}
function isCryptoKeyPair(v, extractable) {
    return typeof v === 'object' && v !== null && 'privateKey' in v && v.privateKey instanceof CryptoKey && v.privateKey.type === 'private' && (extractable == null || v.privateKey.extractable === extractable) && v.privateKey.usages.includes('sign') && 'publicKey' in v && v.publicKey instanceof CryptoKey && v.publicKey.type === 'public' && v.publicKey.extractable === true && v.publicKey.usages.includes('verify');
}

},{}],"6S90m":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FetchResponseError = exports.FetchRequestError = exports.FetchError = void 0;
__exportStar(require("43776947184ad9ca"), exports);
var fetch_1 = require("186f54ed1519c900");
Object.defineProperty(exports, "FetchError", {
    enumerable: true,
    get: function() {
        return fetch_1.FetchError;
    }
});
Object.defineProperty(exports, "FetchRequestError", {
    enumerable: true,
    get: function() {
        return fetch_1.FetchRequestError;
    }
});
Object.defineProperty(exports, "FetchResponseError", {
    enumerable: true,
    get: function() {
        return fetch_1.FetchResponseError;
    }
});
__exportStar(require("e13ebcb8394a704f"), exports);
__exportStar(require("f7ea96aa4c12034f"), exports);
__exportStar(require("6028c85778755d8d"), exports);
__exportStar(require("e1dfb18b4141aad"), exports);
__exportStar(require("268fd5486ae93b2c"), exports);
__exportStar(require("8ea1789880d8fd10"), exports);
__exportStar(require("dbd01cea88c951a5"), exports);
__exportStar(require("bfc9b89011de5760"), exports);
__exportStar(require("b585dec89070e237"), exports);
__exportStar(require("a358035660c4dc2e"), exports);
__exportStar(require("803d9ea38372ee60"), exports);
__exportStar(require("447dfb32975236e8"), exports);
__exportStar(require("7bed7fb2d5ef28a4"), exports);
__exportStar(require("49ef2fbff007abf8"), exports);
__exportStar(require("9bbe65dbd26bf12"), exports);
__exportStar(require("cb053072b9cee003"), exports);
__exportStar(require("141676cf6a33c878"), exports);
__exportStar(require("81296fbd3f57886e"), exports);
__exportStar(require("ed839e7502852005"), exports);

},{"43776947184ad9ca":"5zCmk","186f54ed1519c900":"8GrWo","e13ebcb8394a704f":"fmpMV","f7ea96aa4c12034f":"b74ep","6028c85778755d8d":"B9q5y","e1dfb18b4141aad":"8eN2H","268fd5486ae93b2c":"6nRWg","8ea1789880d8fd10":"cli6k","dbd01cea88c951a5":"7rERk","bfc9b89011de5760":"KYidH","b585dec89070e237":"3bSLV","a358035660c4dc2e":"bMhFI","803d9ea38372ee60":"1CyeX","447dfb32975236e8":"1jidt","7bed7fb2d5ef28a4":"gG1N4","49ef2fbff007abf8":"9raN3","9bbe65dbd26bf12":"d2zT1","cb053072b9cee003":"ehXE1","141676cf6a33c878":"8DgfL","81296fbd3f57886e":"bUeSG","ed839e7502852005":"bC4BG"}],"5zCmk":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(require("133973f92ec6b2b8"), exports);
__exportStar(require("57119bc3d7b42c0c"), exports);
__exportStar(require("8fb08f03215f017d"), exports);
__exportStar(require("aea3fa7ccc34f98e"), exports);
__exportStar(require("147f6b8e535cf960"), exports);
__exportStar(require("fa179c1f631459"), exports);
__exportStar(require("6a3dc11f63d0d8ac"), exports);
__exportStar(require("868a056678cd4047"), exports);

},{"133973f92ec6b2b8":"b74ep","57119bc3d7b42c0c":"hLb7h","8fb08f03215f017d":"fiCyf","aea3fa7ccc34f98e":"7RBU4","147f6b8e535cf960":"jEerJ","fa179c1f631459":"2r6t1","6a3dc11f63d0d8ac":"jO8OR","868a056678cd4047":"3pisa"}],"b74ep":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(require("48999c0b3c225a1d"), exports);
__exportStar(require("f89ec4db2837bf"), exports);
__exportStar(require("f92c5a768e146a03"), exports);
__exportStar(require("96de72c39643205d"), exports);
__exportStar(require("9f18ca1f3117f53"), exports);

},{"48999c0b3c225a1d":"ewAh2","f89ec4db2837bf":"d10Bv","f92c5a768e146a03":"5RyYG","96de72c39643205d":"22UYw","9f18ca1f3117f53":"7NxSI"}],"ewAh2":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.atprotoDidSchema = void 0;
exports.isAtprotoDid = isAtprotoDid;
exports.asAtprotoDid = asAtprotoDid;
exports.assertAtprotoDid = assertAtprotoDid;
exports.assertAtprotoDidWeb = assertAtprotoDidWeb;
exports.isAtprotoDidWeb = isAtprotoDidWeb;
const zod_1 = require("be70f0deaef2bf7");
const did_error_js_1 = require("95497fe8b6ec5f7b");
const methods_js_1 = require("10617f266329802f");
exports.atprotoDidSchema = zod_1.z.string().refine(isAtprotoDid, `Atproto only allows "plc" and "web" DID methods`);
function isAtprotoDid(input) {
    // Optimized equivalent of:
    // return isDidPlc(input) || isAtprotoDidWeb(input)
    if (typeof input !== 'string') return false;
    else if (input.startsWith(methods_js_1.DID_PLC_PREFIX)) return (0, methods_js_1.isDidPlc)(input);
    else if (input.startsWith(methods_js_1.DID_WEB_PREFIX)) return isAtprotoDidWeb(input);
    else return false;
}
function asAtprotoDid(input) {
    assertAtprotoDid(input);
    return input;
}
function assertAtprotoDid(input) {
    if (typeof input !== 'string') throw new did_error_js_1.InvalidDidError(typeof input, `DID must be a string`);
    else if (input.startsWith(methods_js_1.DID_PLC_PREFIX)) (0, methods_js_1.assertDidPlc)(input);
    else if (input.startsWith(methods_js_1.DID_WEB_PREFIX)) assertAtprotoDidWeb(input);
    else throw new did_error_js_1.InvalidDidError(input, `Atproto only allows "plc" and "web" DID methods`);
}
function assertAtprotoDidWeb(input) {
    (0, methods_js_1.assertDidWeb)(input);
    if (input.includes(':', methods_js_1.DID_WEB_PREFIX.length)) throw new did_error_js_1.InvalidDidError(input, `Atproto does not allow path components in Web DIDs`);
    if (input.includes('%3A', methods_js_1.DID_WEB_PREFIX.length) && !input.startsWith('did:web:localhost%3A')) throw new did_error_js_1.InvalidDidError(input, `Atproto does not allow port numbers in Web DIDs, except for localhost`);
}
/**
 * @see {@link https://atproto.com/specs/did#blessed-did-methods}
 */ function isAtprotoDidWeb(input) {
    try {
        assertAtprotoDidWeb(input);
        return true;
    } catch  {
        return false;
    }
}

},{"be70f0deaef2bf7":"gcE23","95497fe8b6ec5f7b":"5RyYG","10617f266329802f":"7NxSI"}],"5RyYG":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidDidError = exports.DidError = void 0;
class DidError extends Error {
    constructor(did, message, code, status = 400, cause){
        super(message, {
            cause
        });
        Object.defineProperty(this, "did", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: did
        });
        Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: code
        });
        Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: status
        });
    }
    /**
     * For compatibility with error handlers in common HTTP frameworks.
     */ get statusCode() {
        return this.status;
    }
    toString() {
        return `${this.constructor.name} ${this.code} (${this.did}): ${this.message}`;
    }
    static from(cause, did) {
        if (cause instanceof DidError) return cause;
        const message = cause instanceof Error ? cause.message : typeof cause === 'string' ? cause : 'An unknown error occurred';
        const status = (typeof cause?.['statusCode'] === 'number' ? cause['statusCode'] : undefined) ?? (typeof cause?.['status'] === 'number' ? cause['status'] : undefined);
        return new DidError(did, message, 'did-unknown-error', status, cause);
    }
}
exports.DidError = DidError;
class InvalidDidError extends DidError {
    constructor(did, message, cause){
        super(did, message, 'did-invalid', 400, cause);
    }
}
exports.InvalidDidError = InvalidDidError;

},{}],"7NxSI":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(require("edcfe9bb14306e47"), exports);
__exportStar(require("d41fddefd976281c"), exports);

},{"edcfe9bb14306e47":"6QIlC","d41fddefd976281c":"7GBmM"}],"6QIlC":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DID_PLC_PREFIX = void 0;
exports.isDidPlc = isDidPlc;
exports.asDidPlc = asDidPlc;
exports.assertDidPlc = assertDidPlc;
const did_error_js_1 = require("8bd792f70a848eb6");
const DID_PLC_PREFIX = `did:plc:`;
exports.DID_PLC_PREFIX = DID_PLC_PREFIX;
const DID_PLC_PREFIX_LENGTH = DID_PLC_PREFIX.length;
const DID_PLC_LENGTH = 32;
function isDidPlc(input) {
    // Optimization: equivalent to try/catch around "assertDidPlc"
    if (typeof input !== 'string') return false;
    if (input.length !== DID_PLC_LENGTH) return false;
    if (!input.startsWith(DID_PLC_PREFIX)) return false;
    for(let i = DID_PLC_PREFIX_LENGTH; i < DID_PLC_LENGTH; i++){
        if (!isBase32Char(input.charCodeAt(i))) return false;
    }
    return true;
}
function asDidPlc(input) {
    assertDidPlc(input);
    return input;
}
function assertDidPlc(input) {
    if (typeof input !== 'string') throw new did_error_js_1.InvalidDidError(typeof input, `DID must be a string`);
    if (!input.startsWith(DID_PLC_PREFIX)) throw new did_error_js_1.InvalidDidError(input, `Invalid did:plc prefix`);
    if (input.length !== DID_PLC_LENGTH) throw new did_error_js_1.InvalidDidError(input, `did:plc must be ${DID_PLC_LENGTH} characters long`);
    // The following check is not necessary, as the check below is more strict:
    // assertDidMsid(input, DID_PLC_PREFIX.length)
    for(let i = DID_PLC_PREFIX_LENGTH; i < DID_PLC_LENGTH; i++){
        if (!isBase32Char(input.charCodeAt(i))) throw new did_error_js_1.InvalidDidError(input, `Invalid character at position ${i}`);
    }
}
const isBase32Char = (c)=>c >= 0x61 && c <= 0x7a || c >= 0x32 && c <= 0x37; // [a-z2-7]

},{"8bd792f70a848eb6":"5RyYG"}],"7GBmM":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DID_WEB_PREFIX = void 0;
exports.isDidWeb = isDidWeb;
exports.asDidWeb = asDidWeb;
exports.assertDidWeb = assertDidWeb;
exports.didWebToUrl = didWebToUrl;
exports.urlToDidWeb = urlToDidWeb;
const did_error_js_1 = require("823b9c2276efd49c");
const did_js_1 = require("233e2334ed424196");
exports.DID_WEB_PREFIX = `did:web:`;
/**
 * This function checks if the input is a valid Web DID, as per DID spec.
 */ function isDidWeb(input) {
    // Optimization: make cheap checks first
    if (typeof input !== 'string') return false;
    if (!input.startsWith(exports.DID_WEB_PREFIX)) return false;
    if (input.charAt(exports.DID_WEB_PREFIX.length) === ':') return false;
    try {
        didWebToUrl(input);
        return true;
    } catch  {
        return false;
    }
}
function asDidWeb(input) {
    assertDidWeb(input);
    return input;
}
function assertDidWeb(input) {
    if (typeof input !== 'string') throw new did_error_js_1.InvalidDidError(typeof input, `DID must be a string`);
    if (!input.startsWith(exports.DID_WEB_PREFIX)) throw new did_error_js_1.InvalidDidError(input, `Invalid did:web prefix`);
    if (input.charAt(exports.DID_WEB_PREFIX.length) === ':') throw new did_error_js_1.InvalidDidError(input, 'did:web MSID must not start with a colon');
    didWebToUrl(input);
}
function didWebToUrl(did) {
    // Make sure every char is valid (per DID spec)
    (0, did_js_1.assertDidMsid)(did, exports.DID_WEB_PREFIX.length);
    const hostIdx = exports.DID_WEB_PREFIX.length;
    const pathIdx = did.indexOf(':', hostIdx);
    const host = pathIdx === -1 ? did.slice(hostIdx) : did.slice(hostIdx, pathIdx);
    const path = pathIdx === -1 ? '' : did.slice(pathIdx);
    try {
        const url = new URL(`https://${host.replaceAll('%3A', ':')}${path.replaceAll(':', '/')}`);
        if (url.hostname === 'localhost') url.protocol = 'http:';
        return url;
    } catch (cause) {
        throw new did_error_js_1.InvalidDidError(did, 'Invalid Web DID', cause);
    }
}
function urlToDidWeb(url) {
    const port = url.port ? `%3A${url.port}` : '';
    const path = url.pathname === '/' ? '' : url.pathname.replaceAll('/', ':');
    return `did:web:${url.hostname}${port}${path}`;
}

},{"823b9c2276efd49c":"5RyYG","233e2334ed424196":"22UYw"}],"22UYw":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.didSchema = exports.DID_PREFIX = void 0;
exports.assertDidMethod = assertDidMethod;
exports.extractDidMethod = extractDidMethod;
exports.assertDidMsid = assertDidMsid;
exports.assertDid = assertDid;
exports.isDid = isDid;
exports.asDid = asDid;
const zod_1 = require("4761b3ec788bd530");
const did_error_js_1 = require("4e78d22c48747e51");
const DID_PREFIX = 'did:';
exports.DID_PREFIX = DID_PREFIX;
const DID_PREFIX_LENGTH = DID_PREFIX.length;
/**
 * DID Method-name check function.
 *
 * Check if the input is a valid DID method name, at the position between
 * `start` (inclusive) and `end` (exclusive).
 */ function assertDidMethod(input, start = 0, end = input.length) {
    if (!Number.isFinite(end) || !Number.isFinite(start) || end < start || end > input.length) throw new TypeError('Invalid start or end position');
    if (end === start) throw new did_error_js_1.InvalidDidError(input, `Empty method name`);
    let c;
    for(let i = start; i < end; i++){
        c = input.charCodeAt(i);
        if ((c < 0x61 || c > 0x7a) && // a-z
        (c < 0x30 || c > 0x39 // 0-9
        )) throw new did_error_js_1.InvalidDidError(input, `Invalid character at position ${i} in DID method name`);
    }
}
/**
 * This method assumes the input is a valid Did
 */ function extractDidMethod(did) {
    const msidSep = did.indexOf(':', DID_PREFIX_LENGTH);
    const method = did.slice(DID_PREFIX_LENGTH, msidSep);
    return method;
}
/**
 * DID Method-specific identifier check function.
 *
 * Check if the input is a valid DID method-specific identifier, at the position
 * between `start` (inclusive) and `end` (exclusive).
 */ function assertDidMsid(input, start = 0, end = input.length) {
    if (!Number.isFinite(end) || !Number.isFinite(start) || end < start || end > input.length) throw new TypeError('Invalid start or end position');
    if (end === start) throw new did_error_js_1.InvalidDidError(input, `DID method-specific id must not be empty`);
    let c;
    for(let i = start; i < end; i++){
        c = input.charCodeAt(i);
        // Check for frequent chars first
        if ((c < 0x61 || c > 0x7a) && // a-z
        (c < 0x41 || c > 0x5a) && // A-Z
        (c < 0x30 || c > 0x39) && // 0-9
        c !== 0x2e && // .
        c !== 0x2d && // -
        c !== 0x5f // _
        ) {
            // Less frequent chars are checked here
            // ":"
            if (c === 0x3a) {
                if (i === end - 1) throw new did_error_js_1.InvalidDidError(input, `DID cannot end with ":"`);
                continue;
            }
            // pct-encoded
            if (c === 0x25) {
                c = input.charCodeAt(++i);
                if ((c < 0x30 || c > 0x39) && (c < 0x41 || c > 0x46)) throw new did_error_js_1.InvalidDidError(input, `Invalid pct-encoded character at position ${i}`);
                c = input.charCodeAt(++i);
                if ((c < 0x30 || c > 0x39) && (c < 0x41 || c > 0x46)) throw new did_error_js_1.InvalidDidError(input, `Invalid pct-encoded character at position ${i}`);
                // There must always be 2 HEXDIG after a "%"
                if (i >= end) throw new did_error_js_1.InvalidDidError(input, `Incomplete pct-encoded character at position ${i - 2}`);
                continue;
            }
            throw new did_error_js_1.InvalidDidError(input, `Disallowed character in DID at position ${i}`);
        }
    }
}
function assertDid(input) {
    if (typeof input !== 'string') throw new did_error_js_1.InvalidDidError(typeof input, `DID must be a string`);
    const { length } = input;
    if (length > 2048) throw new did_error_js_1.InvalidDidError(input, `DID is too long (2048 chars max)`);
    if (!input.startsWith(DID_PREFIX)) throw new did_error_js_1.InvalidDidError(input, `DID requires "${DID_PREFIX}" prefix`);
    const idSep = input.indexOf(':', DID_PREFIX_LENGTH);
    if (idSep === -1) throw new did_error_js_1.InvalidDidError(input, `Missing colon after method name`);
    assertDidMethod(input, DID_PREFIX_LENGTH, idSep);
    assertDidMsid(input, idSep + 1, length);
}
function isDid(input) {
    try {
        assertDid(input);
        return true;
    } catch (err) {
        if (err instanceof did_error_js_1.DidError) return false;
        // Unexpected TypeError (should never happen)
        throw err;
    }
}
function asDid(input) {
    assertDid(input);
    return input;
}
exports.didSchema = zod_1.z.string().superRefine((value, ctx)=>{
    try {
        assertDid(value);
        return true;
    } catch (err) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: err instanceof Error ? err.message : 'Unexpected error'
        });
        return false;
    }
});

},{"4761b3ec788bd530":"gcE23","4e78d22c48747e51":"5RyYG"}],"d10Bv":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.didDocumentValidator = exports.didDocumentSchema = void 0;
const zod_1 = require("4b3f6f5f2d9247a1");
const did_js_1 = require("ef4db57fa67b7196");
/**
 * RFC3968 compliant URI
 *
 * @see {@link https://www.rfc-editor.org/rfc/rfc3986}
 */ const rfc3968UriSchema = zod_1.z.string().refine((data)=>{
    try {
        new URL(data);
        return true;
    } catch  {
        return false;
    }
}, 'RFC3968 compliant URI');
const didControllerSchema = zod_1.z.union([
    did_js_1.didSchema,
    zod_1.z.array(did_js_1.didSchema)
]);
/**
 * @note this schema might be too permissive
 */ const didRelativeUriSchema = zod_1.z.union([
    rfc3968UriSchema,
    zod_1.z.string().regex(/^#[^#]+$/)
]);
const didVerificationMethodSchema = zod_1.z.object({
    id: didRelativeUriSchema,
    type: zod_1.z.string().min(1),
    controller: didControllerSchema,
    publicKeyJwk: zod_1.z.record(zod_1.z.string(), zod_1.z.unknown()).optional(),
    publicKeyMultibase: zod_1.z.string().optional()
});
/**
 * The value of the id property MUST be a URI conforming to [RFC3986]. A
 * conforming producer MUST NOT produce multiple service entries with the same
 * id. A conforming consumer MUST produce an error if it detects multiple
 * service entries with the same id.
 *
 * @note Normally, only rfc3968UriSchema should be allowed here. However, the
 *   did:plc uses relative URI. For this reason, we also allow relative URIs
 *   here.
 */ const didServiceIdSchema = didRelativeUriSchema;
/**
 * The value of the type property MUST be a string or a set of strings. In order
 * to maximize interoperability, the service type and its associated properties
 * SHOULD be registered in the DID Specification Registries
 * [DID-SPEC-REGISTRIES].
 */ const didServiceTypeSchema = zod_1.z.union([
    zod_1.z.string(),
    zod_1.z.array(zod_1.z.string())
]);
/**
 * The value of the serviceEndpoint property MUST be a string, a map, or a set
 * composed of one or more strings and/or maps. All string values MUST be valid
 * URIs conforming to [RFC3986] and normalized according to the Normalization
 * and Comparison rules in RFC3986 and to any normalization rules in its
 * applicable URI scheme specification.
 */ const didServiceEndpointSchema = zod_1.z.union([
    rfc3968UriSchema,
    zod_1.z.record(zod_1.z.string(), rfc3968UriSchema),
    zod_1.z.array(zod_1.z.union([
        rfc3968UriSchema,
        zod_1.z.record(zod_1.z.string(), rfc3968UriSchema)
    ])).nonempty()
]);
/**
 * Each service map MUST contain id, type, and serviceEndpoint properties.
 * @see {@link https://www.w3.org/TR/did-core/#services}
 */ const didServiceSchema = zod_1.z.object({
    id: didServiceIdSchema,
    type: didServiceTypeSchema,
    serviceEndpoint: didServiceEndpointSchema
});
const didAuthenticationSchema = zod_1.z.union([
    //
    didRelativeUriSchema,
    didVerificationMethodSchema
]);
/**
 * @note This schema is incomplete
 * @see {@link https://www.w3.org/TR/did-core/#production-0}
 */ exports.didDocumentSchema = zod_1.z.object({
    '@context': zod_1.z.union([
        zod_1.z.literal('https://www.w3.org/ns/did/v1'),
        zod_1.z.array(zod_1.z.string().url()).nonempty().refine((data)=>data[0] === 'https://www.w3.org/ns/did/v1', {
            message: 'First @context must be https://www.w3.org/ns/did/v1'
        })
    ]),
    id: did_js_1.didSchema,
    controller: didControllerSchema.optional(),
    alsoKnownAs: zod_1.z.array(rfc3968UriSchema).optional(),
    service: zod_1.z.array(didServiceSchema).optional(),
    authentication: zod_1.z.array(didAuthenticationSchema).optional(),
    verificationMethod: zod_1.z.array(zod_1.z.union([
        didVerificationMethodSchema,
        didRelativeUriSchema
    ])).optional()
});
// @TODO: add other refinements ?
exports.didDocumentValidator = exports.didDocumentSchema// Ensure that every service id is unique
.superRefine(({ id: did, service }, ctx)=>{
    if (service) {
        const visited = new Set();
        for(let i = 0; i < service.length; i++){
            const current = service[i];
            const serviceId = current.id.startsWith('#') ? `${did}${current.id}` : current.id;
            if (!visited.has(serviceId)) visited.add(serviceId);
            else ctx.addIssue({
                code: zod_1.z.ZodIssueCode.custom,
                message: `Duplicate service id (${current.id}) found in the document`,
                path: [
                    'service',
                    i,
                    'id'
                ]
            });
        }
    }
});

},{"4b3f6f5f2d9247a1":"gcE23","ef4db57fa67b7196":"22UYw"}],"hLb7h":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DidCacheMemory = void 0;
const simple_store_memory_1 = require("875b96af56fc718d");
const DEFAULT_TTL = 3600000; // 1 hour
const DEFAULT_MAX_SIZE = 52428800; // ~50MB
class DidCacheMemory extends simple_store_memory_1.SimpleStoreMemory {
    constructor(options){
        super(options?.max == null ? {
            ttl: DEFAULT_TTL,
            maxSize: DEFAULT_MAX_SIZE,
            ...options
        } : {
            ttl: DEFAULT_TTL,
            ...options
        });
    }
}
exports.DidCacheMemory = DidCacheMemory;

},{"875b96af56fc718d":"hgLDP"}],"hgLDP":[function(require,module,exports,__globalThis) {
"use strict";
var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SimpleStoreMemory_cache;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SimpleStoreMemory = void 0;
const lru_cache_1 = require("ad78929a7ebaf753");
const util_js_1 = require("2d44bd4a03d4a9a6");
// LRUCache does not allow storing "null", so we use a symbol to represent it.
const nullSymbol = Symbol('nullItem');
const toLruValue = (value)=>value === null ? nullSymbol : value;
const fromLruValue = (value)=>value === nullSymbol ? null : value;
class SimpleStoreMemory {
    constructor({ sizeCalculation, ...options }){
        _SimpleStoreMemory_cache.set(this, void 0);
        __classPrivateFieldSet(this, _SimpleStoreMemory_cache, new lru_cache_1.LRUCache({
            ...options,
            allowStale: false,
            updateAgeOnGet: false,
            updateAgeOnHas: false,
            sizeCalculation: sizeCalculation ? (value, key)=>sizeCalculation(fromLruValue(value), key) : options.maxEntrySize != null || options.maxSize != null ? util_js_1.roughSizeOfObject : undefined
        }), "f");
    }
    get(key) {
        const value = __classPrivateFieldGet(this, _SimpleStoreMemory_cache, "f").get(key);
        if (value === undefined) return undefined;
        return fromLruValue(value);
    }
    set(key, value) {
        __classPrivateFieldGet(this, _SimpleStoreMemory_cache, "f").set(key, toLruValue(value));
    }
    del(key) {
        __classPrivateFieldGet(this, _SimpleStoreMemory_cache, "f").delete(key);
    }
    clear() {
        __classPrivateFieldGet(this, _SimpleStoreMemory_cache, "f").clear();
    }
}
exports.SimpleStoreMemory = SimpleStoreMemory;
_SimpleStoreMemory_cache = new WeakMap();

},{"ad78929a7ebaf753":"dpyxr","2d44bd4a03d4a9a6":"hqJRr"}],"dpyxr":[function(require,module,exports,__globalThis) {
/**
 * @module LRUCache
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Default export, the thing you're using this module to get.
 *
 * The `K` and `V` types define the key and value types, respectively. The
 * optional `FC` type defines the type of the `context` object passed to
 * `cache.fetch()` and `cache.memo()`.
 *
 * Keys and values **must not** be `null` or `undefined`.
 *
 * All properties from the options object (with the exception of `max`,
 * `maxSize`, `fetchMethod`, `memoMethod`, `dispose` and `disposeAfter`) are
 * added as normal public members. (The listed options are read-only getters.)
 *
 * Changing any of these will alter the defaults for subsequent method calls.
 */ parcelHelpers.export(exports, "LRUCache", ()=>LRUCache);
const perf = typeof performance === 'object' && performance && typeof performance.now === 'function' ? performance : Date;
const warned = new Set();
/* c8 ignore start */ const PROCESS = {};
/* c8 ignore start */ const emitWarning = (msg, type, code, fn)=>{
    typeof PROCESS.emitWarning === 'function' ? PROCESS.emitWarning(msg, type, code, fn) : console.error(`[${code}] ${type}: ${msg}`);
};
let AC = globalThis.AbortController;
let AS = globalThis.AbortSignal;
/* c8 ignore start */ if (typeof AC === 'undefined') {
    //@ts-ignore
    AS = class AbortSignal {
        onabort;
        _onabort = [];
        reason;
        aborted = false;
        addEventListener(_, fn) {
            this._onabort.push(fn);
        }
    };
    //@ts-ignore
    AC = class AbortController {
        constructor(){
            warnACPolyfill();
        }
        signal = new AS();
        abort(reason) {
            if (this.signal.aborted) return;
            //@ts-ignore
            this.signal.reason = reason;
            //@ts-ignore
            this.signal.aborted = true;
            //@ts-ignore
            for (const fn of this.signal._onabort)fn(reason);
            this.signal.onabort?.(reason);
        }
    };
    let printACPolyfillWarning = PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1';
    const warnACPolyfill = ()=>{
        if (!printACPolyfillWarning) return;
        printACPolyfillWarning = false;
        emitWarning("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", 'NO_ABORT_CONTROLLER', 'ENOTSUP', warnACPolyfill);
    };
}
/* c8 ignore stop */ const shouldWarn = (code)=>!warned.has(code);
const TYPE = Symbol('type');
const isPosInt = (n)=>n && n === Math.floor(n) && n > 0 && isFinite(n);
/* c8 ignore start */ // This is a little bit ridiculous, tbh.
// The maximum array length is 2^32-1 or thereabouts on most JS impls.
// And well before that point, you're caching the entire world, I mean,
// that's ~32GB of just integers for the next/prev links, plus whatever
// else to hold that many keys and values.  Just filling the memory with
// zeroes at init time is brutal when you get that big.
// But why not be complete?
// Maybe in the future, these limits will have expanded.
const getUintArray = (max)=>!isPosInt(max) ? null : max <= Math.pow(2, 8) ? Uint8Array : max <= Math.pow(2, 16) ? Uint16Array : max <= Math.pow(2, 32) ? Uint32Array : max <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;
/* c8 ignore stop */ class ZeroArray extends Array {
    constructor(size){
        super(size);
        this.fill(0);
    }
}
class Stack {
    heap;
    length;
    // private constructor
    static #constructing = false;
    static create(max) {
        const HeapCls = getUintArray(max);
        if (!HeapCls) return [];
        Stack.#constructing = true;
        const s = new Stack(max, HeapCls);
        Stack.#constructing = false;
        return s;
    }
    constructor(max, HeapCls){
        /* c8 ignore start */ if (!Stack.#constructing) throw new TypeError('instantiate Stack using Stack.create(n)');
        /* c8 ignore stop */ this.heap = new HeapCls(max);
        this.length = 0;
    }
    push(n) {
        this.heap[this.length++] = n;
    }
    pop() {
        return this.heap[--this.length];
    }
}
class LRUCache {
    // options that cannot be changed without disaster
    #max;
    #maxSize;
    #dispose;
    #disposeAfter;
    #fetchMethod;
    #memoMethod;
    /**
     * {@link LRUCache.OptionsBase.ttl}
     */ ttl;
    /**
     * {@link LRUCache.OptionsBase.ttlResolution}
     */ ttlResolution;
    /**
     * {@link LRUCache.OptionsBase.ttlAutopurge}
     */ ttlAutopurge;
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnGet}
     */ updateAgeOnGet;
    /**
     * {@link LRUCache.OptionsBase.updateAgeOnHas}
     */ updateAgeOnHas;
    /**
     * {@link LRUCache.OptionsBase.allowStale}
     */ allowStale;
    /**
     * {@link LRUCache.OptionsBase.noDisposeOnSet}
     */ noDisposeOnSet;
    /**
     * {@link LRUCache.OptionsBase.noUpdateTTL}
     */ noUpdateTTL;
    /**
     * {@link LRUCache.OptionsBase.maxEntrySize}
     */ maxEntrySize;
    /**
     * {@link LRUCache.OptionsBase.sizeCalculation}
     */ sizeCalculation;
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
     */ noDeleteOnFetchRejection;
    /**
     * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
     */ noDeleteOnStaleGet;
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
     */ allowStaleOnFetchAbort;
    /**
     * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
     */ allowStaleOnFetchRejection;
    /**
     * {@link LRUCache.OptionsBase.ignoreFetchAbort}
     */ ignoreFetchAbort;
    // computed properties
    #size;
    #calculatedSize;
    #keyMap;
    #keyList;
    #valList;
    #next;
    #prev;
    #head;
    #tail;
    #free;
    #disposed;
    #sizes;
    #starts;
    #ttls;
    #hasDispose;
    #hasFetchMethod;
    #hasDisposeAfter;
    /**
     * Do not call this method unless you need to inspect the
     * inner workings of the cache.  If anything returned by this
     * object is modified in any way, strange breakage may occur.
     *
     * These fields are private for a reason!
     *
     * @internal
     */ static unsafeExposeInternals(c) {
        return {
            // properties
            starts: c.#starts,
            ttls: c.#ttls,
            sizes: c.#sizes,
            keyMap: c.#keyMap,
            keyList: c.#keyList,
            valList: c.#valList,
            next: c.#next,
            prev: c.#prev,
            get head () {
                return c.#head;
            },
            get tail () {
                return c.#tail;
            },
            free: c.#free,
            // methods
            isBackgroundFetch: (p)=>c.#isBackgroundFetch(p),
            backgroundFetch: (k, index, options, context)=>c.#backgroundFetch(k, index, options, context),
            moveToTail: (index)=>c.#moveToTail(index),
            indexes: (options)=>c.#indexes(options),
            rindexes: (options)=>c.#rindexes(options),
            isStale: (index)=>c.#isStale(index)
        };
    }
    // Protected read-only members
    /**
     * {@link LRUCache.OptionsBase.max} (read-only)
     */ get max() {
        return this.#max;
    }
    /**
     * {@link LRUCache.OptionsBase.maxSize} (read-only)
     */ get maxSize() {
        return this.#maxSize;
    }
    /**
     * The total computed size of items in the cache (read-only)
     */ get calculatedSize() {
        return this.#calculatedSize;
    }
    /**
     * The number of items stored in the cache (read-only)
     */ get size() {
        return this.#size;
    }
    /**
     * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
     */ get fetchMethod() {
        return this.#fetchMethod;
    }
    get memoMethod() {
        return this.#memoMethod;
    }
    /**
     * {@link LRUCache.OptionsBase.dispose} (read-only)
     */ get dispose() {
        return this.#dispose;
    }
    /**
     * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
     */ get disposeAfter() {
        return this.#disposeAfter;
    }
    constructor(options){
        const { max = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, memoMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort } = options;
        if (max !== 0 && !isPosInt(max)) throw new TypeError('max option must be a nonnegative integer');
        const UintArray = max ? getUintArray(max) : Array;
        if (!UintArray) throw new Error('invalid max value: ' + max);
        this.#max = max;
        this.#maxSize = maxSize;
        this.maxEntrySize = maxEntrySize || this.#maxSize;
        this.sizeCalculation = sizeCalculation;
        if (this.sizeCalculation) {
            if (!this.#maxSize && !this.maxEntrySize) throw new TypeError('cannot set sizeCalculation without setting maxSize or maxEntrySize');
            if (typeof this.sizeCalculation !== 'function') throw new TypeError('sizeCalculation set to non-function');
        }
        if (memoMethod !== undefined && typeof memoMethod !== 'function') throw new TypeError('memoMethod must be a function if defined');
        this.#memoMethod = memoMethod;
        if (fetchMethod !== undefined && typeof fetchMethod !== 'function') throw new TypeError('fetchMethod must be a function if specified');
        this.#fetchMethod = fetchMethod;
        this.#hasFetchMethod = !!fetchMethod;
        this.#keyMap = new Map();
        this.#keyList = new Array(max).fill(undefined);
        this.#valList = new Array(max).fill(undefined);
        this.#next = new UintArray(max);
        this.#prev = new UintArray(max);
        this.#head = 0;
        this.#tail = 0;
        this.#free = Stack.create(max);
        this.#size = 0;
        this.#calculatedSize = 0;
        if (typeof dispose === 'function') this.#dispose = dispose;
        if (typeof disposeAfter === 'function') {
            this.#disposeAfter = disposeAfter;
            this.#disposed = [];
        } else {
            this.#disposeAfter = undefined;
            this.#disposed = undefined;
        }
        this.#hasDispose = !!this.#dispose;
        this.#hasDisposeAfter = !!this.#disposeAfter;
        this.noDisposeOnSet = !!noDisposeOnSet;
        this.noUpdateTTL = !!noUpdateTTL;
        this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
        this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
        this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
        this.ignoreFetchAbort = !!ignoreFetchAbort;
        // NB: maxEntrySize is set to maxSize if it's set
        if (this.maxEntrySize !== 0) {
            if (this.#maxSize !== 0) {
                if (!isPosInt(this.#maxSize)) throw new TypeError('maxSize must be a positive integer if specified');
            }
            if (!isPosInt(this.maxEntrySize)) throw new TypeError('maxEntrySize must be a positive integer if specified');
            this.#initializeSizeTracking();
        }
        this.allowStale = !!allowStale;
        this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
        this.updateAgeOnGet = !!updateAgeOnGet;
        this.updateAgeOnHas = !!updateAgeOnHas;
        this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;
        this.ttlAutopurge = !!ttlAutopurge;
        this.ttl = ttl || 0;
        if (this.ttl) {
            if (!isPosInt(this.ttl)) throw new TypeError('ttl must be a positive integer if specified');
            this.#initializeTTLTracking();
        }
        // do not allow completely unbounded caches
        if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) throw new TypeError('At least one of max, maxSize, or ttl is required');
        if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {
            const code = 'LRU_CACHE_UNBOUNDED';
            if (shouldWarn(code)) {
                warned.add(code);
                const msg = "TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.";
                emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache);
            }
        }
    }
    /**
     * Return the number of ms left in the item's TTL. If item is not in cache,
     * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.
     */ getRemainingTTL(key) {
        return this.#keyMap.has(key) ? Infinity : 0;
    }
    #initializeTTLTracking() {
        const ttls = new ZeroArray(this.#max);
        const starts = new ZeroArray(this.#max);
        this.#ttls = ttls;
        this.#starts = starts;
        this.#setItemTTL = (index, ttl, start = perf.now())=>{
            starts[index] = ttl !== 0 ? start : 0;
            ttls[index] = ttl;
            if (ttl !== 0 && this.ttlAutopurge) {
                const t = setTimeout(()=>{
                    if (this.#isStale(index)) this.#delete(this.#keyList[index], 'expire');
                }, ttl + 1);
                // unref() not supported on all platforms
                /* c8 ignore start */ if (t.unref) t.unref();
            /* c8 ignore stop */ }
        };
        this.#updateItemAge = (index)=>{
            starts[index] = ttls[index] !== 0 ? perf.now() : 0;
        };
        this.#statusTTL = (status, index)=>{
            if (ttls[index]) {
                const ttl = ttls[index];
                const start = starts[index];
                /* c8 ignore next */ if (!ttl || !start) return;
                status.ttl = ttl;
                status.start = start;
                status.now = cachedNow || getNow();
                const age = status.now - start;
                status.remainingTTL = ttl - age;
            }
        };
        // debounce calls to perf.now() to 1s so we're not hitting
        // that costly call repeatedly.
        let cachedNow = 0;
        const getNow = ()=>{
            const n = perf.now();
            if (this.ttlResolution > 0) {
                cachedNow = n;
                const t = setTimeout(()=>cachedNow = 0, this.ttlResolution);
                // not available on all platforms
                /* c8 ignore start */ if (t.unref) t.unref();
            /* c8 ignore stop */ }
            return n;
        };
        this.getRemainingTTL = (key)=>{
            const index = this.#keyMap.get(key);
            if (index === undefined) return 0;
            const ttl = ttls[index];
            const start = starts[index];
            if (!ttl || !start) return Infinity;
            const age = (cachedNow || getNow()) - start;
            return ttl - age;
        };
        this.#isStale = (index)=>{
            const s = starts[index];
            const t = ttls[index];
            return !!t && !!s && (cachedNow || getNow()) - s > t;
        };
    }
    // conditionally set private methods related to TTL
    #updateItemAge = ()=>{};
    #statusTTL = ()=>{};
    #setItemTTL = ()=>{};
    /* c8 ignore stop */ #isStale = ()=>false;
    #initializeSizeTracking() {
        const sizes = new ZeroArray(this.#max);
        this.#calculatedSize = 0;
        this.#sizes = sizes;
        this.#removeItemSize = (index)=>{
            this.#calculatedSize -= sizes[index];
            sizes[index] = 0;
        };
        this.#requireSize = (k, v, size, sizeCalculation)=>{
            // provisionally accept background fetches.
            // actual value size will be checked when they return.
            if (this.#isBackgroundFetch(v)) return 0;
            if (!isPosInt(size)) {
                if (sizeCalculation) {
                    if (typeof sizeCalculation !== 'function') throw new TypeError('sizeCalculation must be a function');
                    size = sizeCalculation(v, k);
                    if (!isPosInt(size)) throw new TypeError('sizeCalculation return invalid (expect positive integer)');
                } else throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
            }
            return size;
        };
        this.#addItemSize = (index, size, status)=>{
            sizes[index] = size;
            if (this.#maxSize) {
                const maxSize = this.#maxSize - sizes[index];
                while(this.#calculatedSize > maxSize)this.#evict(true);
            }
            this.#calculatedSize += sizes[index];
            if (status) {
                status.entrySize = size;
                status.totalCalculatedSize = this.#calculatedSize;
            }
        };
    }
    #removeItemSize = (_i)=>{};
    #addItemSize = (_i, _s, _st)=>{};
    #requireSize = (_k, _v, size, sizeCalculation)=>{
        if (size || sizeCalculation) throw new TypeError('cannot set size without setting maxSize or maxEntrySize on cache');
        return 0;
    };
    *#indexes({ allowStale = this.allowStale } = {}) {
        if (this.#size) for(let i = this.#tail;;){
            if (!this.#isValidIndex(i)) break;
            if (allowStale || !this.#isStale(i)) yield i;
            if (i === this.#head) break;
            else i = this.#prev[i];
        }
    }
    *#rindexes({ allowStale = this.allowStale } = {}) {
        if (this.#size) for(let i = this.#head;;){
            if (!this.#isValidIndex(i)) break;
            if (allowStale || !this.#isStale(i)) yield i;
            if (i === this.#tail) break;
            else i = this.#next[i];
        }
    }
    #isValidIndex(index) {
        return index !== undefined && this.#keyMap.get(this.#keyList[index]) === index;
    }
    /**
     * Return a generator yielding `[key, value]` pairs,
     * in order from most recently used to least recently used.
     */ *entries() {
        for (const i of this.#indexes())if (this.#valList[i] !== undefined && this.#keyList[i] !== undefined && !this.#isBackgroundFetch(this.#valList[i])) yield [
            this.#keyList[i],
            this.#valList[i]
        ];
    }
    /**
     * Inverse order version of {@link LRUCache.entries}
     *
     * Return a generator yielding `[key, value]` pairs,
     * in order from least recently used to most recently used.
     */ *rentries() {
        for (const i of this.#rindexes())if (this.#valList[i] !== undefined && this.#keyList[i] !== undefined && !this.#isBackgroundFetch(this.#valList[i])) yield [
            this.#keyList[i],
            this.#valList[i]
        ];
    }
    /**
     * Return a generator yielding the keys in the cache,
     * in order from most recently used to least recently used.
     */ *keys() {
        for (const i of this.#indexes()){
            const k = this.#keyList[i];
            if (k !== undefined && !this.#isBackgroundFetch(this.#valList[i])) yield k;
        }
    }
    /**
     * Inverse order version of {@link LRUCache.keys}
     *
     * Return a generator yielding the keys in the cache,
     * in order from least recently used to most recently used.
     */ *rkeys() {
        for (const i of this.#rindexes()){
            const k = this.#keyList[i];
            if (k !== undefined && !this.#isBackgroundFetch(this.#valList[i])) yield k;
        }
    }
    /**
     * Return a generator yielding the values in the cache,
     * in order from most recently used to least recently used.
     */ *values() {
        for (const i of this.#indexes()){
            const v = this.#valList[i];
            if (v !== undefined && !this.#isBackgroundFetch(this.#valList[i])) yield this.#valList[i];
        }
    }
    /**
     * Inverse order version of {@link LRUCache.values}
     *
     * Return a generator yielding the values in the cache,
     * in order from least recently used to most recently used.
     */ *rvalues() {
        for (const i of this.#rindexes()){
            const v = this.#valList[i];
            if (v !== undefined && !this.#isBackgroundFetch(this.#valList[i])) yield this.#valList[i];
        }
    }
    /**
     * Iterating over the cache itself yields the same results as
     * {@link LRUCache.entries}
     */ [Symbol.iterator]() {
        return this.entries();
    }
    /**
     * A String value that is used in the creation of the default string
     * description of an object. Called by the built-in method
     * `Object.prototype.toString`.
     */ [Symbol.toStringTag] = 'LRUCache';
    /**
     * Find a value for which the supplied fn method returns a truthy value,
     * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.
     */ find(fn, getOptions = {}) {
        for (const i of this.#indexes()){
            const v = this.#valList[i];
            const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
            if (value === undefined) continue;
            if (fn(value, this.#keyList[i], this)) return this.get(this.#keyList[i], getOptions);
        }
    }
    /**
     * Call the supplied function on each item in the cache, in order from most
     * recently used to least recently used.
     *
     * `fn` is called as `fn(value, key, cache)`.
     *
     * If `thisp` is provided, function will be called in the `this`-context of
     * the provided object, or the cache if no `thisp` object is provided.
     *
     * Does not update age or recenty of use, or iterate over stale values.
     */ forEach(fn, thisp = this) {
        for (const i of this.#indexes()){
            const v = this.#valList[i];
            const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
            if (value === undefined) continue;
            fn.call(thisp, value, this.#keyList[i], this);
        }
    }
    /**
     * The same as {@link LRUCache.forEach} but items are iterated over in
     * reverse order.  (ie, less recently used items are iterated over first.)
     */ rforEach(fn, thisp = this) {
        for (const i of this.#rindexes()){
            const v = this.#valList[i];
            const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
            if (value === undefined) continue;
            fn.call(thisp, value, this.#keyList[i], this);
        }
    }
    /**
     * Delete any stale entries. Returns true if anything was removed,
     * false otherwise.
     */ purgeStale() {
        let deleted = false;
        for (const i of this.#rindexes({
            allowStale: true
        }))if (this.#isStale(i)) {
            this.#delete(this.#keyList[i], 'expire');
            deleted = true;
        }
        return deleted;
    }
    /**
     * Get the extended info about a given entry, to get its value, size, and
     * TTL info simultaneously. Returns `undefined` if the key is not present.
     *
     * Unlike {@link LRUCache#dump}, which is designed to be portable and survive
     * serialization, the `start` value is always the current timestamp, and the
     * `ttl` is a calculated remaining time to live (negative if expired).
     *
     * Always returns stale values, if their info is found in the cache, so be
     * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})
     * if relevant.
     */ info(key) {
        const i = this.#keyMap.get(key);
        if (i === undefined) return undefined;
        const v = this.#valList[i];
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
        if (value === undefined) return undefined;
        const entry = {
            value
        };
        if (this.#ttls && this.#starts) {
            const ttl = this.#ttls[i];
            const start = this.#starts[i];
            if (ttl && start) {
                const remain = ttl - (perf.now() - start);
                entry.ttl = remain;
                entry.start = Date.now();
            }
        }
        if (this.#sizes) entry.size = this.#sizes[i];
        return entry;
    }
    /**
     * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
     * passed to {@link LRLUCache#load}.
     *
     * The `start` fields are calculated relative to a portable `Date.now()`
     * timestamp, even if `performance.now()` is available.
     *
     * Stale entries are always included in the `dump`, even if
     * {@link LRUCache.OptionsBase.allowStale} is false.
     *
     * Note: this returns an actual array, not a generator, so it can be more
     * easily passed around.
     */ dump() {
        const arr = [];
        for (const i of this.#indexes({
            allowStale: true
        })){
            const key = this.#keyList[i];
            const v = this.#valList[i];
            const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
            if (value === undefined || key === undefined) continue;
            const entry = {
                value
            };
            if (this.#ttls && this.#starts) {
                entry.ttl = this.#ttls[i];
                // always dump the start relative to a portable timestamp
                // it's ok for this to be a bit slow, it's a rare operation.
                const age = perf.now() - this.#starts[i];
                entry.start = Math.floor(Date.now() - age);
            }
            if (this.#sizes) entry.size = this.#sizes[i];
            arr.unshift([
                key,
                entry
            ]);
        }
        return arr;
    }
    /**
     * Reset the cache and load in the items in entries in the order listed.
     *
     * The shape of the resulting cache may be different if the same options are
     * not used in both caches.
     *
     * The `start` fields are assumed to be calculated relative to a portable
     * `Date.now()` timestamp, even if `performance.now()` is available.
     */ load(arr) {
        this.clear();
        for (const [key, entry] of arr){
            if (entry.start) {
                // entry.start is a portable timestamp, but we may be using
                // node's performance.now(), so calculate the offset, so that
                // we get the intended remaining TTL, no matter how long it's
                // been on ice.
                //
                // it's ok for this to be a bit slow, it's a rare operation.
                const age = Date.now() - entry.start;
                entry.start = perf.now() - age;
            }
            this.set(key, entry.value, entry);
        }
    }
    /**
     * Add a value to the cache.
     *
     * Note: if `undefined` is specified as a value, this is an alias for
     * {@link LRUCache#delete}
     *
     * Fields on the {@link LRUCache.SetOptions} options param will override
     * their corresponding values in the constructor options for the scope
     * of this single `set()` operation.
     *
     * If `start` is provided, then that will set the effective start
     * time for the TTL calculation. Note that this must be a previous
     * value of `performance.now()` if supported, or a previous value of
     * `Date.now()` if not.
     *
     * Options object may also include `size`, which will prevent
     * calling the `sizeCalculation` function and just use the specified
     * number if it is a positive integer, and `noDisposeOnSet` which
     * will prevent calling a `dispose` function in the case of
     * overwrites.
     *
     * If the `size` (or return value of `sizeCalculation`) for a given
     * entry is greater than `maxEntrySize`, then the item will not be
     * added to the cache.
     *
     * Will update the recency of the entry.
     *
     * If the value is `undefined`, then this is an alias for
     * `cache.delete(key)`. `undefined` is never stored in the cache.
     */ set(k, v, setOptions = {}) {
        if (v === undefined) {
            this.delete(k);
            return this;
        }
        const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status } = setOptions;
        let { noUpdateTTL = this.noUpdateTTL } = setOptions;
        const size = this.#requireSize(k, v, setOptions.size || 0, sizeCalculation);
        // if the item doesn't fit, don't do anything
        // NB: maxEntrySize set to maxSize by default
        if (this.maxEntrySize && size > this.maxEntrySize) {
            if (status) {
                status.set = 'miss';
                status.maxEntrySizeExceeded = true;
            }
            // have to delete, in case something is there already.
            this.#delete(k, 'set');
            return this;
        }
        let index = this.#size === 0 ? undefined : this.#keyMap.get(k);
        if (index === undefined) {
            // addition
            index = this.#size === 0 ? this.#tail : this.#free.length !== 0 ? this.#free.pop() : this.#size === this.#max ? this.#evict(false) : this.#size;
            this.#keyList[index] = k;
            this.#valList[index] = v;
            this.#keyMap.set(k, index);
            this.#next[this.#tail] = index;
            this.#prev[index] = this.#tail;
            this.#tail = index;
            this.#size++;
            this.#addItemSize(index, size, status);
            if (status) status.set = 'add';
            noUpdateTTL = false;
        } else {
            // update
            this.#moveToTail(index);
            const oldVal = this.#valList[index];
            if (v !== oldVal) {
                if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {
                    oldVal.__abortController.abort(new Error('replaced'));
                    const { __staleWhileFetching: s } = oldVal;
                    if (s !== undefined && !noDisposeOnSet) {
                        if (this.#hasDispose) this.#dispose?.(s, k, 'set');
                        if (this.#hasDisposeAfter) this.#disposed?.push([
                            s,
                            k,
                            'set'
                        ]);
                    }
                } else if (!noDisposeOnSet) {
                    if (this.#hasDispose) this.#dispose?.(oldVal, k, 'set');
                    if (this.#hasDisposeAfter) this.#disposed?.push([
                        oldVal,
                        k,
                        'set'
                    ]);
                }
                this.#removeItemSize(index);
                this.#addItemSize(index, size, status);
                this.#valList[index] = v;
                if (status) {
                    status.set = 'replace';
                    const oldValue = oldVal && this.#isBackgroundFetch(oldVal) ? oldVal.__staleWhileFetching : oldVal;
                    if (oldValue !== undefined) status.oldValue = oldValue;
                }
            } else if (status) status.set = 'update';
        }
        if (ttl !== 0 && !this.#ttls) this.#initializeTTLTracking();
        if (this.#ttls) {
            if (!noUpdateTTL) this.#setItemTTL(index, ttl, start);
            if (status) this.#statusTTL(status, index);
        }
        if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {
            const dt = this.#disposed;
            let task;
            while(task = dt?.shift())this.#disposeAfter?.(...task);
        }
        return this;
    }
    /**
     * Evict the least recently used item, returning its value or
     * `undefined` if cache is empty.
     */ pop() {
        try {
            while(this.#size){
                const val = this.#valList[this.#head];
                this.#evict(true);
                if (this.#isBackgroundFetch(val)) {
                    if (val.__staleWhileFetching) return val.__staleWhileFetching;
                } else if (val !== undefined) return val;
            }
        } finally{
            if (this.#hasDisposeAfter && this.#disposed) {
                const dt = this.#disposed;
                let task;
                while(task = dt?.shift())this.#disposeAfter?.(...task);
            }
        }
    }
    #evict(free) {
        const head = this.#head;
        const k = this.#keyList[head];
        const v = this.#valList[head];
        if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) v.__abortController.abort(new Error('evicted'));
        else if (this.#hasDispose || this.#hasDisposeAfter) {
            if (this.#hasDispose) this.#dispose?.(v, k, 'evict');
            if (this.#hasDisposeAfter) this.#disposed?.push([
                v,
                k,
                'evict'
            ]);
        }
        this.#removeItemSize(head);
        // if we aren't about to use the index, then null these out
        if (free) {
            this.#keyList[head] = undefined;
            this.#valList[head] = undefined;
            this.#free.push(head);
        }
        if (this.#size === 1) {
            this.#head = this.#tail = 0;
            this.#free.length = 0;
        } else this.#head = this.#next[head];
        this.#keyMap.delete(k);
        this.#size--;
        return head;
    }
    /**
     * Check if a key is in the cache, without updating the recency of use.
     * Will return false if the item is stale, even though it is technically
     * in the cache.
     *
     * Check if a key is in the cache, without updating the recency of
     * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set
     * to `true` in either the options or the constructor.
     *
     * Will return `false` if the item is stale, even though it is technically in
     * the cache. The difference can be determined (if it matters) by using a
     * `status` argument, and inspecting the `has` field.
     *
     * Will not update item age unless
     * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
     */ has(k, hasOptions = {}) {
        const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;
        const index = this.#keyMap.get(k);
        if (index !== undefined) {
            const v = this.#valList[index];
            if (this.#isBackgroundFetch(v) && v.__staleWhileFetching === undefined) return false;
            if (!this.#isStale(index)) {
                if (updateAgeOnHas) this.#updateItemAge(index);
                if (status) {
                    status.has = 'hit';
                    this.#statusTTL(status, index);
                }
                return true;
            } else if (status) {
                status.has = 'stale';
                this.#statusTTL(status, index);
            }
        } else if (status) status.has = 'miss';
        return false;
    }
    /**
     * Like {@link LRUCache#get} but doesn't update recency or delete stale
     * items.
     *
     * Returns `undefined` if the item is stale, unless
     * {@link LRUCache.OptionsBase.allowStale} is set.
     */ peek(k, peekOptions = {}) {
        const { allowStale = this.allowStale } = peekOptions;
        const index = this.#keyMap.get(k);
        if (index === undefined || !allowStale && this.#isStale(index)) return;
        const v = this.#valList[index];
        // either stale and allowed, or forcing a refresh of non-stale value
        return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
    }
    #backgroundFetch(k, index, options, context) {
        const v = index === undefined ? undefined : this.#valList[index];
        if (this.#isBackgroundFetch(v)) return v;
        const ac = new AC();
        const { signal } = options;
        // when/if our AC signals, then stop listening to theirs.
        signal?.addEventListener('abort', ()=>ac.abort(signal.reason), {
            signal: ac.signal
        });
        const fetchOpts = {
            signal: ac.signal,
            options,
            context
        };
        const cb = (v, updateCache = false)=>{
            const { aborted } = ac.signal;
            const ignoreAbort = options.ignoreFetchAbort && v !== undefined;
            if (options.status) {
                if (aborted && !updateCache) {
                    options.status.fetchAborted = true;
                    options.status.fetchError = ac.signal.reason;
                    if (ignoreAbort) options.status.fetchAbortIgnored = true;
                } else options.status.fetchResolved = true;
            }
            if (aborted && !ignoreAbort && !updateCache) return fetchFail(ac.signal.reason);
            // either we didn't abort, and are still here, or we did, and ignored
            const bf = p;
            if (this.#valList[index] === p) {
                if (v === undefined) {
                    if (bf.__staleWhileFetching) this.#valList[index] = bf.__staleWhileFetching;
                    else this.#delete(k, 'fetch');
                } else {
                    if (options.status) options.status.fetchUpdated = true;
                    this.set(k, v, fetchOpts.options);
                }
            }
            return v;
        };
        const eb = (er)=>{
            if (options.status) {
                options.status.fetchRejected = true;
                options.status.fetchError = er;
            }
            return fetchFail(er);
        };
        const fetchFail = (er)=>{
            const { aborted } = ac.signal;
            const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;
            const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;
            const noDelete = allowStale || options.noDeleteOnFetchRejection;
            const bf = p;
            if (this.#valList[index] === p) {
                // if we allow stale on fetch rejections, then we need to ensure that
                // the stale value is not removed from the cache when the fetch fails.
                const del = !noDelete || bf.__staleWhileFetching === undefined;
                if (del) this.#delete(k, 'fetch');
                else if (!allowStaleAborted) // still replace the *promise* with the stale value,
                // since we are done with the promise at this point.
                // leave it untouched if we're still waiting for an
                // aborted background fetch that hasn't yet returned.
                this.#valList[index] = bf.__staleWhileFetching;
            }
            if (allowStale) {
                if (options.status && bf.__staleWhileFetching !== undefined) options.status.returnedStale = true;
                return bf.__staleWhileFetching;
            } else if (bf.__returned === bf) throw er;
        };
        const pcall = (res, rej)=>{
            const fmp = this.#fetchMethod?.(k, v, fetchOpts);
            if (fmp && fmp instanceof Promise) fmp.then((v)=>res(v === undefined ? undefined : v), rej);
            // ignored, we go until we finish, regardless.
            // defer check until we are actually aborting,
            // so fetchMethod can override.
            ac.signal.addEventListener('abort', ()=>{
                if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
                    res(undefined);
                    // when it eventually resolves, update the cache.
                    if (options.allowStaleOnFetchAbort) res = (v)=>cb(v, true);
                }
            });
        };
        if (options.status) options.status.fetchDispatched = true;
        const p = new Promise(pcall).then(cb, eb);
        const bf = Object.assign(p, {
            __abortController: ac,
            __staleWhileFetching: v,
            __returned: undefined
        });
        if (index === undefined) {
            // internal, don't expose status.
            this.set(k, bf, {
                ...fetchOpts.options,
                status: undefined
            });
            index = this.#keyMap.get(k);
        } else this.#valList[index] = bf;
        return bf;
    }
    #isBackgroundFetch(p) {
        if (!this.#hasFetchMethod) return false;
        const b = p;
        return !!b && b instanceof Promise && b.hasOwnProperty('__staleWhileFetching') && b.__abortController instanceof AC;
    }
    async fetch(k, fetchOptions = {}) {
        const { // get options
        allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, // set options
        ttl = this.ttl, noDisposeOnSet = this.noDisposeOnSet, size = 0, sizeCalculation = this.sizeCalculation, noUpdateTTL = this.noUpdateTTL, // fetch exclusive options
        noDeleteOnFetchRejection = this.noDeleteOnFetchRejection, allowStaleOnFetchRejection = this.allowStaleOnFetchRejection, ignoreFetchAbort = this.ignoreFetchAbort, allowStaleOnFetchAbort = this.allowStaleOnFetchAbort, context, forceRefresh = false, status, signal } = fetchOptions;
        if (!this.#hasFetchMethod) {
            if (status) status.fetch = 'get';
            return this.get(k, {
                allowStale,
                updateAgeOnGet,
                noDeleteOnStaleGet,
                status
            });
        }
        const options = {
            allowStale,
            updateAgeOnGet,
            noDeleteOnStaleGet,
            ttl,
            noDisposeOnSet,
            size,
            sizeCalculation,
            noUpdateTTL,
            noDeleteOnFetchRejection,
            allowStaleOnFetchRejection,
            allowStaleOnFetchAbort,
            ignoreFetchAbort,
            status,
            signal
        };
        let index = this.#keyMap.get(k);
        if (index === undefined) {
            if (status) status.fetch = 'miss';
            const p = this.#backgroundFetch(k, index, options, context);
            return p.__returned = p;
        } else {
            // in cache, maybe already fetching
            const v = this.#valList[index];
            if (this.#isBackgroundFetch(v)) {
                const stale = allowStale && v.__staleWhileFetching !== undefined;
                if (status) {
                    status.fetch = 'inflight';
                    if (stale) status.returnedStale = true;
                }
                return stale ? v.__staleWhileFetching : v.__returned = v;
            }
            // if we force a refresh, that means do NOT serve the cached value,
            // unless we are already in the process of refreshing the cache.
            const isStale = this.#isStale(index);
            if (!forceRefresh && !isStale) {
                if (status) status.fetch = 'hit';
                this.#moveToTail(index);
                if (updateAgeOnGet) this.#updateItemAge(index);
                if (status) this.#statusTTL(status, index);
                return v;
            }
            // ok, it is stale or a forced refresh, and not already fetching.
            // refresh the cache.
            const p = this.#backgroundFetch(k, index, options, context);
            const hasStale = p.__staleWhileFetching !== undefined;
            const staleVal = hasStale && allowStale;
            if (status) {
                status.fetch = isStale ? 'stale' : 'refresh';
                if (staleVal && isStale) status.returnedStale = true;
            }
            return staleVal ? p.__staleWhileFetching : p.__returned = p;
        }
    }
    async forceFetch(k, fetchOptions = {}) {
        const v = await this.fetch(k, fetchOptions);
        if (v === undefined) throw new Error('fetch() returned undefined');
        return v;
    }
    memo(k, memoOptions = {}) {
        const memoMethod = this.#memoMethod;
        if (!memoMethod) throw new Error('no memoMethod provided to constructor');
        const { context, forceRefresh, ...options } = memoOptions;
        const v = this.get(k, options);
        if (!forceRefresh && v !== undefined) return v;
        const vv = memoMethod(k, v, {
            options,
            context
        });
        this.set(k, vv, options);
        return vv;
    }
    /**
     * Return a value from the cache. Will update the recency of the cache
     * entry found.
     *
     * If the key is not found, get() will return `undefined`.
     */ get(k, getOptions = {}) {
        const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status } = getOptions;
        const index = this.#keyMap.get(k);
        if (index !== undefined) {
            const value = this.#valList[index];
            const fetching = this.#isBackgroundFetch(value);
            if (status) this.#statusTTL(status, index);
            if (this.#isStale(index)) {
                if (status) status.get = 'stale';
                // delete only if not an in-flight background fetch
                if (!fetching) {
                    if (!noDeleteOnStaleGet) this.#delete(k, 'expire');
                    if (status && allowStale) status.returnedStale = true;
                    return allowStale ? value : undefined;
                } else {
                    if (status && allowStale && value.__staleWhileFetching !== undefined) status.returnedStale = true;
                    return allowStale ? value.__staleWhileFetching : undefined;
                }
            } else {
                if (status) status.get = 'hit';
                // if we're currently fetching it, we don't actually have it yet
                // it's not stale, which means this isn't a staleWhileRefetching.
                // If it's not stale, and fetching, AND has a __staleWhileFetching
                // value, then that means the user fetched with {forceRefresh:true},
                // so it's safe to return that value.
                if (fetching) return value.__staleWhileFetching;
                this.#moveToTail(index);
                if (updateAgeOnGet) this.#updateItemAge(index);
                return value;
            }
        } else if (status) status.get = 'miss';
    }
    #connect(p, n) {
        this.#prev[n] = p;
        this.#next[p] = n;
    }
    #moveToTail(index) {
        // if tail already, nothing to do
        // if head, move head to next[index]
        // else
        //   move next[prev[index]] to next[index] (head has no prev)
        //   move prev[next[index]] to prev[index]
        // prev[index] = tail
        // next[tail] = index
        // tail = index
        if (index !== this.#tail) {
            if (index === this.#head) this.#head = this.#next[index];
            else this.#connect(this.#prev[index], this.#next[index]);
            this.#connect(this.#tail, index);
            this.#tail = index;
        }
    }
    /**
     * Deletes a key out of the cache.
     *
     * Returns true if the key was deleted, false otherwise.
     */ delete(k) {
        return this.#delete(k, 'delete');
    }
    #delete(k, reason) {
        let deleted = false;
        if (this.#size !== 0) {
            const index = this.#keyMap.get(k);
            if (index !== undefined) {
                deleted = true;
                if (this.#size === 1) this.#clear(reason);
                else {
                    this.#removeItemSize(index);
                    const v = this.#valList[index];
                    if (this.#isBackgroundFetch(v)) v.__abortController.abort(new Error('deleted'));
                    else if (this.#hasDispose || this.#hasDisposeAfter) {
                        if (this.#hasDispose) this.#dispose?.(v, k, reason);
                        if (this.#hasDisposeAfter) this.#disposed?.push([
                            v,
                            k,
                            reason
                        ]);
                    }
                    this.#keyMap.delete(k);
                    this.#keyList[index] = undefined;
                    this.#valList[index] = undefined;
                    if (index === this.#tail) this.#tail = this.#prev[index];
                    else if (index === this.#head) this.#head = this.#next[index];
                    else {
                        const pi = this.#prev[index];
                        this.#next[pi] = this.#next[index];
                        const ni = this.#next[index];
                        this.#prev[ni] = this.#prev[index];
                    }
                    this.#size--;
                    this.#free.push(index);
                }
            }
        }
        if (this.#hasDisposeAfter && this.#disposed?.length) {
            const dt = this.#disposed;
            let task;
            while(task = dt?.shift())this.#disposeAfter?.(...task);
        }
        return deleted;
    }
    /**
     * Clear the cache entirely, throwing away all values.
     */ clear() {
        return this.#clear('delete');
    }
    #clear(reason) {
        for (const index of this.#rindexes({
            allowStale: true
        })){
            const v = this.#valList[index];
            if (this.#isBackgroundFetch(v)) v.__abortController.abort(new Error('deleted'));
            else {
                const k = this.#keyList[index];
                if (this.#hasDispose) this.#dispose?.(v, k, reason);
                if (this.#hasDisposeAfter) this.#disposed?.push([
                    v,
                    k,
                    reason
                ]);
            }
        }
        this.#keyMap.clear();
        this.#valList.fill(undefined);
        this.#keyList.fill(undefined);
        if (this.#ttls && this.#starts) {
            this.#ttls.fill(0);
            this.#starts.fill(0);
        }
        if (this.#sizes) this.#sizes.fill(0);
        this.#head = 0;
        this.#tail = 0;
        this.#free.length = 0;
        this.#calculatedSize = 0;
        this.#size = 0;
        if (this.#hasDisposeAfter && this.#disposed) {
            const dt = this.#disposed;
            let task;
            while(task = dt?.shift())this.#disposeAfter?.(...task);
        }
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"jnFvT"}],"hqJRr":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.roughSizeOfObject = roughSizeOfObject;
const knownSizes = new WeakMap();
/**
 * @see {@link https://stackoverflow.com/a/11900218/356537}
 */ function roughSizeOfObject(value) {
    const objectList = new Set();
    const stack = [
        value
    ]; // This would be more efficient using a circular buffer
    let bytes = 0;
    while(stack.length){
        const value = stack.pop();
        // > All objects on the heap start with a shape descriptor, which takes one
        // > pointer size (usually 4 bytes these days, thanks to "pointer
        // > compression" on 64-bit platforms).
        switch(typeof value){
            // Types are ordered by frequency
            case 'string':
                // https://stackoverflow.com/a/68791382/356537
                bytes += 12 + 4 * Math.ceil(value.length / 4);
                break;
            case 'number':
                bytes += 12; // Shape descriptor + double
                break;
            case 'boolean':
                bytes += 4; // Shape descriptor
                break;
            case 'object':
                bytes += 4; // Shape descriptor
                if (value === null) break;
                if (knownSizes.has(value)) {
                    bytes += knownSizes.get(value);
                    break;
                }
                if (objectList.has(value)) continue;
                objectList.add(value);
                if (Array.isArray(value)) {
                    bytes += 4;
                    stack.push(...value);
                } else {
                    bytes += 8;
                    const keys = Object.getOwnPropertyNames(value);
                    for(let i = 0; i < keys.length; i++){
                        bytes += 4;
                        const key = keys[i];
                        const val = value[key];
                        if (val !== undefined) stack.push(val);
                        stack.push(key);
                    }
                }
                break;
            case 'function':
                bytes += 8; // Shape descriptor + pointer (assuming functions are shared)
                break;
            case 'symbol':
                bytes += 8; // Shape descriptor + pointer
                break;
            case 'bigint':
                bytes += 16; // Shape descriptor + BigInt
                break;
        }
    }
    if (typeof value === 'object' && value !== null) knownSizes.set(value, bytes);
    return bytes;
}

},{}],"fiCyf":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DidResolverCached = void 0;
const simple_store_1 = require("b1db016c75fb1464");
const did_cache_memory_js_1 = require("9033b3915f799e3f");
class DidResolverCached {
    constructor(resolver, cache = new did_cache_memory_js_1.DidCacheMemory()){
        Object.defineProperty(this, "getter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.getter = new simple_store_1.CachedGetter((did, options)=>resolver.resolve(did, options), cache);
    }
    async resolve(did, options) {
        return this.getter.get(did, options);
    }
}
exports.DidResolverCached = DidResolverCached;

},{"b1db016c75fb1464":"27R7J","9033b3915f799e3f":"hLb7h"}],"27R7J":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(require("d4f59c87ad36556a"), exports);
__exportStar(require("f49db0978e73aa37"), exports);

},{"d4f59c87ad36556a":"0362R","f49db0978e73aa37":"hqYkA"}],"0362R":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CachedGetter = void 0;
const returnTrue = ()=>true;
const returnFalse = ()=>false;
/**
 * Wrapper utility that uses a store to speed up the retrieval of values from an
 * (expensive) getter function.
 */ class CachedGetter {
    constructor(getter, store, options){
        Object.defineProperty(this, "getter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: getter
        });
        Object.defineProperty(this, "store", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: store
        });
        Object.defineProperty(this, "options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: options
        });
        Object.defineProperty(this, "pending", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
    }
    async get(key, options = {}) {
        options.signal?.throwIfAborted();
        const isStale = this.options?.isStale;
        const allowStored = options.noCache ? returnFalse // Never allow stored values to be returned
         : options.allowStale || isStale == null ? returnTrue // Always allow stored values to be returned
         : async (value)=>!await isStale(key, value);
        // As long as concurrent requests are made for the same key, only one
        // request will be made to the cache & getter function at a time. This works
        // because there is no async operation between the while() loop and the
        // pending.set() call. Because of the "single threaded" nature of
        // JavaScript, the pending item will be set before the next iteration of the
        // while loop.
        let previousExecutionFlow;
        while(previousExecutionFlow = this.pending.get(key)){
            try {
                const { isFresh, value } = await previousExecutionFlow;
                if (isFresh) return value;
                if (await allowStored(value)) return value;
            } catch  {
            // Ignore errors from previous execution flows (they will have been
            // propagated by that flow).
            }
            options.signal?.throwIfAborted();
        }
        const currentExecutionFlow = Promise.resolve().then(async ()=>{
            const storedValue = await this.getStored(key, options);
            if (storedValue !== undefined && await allowStored(storedValue)) // Use the stored value as return value for the current execution
            // flow. Notify other concurrent execution flows (that should be
            // "stuck" in the loop before until this promise resolves) that we got
            // a value, but that it came from the store (isFresh = false).
            return {
                isFresh: false,
                value: storedValue
            };
            return Promise.resolve().then(async ()=>(0, this.getter)(key, options, storedValue)).catch(async (err)=>{
                if (storedValue !== undefined) try {
                    const deleteOnError = this.options?.deleteOnError;
                    if (await deleteOnError?.(err, key, storedValue)) await this.delStored(key, err);
                } catch (error) {
                    throw new AggregateError([
                        err,
                        error
                    ], 'Error while deleting stored value');
                }
                throw err;
            }).then(async (value)=>{
                // The value should be stored even is the signal was aborted.
                await this.setStored(key, value);
                return {
                    isFresh: true,
                    value
                };
            });
        }).finally(()=>{
            this.pending.delete(key);
        });
        if (this.pending.has(key)) // This should never happen. Indeed, there must not be any 'await'
        // statement between this and the loop iteration check meaning that
        // this.pending.get returned undefined. It is there to catch bugs that
        // would occur in future changes to the code.
        throw new Error('Concurrent request for the same key');
        this.pending.set(key, currentExecutionFlow);
        const { value } = await currentExecutionFlow;
        return value;
    }
    async getStored(key, options) {
        try {
            return await this.store.get(key, options);
        } catch (err) {
            return undefined;
        }
    }
    async setStored(key, value) {
        try {
            await this.store.set(key, value);
        } catch (err) {
            const onStoreError = this.options?.onStoreError;
            await onStoreError?.(err, key, value);
        }
    }
    async delStored(key, _cause) {
        await this.store.del(key);
    }
}
exports.CachedGetter = CachedGetter;

},{}],"hqYkA":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"7RBU4":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"jEerJ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DidResolverCommon = void 0;
const did_resolver_base_js_1 = require("653c69a56ed224e4");
const plc_js_1 = require("ecdc83b240b8867");
const web_js_1 = require("8969b3178b9c08cd");
class DidResolverCommon extends did_resolver_base_js_1.DidResolverBase {
    constructor(options){
        super({
            plc: new plc_js_1.DidPlcMethod(options),
            web: new web_js_1.DidWebMethod(options)
        });
    }
}
exports.DidResolverCommon = DidResolverCommon;

},{"653c69a56ed224e4":"a3pi9","ecdc83b240b8867":"f4knV","8969b3178b9c08cd":"82PHf"}],"a3pi9":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DidResolverBase = void 0;
const zod_1 = require("d099549c54e27f60");
const did_1 = require("8e55fac166a04294");
const fetch_1 = require("9ff19ddf331f0329");
class DidResolverBase {
    constructor(methods){
        Object.defineProperty(this, "methods", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.methods = new Map(Object.entries(methods));
    }
    async resolve(did, options) {
        options?.signal?.throwIfAborted();
        const method = (0, did_1.extractDidMethod)(did);
        const resolver = this.methods.get(method);
        if (!resolver) throw new did_1.DidError(did, `Unsupported DID method`, 'did-method-invalid', 400);
        try {
            const document = await resolver.resolve(did, options);
            if (document.id !== did) throw new did_1.DidError(did, `DID document id (${document.id}) does not match DID`, 'did-document-id-mismatch', 400);
            return document;
        } catch (err) {
            if (err instanceof fetch_1.FetchResponseError) {
                const status = err.response.status >= 500 ? 502 : err.response.status;
                throw new did_1.DidError(did, err.message, 'did-fetch-error', status, err);
            }
            if (err instanceof fetch_1.FetchError) throw new did_1.DidError(did, err.message, 'did-fetch-error', 400, err);
            if (err instanceof zod_1.ZodError) throw new did_1.DidError(did, err.message, 'did-document-format-error', 503, err);
            throw did_1.DidError.from(err, did);
        }
    }
}
exports.DidResolverBase = DidResolverBase;

},{"d099549c54e27f60":"gcE23","8e55fac166a04294":"b74ep","9ff19ddf331f0329":"8GrWo"}],"8GrWo":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(require("f702b3e1c12cc5db"), exports);
__exportStar(require("999eb5283a08d815"), exports);
__exportStar(require("9be0d7bc994087dc"), exports);
__exportStar(require("92d1ffe58d588975"), exports);
__exportStar(require("d0754a599728b164"), exports);
__exportStar(require("f77ac3ad9dc4db20"), exports);

},{"f702b3e1c12cc5db":"gD385","999eb5283a08d815":"iPtoI","9be0d7bc994087dc":"eEsx0","92d1ffe58d588975":"jhc5O","d0754a599728b164":"c4vOL","f77ac3ad9dc4db20":"dcoc2"}],"gD385":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FetchError = void 0;
class FetchError extends Error {
    constructor(statusCode, message, options){
        super(message, options);
        Object.defineProperty(this, "statusCode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: statusCode
        });
    }
    get expose() {
        return true;
    }
}
exports.FetchError = FetchError;

},{}],"iPtoI":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DEFAULT_FORBIDDEN_DOMAIN_NAMES = exports.FetchRequestError = void 0;
exports.protocolCheckRequestTransform = protocolCheckRequestTransform;
exports.redirectCheckRequestTransform = redirectCheckRequestTransform;
exports.requireHostHeaderTransform = requireHostHeaderTransform;
exports.forbiddenDomainNameRequestTransform = forbiddenDomainNameRequestTransform;
const fetch_error_js_1 = require("e2516957737bf6c4");
const fetch_js_1 = require("58dd0ddeed695ab1");
const util_js_1 = require("72ed7b7514173a81");
class FetchRequestError extends fetch_error_js_1.FetchError {
    constructor(request, statusCode, message, options){
        if (statusCode == null || !message) {
            const info = extractInfo(extractRootCause(options?.cause));
            statusCode ?? (statusCode = info[0]);
            message || (message = info[1]);
        }
        super(statusCode, message, options);
        Object.defineProperty(this, "request", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: request
        });
    }
    get expose() {
        // A 500 request error means that the request was not made due to an infra,
        // programming or server side issue. The message should no be exposed to
        // downstream clients.
        return this.statusCode !== 500;
    }
    static from(request, cause) {
        if (cause instanceof FetchRequestError) return cause;
        return new FetchRequestError(request, undefined, undefined, {
            cause
        });
    }
}
exports.FetchRequestError = FetchRequestError;
function extractRootCause(err) {
    // Unwrap the Network error from undici (i.e. Node's internal fetch() implementation)
    // https://github.com/nodejs/undici/blob/3274c975947ce11a08508743df026f73598bfead/lib/web/fetch/index.js#L223-L228
    if (err instanceof TypeError && err.message === 'fetch failed' && err.cause !== undefined) return err.cause;
    return err;
}
function extractInfo(err) {
    if (typeof err === 'string' && err.length > 0) return [
        500,
        err
    ];
    if (!(err instanceof Error)) return [
        500,
        'Failed to fetch'
    ];
    // Undici fetch() "network" errors
    switch(err.message){
        case 'failed to fetch the data URL':
            return [
                400,
                err.message
            ];
        case 'unexpected redirect':
        case 'cors failure':
        case 'blocked':
        case 'proxy authentication required':
            // These cases could be represented either as a 4xx user error (invalid
            // URL provided), or as a 5xx server error (server didn't behave as
            // expected).
            return [
                502,
                err.message
            ];
    }
    // NodeJS errors
    const code = err['code'];
    if (typeof code === 'string') switch(true){
        case code === 'ENOTFOUND':
            return [
                400,
                'Invalid hostname'
            ];
        case code === 'ECONNREFUSED':
            return [
                502,
                'Connection refused'
            ];
        case code === 'DEPTH_ZERO_SELF_SIGNED_CERT':
            return [
                502,
                'Self-signed certificate'
            ];
        case code.startsWith('ERR_TLS'):
            return [
                502,
                'TLS error'
            ];
        case code.startsWith('ECONN'):
            return [
                502,
                'Connection error'
            ];
        default:
            return [
                500,
                `${code} error`
            ];
    }
    return [
        500,
        err.message
    ];
}
function protocolCheckRequestTransform(protocols) {
    return (input, init)=>{
        const { protocol, port } = (0, util_js_1.extractUrl)(input);
        const request = (0, fetch_js_1.asRequest)(input, init);
        const config = Object.hasOwn(protocols, protocol) ? protocols[protocol] : undefined;
        if (!config) throw new FetchRequestError(request, 400, `Forbidden protocol "${protocol}"`);
        else if (config === true) ;
        else if (!config['allowCustomPort'] && port !== '') throw new FetchRequestError(request, 400, `Custom ${protocol} ports not allowed`);
        return request;
    };
}
function redirectCheckRequestTransform() {
    return (input, init)=>{
        const request = (0, fetch_js_1.asRequest)(input, init);
        if (request.redirect === 'follow') throw new FetchRequestError(request, 500, 'Request redirect must be "error" or "manual"');
        return request;
    };
}
function requireHostHeaderTransform() {
    return (input, init)=>{
        // Note that fetch() will automatically add the Host header from the URL and
        // discard any Host header manually set in the request.
        const { protocol, hostname } = (0, util_js_1.extractUrl)(input);
        const request = (0, fetch_js_1.asRequest)(input, init);
        // "Host" header only makes sense in the context of an HTTP request
        if (protocol !== 'http:' && protocol !== 'https:') throw new FetchRequestError(request, 400, `"${protocol}" requests are not allowed`);
        if (!hostname || (0, util_js_1.isIp)(hostname)) throw new FetchRequestError(request, 400, 'Invalid hostname');
        return request;
    };
}
exports.DEFAULT_FORBIDDEN_DOMAIN_NAMES = [
    'example.com',
    '*.example.com',
    'example.org',
    '*.example.org',
    'example.net',
    '*.example.net',
    'googleusercontent.com',
    '*.googleusercontent.com'
];
function forbiddenDomainNameRequestTransform(denyList = exports.DEFAULT_FORBIDDEN_DOMAIN_NAMES) {
    const denySet = new Set(denyList);
    // Optimization: if no forbidden domain names are provided, we can skip the
    // check entirely.
    if (denySet.size === 0) return fetch_js_1.asRequest;
    return async (input, init)=>{
        const { hostname } = (0, util_js_1.extractUrl)(input);
        const request = (0, fetch_js_1.asRequest)(input, init);
        // Full domain name check
        if (denySet.has(hostname)) throw new FetchRequestError(request, 403, 'Forbidden hostname');
        // Sub domain name check
        let curDot = hostname.indexOf('.');
        while(curDot !== -1){
            const subdomain = hostname.slice(curDot + 1);
            if (denySet.has(`*.${subdomain}`)) throw new FetchRequestError(request, 403, 'Forbidden hostname');
            curDot = hostname.indexOf('.', curDot + 1);
        }
        return request;
    };
}

},{"e2516957737bf6c4":"gD385","58dd0ddeed695ab1":"c4vOL","72ed7b7514173a81":"dcoc2"}],"c4vOL":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toRequestTransformer = toRequestTransformer;
exports.asRequest = asRequest;
function toRequestTransformer(requestTransformer) {
    return function(input, init) {
        return requestTransformer.call(this, asRequest(input, init));
    };
}
function asRequest(input, init) {
    if (!init && input instanceof Request) return input;
    return new Request(input, init);
}

},{}],"dcoc2":[function(require,module,exports,__globalThis) {
"use strict";
// @TODO: Move some of these to a shared package ?
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.extractUrl = exports.MaxBytesTransformStream = exports.ifString = void 0;
exports.isIp = isIp;
exports.padLines = padLines;
exports.cancelBody = cancelBody;
exports.logCancellationError = logCancellationError;
exports.stringifyMessage = stringifyMessage;
function isIp(hostname) {
    // IPv4
    if (hostname.match(/^\d+\.\d+\.\d+\.\d+$/)) return true;
    // IPv6
    if (hostname.startsWith('[') && hostname.endsWith(']')) return true;
    return false;
}
const ifString = (v)=>typeof v === 'string' ? v : undefined;
exports.ifString = ifString;
class MaxBytesTransformStream extends TransformStream {
    constructor(maxBytes){
        // Note: negation accounts for invalid value types (NaN, non numbers)
        if (!(maxBytes >= 0)) throw new TypeError('maxBytes must be a non-negative number');
        let bytesRead = 0;
        super({
            transform: (chunk, ctrl)=>{
                if ((bytesRead += chunk.length) <= maxBytes) ctrl.enqueue(chunk);
                else ctrl.error(new Error('Response too large'));
            }
        });
    }
}
exports.MaxBytesTransformStream = MaxBytesTransformStream;
const LINE_BREAK = /\r?\n/g;
function padLines(input, pad) {
    if (!input) return input;
    return pad + input.replace(LINE_BREAK, `$&${pad}`);
}
/**
 * @param [onCancellationError] - Callback that will trigger to asynchronously
 * handle any error that occurs while cancelling the response body. Providing
 * this will speed up the process and avoid potential deadlocks. Defaults to
 * awaiting the cancellation operation. use `"log"` to log the error.
 * @see {@link https://undici.nodejs.org/#/?id=garbage-collection}
 * @note awaiting this function's result, when no `onCancellationError` is
 * provided, might result in a dead lock. Indeed, if the response was cloned(),
 * the response.body.cancel() method will not resolve until the other response's
 * body is consumed/cancelled.
 *
 * @example
 * ```ts
 * // Make sure response was not cloned, or that every cloned response was
 * // consumed/cancelled before awaiting this function's result.
 * await cancelBody(response)
 * ```
 * @example
 * ```ts
 * await cancelBody(response, (err) => {
 *   // No biggie, let's just log the error
 *   console.warn('Failed to cancel response body', err)
 * })
 * ```
 * @example
 * ```ts
 * // Will generate an "unhandledRejection" if an error occurs while cancelling
 * // the response body. This will likely crash the process.
 * await cancelBody(response, (err) => { throw err })
 * ```
 */ async function cancelBody(body, onCancellationError) {
    if (body.body && !body.bodyUsed && !body.body.locked && // Support for alternative fetch implementations
    typeof body.body.cancel === 'function') {
        if (typeof onCancellationError === 'function') body.body.cancel().catch(onCancellationError);
        else if (onCancellationError === 'log') body.body.cancel().catch(logCancellationError);
        else await body.body.cancel();
    }
}
function logCancellationError(err) {
    console.warn('Failed to cancel response body', err);
}
async function stringifyMessage(input) {
    try {
        const headers = stringifyHeaders(input.headers);
        const payload = await stringifyBody(input);
        return headers && payload ? `${headers}\n${payload}` : headers || payload;
    } finally{
        cancelBody(input, 'log');
    }
}
function stringifyHeaders(headers) {
    return Array.from(headers).map(([name, value])=>`${name}: ${value}`).join('\n');
}
async function stringifyBody(body) {
    try {
        const blob = await body.blob();
        if (blob.type?.startsWith('text/')) {
            const text = await blob.text();
            return JSON.stringify(text);
        }
        if (/application\/(?:\w+\+)?json/.test(blob.type)) {
            const text = await blob.text();
            return text.includes('\n') ? JSON.stringify(JSON.parse(text)) : text;
        }
        return `[Body size: ${blob.size}, type: ${JSON.stringify(blob.type)} ]`;
    } catch  {
        return '[Body could not be read]';
    }
}
const extractUrl = (input)=>typeof input === 'string' ? new URL(input) : input instanceof URL ? input : new URL(input.url);
exports.extractUrl = extractUrl;

},{}],"eEsx0":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fetchJsonZodProcessor = exports.FetchResponseError = void 0;
exports.peekJson = peekJson;
exports.checkLength = checkLength;
exports.extractLength = extractLength;
exports.extractMime = extractMime;
exports.cancelBodyOnError = cancelBodyOnError;
exports.fetchOkProcessor = fetchOkProcessor;
exports.fetchOkTransformer = fetchOkTransformer;
exports.fetchMaxSizeProcessor = fetchMaxSizeProcessor;
exports.fetchResponseMaxSizeChecker = fetchResponseMaxSizeChecker;
exports.fetchTypeProcessor = fetchTypeProcessor;
exports.fetchResponseTypeChecker = fetchResponseTypeChecker;
exports.fetchResponseJsonTransformer = fetchResponseJsonTransformer;
exports.fetchJsonProcessor = fetchJsonProcessor;
exports.fetchJsonValidatorProcessor = fetchJsonValidatorProcessor;
const pipe_1 = require("55b38b7e0180d0f5");
const fetch_error_js_1 = require("e1b6a91721df54c");
const transformed_response_js_1 = require("2bcb9e70b3d2c376");
const util_js_1 = require("6ac218535528f5df");
/**
 * media-type     = type "/" subtype *( ";" parameter )
 * type           = token
 * subtype        = token
 * token          = 1*<any CHAR except CTLs or separators>
 * separators     = "(" | ")" | "<" | ">" | "@"
 *                | "," | ";" | ":" | "\" | <">
 *                | "/" | "[" | "]" | "?" | "="
 *                | "{" | "}" | SP | HT
 * CTL            = <any US-ASCII control character (octets 0 - 31) and DEL (127)>
 * SP             = <US-ASCII SP, space (32)>
 * HT             = <US-ASCII HT, horizontal-tab (9)>
 * @note The type, subtype, and parameter attribute names are case-insensitive.
 * @see {@link https://datatracker.ietf.org/doc/html/rfc2616#autoid-23}
 */ const JSON_MIME = /^application\/(?:[^()<>@,;:/[\]\\?={} \t]+\+)?json$/i;
class FetchResponseError extends fetch_error_js_1.FetchError {
    constructor(response, statusCode = response.status, message = response.statusText, options){
        super(statusCode, message, options);
        Object.defineProperty(this, "response", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: response
        });
    }
    static async from(response, customMessage = extractResponseMessage, statusCode = response.status, options) {
        const message = typeof customMessage === 'string' ? customMessage : typeof customMessage === 'function' ? await customMessage(response) : undefined;
        return new FetchResponseError(response, statusCode, message, options);
    }
}
exports.FetchResponseError = FetchResponseError;
const extractResponseMessage = async (response)=>{
    const mimeType = extractMime(response);
    if (!mimeType) return undefined;
    try {
        if (mimeType === 'text/plain') return await response.text();
        else if (JSON_MIME.test(mimeType)) {
            const json = await response.json();
            if (typeof json === 'string') return json;
            if (typeof json === 'object' && json != null) {
                const errorDescription = (0, util_js_1.ifString)(json['error_description']);
                if (errorDescription) return errorDescription;
                const error = (0, util_js_1.ifString)(json['error']);
                if (error) return error;
                const message = (0, util_js_1.ifString)(json['message']);
                if (message) return message;
            }
        }
    } catch  {
    // noop
    }
    return undefined;
};
async function peekJson(response, maxSize = Infinity) {
    const type = extractMime(response);
    if (type !== 'application/json') return undefined;
    checkLength(response, maxSize);
    // 1) Clone the request so we can consume the body
    const clonedResponse = response.clone();
    // 2) Make sure the request's body is not too large
    const limitedResponse = response.body && maxSize < Infinity ? new transformed_response_js_1.TransformedResponse(clonedResponse, new util_js_1.MaxBytesTransformStream(maxSize)) : clonedResponse;
    // 3) Parse the JSON
    return limitedResponse.json();
}
function checkLength(response, maxBytes) {
    // Note: negation accounts for invalid value types (NaN, non numbers)
    if (!(maxBytes >= 0)) throw new TypeError('maxBytes must be a non-negative number');
    const length = extractLength(response);
    if (length != null && length > maxBytes) throw new FetchResponseError(response, 502, 'Response too large');
    return length;
}
function extractLength(response) {
    const contentLength = response.headers.get('Content-Length');
    if (contentLength == null) return undefined;
    if (!/^\d+$/.test(contentLength)) throw new FetchResponseError(response, 502, 'Invalid Content-Length');
    const length = Number(contentLength);
    if (!Number.isSafeInteger(length)) throw new FetchResponseError(response, 502, 'Content-Length too large');
    return length;
}
function extractMime(response) {
    const contentType = response.headers.get('Content-Type');
    if (contentType == null) return undefined;
    return contentType.split(';', 1)[0].trim();
}
/**
 * If the transformer results in an error, ensure that the response body is
 * consumed as, in some environments (Node 👀), the response will not
 * automatically be GC'd.
 *
 * @see {@link https://undici.nodejs.org/#/?id=garbage-collection}
 * @param [onCancellationError] - Callback to handle any async body cancelling
 * error. Defaults to logging the error. Do not use `null` if the request is
 * cloned.
 */ function cancelBodyOnError(transformer, onCancellationError = util_js_1.logCancellationError) {
    return async (response)=>{
        try {
            return await transformer(response);
        } catch (err) {
            await (0, util_js_1.cancelBody)(response, onCancellationError ?? undefined);
            throw err;
        }
    };
}
function fetchOkProcessor(customMessage) {
    return cancelBodyOnError((response)=>{
        return fetchOkTransformer(response, customMessage);
    });
}
async function fetchOkTransformer(response, customMessage) {
    if (response.ok) return response;
    throw await FetchResponseError.from(response, customMessage);
}
function fetchMaxSizeProcessor(maxBytes) {
    if (maxBytes === Infinity) return (response)=>response;
    if (!Number.isFinite(maxBytes) || maxBytes < 0) throw new TypeError('maxBytes must be a 0, Infinity or a positive number');
    return cancelBodyOnError((response)=>{
        return fetchResponseMaxSizeChecker(response, maxBytes);
    });
}
function fetchResponseMaxSizeChecker(response, maxBytes) {
    if (maxBytes === Infinity) return response;
    checkLength(response, maxBytes);
    // Some engines (react-native 👀) don't expose a body property. In that case,
    // we will only rely on the Content-Length header.
    if (!response.body) return response;
    const transform = new util_js_1.MaxBytesTransformStream(maxBytes);
    return new transformed_response_js_1.TransformedResponse(response, transform);
}
function fetchTypeProcessor(expectedMime, contentTypeRequired = true) {
    const isExpected = typeof expectedMime === 'string' ? (mimeType)=>mimeType === expectedMime : expectedMime instanceof RegExp ? (mimeType)=>expectedMime.test(mimeType) : expectedMime;
    return cancelBodyOnError((response)=>{
        return fetchResponseTypeChecker(response, isExpected, contentTypeRequired);
    });
}
async function fetchResponseTypeChecker(response, isExpectedMime, contentTypeRequired = true) {
    const mimeType = extractMime(response);
    if (mimeType) {
        if (!isExpectedMime(mimeType.toLowerCase())) throw await FetchResponseError.from(response, `Unexpected response Content-Type (${mimeType})`, 502);
    } else if (contentTypeRequired) throw await FetchResponseError.from(response, 'Missing response Content-Type header', 502);
    return response;
}
async function fetchResponseJsonTransformer(response) {
    try {
        const json = await response.json();
        return {
            response,
            json
        };
    } catch (cause) {
        throw new FetchResponseError(response, 502, 'Unable to parse response as JSON', {
            cause
        });
    }
}
function fetchJsonProcessor(expectedMime = JSON_MIME, contentTypeRequired = true) {
    return (0, pipe_1.pipe)(fetchTypeProcessor(expectedMime, contentTypeRequired), cancelBodyOnError(fetchResponseJsonTransformer));
}
function fetchJsonValidatorProcessor(schema, params) {
    if ('parseAsync' in schema && typeof schema.parseAsync === 'function') return async (jsonResponse)=>schema.parseAsync(jsonResponse.json, params);
    if ('parse' in schema && typeof schema.parse === 'function') return async (jsonResponse)=>schema.parse(jsonResponse.json, params);
    // Needed for type safety (and allows fool proofing the usage of this function)
    throw new TypeError('Invalid schema');
}
/** @note Use {@link fetchJsonValidatorProcessor} instead */ exports.fetchJsonZodProcessor = fetchJsonValidatorProcessor;

},{"55b38b7e0180d0f5":"d5qTH","e1b6a91721df54c":"gD385","2bcb9e70b3d2c376":"56lng","6ac218535528f5df":"dcoc2"}],"d5qTH":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.pipeTwo = exports.pipe = void 0;
var pipe_js_1 = require("e4c95df997e50833");
Object.defineProperty(exports, "pipe", {
    enumerable: true,
    get: function() {
        return pipe_js_1.pipe;
    }
});
Object.defineProperty(exports, "pipeTwo", {
    enumerable: true,
    get: function() {
        return pipe_js_1.pipeTwo;
    }
});

},{"e4c95df997e50833":"d5uAD"}],"d5uAD":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.pipeTwo = exports.pipe = void 0;
function pipe(...pipeline) {
    return pipeline.reduce(pipeTwo);
}
exports.pipe = pipe;
function pipeTwo(first, second) {
    return async (input)=>second(await first(input));
}
exports.pipeTwo = pipeTwo;

},{}],"56lng":[function(require,module,exports,__globalThis) {
"use strict";
var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TransformedResponse_response;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TransformedResponse = void 0;
class TransformedResponse extends Response {
    constructor(response, transform){
        if (!response.body) throw new TypeError('Response body is not available');
        if (response.bodyUsed) throw new TypeError('Response body is already used');
        super(response.body.pipeThrough(transform), {
            status: response.status,
            statusText: response.statusText,
            headers: response.headers
        });
        _TransformedResponse_response.set(this, void 0);
        __classPrivateFieldSet(this, _TransformedResponse_response, response, "f");
    }
    /**
     * Some props can't be set through ResponseInit, so we need to proxy them
     */ get url() {
        return __classPrivateFieldGet(this, _TransformedResponse_response, "f").url;
    }
    get redirected() {
        return __classPrivateFieldGet(this, _TransformedResponse_response, "f").redirected;
    }
    get type() {
        return __classPrivateFieldGet(this, _TransformedResponse_response, "f").type;
    }
    get statusText() {
        return __classPrivateFieldGet(this, _TransformedResponse_response, "f").statusText;
    }
}
exports.TransformedResponse = TransformedResponse;
_TransformedResponse_response = new WeakMap();

},{}],"jhc5O":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.timedFetch = void 0;
exports.loggedFetch = loggedFetch;
exports.bindFetch = bindFetch;
const fetch_request_js_1 = require("eeeb866f9c8fd494");
const fetch_js_1 = require("f0acf03a5a5debee");
const transformed_response_js_1 = require("9cbfd487eca5fe2e");
const util_js_1 = require("e354d96f2ba988b7");
function loggedFetch({ fetch = globalThis.fetch, logRequest = true, logResponse = true, logError = true }) {
    const onRequest = logRequest === true ? async (request)=>{
        const requestMessage = await (0, util_js_1.stringifyMessage)(request);
        console.info(`> ${request.method} ${request.url}\n${(0, util_js_1.padLines)(requestMessage, '  ')}`);
    } : logRequest || undefined;
    const onResponse = logResponse === true ? async (response)=>{
        const responseMessage = await (0, util_js_1.stringifyMessage)(response.clone());
        console.info(`< HTTP/1.1 ${response.status} ${response.statusText}\n${(0, util_js_1.padLines)(responseMessage, '  ')}`);
    } : logResponse || undefined;
    const onError = logError === true ? async (error)=>{
        console.error(`< Error:`, error);
    } : logError || undefined;
    if (!onRequest && !onResponse && !onError) return fetch;
    return (0, fetch_js_1.toRequestTransformer)(async function(request) {
        if (onRequest) await onRequest(request);
        try {
            const response = await fetch.call(this, request);
            if (onResponse) await onResponse(response, request);
            return response;
        } catch (error) {
            if (onError) await onError(error, request);
            throw error;
        }
    });
}
const timedFetch = (timeout = 60e3, fetch = globalThis.fetch)=>{
    if (timeout === Infinity) return fetch;
    if (!Number.isFinite(timeout) || timeout <= 0) throw new TypeError('Timeout must be positive');
    return (0, fetch_js_1.toRequestTransformer)(async function(request) {
        const controller = new AbortController();
        const signal = controller.signal;
        const abort = ()=>{
            controller.abort();
        };
        const cleanup = ()=>{
            clearTimeout(timer);
            request.signal?.removeEventListener('abort', abort);
        };
        const timer = setTimeout(abort, timeout);
        if (typeof timer === 'object') timer.unref?.(); // only on node
        request.signal?.addEventListener('abort', abort);
        signal.addEventListener('abort', cleanup);
        const response = await fetch.call(this, request, {
            signal
        });
        if (!response.body) {
            cleanup();
            return response;
        } else {
            // Cleanup the timer & event listeners when the body stream is closed
            const transform = new TransformStream({
                flush: cleanup
            });
            return new transformed_response_js_1.TransformedResponse(response, transform);
        }
    });
};
exports.timedFetch = timedFetch;
/**
 * Wraps a fetch function to bind it to a specific context, and wrap any thrown
 * errors into a FetchRequestError.
 *
 * @example
 *
 * ```ts
 * class MyClient {
 *   constructor(private fetch = globalThis.fetch) {}
 *
 *   async get(url: string) {
 *     // This will generate an error, because the context used is not a
 *     // FetchContext (it's a MyClient instance).
 *     return this.fetch(url)
 *   }
 * }
 * ```
 *
 * @example
 *
 * ```ts
 * class MyClient {
 *   private fetch: Fetch<unknown>
 *
 *   constructor(fetch = globalThis.fetch) {
 *     this.fetch = bindFetch(fetch)
 *   }
 *
 *   async get(url: string) {
 *     return this.fetch(url) // no more error
 *   }
 * }
 * ```
 */ function bindFetch(fetch = globalThis.fetch, context = globalThis) {
    return (0, fetch_js_1.toRequestTransformer)(async (request)=>{
        try {
            return await fetch.call(context, request);
        } catch (err) {
            throw fetch_request_js_1.FetchRequestError.from(request, err);
        }
    });
}

},{"eeeb866f9c8fd494":"iPtoI","f0acf03a5a5debee":"c4vOL","9cbfd487eca5fe2e":"56lng","e354d96f2ba988b7":"dcoc2"}],"f4knV":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DidPlcMethod = void 0;
const did_1 = require("6809fd989f0b8c82");
const fetch_1 = require("3d5ffcd286ed8ae3");
const pipe_1 = require("68c04eefe06c671b");
const fetchSuccessHandler = (0, pipe_1.pipe)((0, fetch_1.fetchOkProcessor)(), (0, fetch_1.fetchJsonProcessor)(/^application\/(did\+ld\+)?json$/), (0, fetch_1.fetchJsonZodProcessor)(did_1.didDocumentValidator));
class DidPlcMethod {
    constructor(options){
        Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "plcDirectoryUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.plcDirectoryUrl = new URL(options?.plcDirectoryUrl || 'https://plc.directory/');
        this.fetch = (0, fetch_1.bindFetch)(options?.fetch);
    }
    async resolve(did, options) {
        // Although the did should start with `did:plc:` (thanks to typings), we
        // should still check if the msid is valid.
        (0, did_1.assertDidPlc)(did);
        // Should never throw
        const url = new URL(`/${encodeURIComponent(did)}`, this.plcDirectoryUrl);
        return this.fetch(url, {
            redirect: 'error',
            headers: {
                accept: 'application/did+ld+json,application/json'
            },
            signal: options?.signal
        }).then(fetchSuccessHandler);
    }
}
exports.DidPlcMethod = DidPlcMethod;

},{"6809fd989f0b8c82":"b74ep","3d5ffcd286ed8ae3":"8GrWo","68c04eefe06c671b":"d5qTH"}],"82PHf":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DidWebMethod = void 0;
exports.buildDidWebDocumentUrl = buildDidWebDocumentUrl;
const did_1 = require("2d27b7af8ab983fc");
const fetch_1 = require("60e251f8a160f64a");
const pipe_1 = require("e5d3fdac207b0398");
const fetchSuccessHandler = (0, pipe_1.pipe)((0, fetch_1.fetchOkProcessor)(), (0, fetch_1.fetchJsonProcessor)(/^application\/(did\+ld\+)?json$/), (0, fetch_1.fetchJsonZodProcessor)(did_1.didDocumentValidator));
class DidWebMethod {
    constructor({ fetch = globalThis.fetch, allowHttp = true } = {}){
        Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "allowHttp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.fetch = (0, fetch_1.bindFetch)(fetch);
        this.allowHttp = allowHttp;
    }
    async resolve(did, options) {
        const didDocumentUrl = buildDidWebDocumentUrl(did);
        if (!this.allowHttp && didDocumentUrl.protocol === 'http:') throw new did_1.DidError(did, 'Resolution of "http" did:web is not allowed', 'did-web-http-not-allowed');
        // Note we do not explicitly check for "localhost" here. Instead, we rely on
        // the injected 'fetch' function to handle the URL. If the URL is
        // "localhost", or resolves to a private IP address, the fetch function is
        // responsible for handling it.
        return this.fetch(didDocumentUrl, {
            redirect: 'error',
            headers: {
                accept: 'application/did+ld+json,application/json'
            },
            signal: options?.signal
        }).then(fetchSuccessHandler);
    }
}
exports.DidWebMethod = DidWebMethod;
/**
 * @see {@link https://datatracker.ietf.org/doc/html/rfc8615}
 * @see {@link https://w3c-ccg.github.io/did-method-web/#create-register}
 */ function buildDidWebDocumentUrl(did) {
    const url = (0, did_1.didWebToUrl)(did); // Will throw if the DID is invalid
    // Note: DID cannot end with an `:`, so they cannot end with a `/`. This is
    // true unless when there is no path at all, in which case the URL constructor
    // will set the pathname to `/`.
    // https://w3c-ccg.github.io/did-method-web/#read-resolve
    if (url.pathname === '/') return new URL(`/.well-known/did.json`, url);
    else return new URL(`${url.pathname}/did.json`, url);
}

},{"2d27b7af8ab983fc":"b74ep","60e251f8a160f64a":"8GrWo","e5d3fdac207b0398":"d5qTH"}],"2r6t1":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"jO8OR":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(require("a101d75b218a8e17"), exports);
__exportStar(require("97e18059e8663c17"), exports);

},{"a101d75b218a8e17":"f4knV","97e18059e8663c17":"82PHf"}],"3pisa":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"fmpMV":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(require("57b37f88075dc92b"), exports);
// Main Handle Resolvers strategies
__exportStar(require("635af79e4d7cde29"), exports);
__exportStar(require("cacb47964b138acc"), exports);
__exportStar(require("aa46273936663b88"), exports);
// Handle Resolver Caching utility
__exportStar(require("7ca56abacdfa2577"), exports);

},{"57b37f88075dc92b":"2S5Do","635af79e4d7cde29":"bjKCR","cacb47964b138acc":"02uPK","aa46273936663b88":"9uQl4","7ca56abacdfa2577":"9mHe3"}],"2S5Do":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isResolvedHandle = isResolvedHandle;
const did_1 = require("60529919445ee5f4");
/**
 * @see {@link https://atproto.com/specs/did#blessed-did-methods}
 */ function isResolvedHandle(value) {
    return value === null || (0, did_1.isAtprotoDid)(value);
}

},{"60529919445ee5f4":"b74ep"}],"bjKCR":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AppViewHandleResolver = exports.xrpcErrorSchema = void 0;
const zod_1 = require("8b0b845344089709");
const types_js_1 = require("6076f3e929be2d0c");
exports.xrpcErrorSchema = zod_1.z.object({
    error: zod_1.z.string(),
    message: zod_1.z.string().optional()
});
class AppViewHandleResolver {
    static from(service, options) {
        if (typeof service === 'string' || service instanceof URL) return new AppViewHandleResolver(service, options);
        return service;
    }
    constructor(service, options){
        /**
         * URL of the atproto lexicon server. This is the base URL where the
         * `com.atproto.identity.resolveHandle` XRPC method is located.
         */ Object.defineProperty(this, "serviceUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.serviceUrl = new URL(service);
        this.fetch = options?.fetch ?? globalThis.fetch;
    }
    async resolve(handle, options) {
        const url = new URL('/xrpc/com.atproto.identity.resolveHandle', this.serviceUrl);
        url.searchParams.set('handle', handle);
        const response = await this.fetch.call(null, url, {
            cache: options?.noCache ? 'no-cache' : undefined,
            signal: options?.signal,
            redirect: 'error'
        });
        const payload = await response.json();
        // The response should either be
        // - 400 Bad Request with { error: 'InvalidRequest', message: 'Unable to resolve handle' }
        // - 200 OK with { did: NonNullable<ResolvedHandle> }
        // Any other response is considered unexpected behavior an should throw an error.
        if (response.status === 400) {
            const data = exports.xrpcErrorSchema.parse(payload);
            if (data.error === 'InvalidRequest' && data.message === 'Unable to resolve handle') return null;
        }
        if (!response.ok) throw new TypeError('Invalid response from resolveHandle method');
        const value = payload?.did;
        if (!(0, types_js_1.isResolvedHandle)(value)) throw new TypeError('Invalid DID returned from resolveHandle method');
        return value;
    }
}
exports.AppViewHandleResolver = AppViewHandleResolver;

},{"8b0b845344089709":"gcE23","6076f3e929be2d0c":"2S5Do"}],"02uPK":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AtprotoDohHandleResolver = void 0;
const atproto_handle_resolver_js_1 = require("16b6e9d216ae2ed1");
class AtprotoDohHandleResolver extends atproto_handle_resolver_js_1.AtprotoHandleResolver {
    constructor(options){
        super({
            ...options,
            resolveTxt: dohResolveTxtFactory(options),
            resolveTxtFallback: undefined
        });
    }
}
exports.AtprotoDohHandleResolver = AtprotoDohHandleResolver;
/**
 * Resolver for DNS-over-HTTPS (DoH) handles. Only works with servers supporting
 * Google Flavoured "application/dns-json" queries.
 *
 * @see {@link https://developers.google.com/speed/public-dns/docs/doh/json}
 * @see {@link https://developers.cloudflare.com/1.1.1.1/encryption/dns-over-https/make-api-requests/dns-json/}
 * @todo Add support for DoH using application/dns-message (?)
 */ function dohResolveTxtFactory({ dohEndpoint, fetch = globalThis.fetch }) {
    return async (hostname)=>{
        const url = new URL(dohEndpoint);
        url.searchParams.set('type', 'TXT');
        url.searchParams.set('name', hostname);
        const response = await fetch(url, {
            method: 'GET',
            headers: {
                accept: 'application/dns-json'
            },
            redirect: 'follow'
        });
        try {
            const contentType = response.headers.get('content-type')?.trim();
            if (!response.ok) {
                const message = contentType?.startsWith('text/plain') ? await response.text() : `Failed to resolve ${hostname}`;
                throw new TypeError(message);
            } else if (contentType?.match(/application\/(dns-)?json/i) == null) throw new TypeError('Unexpected response from DoH server');
            const result = asResult(await response.json());
            return result.Answer?.filter(isAnswerTxt).map(extractTxtData) ?? null;
        } finally{
            // Make sure to always cancel the response body as some engines (Node 👀)
            // do not do this automatically.
            // https://undici.nodejs.org/#/?id=garbage-collection
            if (response.bodyUsed === false) // Handle rejection asynchronously
            response.body?.cancel().catch(onCancelError);
        }
    };
}
function onCancelError(err) {
    if (!(err instanceof DOMException) || err.name !== 'AbortError') console.error('An error occurred while cancelling the response body:', err);
}
function isResult(result) {
    if (typeof result !== 'object' || result === null) return false;
    if (!('Status' in result) || typeof result.Status !== 'number') return false;
    if ('Answer' in result && !isArrayOf(result.Answer, isAnswer)) return false;
    return true;
}
function asResult(result) {
    if (isResult(result)) return result;
    throw new TypeError('Invalid DoH response');
}
function isArrayOf(value, predicate) {
    return Array.isArray(value) && value.every(predicate);
}
function isAnswer(answer) {
    return typeof answer === 'object' && answer !== null && 'name' in answer && typeof answer.name === 'string' && 'type' in answer && typeof answer.type === 'number' && 'data' in answer && typeof answer.data === 'string' && 'TTL' in answer && typeof answer.TTL === 'number';
}
function isAnswerTxt(answer) {
    return answer.type === 16;
}
function extractTxtData(answer) {
    return answer.data.replace(/^"|"$/g, '').replace(/\\"/g, '"');
}

},{"16b6e9d216ae2ed1":"9uQl4"}],"9uQl4":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AtprotoHandleResolver = void 0;
const dns_handle_resolver_js_1 = require("a2192290e050cbcc");
const well_known_handler_resolver_js_1 = require("646465af49455dd");
const noop = ()=>{};
/**
 * Implementation of the official ATPROTO handle resolution strategy.
 * This implementation relies on two primitives:
 * - HTTP Well-Known URI resolution (requires a `fetch()` implementation)
 * - DNS TXT record resolution (requires a `resolveTxt()` function)
 */ class AtprotoHandleResolver {
    constructor(options){
        Object.defineProperty(this, "httpResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "dnsResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "dnsResolverFallback", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.httpResolver = new well_known_handler_resolver_js_1.WellKnownHandleResolver(options);
        this.dnsResolver = new dns_handle_resolver_js_1.DnsHandleResolver(options.resolveTxt);
        this.dnsResolverFallback = options.resolveTxtFallback ? new dns_handle_resolver_js_1.DnsHandleResolver(options.resolveTxtFallback) : undefined;
    }
    async resolve(handle, options) {
        options?.signal?.throwIfAborted();
        const abortController = new AbortController();
        const { signal } = abortController;
        options?.signal?.addEventListener('abort', ()=>abortController.abort(), {
            signal
        });
        const wrappedOptions = {
            ...options,
            signal
        };
        try {
            const dnsPromise = this.dnsResolver.resolve(handle, wrappedOptions);
            const httpPromise = this.httpResolver.resolve(handle, wrappedOptions);
            // Prevent uncaught promise rejection
            httpPromise.catch(noop);
            const dnsRes = await dnsPromise;
            if (dnsRes) return dnsRes;
            signal.throwIfAborted();
            const res = await httpPromise;
            if (res) return res;
            signal.throwIfAborted();
            return this.dnsResolverFallback?.resolve(handle, wrappedOptions) ?? null;
        } finally{
            // Cancel pending requests, and remove "abort" listener on incoming signal
            abortController.abort();
        }
    }
}
exports.AtprotoHandleResolver = AtprotoHandleResolver;

},{"a2192290e050cbcc":"1NO0s","646465af49455dd":"5U2yE"}],"1NO0s":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DnsHandleResolver = void 0;
const types_1 = require("7ccb8843cfef4767");
const SUBDOMAIN = '_atproto';
const PREFIX = 'did=';
class DnsHandleResolver {
    constructor(resolveTxt){
        Object.defineProperty(this, "resolveTxt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: resolveTxt
        });
    }
    async resolve(handle) {
        const results = await this.resolveTxt.call(null, `${SUBDOMAIN}.${handle}`);
        if (!results) return null;
        for(let i = 0; i < results.length; i++){
            // If the line does not start with "did=", skip it
            if (!results[i].startsWith(PREFIX)) continue;
            // Ensure no other entry starting with "did=" follows
            for(let j = i + 1; j < results.length; j++){
                if (results[j].startsWith(PREFIX)) return null;
            }
            // Note: No trimming (to be consistent with spec)
            const did = results[i].slice(PREFIX.length);
            // Invalid DBS record
            return (0, types_1.isResolvedHandle)(did) ? did : null;
        }
        return null;
    }
}
exports.DnsHandleResolver = DnsHandleResolver;

},{"7ccb8843cfef4767":"2S5Do"}],"5U2yE":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WellKnownHandleResolver = void 0;
const types_js_1 = require("e3d8c36819c7edda");
class WellKnownHandleResolver {
    constructor(options){
        Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.fetch = options?.fetch ?? globalThis.fetch;
    }
    async resolve(handle, options) {
        const url = new URL('/.well-known/atproto-did', `https://${handle}`);
        try {
            const response = await this.fetch.call(null, url, {
                cache: options?.noCache ? 'no-cache' : undefined,
                signal: options?.signal,
                redirect: 'error'
            });
            const text = await response.text();
            const firstLine = text.split('\n')[0].trim();
            if ((0, types_js_1.isResolvedHandle)(firstLine)) return firstLine;
            return null;
        } catch (err) {
            // The the request failed, assume the handle does not resolve to a DID,
            // unless the failure was due to the signal being aborted.
            options?.signal?.throwIfAborted();
            return null;
        }
    }
}
exports.WellKnownHandleResolver = WellKnownHandleResolver;

},{"e3d8c36819c7edda":"2S5Do"}],"9mHe3":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CachedHandleResolver = void 0;
const simple_store_1 = require("520de3f1f0796b57");
const simple_store_memory_1 = require("f751a3b85c3c7ebb");
class CachedHandleResolver {
    constructor(/**
     * The resolver that will be used to resolve handles.
     */ resolver, cache = new simple_store_memory_1.SimpleStoreMemory({
        max: 1000,
        ttl: 600000
    })){
        Object.defineProperty(this, "getter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.getter = new simple_store_1.CachedGetter((handle, options)=>resolver.resolve(handle, options), cache);
    }
    async resolve(handle, options) {
        return this.getter.get(handle, options);
    }
}
exports.CachedHandleResolver = CachedHandleResolver;

},{"520de3f1f0796b57":"27R7J","f751a3b85c3c7ebb":"hgLDP"}],"B9q5y":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(require("5ee3985f66c3bdaf"), exports);
__exportStar(require("f26f872277b1f723"), exports);
__exportStar(require("1237a85b9bcde44"), exports);
__exportStar(require("eff80f2bc6befdc5"), exports);
__exportStar(require("b2a4d1b6f56917a3"), exports);
__exportStar(require("fce258cc3f34e020"), exports);
__exportStar(require("9d7a030253a5570e"), exports);
__exportStar(require("8674455f0786a3cf"), exports);
__exportStar(require("b21e4f8ac4be7abb"), exports);
__exportStar(require("66a7df4aaf36f4a9"), exports);
__exportStar(require("338ebe599da10664"), exports);
__exportStar(require("73e6fa49bace777a"), exports);
__exportStar(require("f333a4398eef0553"), exports);
__exportStar(require("63e6c4060a0e2bbf"), exports);
__exportStar(require("effd1b25c0f9efa7"), exports);
__exportStar(require("603d62e3e850747d"), exports);
__exportStar(require("bf74efcd912a550b"), exports);
__exportStar(require("5009e13f9b432d8"), exports);
__exportStar(require("c23563f0801498e4"), exports);
__exportStar(require("a26f2f8633024410"), exports);
__exportStar(require("2536cd8120f0ddba"), exports);
__exportStar(require("da422071aa29cced"), exports);
__exportStar(require("c77dc7a343b4db"), exports);
__exportStar(require("9b867a2cc681fff2"), exports);
__exportStar(require("93e7c07b59e9cbf5"), exports);
__exportStar(require("6e6b0e6737982b6"), exports);
__exportStar(require("7800e594339d206a"), exports);
__exportStar(require("abeb9751668fb48f"), exports);
__exportStar(require("59dc04597aa0dd04"), exports);
__exportStar(require("53bc13d28fd237fa"), exports);
__exportStar(require("48fa2dec47bcd8ef"), exports);
__exportStar(require("5de9621807760a2e"), exports);
__exportStar(require("66af9b23e42f0d1"), exports);
__exportStar(require("c0831570a0c57cec"), exports);
__exportStar(require("4b6e32c839640d96"), exports);
__exportStar(require("2f666b7e7e3bc6f1"), exports);
__exportStar(require("7db2660f32073db0"), exports);
__exportStar(require("263fc2b640c0838f"), exports);
__exportStar(require("96b4f1414af146d9"), exports);
__exportStar(require("cf7151aebb12f91a"), exports);
__exportStar(require("5163fdad6d15a94d"), exports);
__exportStar(require("338b2fbbefa1c470"), exports);
__exportStar(require("946bcd8d13f92be5"), exports);
__exportStar(require("b80eac6c07bd78d3"), exports);

},{"5ee3985f66c3bdaf":"8haeb","f26f872277b1f723":"95jaG","1237a85b9bcde44":"3GUDa","eff80f2bc6befdc5":"jbDDn","b2a4d1b6f56917a3":"dWBEb","fce258cc3f34e020":"lyF2T","9d7a030253a5570e":"7Ja5P","8674455f0786a3cf":"2jdxH","b21e4f8ac4be7abb":"hwJoZ","66a7df4aaf36f4a9":"5afgI","338ebe599da10664":"hLA5v","73e6fa49bace777a":"53oTD","f333a4398eef0553":"bBGyU","63e6c4060a0e2bbf":"9hv7l","effd1b25c0f9efa7":"fVSaL","603d62e3e850747d":"iu7pZ","bf74efcd912a550b":"6rJ6n","5009e13f9b432d8":"KSev3","c23563f0801498e4":"fa96X","a26f2f8633024410":"fA26o","2536cd8120f0ddba":"1Vqn8","da422071aa29cced":"4UiV9","c77dc7a343b4db":"lIWkY","9b867a2cc681fff2":"e3hny","93e7c07b59e9cbf5":"gyyzx","6e6b0e6737982b6":"c7tB1","7800e594339d206a":"7UTWt","abeb9751668fb48f":"eujTk","59dc04597aa0dd04":"e04CU","53bc13d28fd237fa":"jSfFK","48fa2dec47bcd8ef":"c9PWf","5de9621807760a2e":"a4LSg","66af9b23e42f0d1":"91mv1","c0831570a0c57cec":"25zca","4b6e32c839640d96":"kAR9g","2f666b7e7e3bc6f1":"04F7X","7db2660f32073db0":"aoV80","263fc2b640c0838f":"eRF08","96b4f1414af146d9":"1r2dh","cf7151aebb12f91a":"7ElNc","5163fdad6d15a94d":"9ZZbn","338b2fbbefa1c470":"d6uUi","946bcd8d13f92be5":"b1sFy","b80eac6c07bd78d3":"9a6YF"}],"8haeb":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CLIENT_ASSERTION_TYPE_JWT_BEARER = void 0;
exports.CLIENT_ASSERTION_TYPE_JWT_BEARER = 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer';

},{}],"95jaG":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.privateUseUriSchema = exports.webUriSchema = exports.httpsUriSchema = exports.loopbackUriSchema = exports.dangerousUriSchema = void 0;
const zod_1 = require("6a92f71891eed3c8");
const util_js_1 = require("eb61255a1e4c1bfb");
const canParseUrl = // eslint-disable-next-line n/no-unsupported-features/node-builtins
URL.canParse ?? // URL.canParse is not available in Node.js < 18.7.0
((urlStr)=>{
    try {
        new URL(urlStr);
        return true;
    } catch  {
        return false;
    }
});
/**
 * Valid, but potentially dangerous URL (`data:`, `file:`, `javascript:`, etc.).
 *
 * Any value that matches this schema is safe to parse using `new URL()`.
 */ exports.dangerousUriSchema = zod_1.z.string().refine((data)=>data.includes(':') && canParseUrl(data), {
    message: 'Invalid URL'
});
exports.loopbackUriSchema = exports.dangerousUriSchema.superRefine((value, ctx)=>{
    // Loopback url must use the "http:" protocol
    if (!value.startsWith('http://')) {
        ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: 'URL must use the "http:" protocol'
        });
        return false;
    }
    const url = new URL(value);
    if (!(0, util_js_1.isLoopbackHost)(url.hostname)) {
        ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: 'URL must use "localhost", "127.0.0.1" or "[::1]" as hostname'
        });
        return false;
    }
    return true;
});
exports.httpsUriSchema = exports.dangerousUriSchema.superRefine((value, ctx)=>{
    if (!value.startsWith('https://')) {
        ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: 'URL must use the "https:" protocol'
        });
        return false;
    }
    const url = new URL(value);
    // Disallow loopback URLs with the `https:` protocol
    if ((0, util_js_1.isLoopbackHost)(url.hostname)) {
        ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: 'https: URL must not use a loopback host'
        });
        return false;
    }
    if ((0, util_js_1.isHostnameIP)(url.hostname)) ;
    else {
        // Hostname is a domain name
        if (!url.hostname.includes('.')) {
            // we don't depend on PSL here, so we only check for a dot
            ctx.addIssue({
                code: zod_1.ZodIssueCode.custom,
                message: 'Domain name must contain at least two segments'
            });
            return false;
        }
        if (url.hostname.endsWith('.local')) {
            ctx.addIssue({
                code: zod_1.ZodIssueCode.custom,
                message: 'Domain name must not end with ".local"'
            });
            return false;
        }
    }
    return true;
});
exports.webUriSchema = zod_1.z.string().superRefine((value, ctx)=>{
    // discriminated union of `loopbackUriSchema` and `httpsUriSchema`
    if (value.startsWith('http://')) {
        const result = exports.loopbackUriSchema.safeParse(value);
        if (!result.success) result.error.issues.forEach(ctx.addIssue, ctx);
        return result.success;
    }
    if (value.startsWith('https://')) {
        const result = exports.httpsUriSchema.safeParse(value);
        if (!result.success) result.error.issues.forEach(ctx.addIssue, ctx);
        return result.success;
    }
    ctx.addIssue({
        code: zod_1.ZodIssueCode.custom,
        message: 'URL must use the "http:" or "https:" protocol'
    });
    return false;
});
exports.privateUseUriSchema = exports.dangerousUriSchema.superRefine((value, ctx)=>{
    const dotIdx = value.indexOf('.');
    const colonIdx = value.indexOf(':');
    // Optimization: avoid parsing the URL if the protocol does not contain a "."
    if (dotIdx === -1 || colonIdx === -1 || dotIdx > colonIdx) {
        ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: 'Private-use URI scheme requires a "." as part of the protocol'
        });
        return false;
    }
    const url = new URL(value);
    // Should be covered by the check before, but let's be extra sure
    if (!url.protocol.includes('.')) {
        ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: 'Invalid private-use URI scheme'
        });
        return false;
    }
    if (url.hostname) {
        // https://datatracker.ietf.org/doc/html/rfc8252#section-7.1
        ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: 'Private-use URI schemes must not include a hostname (only one "/" is allowed after the protocol, as per RFC 8252)'
        });
        return false;
    }
    return true;
});

},{"6a92f71891eed3c8":"gcE23","eb61255a1e4c1bfb":"3GUDa"}],"3GUDa":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isHostnameIP = isHostnameIP;
exports.isLoopbackHost = isLoopbackHost;
exports.isLoopbackUrl = isLoopbackUrl;
exports.safeUrl = safeUrl;
exports.extractUrlPath = extractUrlPath;
function isHostnameIP(hostname) {
    // IPv4
    if (hostname.match(/^\d+\.\d+\.\d+\.\d+$/)) return true;
    // IPv6
    if (hostname.startsWith('[') && hostname.endsWith(']')) return true;
    return false;
}
function isLoopbackHost(host) {
    return host === 'localhost' || host === '127.0.0.1' || host === '[::1]';
}
function isLoopbackUrl(input) {
    const url = typeof input === 'string' ? new URL(input) : input;
    return isLoopbackHost(url.hostname);
}
function safeUrl(input) {
    try {
        return new URL(input);
    } catch  {
        return null;
    }
}
function extractUrlPath(url) {
    // Extracts the path from a URL, without relying on the URL constructor
    // (because it normalizes the URL)
    const endOfProtocol = url.startsWith('https://') ? 8 : url.startsWith('http://') ? 7 : -1;
    if (endOfProtocol === -1) throw new TypeError('URL must use the "https:" or "http:" protocol');
    const hashIdx = url.indexOf('#', endOfProtocol);
    const questionIdx = url.indexOf('?', endOfProtocol);
    const queryStrIdx = questionIdx !== -1 && (hashIdx === -1 || questionIdx < hashIdx) ? questionIdx : -1;
    const pathEnd = hashIdx === -1 ? queryStrIdx === -1 ? url.length : queryStrIdx : queryStrIdx === -1 ? hashIdx : Math.min(hashIdx, queryStrIdx);
    const slashIdx = url.indexOf('/', endOfProtocol);
    const pathStart = slashIdx === -1 || slashIdx > pathEnd ? pathEnd : slashIdx;
    if (endOfProtocol === pathStart) throw new TypeError('URL must contain a host');
    return url.substring(pathStart, pathEnd);
}

},{}],"jbDDn":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.atprotoLoopbackClientMetadata = atprotoLoopbackClientMetadata;
const oauth_client_id_loopback_js_1 = require("8d3405a87ebc7ae6");
function atprotoLoopbackClientMetadata(clientId) {
    const { scope = 'atproto', redirect_uris = [
        `http://127.0.0.1/`,
        `http://[::1]/`
    ] } = (0, oauth_client_id_loopback_js_1.parseOAuthLoopbackClientId)(clientId);
    return {
        client_id: clientId,
        scope,
        redirect_uris,
        response_types: [
            'code'
        ],
        grant_types: [
            'authorization_code',
            'refresh_token'
        ],
        token_endpoint_auth_method: 'none',
        application_type: 'native',
        dpop_bound_access_tokens: true
    };
}

},{"8d3405a87ebc7ae6":"KSev3"}],"KSev3":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthClientIdLoopbackSchema = void 0;
exports.isOAuthClientIdLoopback = isOAuthClientIdLoopback;
exports.assertOAuthLoopbackClientId = assertOAuthLoopbackClientId;
exports.parseOAuthLoopbackClientId = parseOAuthLoopbackClientId;
const zod_1 = require("9ea1b11f08d93601");
const oauth_client_id_js_1 = require("720e5b061c78fd9d");
const oauth_redirect_uri_js_1 = require("d5131595e6e6b9af");
const oauth_scope_js_1 = require("3b8c177bfba996fa");
const PREFIX = 'http://localhost';
exports.oauthClientIdLoopbackSchema = oauth_client_id_js_1.oauthClientIdSchema.superRefine((value, ctx)=>{
    try {
        assertOAuthLoopbackClientId(value);
        return true;
    } catch (error) {
        ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: error instanceof TypeError ? error.message : 'Invalid loopback client ID'
        });
        return false;
    }
});
function isOAuthClientIdLoopback(clientId) {
    try {
        parseOAuthLoopbackClientId(clientId);
        return true;
    } catch  {
        return false;
    }
}
function assertOAuthLoopbackClientId(clientId) {
    parseOAuthLoopbackClientId(clientId);
}
// @TODO should we turn this into a zod schema? (more coherent error with other
// validation functions)
function parseOAuthLoopbackClientId(clientId) {
    if (!clientId.startsWith(PREFIX)) throw new TypeError(`Loopback ClientID must start with "${PREFIX}"`);
    else if (clientId.includes('#', PREFIX.length)) throw new TypeError('Loopback ClientID must not contain a hash component');
    const queryStringIdx = clientId.length > PREFIX.length && clientId[PREFIX.length] === '/' ? PREFIX.length + 1 : PREFIX.length;
    if (clientId.length === queryStringIdx) return {}; // no query string to parse
    if (clientId[queryStringIdx] !== '?') throw new TypeError('Loopback ClientID must not contain a path component');
    const searchParams = new URLSearchParams(clientId.slice(queryStringIdx + 1));
    for (const name of searchParams.keys()){
        if (name !== 'redirect_uri' && name !== 'scope') throw new TypeError(`Invalid query parameter "${name}" in client ID`);
    }
    const scope = searchParams.get('scope') ?? undefined;
    if (scope != null) {
        if (searchParams.getAll('scope').length > 1) throw new TypeError('Loopback ClientID must contain at most one scope query parameter');
        else if (!oauth_scope_js_1.oauthScopeSchema.safeParse(scope).success) throw new TypeError('Invalid scope query parameter in client ID');
    }
    const redirect_uris = searchParams.has('redirect_uri') ? searchParams.getAll('redirect_uri').map((value)=>oauth_redirect_uri_js_1.oauthLoopbackRedirectURISchema.parse(value)) : undefined;
    return {
        scope,
        redirect_uris
    };
}

},{"9ea1b11f08d93601":"gcE23","720e5b061c78fd9d":"fa96X","d5131595e6e6b9af":"e04CU","3b8c177bfba996fa":"kAR9g"}],"fa96X":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthClientIdSchema = void 0;
const zod_1 = require("5d91bdbba81d60d1");
exports.oauthClientIdSchema = zod_1.z.string().min(1);

},{"5d91bdbba81d60d1":"gcE23"}],"e04CU":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthRedirectUriSchema = exports.oauthPrivateUseRedirectURISchema = exports.oauthHttpsRedirectURISchema = exports.oauthLoopbackRedirectURISchema = void 0;
const zod_1 = require("377b5f215654a90e");
const uri_js_1 = require("5f6e12e44dc415b6");
exports.oauthLoopbackRedirectURISchema = uri_js_1.loopbackUriSchema.superRefine((value, ctx)=>{
    if (value.startsWith('http://localhost')) {
        // https://datatracker.ietf.org/doc/html/rfc8252#section-8.3
        //
        // > While redirect URIs using localhost (i.e.,
        // > "http://localhost:{port}/{path}") function similarly to loopback IP
        // > redirects described in Section 7.3, the use of localhost is NOT
        // > RECOMMENDED.  Specifying a redirect URI with the loopback IP literal
        // > rather than localhost avoids inadvertently listening on network
        // > interfaces other than the loopback interface.  It is also less
        // > susceptible to client-side firewalls and misconfigured host name
        // > resolution on the user's device.
        ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: 'Use of "localhost" hostname is not allowed (RFC 8252), use a loopback IP such as "127.0.0.1" instead'
        });
        return false;
    }
    return true;
});
exports.oauthHttpsRedirectURISchema = uri_js_1.httpsUriSchema;
exports.oauthPrivateUseRedirectURISchema = uri_js_1.privateUseUriSchema;
exports.oauthRedirectUriSchema = zod_1.z.union([
    exports.oauthLoopbackRedirectURISchema,
    exports.oauthHttpsRedirectURISchema,
    exports.oauthPrivateUseRedirectURISchema
], {
    message: `URL must use the "https:" or "http:" protocol, or a private-use URI scheme (RFC 8252)`
});

},{"377b5f215654a90e":"gcE23","5f6e12e44dc415b6":"95jaG"}],"kAR9g":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthScopeSchema = void 0;
const zod_1 = require("70db8958f5148b3d");
/**
 * A space separated list of most non-control ASCII characters except backslash
 * and double quote.
 *
 * @see {@link https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-11#section-1.4.1}
 */ exports.oauthScopeSchema = zod_1.z.string()// scope       = scope-token *( SP scope-token )
// scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
.regex(/^[\x21\x23-\x5B\x5D-\x7E]+(?: [\x21\x23-\x5B\x5D-\x7E]+)*$/);

},{"70db8958f5148b3d":"gcE23"}],"dWBEb":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthAccessTokenSchema = void 0;
const zod_1 = require("6eb9c2b79d1bd8ac");
exports.oauthAccessTokenSchema = zod_1.z.string().min(1);

},{"6eb9c2b79d1bd8ac":"gcE23"}],"lyF2T":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthAuthenticationErrorResponseSchema = void 0;
const zod_1 = require("167c71082109de51");
/**
 * @see {@link https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#name-error-response-2}
 */ exports.oauthAuthenticationErrorResponseSchema = zod_1.z.enum([
    // The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.
    'invalid_request',
    // The client is not authorized to request an authorization code using this method.
    'unauthorized_client',
    // The resource owner or authorization server denied the request.
    'access_denied',
    // The authorization server does not support obtaining an authorization code using this method.
    'unsupported_response_type',
    // The requested scope is invalid, unknown, or malformed.
    'invalid_scope',
    // The authorization server encountered an unexpected condition that prevented it from fulfilling the request. (This error code is needed because a 500 Internal Server Error HTTP status code cannot be returned to the client via an HTTP redirect.)
    'server_error',
    // The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server. (This error code is needed because a 503 Service Unavailable HTTP status code cannot be returned to the client via an HTTP redirect.)
    'temporarily_unavailable'
]);

},{"167c71082109de51":"gcE23"}],"7Ja5P":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthAuthorizationCodeGrantTokenRequestSchema = void 0;
const zod_1 = require("fcb5bb1cebbbdd0");
const oauth_redirect_uri_js_1 = require("570679c8ca7c0f80");
exports.oauthAuthorizationCodeGrantTokenRequestSchema = zod_1.z.object({
    grant_type: zod_1.z.literal('authorization_code'),
    code: zod_1.z.string().min(1),
    redirect_uri: oauth_redirect_uri_js_1.oauthRedirectUriSchema,
    /** @see {@link https://datatracker.ietf.org/doc/html/rfc7636#section-4.1} */ code_verifier: zod_1.z.string().min(43).max(128).regex(/^[a-zA-Z0-9-._~]+$/).optional()
});

},{"fcb5bb1cebbbdd0":"gcE23","570679c8ca7c0f80":"e04CU"}],"2jdxH":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthAuthorizationDetailsSchema = exports.oauthAuthorizationDetailSchema = void 0;
const zod_1 = require("af7e3b97e46de8b");
const uri_js_1 = require("e9ca8b1a2ae84f53");
/**
 * @see {@link https://datatracker.ietf.org/doc/html/rfc9396#section-2 | RFC 9396, Section 2}
 */ exports.oauthAuthorizationDetailSchema = zod_1.z.object({
    type: zod_1.z.string(),
    /**
     * An array of strings representing the location of the resource or RS. These
     * strings are typically URIs identifying the location of the RS.
     */ locations: zod_1.z.array(uri_js_1.dangerousUriSchema).optional(),
    /**
     * An array of strings representing the kinds of actions to be taken at the
     * resource.
     */ actions: zod_1.z.array(zod_1.z.string()).optional(),
    /**
     * An array of strings representing the kinds of data being requested from the
     * resource.
     */ datatypes: zod_1.z.array(zod_1.z.string()).optional(),
    /**
     * A string identifier indicating a specific resource available at the API.
     */ identifier: zod_1.z.string().optional(),
    /**
     * An array of strings representing the types or levels of privilege being
     * requested at the resource.
     */ privileges: zod_1.z.array(zod_1.z.string()).optional()
});
/**
 * @see {@link https://datatracker.ietf.org/doc/html/rfc9396#section-2 | RFC 9396, Section 2}
 */ exports.oauthAuthorizationDetailsSchema = zod_1.z.array(exports.oauthAuthorizationDetailSchema);

},{"af7e3b97e46de8b":"gcE23","e9ca8b1a2ae84f53":"95jaG"}],"hwJoZ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthAuthorizationRequestJarSchema = void 0;
const zod_1 = require("5befaa8ed04cc1fd");
const jwk_1 = require("68372cd10c9e4f85");
exports.oauthAuthorizationRequestJarSchema = zod_1.z.object({
    /**
     * AuthorizationRequest inside a JWT:
     * - "iat" is required and **MUST** be less than one minute
     *
     * @see {@link https://datatracker.ietf.org/doc/html/rfc9101}
     */ request: zod_1.z.union([
        jwk_1.signedJwtSchema,
        jwk_1.unsignedJwtSchema
    ])
});

},{"5befaa8ed04cc1fd":"gcE23","68372cd10c9e4f85":"hmTh2"}],"5afgI":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthAuthorizationRequestParSchema = void 0;
const zod_1 = require("7882a5f8b5b3e363");
const oauth_authorization_request_jar_js_1 = require("eb177c63a0e2b2a0");
const oauth_authorization_request_parameters_js_1 = require("b68e97306789e968");
exports.oauthAuthorizationRequestParSchema = zod_1.z.union([
    oauth_authorization_request_parameters_js_1.oauthAuthorizationRequestParametersSchema,
    oauth_authorization_request_jar_js_1.oauthAuthorizationRequestJarSchema
]);

},{"7882a5f8b5b3e363":"gcE23","eb177c63a0e2b2a0":"hwJoZ","b68e97306789e968":"hLA5v"}],"hLA5v":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthAuthorizationRequestParametersSchema = void 0;
const zod_1 = require("a7237a43306357e5");
const jwk_1 = require("8d4c459051f1a3fe");
const oauth_authorization_details_js_1 = require("494c533c151e3ac7");
const oauth_client_id_js_1 = require("a7c9973c0a9e7c86");
const oauth_code_challenge_method_js_1 = require("cfb09b662c269b85");
const oauth_redirect_uri_js_1 = require("16f1c08c57e13bd0");
const oauth_response_mode_js_1 = require("428e2efa78983e75");
const oauth_response_type_js_1 = require("51a36c5f75d81a0a");
const oauth_scope_js_1 = require("55842dab3dad10e");
const oidc_claims_parameter_js_1 = require("e097dca396f4c71d");
const oidc_claims_properties_js_1 = require("cb2dd7bf6803fbc8");
const oidc_entity_type_js_1 = require("ff7635618eac73f5");
/**
 * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest | OIDC}
 */ exports.oauthAuthorizationRequestParametersSchema = zod_1.z.object({
    client_id: oauth_client_id_js_1.oauthClientIdSchema,
    state: zod_1.z.string().optional(),
    redirect_uri: oauth_redirect_uri_js_1.oauthRedirectUriSchema.optional(),
    scope: oauth_scope_js_1.oauthScopeSchema.optional(),
    response_type: oauth_response_type_js_1.oauthResponseTypeSchema,
    // PKCE
    code_challenge: zod_1.z.string().optional(),
    code_challenge_method: oauth_code_challenge_method_js_1.oauthCodeChallengeMethodSchema.default('S256').optional(),
    // DPOP
    // https://datatracker.ietf.org/doc/html/rfc9449#section-12.3
    dpop_jkt: zod_1.z.string().optional(),
    // OIDC
    // Default depend on response_type
    response_mode: oauth_response_mode_js_1.oauthResponseModeSchema.optional(),
    nonce: zod_1.z.string().optional(),
    // Specifies the allowable elapsed time in seconds since the last time the
    // End-User was actively authenticated by the OP. If the elapsed time is
    // greater than this value, the OP MUST attempt to actively re-authenticate
    // the End-User. (The max_age request parameter corresponds to the OpenID 2.0
    // PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used,
    // the ID Token returned MUST include an auth_time Claim Value. Note that
    // max_age=0 is equivalent to prompt=login.
    max_age: zod_1.z.number().int().min(0).optional(),
    claims: zod_1.z.record(oidc_entity_type_js_1.oidcEntityTypeSchema, zod_1.z.record(oidc_claims_parameter_js_1.oidcClaimsParameterSchema, zod_1.z.union([
        zod_1.z.literal(null),
        oidc_claims_properties_js_1.oidcClaimsPropertiesSchema
    ]))).optional(),
    // https://openid.net/specs/openid-connect-core-1_0.html#RegistrationParameter
    // Not supported by this library (yet?)
    // registration: clientMetadataSchema.optional(),
    login_hint: zod_1.z.string().min(1).optional(),
    ui_locales: zod_1.z.string().regex(/^[a-z]{2,3}(-[A-Z]{2})?( [a-z]{2,3}(-[A-Z]{2})?)*$/) // fr-CA fr en
    .optional(),
    // Previous ID Token, should be provided when prompt=none is used
    id_token_hint: jwk_1.signedJwtSchema.optional(),
    // Type of UI the AS is displayed on
    display: zod_1.z.enum([
        'page',
        'popup',
        'touch',
        'wap'
    ]).optional(),
    /**
     * - "none" will only be allowed if the user already allowed the client on the same device
     * - "login" will force the user to login again, unless he very recently logged in
     * - "consent" will force the user to consent again
     * - "select_account" will force the user to select an account
     */ prompt: zod_1.z.enum([
        'none',
        'login',
        'consent',
        'select_account'
    ]).optional(),
    // https://datatracker.ietf.org/doc/html/rfc9396
    authorization_details: oauth_authorization_details_js_1.oauthAuthorizationDetailsSchema.optional()
});

},{"a7237a43306357e5":"gcE23","8d4c459051f1a3fe":"hmTh2","494c533c151e3ac7":"2jdxH","a7c9973c0a9e7c86":"fa96X","cfb09b662c269b85":"8jHcs","16f1c08c57e13bd0":"e04CU","428e2efa78983e75":"91mv1","51a36c5f75d81a0a":"25zca","55842dab3dad10e":"kAR9g","e097dca396f4c71d":"9ZZbn","cb2dd7bf6803fbc8":"d6uUi","ff7635618eac73f5":"b1sFy"}],"8jHcs":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthCodeChallengeMethodSchema = void 0;
const zod_1 = require("9b9b6c0bde104f8e");
exports.oauthCodeChallengeMethodSchema = zod_1.z.enum([
    'S256',
    'plain'
]);

},{"9b9b6c0bde104f8e":"gcE23"}],"91mv1":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthResponseModeSchema = void 0;
const zod_1 = require("f9d8429766e12ccc");
exports.oauthResponseModeSchema = zod_1.z.enum([
    'query',
    'fragment',
    'form_post'
]);

},{"f9d8429766e12ccc":"gcE23"}],"25zca":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthResponseTypeSchema = void 0;
const zod_1 = require("f0914eb1b95087b9");
exports.oauthResponseTypeSchema = zod_1.z.enum([
    // OAuth2 (https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-10#section-4.1.1)
    'code',
    'token',
    // OIDC (https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html)
    'none',
    'code id_token token',
    'code id_token',
    'code token',
    'id_token token',
    'id_token'
]);

},{"f0914eb1b95087b9":"gcE23"}],"9ZZbn":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oidcClaimsParameterSchema = void 0;
const zod_1 = require("cdf5bdcd5efa9a9e");
exports.oidcClaimsParameterSchema = zod_1.z.enum([
    // https://openid.net/specs/openid-provider-authentication-policy-extension-1_0.html#rfc.section.5.2
    // if client metadata "require_auth_time" is true, this *must* be provided
    'auth_time',
    // OIDC
    'nonce',
    'acr',
    // OpenID: "profile" scope
    'name',
    'family_name',
    'given_name',
    'middle_name',
    'nickname',
    'preferred_username',
    'gender',
    'picture',
    'profile',
    'website',
    'birthdate',
    'zoneinfo',
    'locale',
    'updated_at',
    // OpenID: "email" scope
    'email',
    'email_verified',
    // OpenID: "phone" scope
    'phone_number',
    'phone_number_verified',
    // OpenID: "address" scope
    'address'
]);

},{"cdf5bdcd5efa9a9e":"gcE23"}],"d6uUi":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oidcClaimsPropertiesSchema = void 0;
const zod_1 = require("f1271505ab3d0acd");
const oidcClaimsValueSchema = zod_1.z.union([
    zod_1.z.string(),
    zod_1.z.number(),
    zod_1.z.boolean()
]);
exports.oidcClaimsPropertiesSchema = zod_1.z.object({
    essential: zod_1.z.boolean().optional(),
    value: oidcClaimsValueSchema.optional(),
    values: zod_1.z.array(oidcClaimsValueSchema).optional()
});

},{"f1271505ab3d0acd":"gcE23"}],"b1sFy":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oidcEntityTypeSchema = void 0;
const zod_1 = require("7bbdd71903c43134");
exports.oidcEntityTypeSchema = zod_1.z.enum([
    'userinfo',
    'id_token'
]);

},{"7bbdd71903c43134":"gcE23"}],"53oTD":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthAuthorizationRequestQuerySchema = void 0;
const zod_1 = require("4037f319a96a7c3a");
const oauth_authorization_request_jar_js_1 = require("9f1f650dae1b95c3");
const oauth_authorization_request_parameters_js_1 = require("d1e10fffa04babb0");
const oauth_authorization_request_uri_js_1 = require("3aa370ea5bd2a14");
exports.oauthAuthorizationRequestQuerySchema = zod_1.z.union([
    oauth_authorization_request_parameters_js_1.oauthAuthorizationRequestParametersSchema,
    oauth_authorization_request_jar_js_1.oauthAuthorizationRequestJarSchema,
    oauth_authorization_request_uri_js_1.oauthAuthorizationRequestUriSchema
]);

},{"4037f319a96a7c3a":"gcE23","9f1f650dae1b95c3":"hwJoZ","d1e10fffa04babb0":"hLA5v","3aa370ea5bd2a14":"bBGyU"}],"bBGyU":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthAuthorizationRequestUriSchema = void 0;
const zod_1 = require("d51f42ea173b16c9");
const oauth_request_uri_js_1 = require("7c5108946ba1aa9c");
exports.oauthAuthorizationRequestUriSchema = zod_1.z.object({
    request_uri: oauth_request_uri_js_1.oauthRequestUriSchema
});

},{"d51f42ea173b16c9":"gcE23","7c5108946ba1aa9c":"a4LSg"}],"a4LSg":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthRequestUriSchema = void 0;
const zod_1 = require("df1ea9c32f8acefe");
exports.oauthRequestUriSchema = zod_1.z.string();

},{"df1ea9c32f8acefe":"gcE23"}],"9hv7l":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthAuthorizationServerMetadataValidator = exports.oauthAuthorizationServerMetadataSchema = void 0;
const zod_1 = require("b582ec74963f975");
const oauth_code_challenge_method_js_1 = require("586f889a3f07d0e8");
const oauth_issuer_identifier_js_1 = require("7cdedf37c96a5ae1");
const uri_js_1 = require("1d7a670dd3f0f5d2");
/**
 * @see {@link https://datatracker.ietf.org/doc/html/rfc8414}
 * @note we do not enforce https: scheme in URIs to support development
 * environments. Make sure to validate the URIs before using it in a production
 * environment.
 */ exports.oauthAuthorizationServerMetadataSchema = zod_1.z.object({
    issuer: oauth_issuer_identifier_js_1.oauthIssuerIdentifierSchema,
    claims_supported: zod_1.z.array(zod_1.z.string()).optional(),
    claims_locales_supported: zod_1.z.array(zod_1.z.string()).optional(),
    claims_parameter_supported: zod_1.z.boolean().optional(),
    request_parameter_supported: zod_1.z.boolean().optional(),
    request_uri_parameter_supported: zod_1.z.boolean().optional(),
    require_request_uri_registration: zod_1.z.boolean().optional(),
    scopes_supported: zod_1.z.array(zod_1.z.string()).optional(),
    subject_types_supported: zod_1.z.array(zod_1.z.string()).optional(),
    response_types_supported: zod_1.z.array(zod_1.z.string()).optional(),
    response_modes_supported: zod_1.z.array(zod_1.z.string()).optional(),
    grant_types_supported: zod_1.z.array(zod_1.z.string()).optional(),
    code_challenge_methods_supported: zod_1.z.array(oauth_code_challenge_method_js_1.oauthCodeChallengeMethodSchema).min(1).optional(),
    ui_locales_supported: zod_1.z.array(zod_1.z.string()).optional(),
    id_token_signing_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
    display_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
    request_object_signing_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
    authorization_response_iss_parameter_supported: zod_1.z.boolean().optional(),
    authorization_details_types_supported: zod_1.z.array(zod_1.z.string()).optional(),
    request_object_encryption_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
    request_object_encryption_enc_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
    jwks_uri: uri_js_1.webUriSchema.optional(),
    authorization_endpoint: uri_js_1.webUriSchema,
    token_endpoint: uri_js_1.webUriSchema,
    token_endpoint_auth_methods_supported: zod_1.z.array(zod_1.z.string()).optional(),
    token_endpoint_auth_signing_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
    revocation_endpoint: uri_js_1.webUriSchema.optional(),
    introspection_endpoint: uri_js_1.webUriSchema.optional(),
    pushed_authorization_request_endpoint: uri_js_1.webUriSchema.optional(),
    require_pushed_authorization_requests: zod_1.z.boolean().optional(),
    userinfo_endpoint: uri_js_1.webUriSchema.optional(),
    end_session_endpoint: uri_js_1.webUriSchema.optional(),
    registration_endpoint: uri_js_1.webUriSchema.optional(),
    // https://datatracker.ietf.org/doc/html/rfc9449#section-5.1
    dpop_signing_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
    // https://datatracker.ietf.org/doc/html/draft-ietf-oauth-resource-metadata-05#section-4
    protected_resources: zod_1.z.array(uri_js_1.webUriSchema).optional(),
    // https://drafts.aaronpk.com/draft-parecki-oauth-client-id-metadata-document/draft-parecki-oauth-client-id-metadata-document.html
    client_id_metadata_document_supported: zod_1.z.boolean().optional()
});
exports.oauthAuthorizationServerMetadataValidator = exports.oauthAuthorizationServerMetadataSchema.superRefine((data, ctx)=>{
    if (data.require_pushed_authorization_requests && !data.pushed_authorization_request_endpoint) ctx.addIssue({
        code: zod_1.z.ZodIssueCode.custom,
        message: '"pushed_authorization_request_endpoint" required when "require_pushed_authorization_requests" is true'
    });
}).superRefine((data, ctx)=>{
    if (data.response_types_supported) {
        if (!data.response_types_supported.includes('code')) ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'Response type "code" is required'
        });
    }
});

},{"b582ec74963f975":"gcE23","586f889a3f07d0e8":"8jHcs","7cdedf37c96a5ae1":"gyyzx","1d7a670dd3f0f5d2":"95jaG"}],"gyyzx":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthIssuerIdentifierSchema = void 0;
const zod_1 = require("aada1785de9f8a21");
const uri_js_1 = require("20f82a4f85d535f6");
exports.oauthIssuerIdentifierSchema = uri_js_1.webUriSchema.superRefine((value, ctx)=>{
    // Validate the issuer (MIX-UP attacks)
    if (value.endsWith('/')) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'Issuer URL must not end with a slash'
        });
        return false;
    }
    const url = new URL(value);
    if (url.username || url.password) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'Issuer URL must not contain a username or password'
        });
        return false;
    }
    if (url.hash || url.search) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'Issuer URL must not contain a query or fragment'
        });
        return false;
    }
    const canonicalValue = url.pathname === '/' ? url.origin : url.href;
    if (value !== canonicalValue) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'Issuer URL must be in the canonical form'
        });
        return false;
    }
    return true;
});

},{"aada1785de9f8a21":"gcE23","20f82a4f85d535f6":"95jaG"}],"fVSaL":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthClientCredentialsGrantTokenRequestSchema = void 0;
const zod_1 = require("bc4190f52c2321d7");
exports.oauthClientCredentialsGrantTokenRequestSchema = zod_1.z.object({
    grant_type: zod_1.z.literal('client_credentials')
});

},{"bc4190f52c2321d7":"gcE23"}],"iu7pZ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthClientCredentialsSchema = exports.oauthClientCredentialsNoneSchema = exports.oauthClientCredentialsSecretPostSchema = exports.oauthClientCredentialsJwtBearerSchema = void 0;
const zod_1 = require("f2b862a0e8683443");
const jwk_1 = require("feb08ca34611fafe");
const constants_js_1 = require("9f828492b315e904");
const oauth_client_id_js_1 = require("196ed96b0d184eec");
exports.oauthClientCredentialsJwtBearerSchema = zod_1.z.object({
    client_id: oauth_client_id_js_1.oauthClientIdSchema,
    client_assertion_type: zod_1.z.literal(constants_js_1.CLIENT_ASSERTION_TYPE_JWT_BEARER),
    /**
     * - "sub" the subject MUST be the "client_id" of the OAuth client
     * - "iat" is required and MUST be less than one minute
     * - "aud" must containing a value that identifies the authorization server
     * - The JWT MAY contain a "jti" (JWT ID) claim that provides a unique identifier for the token.
     * - Note that the authorization server may reject JWTs with an "exp" claim value that is unreasonably far in the future.
     *
     * @see {@link https://datatracker.ietf.org/doc/html/rfc7523#section-3}
     */ client_assertion: jwk_1.signedJwtSchema
});
exports.oauthClientCredentialsSecretPostSchema = zod_1.z.object({
    client_id: oauth_client_id_js_1.oauthClientIdSchema,
    client_secret: zod_1.z.string()
});
exports.oauthClientCredentialsNoneSchema = zod_1.z.object({
    client_id: oauth_client_id_js_1.oauthClientIdSchema
});
//
exports.oauthClientCredentialsSchema = zod_1.z.union([
    exports.oauthClientCredentialsJwtBearerSchema,
    exports.oauthClientCredentialsSecretPostSchema,
    // Must be last since it is less specific
    exports.oauthClientCredentialsNoneSchema
]);

},{"f2b862a0e8683443":"gcE23","feb08ca34611fafe":"hmTh2","9f828492b315e904":"8haeb","196ed96b0d184eec":"fa96X"}],"6rJ6n":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.conventionalOAuthClientIdSchema = exports.oauthClientIdDiscoverableSchema = void 0;
exports.isOAuthClientIdDiscoverable = isOAuthClientIdDiscoverable;
exports.isConventionalOAuthClientId = isConventionalOAuthClientId;
exports.assertOAuthDiscoverableClientId = assertOAuthDiscoverableClientId;
exports.parseOAuthDiscoverableClientId = parseOAuthDiscoverableClientId;
const zod_1 = require("fe744a70304e546e");
const oauth_client_id_js_1 = require("82a1d4ee0d7063f3");
const uri_js_1 = require("9876ab7c97852810");
const util_js_1 = require("1b8b361faf3df7c4");
/**
 * @see {@link https://drafts.aaronpk.com/draft-parecki-oauth-client-id-metadata-document/draft-parecki-oauth-client-id-metadata-document.html}
 */ exports.oauthClientIdDiscoverableSchema = zod_1.z.intersection(oauth_client_id_js_1.oauthClientIdSchema, uri_js_1.httpsUriSchema).superRefine((value, ctx)=>{
    const url = new URL(value);
    if (url.username || url.password) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'ClientID must not contain credentials'
        });
        return false;
    }
    if (url.hash) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'ClientID must not contain a fragment'
        });
        return false;
    }
    if (url.pathname === '/') {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'ClientID must contain a path component (e.g. "/client-metadata.json")'
        });
        return false;
    }
    if (url.pathname.endsWith('/')) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'ClientID path must not end with a trailing slash'
        });
        return false;
    }
    if ((0, util_js_1.isHostnameIP)(url.hostname)) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'ClientID hostname must not be an IP address'
        });
        return false;
    }
    // URL constructor normalizes the URL, so we extract the path manually to
    // avoid normalization, then compare it to the normalized path to ensure
    // that the URL does not contain path traversal or other unexpected characters
    if ((0, util_js_1.extractUrlPath)(value) !== url.pathname) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: `ClientID must be in canonical form ("${url.href}", got "${value}")`
        });
        return false;
    }
    return true;
});
function isOAuthClientIdDiscoverable(clientId) {
    return exports.oauthClientIdDiscoverableSchema.safeParse(clientId).success;
}
exports.conventionalOAuthClientIdSchema = exports.oauthClientIdDiscoverableSchema.superRefine((value, ctx)=>{
    const url = new URL(value);
    if (url.port) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'ClientID must not contain a port'
        });
        return false;
    }
    if (url.search) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'ClientID must not contain a query string'
        });
        return false;
    }
    if (url.pathname !== '/oauth-client-metadata.json') {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'ClientID must be "/oauth-client-metadata.json"'
        });
        return false;
    }
    return true;
});
function isConventionalOAuthClientId(clientId) {
    return exports.conventionalOAuthClientIdSchema.safeParse(clientId).success;
}
function assertOAuthDiscoverableClientId(value) {
    exports.oauthClientIdDiscoverableSchema.parse(value);
}
function parseOAuthDiscoverableClientId(clientId) {
    return new URL(exports.oauthClientIdDiscoverableSchema.parse(clientId));
}

},{"fe744a70304e546e":"gcE23","82a1d4ee0d7063f3":"fa96X","9876ab7c97852810":"95jaG","1b8b361faf3df7c4":"3GUDa"}],"fA26o":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthClientMetadataSchema = void 0;
const zod_1 = require("38286b2d396e4d20");
const jwk_1 = require("ff7c10d64fd85d61");
const oauth_client_id_js_1 = require("44e5efc54a43a808");
const oauth_endpoint_auth_method_js_1 = require("f8f5787d49aa244c");
const oauth_grant_type_js_1 = require("5cffebb929299b96");
const oauth_redirect_uri_js_1 = require("8cef5b966ed2757e");
const oauth_response_type_js_1 = require("452c9d60503b12e2");
const oauth_scope_js_1 = require("466db8c547c751f9");
const uri_js_1 = require("8af3df4426f63425");
/**
 * @see {@link https://openid.net/specs/openid-connect-registration-1_0.html}
 * @see {@link https://datatracker.ietf.org/doc/html/rfc7591}
 * @note we do not enforce https: scheme in URIs to support development
 * environments. Make sure to validate the URIs before using it in a production
 * environment.
 */ exports.oauthClientMetadataSchema = zod_1.z.object({
    /**
     * @note redirect_uris require additional validation
     */ redirect_uris: zod_1.z.array(oauth_redirect_uri_js_1.oauthRedirectUriSchema).nonempty(),
    response_types: zod_1.z.array(oauth_response_type_js_1.oauthResponseTypeSchema).nonempty()// > If omitted, the default is that the client will use only the "code"
    // > response type.
    .default([
        'code'
    ]),
    grant_types: zod_1.z.array(oauth_grant_type_js_1.oauthGrantTypeSchema).nonempty()// > If omitted, the default behavior is that the client will use only the
    // > "authorization_code" Grant Type.
    .default([
        'authorization_code'
    ]),
    scope: oauth_scope_js_1.oauthScopeSchema.optional(),
    token_endpoint_auth_method: oauth_endpoint_auth_method_js_1.oauthEndpointAuthMethod.default('none').optional(),
    token_endpoint_auth_signing_alg: zod_1.z.string().optional(),
    userinfo_signed_response_alg: zod_1.z.string().optional(),
    userinfo_encrypted_response_alg: zod_1.z.string().optional(),
    jwks_uri: uri_js_1.webUriSchema.optional(),
    jwks: jwk_1.jwksPubSchema.optional(),
    application_type: zod_1.z.enum([
        'web',
        'native'
    ]).default('web').optional(),
    subject_type: zod_1.z.enum([
        'public',
        'pairwise'
    ]).default('public').optional(),
    request_object_signing_alg: zod_1.z.string().optional(),
    id_token_signed_response_alg: zod_1.z.string().optional(),
    authorization_signed_response_alg: zod_1.z.string().default('RS256').optional(),
    authorization_encrypted_response_enc: zod_1.z.enum([
        'A128CBC-HS256'
    ]).optional(),
    authorization_encrypted_response_alg: zod_1.z.string().optional(),
    client_id: oauth_client_id_js_1.oauthClientIdSchema.optional(),
    client_name: zod_1.z.string().optional(),
    client_uri: uri_js_1.webUriSchema.optional(),
    policy_uri: uri_js_1.webUriSchema.optional(),
    tos_uri: uri_js_1.webUriSchema.optional(),
    logo_uri: uri_js_1.webUriSchema.optional(),
    /**
     * Default Maximum Authentication Age. Specifies that the End-User MUST be
     * actively authenticated if the End-User was authenticated longer ago than
     * the specified number of seconds. The max_age request parameter overrides
     * this default value. If omitted, no default Maximum Authentication Age is
     * specified.
     */ default_max_age: zod_1.z.number().optional(),
    require_auth_time: zod_1.z.boolean().optional(),
    contacts: zod_1.z.array(zod_1.z.string().email()).optional(),
    tls_client_certificate_bound_access_tokens: zod_1.z.boolean().optional(),
    // https://datatracker.ietf.org/doc/html/rfc9449#section-5.2
    dpop_bound_access_tokens: zod_1.z.boolean().optional(),
    // https://datatracker.ietf.org/doc/html/rfc9396#section-14.5
    authorization_details_types: zod_1.z.array(zod_1.z.string()).optional()
});

},{"38286b2d396e4d20":"gcE23","ff7c10d64fd85d61":"hmTh2","44e5efc54a43a808":"fa96X","f8f5787d49aa244c":"1Vqn8","5cffebb929299b96":"lIWkY","8cef5b966ed2757e":"e04CU","452c9d60503b12e2":"25zca","466db8c547c751f9":"kAR9g","8af3df4426f63425":"95jaG"}],"1Vqn8":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthEndpointAuthMethod = void 0;
const zod_1 = require("70a572bab9e68662");
exports.oauthEndpointAuthMethod = zod_1.z.enum([
    'client_secret_basic',
    'client_secret_jwt',
    'client_secret_post',
    'none',
    'private_key_jwt',
    'self_signed_tls_client_auth',
    'tls_client_auth'
]);

},{"70a572bab9e68662":"gcE23"}],"lIWkY":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthGrantTypeSchema = void 0;
const zod_1 = require("36e8fc8a132d99b6");
exports.oauthGrantTypeSchema = zod_1.z.enum([
    'authorization_code',
    'implicit',
    'refresh_token',
    'password',
    'client_credentials',
    'urn:ietf:params:oauth:grant-type:jwt-bearer',
    'urn:ietf:params:oauth:grant-type:saml2-bearer'
]);

},{"36e8fc8a132d99b6":"gcE23"}],"4UiV9":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OAUTH_ENDPOINT_NAMES = void 0;
exports.OAUTH_ENDPOINT_NAMES = [
    'token',
    'revocation',
    'introspection',
    'pushed_authorization_request'
];

},{}],"e3hny":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"c7tB1":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthParResponseSchema = void 0;
const zod_1 = require("319c888e73bd8b03");
exports.oauthParResponseSchema = zod_1.z.object({
    request_uri: zod_1.z.string(),
    expires_in: zod_1.z.number().int().positive()
});

},{"319c888e73bd8b03":"gcE23"}],"7UTWt":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthPasswordGrantTokenRequestSchema = void 0;
const zod_1 = require("ee7a4d21d0b9002d");
exports.oauthPasswordGrantTokenRequestSchema = zod_1.z.object({
    grant_type: zod_1.z.literal('password'),
    username: zod_1.z.string(),
    password: zod_1.z.string()
});

},{"ee7a4d21d0b9002d":"gcE23"}],"eujTk":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthProtectedResourceMetadataSchema = void 0;
const zod_1 = require("48407073416dd0eb");
const oauth_issuer_identifier_js_1 = require("611dc506d2170b4d");
const uri_js_1 = require("b70d87279cacb741");
/**
 * @see {@link https://datatracker.ietf.org/doc/html/draft-ietf-oauth-resource-metadata-05#name-protected-resource-metadata-r}
 */ exports.oauthProtectedResourceMetadataSchema = zod_1.z.object({
    /**
     * REQUIRED. The protected resource's resource identifier, which is a URL that
     * uses the https scheme and has no query or fragment components. Using these
     * well-known resources is described in Section 3.
     *
     * @note This schema allows non https URLs for testing & development purposes.
     * Make sure to validate the URL before using it in a production environment.
     */ resource: uri_js_1.webUriSchema.refine((url)=>!url.includes('?'), {
        message: 'Resource URL must not contain query parameters'
    }).refine((url)=>!url.includes('#'), {
        message: 'Resource URL must not contain a fragment'
    }),
    /**
     * OPTIONAL. JSON array containing a list of OAuth authorization server issuer
     * identifiers, as defined in [RFC8414], for authorization servers that can be
     * used with this protected resource. Protected resources MAY choose not to
     * advertise some supported authorization servers even when this parameter is
     * used. In some use cases, the set of authorization servers will not be
     * enumerable, in which case this metadata parameter would not be used.
     */ authorization_servers: zod_1.z.array(oauth_issuer_identifier_js_1.oauthIssuerIdentifierSchema).optional(),
    /**
     * OPTIONAL. URL of the protected resource's JWK Set [JWK] document. This
     * contains public keys belonging to the protected resource, such as signing
     * key(s) that the resource server uses to sign resource responses. This URL
     * MUST use the https scheme. When both signing and encryption keys are made
     * available, a use (public key use) parameter value is REQUIRED for all keys
     * in the referenced JWK Set to indicate each key's intended usage.
     */ jwks_uri: uri_js_1.webUriSchema.optional(),
    /**
     * RECOMMENDED. JSON array containing a list of the OAuth 2.0 [RFC6749] scope
     * values that are used in authorization requests to request access to this
     * protected resource. Protected resources MAY choose not to advertise some
     * scope values supported even when this parameter is used.
     */ scopes_supported: zod_1.z.array(zod_1.z.string()).optional(),
    /**
     * OPTIONAL. JSON array containing a list of the supported methods of sending
     * an OAuth 2.0 Bearer Token [RFC6750] to the protected resource. Defined
     * values are ["header", "body", "query"], corresponding to Sections 2.1, 2.2,
     * and 2.3 of RFC 6750.
     */ bearer_methods_supported: zod_1.z.array(zod_1.z.enum([
        'header',
        'body',
        'query'
    ])).optional(),
    /**
     * OPTIONAL. JSON array containing a list of the JWS [JWS] signing algorithms
     * (alg values) [JWA] supported by the protected resource for signing resource
     * responses, for instance, as described in [FAPI.MessageSigning]. No default
     * algorithms are implied if this entry is omitted. The value none MUST NOT be
     * used.
     */ resource_signing_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
    /**
     * OPTIONAL. URL of a page containing human-readable information that
     * developers might want or need to know when using the protected resource
     */ resource_documentation: uri_js_1.webUriSchema.optional(),
    /**
     * OPTIONAL. URL that the protected resource provides to read about the
     * protected resource's requirements on how the client can use the data
     * provided by the protected resource
     */ resource_policy_uri: uri_js_1.webUriSchema.optional(),
    /**
     * OPTIONAL. URL that the protected resource provides to read about the
     * protected resource's terms of service
     */ resource_tos_uri: uri_js_1.webUriSchema.optional()
});

},{"48407073416dd0eb":"gcE23","611dc506d2170b4d":"gyyzx","b70d87279cacb741":"95jaG"}],"jSfFK":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthRefreshTokenGrantTokenRequestSchema = void 0;
const zod_1 = require("1a114f2a5e4ffd56");
const oauth_refresh_token_js_1 = require("116498be685589cb");
exports.oauthRefreshTokenGrantTokenRequestSchema = zod_1.z.object({
    grant_type: zod_1.z.literal('refresh_token'),
    refresh_token: oauth_refresh_token_js_1.oauthRefreshTokenSchema
});

},{"1a114f2a5e4ffd56":"gcE23","116498be685589cb":"c9PWf"}],"c9PWf":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthRefreshTokenSchema = void 0;
const zod_1 = require("78e9c38aed5a29c1");
exports.oauthRefreshTokenSchema = zod_1.z.string().min(1);

},{"78e9c38aed5a29c1":"gcE23"}],"04F7X":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthTokenIdentificationSchema = void 0;
const zod_1 = require("8fd347c7462fed96");
const oauth_access_token_js_1 = require("88620af927ce0dd1");
const oauth_refresh_token_js_1 = require("e66c4bb2c0d0f4a1");
exports.oauthTokenIdentificationSchema = zod_1.z.object({
    token: zod_1.z.union([
        oauth_access_token_js_1.oauthAccessTokenSchema,
        oauth_refresh_token_js_1.oauthRefreshTokenSchema
    ]),
    token_type_hint: zod_1.z.enum([
        'access_token',
        'refresh_token'
    ]).optional()
});

},{"8fd347c7462fed96":"gcE23","88620af927ce0dd1":"dWBEb","e66c4bb2c0d0f4a1":"c9PWf"}],"aoV80":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthTokenRequestSchema = void 0;
const zod_1 = require("f97e150570cbccde");
const oauth_authorization_code_grant_token_request_js_1 = require("fe22fa5e9a894a98");
const oauth_client_credentials_grant_token_request_js_1 = require("fed6d2e0ab43236c");
const oauth_password_grant_token_request_js_1 = require("fb8e63dc9506db34");
const oauth_refresh_token_grant_token_request_js_1 = require("8721ed905f965a94");
exports.oauthTokenRequestSchema = zod_1.z.discriminatedUnion('grant_type', [
    oauth_authorization_code_grant_token_request_js_1.oauthAuthorizationCodeGrantTokenRequestSchema,
    oauth_refresh_token_grant_token_request_js_1.oauthRefreshTokenGrantTokenRequestSchema,
    oauth_password_grant_token_request_js_1.oauthPasswordGrantTokenRequestSchema,
    oauth_client_credentials_grant_token_request_js_1.oauthClientCredentialsGrantTokenRequestSchema
]);

},{"f97e150570cbccde":"gcE23","fe22fa5e9a894a98":"7Ja5P","fed6d2e0ab43236c":"fVSaL","fb8e63dc9506db34":"7UTWt","8721ed905f965a94":"jSfFK"}],"eRF08":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthTokenResponseSchema = void 0;
const zod_1 = require("f9b7bf881a53eda1");
const jwk_1 = require("df9a3dfa7a37973e");
const oauth_authorization_details_js_1 = require("5b08cca05c1faeb0");
const oauth_token_type_js_1 = require("8aee1be355313dae");
/**
 * @see {@link https://www.rfc-editor.org/rfc/rfc6749.html#section-5.1 | RFC 6749 (OAuth2), Section 5.1}
 */ exports.oauthTokenResponseSchema = zod_1.z.object({
    // https://www.rfc-editor.org/rfc/rfc6749.html#section-5.1
    access_token: zod_1.z.string(),
    token_type: oauth_token_type_js_1.oauthTokenTypeSchema,
    scope: zod_1.z.string().optional(),
    refresh_token: zod_1.z.string().optional(),
    expires_in: zod_1.z.number().optional(),
    // https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse
    id_token: jwk_1.signedJwtSchema.optional(),
    // https://datatracker.ietf.org/doc/html/rfc9396#name-enriched-authorization-deta
    authorization_details: oauth_authorization_details_js_1.oauthAuthorizationDetailsSchema.optional()
})// https://www.rfc-editor.org/rfc/rfc6749.html#section-5.1
// > The client MUST ignore unrecognized value names in the response.
.passthrough();

},{"f9b7bf881a53eda1":"gcE23","df9a3dfa7a37973e":"hmTh2","5b08cca05c1faeb0":"2jdxH","8aee1be355313dae":"1r2dh"}],"1r2dh":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauthTokenTypeSchema = void 0;
const zod_1 = require("70dab321b56bf926");
// Case insensitive input, normalized output
exports.oauthTokenTypeSchema = zod_1.z.union([
    zod_1.z.string().regex(/^DPoP$/i).transform(()=>'DPoP'),
    zod_1.z.string().regex(/^Bearer$/i).transform(()=>'Bearer')
]);

},{"70dab321b56bf926":"gcE23"}],"7ElNc":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oidcAuthenticationErrorResponseSchema = void 0;
const zod_1 = require("2e6a9c6b89c6787");
/**
 * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AuthError}
 */ exports.oidcAuthenticationErrorResponseSchema = zod_1.z.enum([
    // The Authorization Server requires End-User interaction of some form to proceed. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User interaction.
    'interaction_required',
    // The Authorization Server requires End-User authentication. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User authentication.
    'login_required',
    // The End-User is REQUIRED to select a session at the Authorization Server. The End-User MAY be authenticated at the Authorization Server with different associated accounts, but the End-User did not select a session. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface to prompt for a session to use.
    'account_selection_required',
    // The Authorization Server requires End-User consent. This error MAY be returned when the prompt parameter value in the Authentication Request is none, but the Authentication Request cannot be completed without displaying a user interface for End-User consent.
    'consent_required',
    // The request_uri in the Authorization Request returns an error or contains invalid data.
    'invalid_request_uri',
    // The request parameter contains an invalid Request Object.
    'invalid_request_object',
    // The OP does not support use of the request parameter defined in Section 6.
    'request_not_supported',
    // The OP does not support use of the request_uri parameter defined in Section 6.
    'request_uri_not_supported',
    // The OP does not support use of the registration parameter defined in Section 7.2.1.
    'registration_not_supported'
]);

},{"2e6a9c6b89c6787":"gcE23"}],"9a6YF":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oidcUserinfoSchema = void 0;
const zod_1 = require("48ae96253d7d89d5");
exports.oidcUserinfoSchema = zod_1.z.object({
    sub: zod_1.z.string(),
    iss: zod_1.z.string().url().optional(),
    aud: zod_1.z.union([
        zod_1.z.string(),
        zod_1.z.array(zod_1.z.string()).min(1)
    ]).optional(),
    email: zod_1.z.string().email().optional(),
    email_verified: zod_1.z.boolean().optional(),
    name: zod_1.z.string().optional(),
    preferred_username: zod_1.z.string().optional(),
    picture: zod_1.z.string().url().optional()
});

},{"48ae96253d7d89d5":"gcE23"}],"8eN2H":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OAuthAuthorizationServerMetadataResolver = void 0;
const oauth_types_1 = require("57e239784a5143ae");
const fetch_1 = require("42cf3d6ed9643fc0");
const simple_store_1 = require("926eaa82707861d7");
const util_js_1 = require("fc0474f9bb66bf5b");
/**
 * @see {@link https://datatracker.ietf.org/doc/html/rfc8414}
 */ class OAuthAuthorizationServerMetadataResolver extends simple_store_1.CachedGetter {
    constructor(cache, fetch, config){
        super(async (issuer, options)=>this.fetchMetadata(issuer, options), cache);
        Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "allowHttpIssuer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.fetch = (0, fetch_1.bindFetch)(fetch);
        this.allowHttpIssuer = config?.allowHttpIssuer === true;
    }
    async get(input, options) {
        const issuer = oauth_types_1.oauthIssuerIdentifierSchema.parse(input);
        if (!this.allowHttpIssuer && issuer.startsWith('http:')) throw new TypeError('Unsecure issuer URL protocol only allowed in development and test environments');
        return super.get(issuer, options);
    }
    async fetchMetadata(issuer, options) {
        const url = new URL(`/.well-known/oauth-authorization-server`, issuer);
        const request = new Request(url, {
            headers: {
                accept: 'application/json'
            },
            cache: options?.noCache ? 'no-cache' : undefined,
            signal: options?.signal,
            redirect: 'manual'
        });
        const response = await this.fetch(request);
        // https://datatracker.ietf.org/doc/html/rfc8414#section-3.2
        if (response.status !== 200) {
            await (0, fetch_1.cancelBody)(response, 'log');
            throw await fetch_1.FetchResponseError.from(response, `Unexpected status code ${response.status} for "${url}"`, undefined, {
                cause: request
            });
        }
        if ((0, util_js_1.contentMime)(response.headers) !== 'application/json') {
            await (0, fetch_1.cancelBody)(response, 'log');
            throw await fetch_1.FetchResponseError.from(response, `Unexpected content type for "${url}"`, undefined, {
                cause: request
            });
        }
        const metadata = oauth_types_1.oauthAuthorizationServerMetadataValidator.parse(await response.json());
        // Validate the issuer (MIX-UP attacks)
        // https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics#name-mix-up-attacks
        // https://datatracker.ietf.org/doc/html/rfc8414#section-2
        if (metadata.issuer !== issuer) throw new TypeError(`Invalid issuer ${metadata.issuer}`);
        // ATPROTO requires client_id_metadata_document
        // http://drafts.aaronpk.com/draft-parecki-oauth-client-id-metadata-document/draft-parecki-oauth-client-id-metadata-document.html
        if (metadata.client_id_metadata_document_supported !== true) throw new TypeError(`Authorization server "${issuer}" does not support client_id_metadata_document`);
        return metadata;
    }
}
exports.OAuthAuthorizationServerMetadataResolver = OAuthAuthorizationServerMetadataResolver;

},{"57e239784a5143ae":"B9q5y","42cf3d6ed9643fc0":"8GrWo","926eaa82707861d7":"27R7J","fc0474f9bb66bf5b":"7DcXL"}],"7DcXL":[function(require,module,exports,__globalThis) {
"use strict";
var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.includesSpaceSeparatedValue = exports.CustomEventTarget = exports.CustomEvent = exports.timeoutSignal = exports.ifString = void 0;
exports.contentMime = contentMime;
exports.combineSignals = combineSignals;
// @ts-expect-error
Symbol.dispose ?? (Symbol.dispose = Symbol('@@dispose'));
const ifString = (v)=>typeof v === 'string' ? v : undefined;
exports.ifString = ifString;
/**
 * @todo (?) move to common package
 */ const timeoutSignal = (timeout, options)=>{
    if (!Number.isInteger(timeout) || timeout < 0) throw new TypeError('Expected a positive integer');
    options?.signal?.throwIfAborted();
    const controller = new AbortController();
    const { signal } = controller;
    options?.signal?.addEventListener('abort', (reason)=>controller.abort(reason), {
        once: true,
        signal
    });
    const timeoutId = setTimeout((err)=>controller.abort(err), timeout, // create Error here to keep original stack trace
    new Error('Timeout'));
    timeoutId?.unref?.(); // NodeJS only
    signal.addEventListener('abort', ()=>clearTimeout(timeoutId), {
        once: true,
        signal
    });
    Object.defineProperty(signal, Symbol.dispose, {
        value: ()=>controller.abort()
    });
    return signal;
};
exports.timeoutSignal = timeoutSignal;
function contentMime(headers) {
    return headers.get('content-type')?.split(';')[0].trim();
}
/**
 * Ponyfill for `CustomEvent` constructor.
 */ exports.CustomEvent = globalThis.CustomEvent ?? (()=>{
    var _CustomEvent_detail;
    class CustomEvent extends Event {
        constructor(type, options){
            if (!arguments.length) throw new TypeError('type argument is required');
            super(type, options);
            _CustomEvent_detail.set(this, void 0);
            __classPrivateFieldSet(this, _CustomEvent_detail, options?.detail ?? null, "f");
        }
        get detail() {
            return __classPrivateFieldGet(this, _CustomEvent_detail, "f");
        }
    }
    _CustomEvent_detail = new WeakMap();
    Object.defineProperties(CustomEvent.prototype, {
        [Symbol.toStringTag]: {
            writable: false,
            enumerable: false,
            configurable: true,
            value: 'CustomEvent'
        },
        detail: {
            enumerable: true
        }
    });
    return CustomEvent;
})();
class CustomEventTarget {
    constructor(){
        Object.defineProperty(this, "eventTarget", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new EventTarget()
        });
    }
    addEventListener(type, callback, options) {
        this.eventTarget.addEventListener(type, callback, options);
    }
    removeEventListener(type, callback, options) {
        this.eventTarget.removeEventListener(type, callback, options);
    }
    dispatchCustomEvent(type, detail, init) {
        return this.eventTarget.dispatchEvent(new exports.CustomEvent(type, {
            ...init,
            detail
        }));
    }
}
exports.CustomEventTarget = CustomEventTarget;
const includesSpaceSeparatedValue = (input, value)=>{
    if (value.length === 0) throw new TypeError('Value cannot be empty');
    if (value.includes(' ')) throw new TypeError('Value cannot contain spaces');
    // Optimized version of:
    // return input.split(' ').includes(value)
    const inputLength = input.length;
    const valueLength = value.length;
    if (inputLength < valueLength) return false;
    let idx = input.indexOf(value);
    let idxEnd;
    while(idx !== -1){
        idxEnd = idx + valueLength;
        if (// at beginning or preceded by space
        (idx === 0 || input[idx - 1] === ' ') && // at end or followed by space
        (idxEnd === inputLength || input[idxEnd] === ' ')) return true;
        idx = input.indexOf(value, idxEnd + 1);
    }
    return false;
};
exports.includesSpaceSeparatedValue = includesSpaceSeparatedValue;
function combineSignals(signals) {
    const controller = new AbortController();
    const onAbort = function(_event) {
        const reason = new Error('This operation was aborted', {
            cause: this.reason
        });
        controller.abort(reason);
    };
    for (const sig of signals){
        if (!sig) continue;
        if (sig.aborted) {
            // Remove "abort" listener that was added to sig in previous iterations
            controller.abort();
            throw new Error('One of the signals is already aborted', {
                cause: sig.reason
            });
        }
        sig.addEventListener('abort', onAbort, {
            signal: controller.signal
        });
    }
    controller[Symbol.dispose] = ()=>{
        const reason = new Error('AbortController was disposed');
        controller.abort(reason);
    };
    return controller;
}

},{}],"6nRWg":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OAuthCallbackError = void 0;
class OAuthCallbackError extends Error {
    static from(err, params, state) {
        if (err instanceof OAuthCallbackError) return err;
        const message = err instanceof Error ? err.message : undefined;
        return new OAuthCallbackError(params, message, state, err);
    }
    constructor(params, message = params.get('error_description') || 'OAuth callback error', state, cause){
        super(message, {
            cause
        });
        Object.defineProperty(this, "params", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: params
        });
        Object.defineProperty(this, "state", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: state
        });
    }
}
exports.OAuthCallbackError = OAuthCallbackError;

},{}],"cli6k":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OAuthClient = void 0;
const jwk_1 = require("1a43957878964063");
const oauth_types_1 = require("69de813573f23f57");
const did_resolver_1 = require("afaa102174f9f16d");
const handle_resolver_1 = require("15b66f7fae7d5");
const identity_resolver_1 = require("6abed2c0ecc64185");
const simple_store_memory_1 = require("c95b5b3452013229");
const constants_js_1 = require("a6bf0c5807604f2");
const token_revoked_error_js_1 = require("cd41ccac9368bf7d");
const oauth_authorization_server_metadata_resolver_js_1 = require("7cfb90e2d6986cc6");
const oauth_callback_error_js_1 = require("e694239d15017837");
const oauth_protected_resource_metadata_resolver_js_1 = require("3003eb3ea88c01e6");
const oauth_resolver_js_1 = require("2e58d839f468d1c7");
const oauth_server_factory_js_1 = require("f5f898da713e5545");
const oauth_session_js_1 = require("4364e6d93e7821ec");
const runtime_js_1 = require("4fd9a6c8a108beac");
const session_getter_js_1 = require("772ff133cd665fea");
const util_js_1 = require("8dca806b150db358");
const validate_client_metadata_js_1 = require("728e6c8da4c1924d");
class OAuthClient extends util_js_1.CustomEventTarget {
    static async fetchMetadata({ clientId, fetch = globalThis.fetch, signal }) {
        signal?.throwIfAborted();
        const request = new Request(clientId, {
            redirect: 'error',
            signal: signal
        });
        const response = await fetch(request);
        if (response.status !== 200) {
            response.body?.cancel?.();
            throw new TypeError(`Failed to fetch client metadata: ${response.status}`);
        }
        // https://drafts.aaronpk.com/draft-parecki-oauth-client-id-metadata-document/draft-parecki-oauth-client-id-metadata-document.html#section-4.1
        const mime = response.headers.get('content-type')?.split(';')[0].trim();
        if (mime !== 'application/json') {
            response.body?.cancel?.();
            throw new TypeError(`Invalid client metadata content type: ${mime}`);
        }
        const json = await response.json();
        signal?.throwIfAborted();
        return oauth_types_1.oauthClientMetadataSchema.parse(json);
    }
    constructor({ fetch = globalThis.fetch, allowHttp = false, stateStore, sessionStore, didCache, dpopNonceCache = new simple_store_memory_1.SimpleStoreMemory({
        ttl: 60e3,
        max: 100
    }), handleCache, authorizationServerMetadataCache = new simple_store_memory_1.SimpleStoreMemory({
        ttl: 60e3,
        max: 100
    }), protectedResourceMetadataCache = new simple_store_memory_1.SimpleStoreMemory({
        ttl: 60e3,
        max: 100
    }), responseMode, clientMetadata, handleResolver, plcDirectoryUrl, runtimeImplementation, keyset }){
        super();
        // Config
        Object.defineProperty(this, "clientMetadata", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "responseMode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "keyset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // Services
        Object.defineProperty(this, "runtime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "oauthResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "serverFactory", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // Stores
        Object.defineProperty(this, "sessionGetter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "stateStore", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.keyset = keyset ? keyset instanceof jwk_1.Keyset ? keyset : new jwk_1.Keyset(keyset) : undefined;
        this.clientMetadata = (0, validate_client_metadata_js_1.validateClientMetadata)(clientMetadata, this.keyset);
        this.responseMode = responseMode;
        this.runtime = new runtime_js_1.Runtime(runtimeImplementation);
        this.fetch = fetch;
        this.oauthResolver = new oauth_resolver_js_1.OAuthResolver(new identity_resolver_1.IdentityResolver(new did_resolver_1.DidResolverCached(new did_resolver_1.DidResolverCommon({
            fetch,
            plcDirectoryUrl,
            allowHttp
        }), didCache), new handle_resolver_1.CachedHandleResolver(handle_resolver_1.AppViewHandleResolver.from(handleResolver, {
            fetch
        }), handleCache)), new oauth_protected_resource_metadata_resolver_js_1.OAuthProtectedResourceMetadataResolver(protectedResourceMetadataCache, fetch, {
            allowHttpResource: allowHttp
        }), new oauth_authorization_server_metadata_resolver_js_1.OAuthAuthorizationServerMetadataResolver(authorizationServerMetadataCache, fetch, {
            allowHttpIssuer: allowHttp
        }));
        this.serverFactory = new oauth_server_factory_js_1.OAuthServerFactory(this.clientMetadata, this.runtime, this.oauthResolver, this.fetch, this.keyset, dpopNonceCache);
        this.sessionGetter = new session_getter_js_1.SessionGetter(sessionStore, this.serverFactory, this.runtime);
        this.stateStore = stateStore;
        // Proxy sessionGetter events
        for (const type of [
            'deleted',
            'updated'
        ])this.sessionGetter.addEventListener(type, (event)=>{
            if (!this.dispatchCustomEvent(type, event.detail)) event.preventDefault();
        });
    }
    // Exposed as public API for convenience
    get identityResolver() {
        return this.oauthResolver.identityResolver;
    }
    // Exposed as public API for convenience
    get didResolver() {
        return this.identityResolver.didResolver;
    }
    // Exposed as public API for convenience
    get handleResolver() {
        return this.identityResolver.handleResolver;
    }
    get jwks() {
        return this.keyset?.publicJwks ?? {
            keys: []
        };
    }
    async authorize(input, { signal, ...options } = {}) {
        const redirectUri = options?.redirect_uri ?? this.clientMetadata.redirect_uris[0];
        if (!this.clientMetadata.redirect_uris.includes(redirectUri)) // The server will enforce this, but let's catch it early
        throw new TypeError('Invalid redirect_uri');
        const { identity, metadata } = await this.oauthResolver.resolve(input, {
            signal
        });
        const pkce = await this.runtime.generatePKCE();
        const dpopKey = await this.runtime.generateKey(metadata.dpop_signing_alg_values_supported || [
            constants_js_1.FALLBACK_ALG
        ]);
        const state = await this.runtime.generateNonce();
        await this.stateStore.set(state, {
            iss: metadata.issuer,
            dpopKey,
            verifier: pkce.verifier,
            appState: options?.state
        });
        const parameters = {
            ...options,
            client_id: this.clientMetadata.client_id,
            redirect_uri: redirectUri,
            code_challenge: pkce.challenge,
            code_challenge_method: pkce.method,
            state,
            login_hint: identity ? input // If input is a handle or a DID, use it as a login_hint
             : undefined,
            response_mode: this.responseMode,
            response_type: 'code',
            scope: options?.scope ?? this.clientMetadata.scope
        };
        const authorizationUrl = new URL(metadata.authorization_endpoint);
        // Since the user will be redirected to the authorization_endpoint url using
        // a browser, we need to make sure that the url is valid.
        if (authorizationUrl.protocol !== 'https:' && authorizationUrl.protocol !== 'http:') throw new TypeError(`Invalid authorization endpoint protocol: ${authorizationUrl.protocol}`);
        if (metadata.pushed_authorization_request_endpoint) {
            const server = await this.serverFactory.fromMetadata(metadata, dpopKey);
            const parResponse = await server.request('pushed_authorization_request', parameters);
            authorizationUrl.searchParams.set('client_id', this.clientMetadata.client_id);
            authorizationUrl.searchParams.set('request_uri', parResponse.request_uri);
            return authorizationUrl;
        } else if (metadata.require_pushed_authorization_requests) throw new Error('Server requires pushed authorization requests (PAR) but no PAR endpoint is available');
        else {
            for (const [key, value] of Object.entries(parameters))if (value) authorizationUrl.searchParams.set(key, String(value));
            // Length of the URL that will be sent to the server
            const urlLength = authorizationUrl.pathname.length + authorizationUrl.search.length;
            if (urlLength < 2048) return authorizationUrl;
            else if (!metadata.pushed_authorization_request_endpoint) throw new Error('Login URL too long');
        }
        throw new Error('Server does not support pushed authorization requests (PAR)');
    }
    /**
     * This method allows the client to proactively revoke the request_uri it
     * created through PAR.
     */ async abortRequest(authorizeUrl) {
        const requestUri = authorizeUrl.searchParams.get('request_uri');
        if (!requestUri) return;
    // @NOTE This is not implemented here because, 1) the request server should
    // invalidate the request_uri after some delay anyways, and 2) I am not sure
    // that the revocation endpoint is even supposed to support this (and I
    // don't want to spend the time checking now).
    // @TODO investigate actual necessity & feasibility of this feature
    }
    async callback(params) {
        const responseJwt = params.get('response');
        if (responseJwt != null) // https://openid.net/specs/oauth-v2-jarm.html
        throw new oauth_callback_error_js_1.OAuthCallbackError(params, 'JARM not supported');
        const issuerParam = params.get('iss');
        const stateParam = params.get('state');
        const errorParam = params.get('error');
        const codeParam = params.get('code');
        if (!stateParam) throw new oauth_callback_error_js_1.OAuthCallbackError(params, 'Missing "state" parameter');
        const stateData = await this.stateStore.get(stateParam);
        if (stateData) // Prevent any kind of replay
        await this.stateStore.del(stateParam);
        else throw new oauth_callback_error_js_1.OAuthCallbackError(params, `Unknown authorization session "${stateParam}"`);
        try {
            if (errorParam != null) throw new oauth_callback_error_js_1.OAuthCallbackError(params, undefined, stateData.appState);
            if (!codeParam) throw new oauth_callback_error_js_1.OAuthCallbackError(params, 'Missing "code" query param', stateData.appState);
            const server = await this.serverFactory.fromIssuer(stateData.iss, stateData.dpopKey);
            if (issuerParam != null) {
                if (!server.issuer) throw new oauth_callback_error_js_1.OAuthCallbackError(params, 'Issuer not found in metadata', stateData.appState);
                if (server.issuer !== issuerParam) throw new oauth_callback_error_js_1.OAuthCallbackError(params, 'Issuer mismatch', stateData.appState);
            } else if (server.serverMetadata.authorization_response_iss_parameter_supported) throw new oauth_callback_error_js_1.OAuthCallbackError(params, 'iss missing from the response', stateData.appState);
            const tokenSet = await server.exchangeCode(codeParam, stateData.verifier);
            try {
                await this.sessionGetter.setStored(tokenSet.sub, {
                    dpopKey: stateData.dpopKey,
                    tokenSet
                });
                const session = this.createSession(server, tokenSet.sub);
                return {
                    session,
                    state: stateData.appState ?? null
                };
            } catch (err) {
                await server.revoke(tokenSet.refresh_token || tokenSet.access_token);
                throw err;
            }
        } catch (err) {
            // Make sure, whatever the underlying error, that the appState is
            // available in the calling code
            throw oauth_callback_error_js_1.OAuthCallbackError.from(err, params, stateData.appState);
        }
    }
    /**
     * Load a stored session. This will refresh the token only if needed (about to
     * expire) by default.
     *
     * @param refresh See {@link SessionGetter.getSession}
     */ async restore(sub, refresh = 'auto') {
        // sub arg is lightly typed for convenience of library user
        (0, did_resolver_1.assertAtprotoDid)(sub);
        const { dpopKey, tokenSet } = await this.sessionGetter.get(sub, {
            noCache: refresh === true,
            allowStale: refresh === false
        });
        const server = await this.serverFactory.fromIssuer(tokenSet.iss, dpopKey, {
            noCache: refresh === true,
            allowStale: refresh === false
        });
        return this.createSession(server, sub);
    }
    async revoke(sub) {
        // sub arg is lightly typed for convenience of library user
        (0, did_resolver_1.assertAtprotoDid)(sub);
        const { dpopKey, tokenSet } = await this.sessionGetter.get(sub, {
            allowStale: true
        });
        // NOT using `;(await this.restore(sub, false)).signOut()` because we want
        // the tokens to be deleted even if it was not possible to fetch the issuer
        // data.
        try {
            const server = await this.serverFactory.fromIssuer(tokenSet.iss, dpopKey);
            await server.revoke(tokenSet.access_token);
        } finally{
            await this.sessionGetter.delStored(sub, new token_revoked_error_js_1.TokenRevokedError(sub));
        }
    }
    createSession(server, sub) {
        return new oauth_session_js_1.OAuthSession(server, sub, this.sessionGetter, this.fetch);
    }
}
exports.OAuthClient = OAuthClient;

},{"1a43957878964063":"hmTh2","69de813573f23f57":"B9q5y","afaa102174f9f16d":"5zCmk","15b66f7fae7d5":"fmpMV","6abed2c0ecc64185":"ft9Gx","c95b5b3452013229":"hgLDP","a6bf0c5807604f2":"84hFR","cd41ccac9368bf7d":"bC4BG","7cfb90e2d6986cc6":"8eN2H","e694239d15017837":"6nRWg","3003eb3ea88c01e6":"7rERk","2e58d839f468d1c7":"4s3Yv","f5f898da713e5545":"1CyeX","4364e6d93e7821ec":"1jidt","4fd9a6c8a108beac":"fAke0","772ff133cd665fea":"9raN3","8dca806b150db358":"7DcXL","728e6c8da4c1924d":"cR0vb"}],"ft9Gx":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(require("d87e30ff8bff40c6"), exports);

},{"d87e30ff8bff40c6":"2d67P"}],"2d67P":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IdentityResolver = void 0;
const syntax_1 = require("dbde355a9fd40f3b");
const handle_resolver_1 = require("f074310233a695b3");
class IdentityResolver {
    constructor(didResolver, handleResolver){
        Object.defineProperty(this, "didResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: didResolver
        });
        Object.defineProperty(this, "handleResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: handleResolver
        });
    }
    async resolve(input, options) {
        const document = (0, handle_resolver_1.isResolvedHandle)(input) ? await this.getDocumentFromDid(input, options) : await this.getDocumentFromHandle(input, options);
        const service = document.service?.find(isAtprotoPersonalDataServerService, document);
        if (!service) throw new TypeError(`No valid "AtprotoPersonalDataServer" service found in "${document.id}" DID document`);
        return {
            did: document.id,
            pds: new URL(service.serviceEndpoint)
        };
    }
    async getDocumentFromDid(did, options) {
        return this.didResolver.resolve(did, options);
    }
    async getDocumentFromHandle(input, options) {
        const handle = (0, syntax_1.normalizeAndEnsureValidHandle)(input);
        const did = await this.handleResolver.resolve(handle, options);
        if (!did) throw new TypeError(`Handle "${handle}" does not resolve to a DID`);
        options?.signal?.throwIfAborted();
        // Note: Not using "return this.resolveDid(did, options)" to make the extra
        // check for the handle in the DID document:
        const document = await this.didResolver.resolve(did, options);
        // Ensure that the handle is included in the document
        if (!document.alsoKnownAs?.includes(`at://${handle}`)) throw new TypeError(`Did document for "${did}" does not include the handle "${handle}"`);
        return document;
    }
}
exports.IdentityResolver = IdentityResolver;
function isAtprotoPersonalDataServerService(s) {
    return typeof s.serviceEndpoint === 'string' && s.type === 'AtprotoPersonalDataServer' && (s.id.startsWith('#') ? s.id === '#atproto_pds' : s.id === `${this.id}#atproto_pds`);
}

},{"dbde355a9fd40f3b":"gN2Ao","f074310233a695b3":"fmpMV"}],"gN2Ao":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(require("51462b3ece049fbf"), exports);
__exportStar(require("608bf33390fd366b"), exports);
__exportStar(require("13812754529a595"), exports);
__exportStar(require("5d3ad6bb7ef86d5c"), exports);
__exportStar(require("2c009dd043a1ad2"), exports);
__exportStar(require("46fbe6d8597566f4"), exports);
__exportStar(require("cb166b7fbbde1efd"), exports);

},{"51462b3ece049fbf":"6VRf0","608bf33390fd366b":"5LfxM","13812754529a595":"cml69","5d3ad6bb7ef86d5c":"8UFiv","2c009dd043a1ad2":"jHvWI","46fbe6d8597566f4":"7N6of","cb166b7fbbde1efd":"c63cV"}],"6VRf0":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DisallowedDomainError = exports.UnsupportedDomainError = exports.ReservedHandleError = exports.InvalidHandleError = exports.isValidTld = exports.isValidHandle = exports.normalizeAndEnsureValidHandle = exports.normalizeHandle = exports.ensureValidHandleRegex = exports.ensureValidHandle = exports.DISALLOWED_TLDS = exports.INVALID_HANDLE = void 0;
exports.INVALID_HANDLE = 'handle.invalid';
// Currently these are registration-time restrictions, not protocol-level
// restrictions. We have a couple accounts in the wild that we need to clean up
// before hard-disallow.
// See also: https://en.wikipedia.org/wiki/Top-level_domain#Reserved_domains
exports.DISALLOWED_TLDS = [
    '.local',
    '.arpa',
    '.invalid',
    '.localhost',
    '.internal',
    '.example',
    '.alt',
    // policy could concievably change on ".onion" some day
    '.onion'
];
// Handle constraints, in English:
//  - must be a possible domain name
//    - RFC-1035 is commonly referenced, but has been updated. eg, RFC-3696,
//      section 2. and RFC-3986, section 3. can now have leading numbers (eg,
//      4chan.org)
//    - "labels" (sub-names) are made of ASCII letters, digits, hyphens
//    - can not start or end with a hyphen
//    - TLD (last component) should not start with a digit
//    - can't end with a hyphen (can end with digit)
//    - each segment must be between 1 and 63 characters (not including any periods)
//    - overall length can't be more than 253 characters
//    - separated by (ASCII) periods; does not start or end with period
//    - case insensitive
//    - domains (handles) are equal if they are the same lower-case
//    - punycode allowed for internationalization
//  - no whitespace, null bytes, joining chars, etc
//  - does not validate whether domain or TLD exists, or is a reserved or
//    special TLD (eg, .onion or .local)
//  - does not validate punycode
const ensureValidHandle = (handle)=>{
    // check that all chars are boring ASCII
    if (!/^[a-zA-Z0-9.-]*$/.test(handle)) throw new InvalidHandleError('Disallowed characters in handle (ASCII letters, digits, dashes, periods only)');
    if (handle.length > 253) throw new InvalidHandleError('Handle is too long (253 chars max)');
    const labels = handle.split('.');
    if (labels.length < 2) throw new InvalidHandleError('Handle domain needs at least two parts');
    for(let i = 0; i < labels.length; i++){
        const l = labels[i];
        if (l.length < 1) throw new InvalidHandleError('Handle parts can not be empty');
        if (l.length > 63) throw new InvalidHandleError('Handle part too long (max 63 chars)');
        if (l.endsWith('-') || l.startsWith('-')) throw new InvalidHandleError('Handle parts can not start or end with hyphens');
        if (i + 1 === labels.length && !/^[a-zA-Z]/.test(l)) throw new InvalidHandleError('Handle final component (TLD) must start with ASCII letter');
    }
};
exports.ensureValidHandle = ensureValidHandle;
// simple regex translation of above constraints
const ensureValidHandleRegex = (handle)=>{
    if (!/^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$/.test(handle)) throw new InvalidHandleError("Handle didn't validate via regex");
    if (handle.length > 253) throw new InvalidHandleError('Handle is too long (253 chars max)');
};
exports.ensureValidHandleRegex = ensureValidHandleRegex;
const normalizeHandle = (handle)=>{
    return handle.toLowerCase();
};
exports.normalizeHandle = normalizeHandle;
const normalizeAndEnsureValidHandle = (handle)=>{
    const normalized = (0, exports.normalizeHandle)(handle);
    (0, exports.ensureValidHandle)(normalized);
    return normalized;
};
exports.normalizeAndEnsureValidHandle = normalizeAndEnsureValidHandle;
const isValidHandle = (handle)=>{
    try {
        (0, exports.ensureValidHandle)(handle);
    } catch (err) {
        if (err instanceof InvalidHandleError) return false;
        throw err;
    }
    return true;
};
exports.isValidHandle = isValidHandle;
const isValidTld = (handle)=>{
    return !exports.DISALLOWED_TLDS.some((domain)=>handle.endsWith(domain));
};
exports.isValidTld = isValidTld;
class InvalidHandleError extends Error {
}
exports.InvalidHandleError = InvalidHandleError;
/** @deprecated Never used */ class ReservedHandleError extends Error {
}
exports.ReservedHandleError = ReservedHandleError;
/** @deprecated Never used */ class UnsupportedDomainError extends Error {
}
exports.UnsupportedDomainError = UnsupportedDomainError;
/** @deprecated Never used */ class DisallowedDomainError extends Error {
}
exports.DisallowedDomainError = DisallowedDomainError;

},{}],"5LfxM":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidDidError = exports.ensureValidDidRegex = exports.ensureValidDid = void 0;
// Human-readable constraints:
//   - valid W3C DID (https://www.w3.org/TR/did-core/#did-syntax)
//      - entire URI is ASCII: [a-zA-Z0-9._:%-]
//      - always starts "did:" (lower-case)
//      - method name is one or more lower-case letters, followed by ":"
//      - remaining identifier can have any of the above chars, but can not end in ":"
//      - it seems that a bunch of ":" can be included, and don't need spaces between
//      - "%" is used only for "percent encoding" and must be followed by two hex characters (and thus can't end in "%")
//      - query ("?") and fragment ("#") stuff is defined for "DID URIs", but not as part of identifier itself
//      - "The current specification does not take a position on the maximum length of a DID"
//   - in current atproto, only allowing did:plc and did:web. But not *forcing* this at lexicon layer
//   - hard length limit of 8KBytes
//   - not going to validate "percent encoding" here
const ensureValidDid = (did)=>{
    if (!did.startsWith('did:')) throw new InvalidDidError('DID requires "did:" prefix');
    // check that all chars are boring ASCII
    if (!/^[a-zA-Z0-9._:%-]*$/.test(did)) throw new InvalidDidError('Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)');
    const { length, 1: method } = did.split(':');
    if (length < 3) throw new InvalidDidError('DID requires prefix, method, and method-specific content');
    if (!/^[a-z]+$/.test(method)) throw new InvalidDidError('DID method must be lower-case letters');
    if (did.endsWith(':') || did.endsWith('%')) throw new InvalidDidError('DID can not end with ":" or "%"');
    if (did.length > 2048) throw new InvalidDidError('DID is too long (2048 chars max)');
};
exports.ensureValidDid = ensureValidDid;
const ensureValidDidRegex = (did)=>{
    // simple regex to enforce most constraints via just regex and length.
    // hand wrote this regex based on above constraints
    if (!/^did:[a-z]+:[a-zA-Z0-9._:%-]*[a-zA-Z0-9._-]$/.test(did)) throw new InvalidDidError("DID didn't validate via regex");
    if (did.length > 2048) throw new InvalidDidError('DID is too long (2048 chars max)');
};
exports.ensureValidDidRegex = ensureValidDidRegex;
class InvalidDidError extends Error {
}
exports.InvalidDidError = InvalidDidError;

},{}],"cml69":[function(require,module,exports,__globalThis) {
"use strict";
/*
Grammar:

alpha     = "a" / "b" / "c" / "d" / "e" / "f" / "g" / "h" / "i" / "j" / "k" / "l" / "m" / "n" / "o" / "p" / "q" / "r" / "s" / "t" / "u" / "v" / "w" / "x" / "y" / "z" / "A" / "B" / "C" / "D" / "E" / "F" / "G" / "H" / "I" / "J" / "K" / "L" / "M" / "N" / "O" / "P" / "Q" / "R" / "S" / "T" / "U" / "V" / "W" / "X" / "Y" / "Z"
number    = "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" / "9" / "0"
delim     = "."
segment   = alpha *( alpha / number / "-" )
authority = segment *( delim segment )
name      = alpha *( alpha )
nsid      = authority delim name

*/ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidNsidError = exports.ensureValidNsidRegex = exports.ensureValidNsid = exports.NSID = void 0;
class NSID {
    static parse(nsid) {
        return new NSID(nsid);
    }
    static create(authority, name) {
        const segments = [
            ...authority.split('.').reverse(),
            name
        ].join('.');
        return new NSID(segments);
    }
    static isValid(nsid) {
        try {
            NSID.parse(nsid);
            return true;
        } catch (e) {
            return false;
        }
    }
    constructor(nsid){
        Object.defineProperty(this, "segments", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        (0, exports.ensureValidNsid)(nsid);
        this.segments = nsid.split('.');
    }
    get authority() {
        return this.segments.slice(0, this.segments.length - 1).reverse().join('.');
    }
    get name() {
        return this.segments.at(this.segments.length - 1);
    }
    toString() {
        return this.segments.join('.');
    }
}
exports.NSID = NSID;
// Human readable constraints on NSID:
// - a valid domain in reversed notation
// - followed by an additional period-separated name, which is camel-case letters
const ensureValidNsid = (nsid)=>{
    const toCheck = nsid;
    // check that all chars are boring ASCII
    if (!/^[a-zA-Z0-9.-]*$/.test(toCheck)) throw new InvalidNsidError('Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)');
    if (toCheck.length > 317) throw new InvalidNsidError('NSID is too long (317 chars max)');
    const labels = toCheck.split('.');
    if (labels.length < 3) throw new InvalidNsidError('NSID needs at least three parts');
    for(let i = 0; i < labels.length; i++){
        const l = labels[i];
        if (l.length < 1) throw new InvalidNsidError('NSID parts can not be empty');
        if (l.length > 63) throw new InvalidNsidError('NSID part too long (max 63 chars)');
        if (l.endsWith('-') || l.startsWith('-')) throw new InvalidNsidError('NSID parts can not start or end with hyphen');
        if (/^[0-9]/.test(l) && i === 0) throw new InvalidNsidError('NSID first part may not start with a digit');
        if (!/^[a-zA-Z][a-zA-Z0-9]*$/.test(l) && i + 1 === labels.length) throw new InvalidNsidError('NSID name part must be only letters and digits (and no leading digit)');
    }
};
exports.ensureValidNsid = ensureValidNsid;
const ensureValidNsidRegex = (nsid)=>{
    // simple regex to enforce most constraints via just regex and length.
    // hand wrote this regex based on above constraints
    if (!/^[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(\.[a-zA-Z]([a-zA-Z0-9]{0,62})?)$/.test(nsid)) throw new InvalidNsidError("NSID didn't validate via regex");
    if (nsid.length > 317) throw new InvalidNsidError('NSID is too long (317 chars max)');
};
exports.ensureValidNsidRegex = ensureValidNsidRegex;
class InvalidNsidError extends Error {
}
exports.InvalidNsidError = InvalidNsidError;

},{}],"8UFiv":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AtUri = exports.ATP_URI_REGEX = void 0;
__exportStar(require("eb7c99529500519c"), exports);
exports.ATP_URI_REGEX = // proto-    --did--------------   --name----------------   --path----   --query--   --hash--
/^(at:\/\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
//                       --path-----   --query--  --hash--
const RELATIVE_REGEX = /^(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
class AtUri {
    constructor(uri, base){
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "host", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "pathname", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "searchParams", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        let parsed;
        if (base) {
            parsed = parse(base);
            if (!parsed) throw new Error(`Invalid at uri: ${base}`);
            const relativep = parseRelative(uri);
            if (!relativep) throw new Error(`Invalid path: ${uri}`);
            Object.assign(parsed, relativep);
        } else {
            parsed = parse(uri);
            if (!parsed) throw new Error(`Invalid at uri: ${uri}`);
        }
        this.hash = parsed.hash;
        this.host = parsed.host;
        this.pathname = parsed.pathname;
        this.searchParams = parsed.searchParams;
    }
    static make(handleOrDid, collection, rkey) {
        let str = handleOrDid;
        if (collection) str += '/' + collection;
        if (rkey) str += '/' + rkey;
        return new AtUri(str);
    }
    get protocol() {
        return 'at:';
    }
    get origin() {
        return `at://${this.host}`;
    }
    get hostname() {
        return this.host;
    }
    set hostname(v) {
        this.host = v;
    }
    get search() {
        return this.searchParams.toString();
    }
    set search(v) {
        this.searchParams = new URLSearchParams(v);
    }
    get collection() {
        return this.pathname.split('/').filter(Boolean)[0] || '';
    }
    set collection(v) {
        const parts = this.pathname.split('/').filter(Boolean);
        parts[0] = v;
        this.pathname = parts.join('/');
    }
    get rkey() {
        return this.pathname.split('/').filter(Boolean)[1] || '';
    }
    set rkey(v) {
        const parts = this.pathname.split('/').filter(Boolean);
        if (!parts[0]) parts[0] = 'undefined';
        parts[1] = v;
        this.pathname = parts.join('/');
    }
    get href() {
        return this.toString();
    }
    toString() {
        let path = this.pathname || '/';
        if (!path.startsWith('/')) path = `/${path}`;
        let qs = this.searchParams.toString();
        if (qs && !qs.startsWith('?')) qs = `?${qs}`;
        let hash = this.hash;
        if (hash && !hash.startsWith('#')) hash = `#${hash}`;
        return `at://${this.host}${path}${qs}${hash}`;
    }
}
exports.AtUri = AtUri;
function parse(str) {
    const match = exports.ATP_URI_REGEX.exec(str);
    if (match) return {
        hash: match[5] || '',
        host: match[2] || '',
        pathname: match[3] || '',
        searchParams: new URLSearchParams(match[4] || '')
    };
    return undefined;
}
function parseRelative(str) {
    const match = RELATIVE_REGEX.exec(str);
    if (match) return {
        hash: match[3] || '',
        pathname: match[1] || '',
        searchParams: new URLSearchParams(match[2] || '')
    };
    return undefined;
}

},{"eb7c99529500519c":"fqZ8L"}],"fqZ8L":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ensureValidAtUriRegex = exports.ensureValidAtUri = void 0;
const did_1 = require("d39bcec67f1bc1bf");
const handle_1 = require("bc8e47f738049509");
const nsid_1 = require("bfadb0a788a92fcb");
// Human-readable constraints on ATURI:
//   - following regular URLs, a 8KByte hard total length limit
//   - follows ATURI docs on website
//      - all ASCII characters, no whitespace. non-ASCII could be URL-encoded
//      - starts "at://"
//      - "authority" is a valid DID or a valid handle
//      - optionally, follow "authority" with "/" and valid NSID as start of path
//      - optionally, if NSID given, follow that with "/" and rkey
//      - rkey path component can include URL-encoded ("percent encoded"), or:
//          ALPHA / DIGIT / "-" / "." / "_" / "~" / ":" / "@" / "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
//          [a-zA-Z0-9._~:@!$&'\(\)*+,;=-]
//      - rkey must have at least one char
//      - regardless of path component, a fragment can follow  as "#" and then a JSON pointer (RFC-6901)
const ensureValidAtUri = (uri)=>{
    // JSON pointer is pretty different from rest of URI, so split that out first
    const uriParts = uri.split('#');
    if (uriParts.length > 2) throw new Error('ATURI can have at most one "#", separating fragment out');
    const fragmentPart = uriParts[1] || null;
    uri = uriParts[0];
    // check that all chars are boring ASCII
    if (!/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(uri)) throw new Error('Disallowed characters in ATURI (ASCII)');
    const parts = uri.split('/');
    if (parts.length >= 3 && (parts[0] !== 'at:' || parts[1].length !== 0)) throw new Error('ATURI must start with "at://"');
    if (parts.length < 3) throw new Error('ATURI requires at least method and authority sections');
    try {
        if (parts[2].startsWith('did:')) (0, did_1.ensureValidDid)(parts[2]);
        else (0, handle_1.ensureValidHandle)(parts[2]);
    } catch  {
        throw new Error('ATURI authority must be a valid handle or DID');
    }
    if (parts.length >= 4) {
        if (parts[3].length === 0) throw new Error('ATURI can not have a slash after authority without a path segment');
        try {
            (0, nsid_1.ensureValidNsid)(parts[3]);
        } catch  {
            throw new Error('ATURI requires first path segment (if supplied) to be valid NSID');
        }
    }
    if (parts.length >= 5) {
        if (parts[4].length === 0) throw new Error('ATURI can not have a slash after collection, unless record key is provided');
    // would validate rkey here, but there are basically no constraints!
    }
    if (parts.length >= 6) throw new Error('ATURI path can have at most two parts, and no trailing slash');
    if (uriParts.length >= 2 && fragmentPart == null) throw new Error('ATURI fragment must be non-empty and start with slash');
    if (fragmentPart != null) {
        if (fragmentPart.length === 0 || fragmentPart[0] !== '/') throw new Error('ATURI fragment must be non-empty and start with slash');
        // NOTE: enforcing *some* checks here for sanity. Eg, at least no whitespace
        if (!/^\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\]/-]*$/.test(fragmentPart)) throw new Error('Disallowed characters in ATURI fragment (ASCII)');
    }
    if (uri.length > 8192) throw new Error('ATURI is far too long');
};
exports.ensureValidAtUri = ensureValidAtUri;
const ensureValidAtUriRegex = (uri)=>{
    // simple regex to enforce most constraints via just regex and length.
    // hand wrote this regex based on above constraints. whew!
    const aturiRegex = /^at:\/\/(?<authority>[a-zA-Z0-9._:%-]+)(\/(?<collection>[a-zA-Z0-9-.]+)(\/(?<rkey>[a-zA-Z0-9._~:@!$&%')(*+,;=-]+))?)?(#(?<fragment>\/[a-zA-Z0-9._~:@!$&%')(*+,;=\-[\]/\\]*))?$/;
    const rm = uri.match(aturiRegex);
    if (!rm || !rm.groups) throw new Error("ATURI didn't validate via regex");
    const groups = rm.groups;
    try {
        (0, handle_1.ensureValidHandleRegex)(groups.authority);
    } catch  {
        try {
            (0, did_1.ensureValidDidRegex)(groups.authority);
        } catch  {
            throw new Error('ATURI authority must be a valid handle or DID');
        }
    }
    if (groups.collection) try {
        (0, nsid_1.ensureValidNsidRegex)(groups.collection);
    } catch  {
        throw new Error('ATURI collection path segment must be a valid NSID');
    }
    if (uri.length > 8192) throw new Error('ATURI is far too long');
};
exports.ensureValidAtUriRegex = ensureValidAtUriRegex;

},{"d39bcec67f1bc1bf":"5LfxM","bc8e47f738049509":"6VRf0","bfadb0a788a92fcb":"cml69"}],"jHvWI":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidTidError = exports.isValidTid = exports.ensureValidTid = void 0;
const TID_LENGTH = 13;
const TID_REGEX = /^[234567abcdefghij][234567abcdefghijklmnopqrstuvwxyz]{12}$/;
const ensureValidTid = (tid)=>{
    if (tid.length !== TID_LENGTH) throw new InvalidTidError(`TID must be ${TID_LENGTH} characters`);
    // simple regex to enforce most constraints via just regex and length.
    if (!TID_REGEX.test(tid)) throw new InvalidTidError('TID syntax not valid (regex)');
};
exports.ensureValidTid = ensureValidTid;
const isValidTid = (tid)=>{
    return tid.length === TID_LENGTH && TID_REGEX.test(tid);
};
exports.isValidTid = isValidTid;
class InvalidTidError extends Error {
}
exports.InvalidTidError = InvalidTidError;

},{}],"7N6of":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidRecordKeyError = exports.isValidRecordKey = exports.ensureValidRecordKey = void 0;
const ensureValidRecordKey = (rkey)=>{
    if (rkey.length > 512 || rkey.length < 1) throw new InvalidRecordKeyError('record key must be 1 to 512 characters');
    // simple regex to enforce most constraints via just regex and length.
    if (!/^[a-zA-Z0-9_~.:-]{1,512}$/.test(rkey)) throw new InvalidRecordKeyError('record key syntax not valid (regex)');
    if (rkey === '.' || rkey === '..') throw new InvalidRecordKeyError('record key can not be "." or ".."');
};
exports.ensureValidRecordKey = ensureValidRecordKey;
const isValidRecordKey = (rkey)=>{
    try {
        (0, exports.ensureValidRecordKey)(rkey);
    } catch (err) {
        if (err instanceof InvalidRecordKeyError) return false;
        throw err;
    }
    return true;
};
exports.isValidRecordKey = isValidRecordKey;
class InvalidRecordKeyError extends Error {
}
exports.InvalidRecordKeyError = InvalidRecordKeyError;

},{}],"c63cV":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidDatetimeError = exports.normalizeDatetimeAlways = exports.normalizeDatetime = exports.isValidDatetime = exports.ensureValidDatetime = void 0;
/* Validates datetime string against atproto Lexicon 'datetime' format.
 * Syntax is described at: https://atproto.com/specs/lexicon#datetime
 */ const ensureValidDatetime = (dtStr)=>{
    const date = new Date(dtStr);
    // must parse as ISO 8601; this also verifies semantics like month is not 13 or 00
    if (isNaN(date.getTime())) throw new InvalidDatetimeError('datetime did not parse as ISO 8601');
    if (date.toISOString().startsWith('-')) throw new InvalidDatetimeError('datetime normalized to a negative time');
    // regex and other checks for RFC-3339
    if (!/^[0-9]{4}-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-6][0-9]:[0-6][0-9](.[0-9]{1,20})?(Z|([+-][0-2][0-9]:[0-5][0-9]))$/.test(dtStr)) throw new InvalidDatetimeError("datetime didn't validate via regex");
    if (dtStr.length > 64) throw new InvalidDatetimeError('datetime is too long (64 chars max)');
    if (dtStr.endsWith('-00:00')) throw new InvalidDatetimeError('datetime can not use "-00:00" for UTC timezone');
    if (dtStr.startsWith('000')) throw new InvalidDatetimeError('datetime so close to year zero not allowed');
};
exports.ensureValidDatetime = ensureValidDatetime;
/* Same logic as ensureValidDatetime(), but returns a boolean instead of throwing an exception.
 */ const isValidDatetime = (dtStr)=>{
    try {
        (0, exports.ensureValidDatetime)(dtStr);
    } catch (err) {
        if (err instanceof InvalidDatetimeError) return false;
        throw err;
    }
    return true;
};
exports.isValidDatetime = isValidDatetime;
/* Takes a flexible datetime string and normalizes representation.
 *
 * This function will work with any valid atproto datetime (eg, anything which isValidDatetime() is true for). It *additionally* is more flexible about accepting datetimes that don't comply to RFC 3339, or are missing timezone information, and normalizing them to a valid datetime.
 *
 * One use-case is a consistent, sortable string. Another is to work with older invalid createdAt datetimes.
 *
 * Successful output will be a valid atproto datetime with millisecond precision (3 sub-second digits) and UTC timezone with trailing 'Z' syntax. Throws `InvalidDatetimeError` if the input string could not be parsed as a datetime, even with permissive parsing.
 *
 * Expected output format: YYYY-MM-DDTHH:mm:ss.sssZ
 */ const normalizeDatetime = (dtStr)=>{
    if ((0, exports.isValidDatetime)(dtStr)) {
        const outStr = new Date(dtStr).toISOString();
        if ((0, exports.isValidDatetime)(outStr)) return outStr;
    }
    // check if this permissive datetime is missing a timezone
    if (!/.*(([+-]\d\d:?\d\d)|[a-zA-Z])$/.test(dtStr)) {
        const date = new Date(dtStr + 'Z');
        if (!isNaN(date.getTime())) {
            const tzStr = date.toISOString();
            if ((0, exports.isValidDatetime)(tzStr)) return tzStr;
        }
    }
    // finally try parsing as simple datetime
    const date = new Date(dtStr);
    if (isNaN(date.getTime())) throw new InvalidDatetimeError('datetime did not parse as any timestamp format');
    const isoStr = date.toISOString();
    if ((0, exports.isValidDatetime)(isoStr)) return isoStr;
    else throw new InvalidDatetimeError('datetime normalized to invalid timestamp string');
};
exports.normalizeDatetime = normalizeDatetime;
/* Variant of normalizeDatetime() which always returns a valid datetime strings.
 *
 * If a InvalidDatetimeError is encountered, returns the UNIX epoch time as a UTC datetime (1970-01-01T00:00:00.000Z).
 */ const normalizeDatetimeAlways = (dtStr)=>{
    try {
        return (0, exports.normalizeDatetime)(dtStr);
    } catch (err) {
        if (err instanceof InvalidDatetimeError) return new Date(0).toISOString();
        throw err;
    }
};
exports.normalizeDatetimeAlways = normalizeDatetimeAlways;
/* Indicates a datetime string did not pass full atproto Lexicon datetime string format checks.
 */ class InvalidDatetimeError extends Error {
}
exports.InvalidDatetimeError = InvalidDatetimeError;

},{}],"84hFR":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FALLBACK_ALG = void 0;
/**
 * Per ATProto spec (OpenID uses RS256)
 */ exports.FALLBACK_ALG = 'ES256';

},{}],"bC4BG":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TokenRevokedError = void 0;
class TokenRevokedError extends Error {
    constructor(sub, message = `The session for "${sub}" was successfully revoked`, options){
        super(message, options);
        Object.defineProperty(this, "sub", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: sub
        });
    }
}
exports.TokenRevokedError = TokenRevokedError;

},{}],"7rERk":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OAuthProtectedResourceMetadataResolver = void 0;
const oauth_types_1 = require("dca71c2603e55848");
const fetch_1 = require("a51fe063437a3686");
const simple_store_1 = require("95e9e1f027b75e57");
const util_js_1 = require("caf8df258a17da6f");
/**
 * @see {@link https://datatracker.ietf.org/doc/html/draft-ietf-oauth-resource-metadata-05}
 */ class OAuthProtectedResourceMetadataResolver extends simple_store_1.CachedGetter {
    constructor(cache, fetch = globalThis.fetch, config){
        super(async (origin, options)=>this.fetchMetadata(origin, options), cache);
        Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "allowHttpResource", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.fetch = (0, fetch_1.bindFetch)(fetch);
        this.allowHttpResource = config?.allowHttpResource === true;
    }
    async get(resource, options) {
        const { protocol, origin } = new URL(resource);
        if (protocol !== 'https:' && protocol !== 'http:') throw new TypeError(`Invalid protected resource metadata URL protocol: ${protocol}`);
        if (protocol === 'http:' && !this.allowHttpResource) throw new TypeError(`Unsecure resource metadata URL (${protocol}) only allowed in development and test environments`);
        return super.get(origin, options);
    }
    async fetchMetadata(origin, options) {
        const url = new URL(`/.well-known/oauth-protected-resource`, origin);
        const request = new Request(url, {
            signal: options?.signal,
            headers: {
                accept: 'application/json'
            },
            cache: options?.noCache ? 'no-cache' : undefined,
            redirect: 'manual'
        });
        const response = await this.fetch(request);
        // https://datatracker.ietf.org/doc/html/draft-ietf-oauth-resource-metadata-05#section-3.2
        if (response.status !== 200) {
            await (0, fetch_1.cancelBody)(response, 'log');
            throw await fetch_1.FetchResponseError.from(response, `Unexpected status code ${response.status} for "${url}"`, undefined, {
                cause: request
            });
        }
        if ((0, util_js_1.contentMime)(response.headers) !== 'application/json') {
            await (0, fetch_1.cancelBody)(response, 'log');
            throw await fetch_1.FetchResponseError.from(response, `Unexpected content type for "${url}"`, undefined, {
                cause: request
            });
        }
        const metadata = oauth_types_1.oauthProtectedResourceMetadataSchema.parse(await response.json());
        // https://datatracker.ietf.org/doc/html/draft-ietf-oauth-resource-metadata-05#section-3.3
        if (metadata.resource !== origin) throw new TypeError(`Invalid issuer ${metadata.resource}`);
        return metadata;
    }
}
exports.OAuthProtectedResourceMetadataResolver = OAuthProtectedResourceMetadataResolver;

},{"dca71c2603e55848":"B9q5y","a51fe063437a3686":"8GrWo","95e9e1f027b75e57":"27R7J","caf8df258a17da6f":"7DcXL"}],"4s3Yv":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OAuthResolver = void 0;
const oauth_types_1 = require("11bd7658f3e9ddcc");
const oauth_resolver_error_js_1 = require("18cbe195c46e8193");
class OAuthResolver {
    constructor(identityResolver, protectedResourceMetadataResolver, authorizationServerMetadataResolver){
        Object.defineProperty(this, "identityResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: identityResolver
        });
        Object.defineProperty(this, "protectedResourceMetadataResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protectedResourceMetadataResolver
        });
        Object.defineProperty(this, "authorizationServerMetadataResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: authorizationServerMetadataResolver
        });
    }
    /**
     * @param input - A handle, DID, PDS URL or Entryway URL
     */ async resolve(input, options) {
        // Allow using an entryway, or PDS url, directly as login input (e.g.
        // when the user forgot their handle, or when the handle does not
        // resolve to a DID)
        return /^https?:\/\//.test(input) ? this.resolveFromService(input, options) : this.resolveFromIdentity(input, options);
    }
    /**
     * @note this method can be used to verify if a particular uri supports OAuth
     * based sign-in (for compatibility with legacy implementation).
     */ async resolveFromService(input, options) {
        try {
            // Assume first that input is a PDS URL (as required by ATPROTO)
            const metadata = await this.getResourceServerMetadata(input, options);
            return {
                metadata
            };
        } catch (err) {
            if (!options?.signal?.aborted && err instanceof oauth_resolver_error_js_1.OAuthResolverError) try {
                // Fallback to trying to fetch as an issuer (Entryway)
                const result = oauth_types_1.oauthIssuerIdentifierSchema.safeParse(input);
                if (result.success) {
                    const metadata = await this.getAuthorizationServerMetadata(result.data, options);
                    return {
                        metadata
                    };
                }
            } catch  {
            // Fallback failed, throw original error
            }
            throw err;
        }
    }
    async resolveFromIdentity(input, options) {
        const identity = await this.resolveIdentity(input, options);
        options?.signal?.throwIfAborted();
        const metadata = await this.getResourceServerMetadata(identity.pds, options);
        return {
            identity,
            metadata
        };
    }
    async resolveIdentity(input, options) {
        try {
            return await this.identityResolver.resolve(input, options);
        } catch (cause) {
            throw oauth_resolver_error_js_1.OAuthResolverError.from(cause, `Failed to resolve identity: ${input}`);
        }
    }
    async getAuthorizationServerMetadata(issuer, options) {
        try {
            return await this.authorizationServerMetadataResolver.get(issuer, options);
        } catch (cause) {
            throw oauth_resolver_error_js_1.OAuthResolverError.from(cause, `Failed to resolve OAuth server metadata for issuer: ${issuer}`);
        }
    }
    async getResourceServerMetadata(pdsUrl, options) {
        try {
            const rsMetadata = await this.protectedResourceMetadataResolver.get(pdsUrl, options);
            // ATPROTO requires one, and only one, authorization server entry
            if (rsMetadata.authorization_servers?.length !== 1) throw new oauth_resolver_error_js_1.OAuthResolverError(rsMetadata.authorization_servers?.length ? `Unable to determine authorization server for PDS: ${pdsUrl}` : `No authorization servers found for PDS: ${pdsUrl}`);
            const issuer = rsMetadata.authorization_servers[0];
            options?.signal?.throwIfAborted();
            const asMetadata = await this.getAuthorizationServerMetadata(issuer, options);
            // https://datatracker.ietf.org/doc/html/draft-ietf-oauth-resource-metadata-05#section-4
            if (asMetadata.protected_resources) {
                if (!asMetadata.protected_resources.includes(rsMetadata.resource)) throw new oauth_resolver_error_js_1.OAuthResolverError(`PDS "${pdsUrl}" not protected by issuer "${issuer}"`);
            }
            return asMetadata;
        } catch (cause) {
            throw oauth_resolver_error_js_1.OAuthResolverError.from(cause, `Failed to resolve OAuth server metadata for resource: ${pdsUrl}`);
        }
    }
}
exports.OAuthResolver = OAuthResolver;

},{"11bd7658f3e9ddcc":"B9q5y","18cbe195c46e8193":"KYidH"}],"KYidH":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OAuthResolverError = void 0;
const zod_1 = require("dbb733a5938cc00a");
class OAuthResolverError extends Error {
    constructor(message, options){
        super(message, options);
    }
    static from(cause, message) {
        if (cause instanceof OAuthResolverError) return cause;
        const validationReason = cause instanceof zod_1.ZodError ? `${cause.errors[0].path} ${cause.errors[0].message}` : null;
        const fullMessage = (message ?? `Unable to resolve identity`) + (validationReason ? ` (${validationReason})` : '');
        return new OAuthResolverError(fullMessage, {
            cause
        });
    }
}
exports.OAuthResolverError = OAuthResolverError;

},{"dbb733a5938cc00a":"gcE23"}],"1CyeX":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OAuthServerFactory = void 0;
const oauth_server_agent_js_1 = require("492129b38147c35d");
class OAuthServerFactory {
    constructor(clientMetadata, runtime, resolver, fetch, keyset, dpopNonceCache){
        Object.defineProperty(this, "clientMetadata", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: clientMetadata
        });
        Object.defineProperty(this, "runtime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: runtime
        });
        Object.defineProperty(this, "resolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: resolver
        });
        Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: fetch
        });
        Object.defineProperty(this, "keyset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: keyset
        });
        Object.defineProperty(this, "dpopNonceCache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: dpopNonceCache
        });
    }
    async fromIssuer(issuer, dpopKey, options) {
        const serverMetadata = await this.resolver.getAuthorizationServerMetadata(issuer, options);
        return this.fromMetadata(serverMetadata, dpopKey);
    }
    async fromMetadata(serverMetadata, dpopKey) {
        return new oauth_server_agent_js_1.OAuthServerAgent(dpopKey, serverMetadata, this.clientMetadata, this.dpopNonceCache, this.resolver, this.runtime, this.keyset, this.fetch);
    }
}
exports.OAuthServerFactory = OAuthServerFactory;

},{"492129b38147c35d":"bMhFI"}],"bMhFI":[function(require,module,exports,__globalThis) {
"use strict";
var __addDisposableResource = this && this.__addDisposableResource || function(env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose, inner;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
            if (async) inner = dispose;
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        if (inner) dispose = function() {
            try {
                inner.call(this);
            } catch (e) {
                return Promise.reject(e);
            }
        };
        env.stack.push({
            value: value,
            dispose: dispose,
            async: async
        });
    } else if (async) env.stack.push({
        async: true
    });
    return value;
};
var __disposeResources = this && this.__disposeResources || function(SuppressedError1) {
    return function(env) {
        function fail(e) {
            env.error = env.hasError ? new SuppressedError1(e, env.error, "An error was suppressed during disposal.") : e;
            env.hasError = true;
        }
        var r, s = 0;
        function next() {
            while(r = env.stack.pop())try {
                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
                if (r.dispose) {
                    var result = r.dispose.call(r.value);
                    if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {
                        fail(e);
                        return next();
                    });
                } else s |= 1;
            } catch (e) {
                fail(e);
            }
            if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
            if (env.hasError) throw env.error;
        }
        return next();
    };
}(typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OAuthServerAgent = void 0;
const oauth_types_1 = require("e350db21f38b49d7");
const fetch_1 = require("488e588a23a12d8e");
const atproto_token_response_js_1 = require("e2c48c438e4b7536");
const constants_js_1 = require("d432773d7ea08009");
const token_refresh_error_js_1 = require("14c457912704f329");
const fetch_dpop_js_1 = require("e96d5953edb7c464");
const oauth_response_error_js_1 = require("9e9205719da82bbb");
const util_js_1 = require("a410628e612ac556");
class OAuthServerAgent {
    constructor(dpopKey, serverMetadata, clientMetadata, dpopNonces, oauthResolver, runtime, keyset, fetch){
        Object.defineProperty(this, "dpopKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: dpopKey
        });
        Object.defineProperty(this, "serverMetadata", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: serverMetadata
        });
        Object.defineProperty(this, "clientMetadata", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: clientMetadata
        });
        Object.defineProperty(this, "dpopNonces", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: dpopNonces
        });
        Object.defineProperty(this, "oauthResolver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: oauthResolver
        });
        Object.defineProperty(this, "runtime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: runtime
        });
        Object.defineProperty(this, "keyset", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: keyset
        });
        Object.defineProperty(this, "dpopFetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.dpopFetch = (0, fetch_dpop_js_1.dpopFetchWrapper)({
            fetch: (0, fetch_1.bindFetch)(fetch),
            iss: clientMetadata.client_id,
            key: dpopKey,
            supportedAlgs: serverMetadata.dpop_signing_alg_values_supported,
            sha256: async (v)=>runtime.sha256(v),
            nonces: dpopNonces,
            isAuthServer: true
        });
    }
    get issuer() {
        return this.serverMetadata.issuer;
    }
    async revoke(token) {
        try {
            await this.request('revocation', {
                token
            });
        } catch  {
        // Don't care
        }
    }
    async exchangeCode(code, codeVerifier) {
        const now = Date.now();
        const tokenResponse = await this.request('token', {
            grant_type: 'authorization_code',
            redirect_uri: this.clientMetadata.redirect_uris[0],
            code,
            code_verifier: codeVerifier
        });
        try {
            // /!\ IMPORTANT /!\
            //
            // The tokenResponse MUST always be valid before the "sub" it contains
            // can be trusted (see Atproto's OAuth spec for details).
            const aud = await this.verifyIssuer(tokenResponse.sub);
            return {
                aud,
                sub: tokenResponse.sub,
                iss: this.issuer,
                scope: tokenResponse.scope,
                refresh_token: tokenResponse.refresh_token,
                access_token: tokenResponse.access_token,
                token_type: tokenResponse.token_type,
                expires_at: typeof tokenResponse.expires_in === 'number' ? new Date(now + tokenResponse.expires_in * 1000).toISOString() : undefined
            };
        } catch (err) {
            await this.revoke(tokenResponse.access_token);
            throw err;
        }
    }
    async refresh(tokenSet) {
        if (!tokenSet.refresh_token) throw new token_refresh_error_js_1.TokenRefreshError(tokenSet.sub, 'No refresh token available');
        // /!\ IMPORTANT /!\
        //
        // The "sub" MUST be a DID, whose issuer authority is indeed the server we
        // are trying to obtain credentials from. Note that we are doing this
        // *before* we actually try to refresh the token:
        // 1) To avoid unnecessary refresh
        // 2) So that the refresh is the last async operation, ensuring as few
        //    async operations happen before the result gets a chance to be stored.
        const aud = await this.verifyIssuer(tokenSet.sub);
        const now = Date.now();
        const tokenResponse = await this.request('token', {
            grant_type: 'refresh_token',
            refresh_token: tokenSet.refresh_token
        });
        return {
            aud,
            sub: tokenSet.sub,
            iss: this.issuer,
            scope: tokenResponse.scope,
            refresh_token: tokenResponse.refresh_token,
            access_token: tokenResponse.access_token,
            token_type: tokenResponse.token_type,
            expires_at: typeof tokenResponse.expires_in === 'number' ? new Date(now + tokenResponse.expires_in * 1000).toISOString() : undefined
        };
    }
    /**
     * VERY IMPORTANT ! Always call this to process token responses.
     *
     * Whenever an OAuth token response is received, we **MUST** verify that the
     * "sub" is a DID, whose issuer authority is indeed the server we just
     * obtained credentials from. This check is a critical step to actually be
     * able to use the "sub" (DID) as being the actual user's identifier.
     *
     * @returns The user's PDS URL (the resource server for the user)
     */ async verifyIssuer(sub) {
        const env_1 = {
            stack: [],
            error: void 0,
            hasError: false
        };
        try {
            const signal = __addDisposableResource(env_1, (0, util_js_1.timeoutSignal)(10e3), false);
            const resolved = await this.oauthResolver.resolveFromIdentity(sub, {
                noCache: true,
                allowStale: false,
                signal
            });
            if (this.issuer !== resolved.metadata.issuer) // Best case scenario; the user switched PDS. Worst case scenario; a bad
            // actor is trying to impersonate a user. In any case, we must not allow
            // this token to be used.
            throw new TypeError('Issuer mismatch');
            return resolved.identity.pds.href;
        } catch (e_1) {
            env_1.error = e_1;
            env_1.hasError = true;
        } finally{
            __disposeResources(env_1);
        }
    }
    async request(endpoint, payload) {
        const url = this.serverMetadata[`${endpoint}_endpoint`];
        if (!url) throw new Error(`No ${endpoint} endpoint available`);
        const auth = await this.buildClientAuth(endpoint);
        const { response, json } = await this.dpopFetch(url, {
            method: 'POST',
            headers: {
                ...auth.headers,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                ...payload,
                ...auth.payload
            })
        }).then((0, fetch_1.fetchJsonProcessor)());
        if (response.ok) switch(endpoint){
            case 'token':
                return atproto_token_response_js_1.atprotoTokenResponseSchema.parse(json);
            case 'pushed_authorization_request':
                return oauth_types_1.oauthParResponseSchema.parse(json);
            default:
                return json;
        }
        else throw new oauth_response_error_js_1.OAuthResponseError(response, json);
    }
    async buildClientAuth(endpoint) {
        const methodSupported = this.serverMetadata[`token_endpoint_auth_methods_supported`];
        const method = this.clientMetadata[`token_endpoint_auth_method`];
        if (method === 'private_key_jwt' || this.keyset && !method && (methodSupported?.includes('private_key_jwt') ?? false)) {
            if (!this.keyset) throw new Error('No keyset available');
            try {
                const alg = this.serverMetadata[`token_endpoint_auth_signing_alg_values_supported`] ?? constants_js_1.FALLBACK_ALG;
                // If jwks is defined, make sure to only sign using a key that exists in
                // the jwks. If jwks_uri is defined, we can't be sure that the key we're
                // looking for is in there so we will just assume it is.
                const kid = this.clientMetadata.jwks?.keys.map(({ kid })=>kid).filter((v)=>typeof v === 'string');
                return {
                    payload: {
                        client_id: this.clientMetadata.client_id,
                        client_assertion_type: oauth_types_1.CLIENT_ASSERTION_TYPE_JWT_BEARER,
                        client_assertion: await this.keyset.createJwt({
                            alg,
                            kid
                        }, {
                            iss: this.clientMetadata.client_id,
                            sub: this.clientMetadata.client_id,
                            aud: this.serverMetadata.issuer,
                            jti: await this.runtime.generateNonce(),
                            iat: Math.floor(Date.now() / 1000)
                        })
                    }
                };
            } catch (err) {
                if (method === 'private_key_jwt') throw err;
            // Else try next method
            }
        }
        if (method === 'none' || !method && (methodSupported?.includes('none') ?? true)) return {
            payload: {
                client_id: this.clientMetadata.client_id
            }
        };
        throw new Error(`Unsupported ${endpoint} authentication method`);
    }
}
exports.OAuthServerAgent = OAuthServerAgent;

},{"e350db21f38b49d7":"B9q5y","488e588a23a12d8e":"8GrWo","e2c48c438e4b7536":"7qgGv","d432773d7ea08009":"84hFR","14c457912704f329":"bUeSG","e96d5953edb7c464":"brr3V","9e9205719da82bbb":"3bSLV","a410628e612ac556":"7DcXL"}],"7qgGv":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.atprotoTokenResponseSchema = exports.atprotoScopeSchema = exports.isAtprotoScope = void 0;
const zod_1 = require("1478115ea0a64c74");
const did_1 = require("5ab3cee846fbca95");
const oauth_types_1 = require("d8edb39cab20f275");
const util_1 = require("7e10679acd816ae9");
const isAtprotoScope = (input)=>(0, util_1.includesSpaceSeparatedValue)(input, 'atproto');
exports.isAtprotoScope = isAtprotoScope;
exports.atprotoScopeSchema = zod_1.z.string().refine(exports.isAtprotoScope, 'The "atproto" scope is required');
exports.atprotoTokenResponseSchema = oauth_types_1.oauthTokenResponseSchema.extend({
    token_type: zod_1.z.literal('DPoP'),
    sub: did_1.atprotoDidSchema,
    scope: exports.atprotoScopeSchema,
    // OpenID is not compatible with atproto identities
    id_token: zod_1.z.never().optional()
});

},{"1478115ea0a64c74":"gcE23","5ab3cee846fbca95":"b74ep","d8edb39cab20f275":"B9q5y","7e10679acd816ae9":"7DcXL"}],"bUeSG":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TokenRefreshError = void 0;
class TokenRefreshError extends Error {
    constructor(sub, message, options){
        super(message, options);
        Object.defineProperty(this, "sub", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: sub
        });
    }
}
exports.TokenRefreshError = TokenRefreshError;

},{}],"brr3V":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.dpopFetchWrapper = dpopFetchWrapper;
const base64_1 = require("2dbdbf19bea74013");
const fetch_1 = require("f709fc0c84dafd29");
// "undefined" in non https environments or environments without crypto
const subtle = globalThis.crypto?.subtle;
const ReadableStream = globalThis.ReadableStream;
function dpopFetchWrapper({ key, iss, supportedAlgs, nonces, sha256 = typeof subtle !== 'undefined' ? subtleSha256 : undefined, isAuthServer, fetch = globalThis.fetch }) {
    if (!sha256) throw new TypeError(`crypto.subtle is not available in this environment. Please provide a sha256 function.`);
    const alg = negotiateAlg(key, supportedAlgs);
    return async function(input, init) {
        if (!key.algorithms.includes(alg)) throw new TypeError(`Key does not support the algorithm ${alg}`);
        const request = init == null && input instanceof Request ? input : new Request(input, init);
        const authorizationHeader = request.headers.get('Authorization');
        const ath = authorizationHeader?.startsWith('DPoP ') ? await sha256(authorizationHeader.slice(5)) : undefined;
        const { method, url } = request;
        const { origin } = new URL(url);
        let initNonce;
        try {
            initNonce = await nonces.get(origin);
        } catch  {
        // Ignore get errors, we will just not send a nonce
        }
        const initProof = await buildProof(key, alg, iss, method, url, initNonce, ath);
        request.headers.set('DPoP', initProof);
        const initResponse = await fetch.call(this, request);
        // Make sure the response body is consumed. Either by the caller (when the
        // response is returned), of if an error is thrown (catch block).
        const nextNonce = initResponse.headers.get('DPoP-Nonce');
        if (!nextNonce || nextNonce === initNonce) // No nonce was returned or it is the same as the one we sent. No need to
        // update the nonce store, or retry the request.
        return initResponse;
        // Store the fresh nonce for future requests
        try {
            await nonces.set(origin, nextNonce);
        } catch  {
        // Ignore set errors
        }
        const shouldRetry = await isUseDpopNonceError(initResponse, isAuthServer);
        if (!shouldRetry) // Not a "use_dpop_nonce" error, so there is no need to retry
        return initResponse;
        // If the input stream was already consumed, we cannot retry the request. A
        // solution would be to clone() the request but that would bufferize the
        // entire stream in memory which can lead to memory starvation. Instead, we
        // will return the original response and let the calling code handle retries.
        if (input === request) // The input request body was consumed. We cannot retry the request.
        return initResponse;
        if (ReadableStream && init?.body instanceof ReadableStream) // The init body was consumed. We cannot retry the request.
        return initResponse;
        // We will now retry the request with the fresh nonce.
        // The initial response body must be consumed (see cancelBody's doc).
        await (0, fetch_1.cancelBody)(initResponse, 'log');
        const nextProof = await buildProof(key, alg, iss, method, url, nextNonce, ath);
        const nextRequest = new Request(input, init);
        nextRequest.headers.set('DPoP', nextProof);
        return fetch.call(this, nextRequest);
    };
}
async function buildProof(key, alg, iss, htm, htu, nonce, ath) {
    if (!key.bareJwk) throw new Error('Only asymmetric keys can be used as DPoP proofs');
    const now = Math.floor(Date.now() / 1e3);
    return key.createJwt(// https://datatracker.ietf.org/doc/html/rfc9449#section-4.2
    {
        alg,
        typ: 'dpop+jwt',
        jwk: key.bareJwk
    }, {
        iss,
        iat: now,
        // Any collision will cause the request to be rejected by the server. no biggie.
        jti: Math.random().toString(36).slice(2),
        htm,
        htu,
        nonce,
        ath
    });
}
async function isUseDpopNonceError(response, isAuthServer) {
    // https://datatracker.ietf.org/doc/html/rfc6750#section-3
    // https://datatracker.ietf.org/doc/html/rfc9449#name-resource-server-provided-no
    if (isAuthServer === undefined || isAuthServer === false) {
        if (response.status === 401) {
            const wwwAuth = response.headers.get('WWW-Authenticate');
            if (wwwAuth?.startsWith('DPoP')) return wwwAuth.includes('error="use_dpop_nonce"');
        }
    }
    // https://datatracker.ietf.org/doc/html/rfc9449#name-authorization-server-provid
    if (isAuthServer === undefined || isAuthServer === true) {
        if (response.status === 400) try {
            const json = await (0, fetch_1.peekJson)(response, 10240);
            return typeof json === 'object' && json?.['error'] === 'use_dpop_nonce';
        } catch  {
            // Response too big (to be "use_dpop_nonce" error) or invalid JSON
            return false;
        }
    }
    return false;
}
function negotiateAlg(key, supportedAlgs) {
    if (supportedAlgs) {
        // Use order of supportedAlgs as preference
        const alg = supportedAlgs.find((a)=>key.algorithms.includes(a));
        if (alg) return alg;
    } else {
        const [alg] = key.algorithms;
        if (alg) return alg;
    }
    throw new Error('Key does not match any alg supported by the server');
}
async function subtleSha256(input) {
    if (subtle == null) throw new Error(`crypto.subtle is not available in this environment. Please provide a sha256 function.`);
    const bytes = new TextEncoder().encode(input);
    const digest = await subtle.digest('SHA-256', bytes);
    const digestBytes = new Uint8Array(digest);
    return base64_1.base64url.baseEncode(digestBytes);
}

},{"2dbdbf19bea74013":"jzjLH","f709fc0c84dafd29":"8GrWo"}],"3bSLV":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OAuthResponseError = void 0;
const util_js_1 = require("51a16f28793cc770");
class OAuthResponseError extends Error {
    constructor(response, payload){
        const objPayload = typeof payload === 'object' ? payload : undefined;
        const error = (0, util_js_1.ifString)(objPayload?.['error']);
        const errorDescription = (0, util_js_1.ifString)(objPayload?.['error_description']);
        const messageError = error ? `"${error}"` : 'unknown';
        const messageDesc = errorDescription ? `: ${errorDescription}` : '';
        const message = `OAuth ${messageError} error${messageDesc}`;
        super(message);
        Object.defineProperty(this, "response", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: response
        });
        Object.defineProperty(this, "payload", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: payload
        });
        Object.defineProperty(this, "error", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "errorDescription", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.error = error;
        this.errorDescription = errorDescription;
    }
    get status() {
        return this.response.status;
    }
    get headers() {
        return this.response.headers;
    }
}
exports.OAuthResponseError = OAuthResponseError;

},{"51a16f28793cc770":"7DcXL"}],"1jidt":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OAuthSession = void 0;
const fetch_1 = require("eb0b034dbd26cbd8");
const token_invalid_error_js_1 = require("124f89ce38ec5858");
const token_revoked_error_js_1 = require("87e4746a58ae04ee");
const fetch_dpop_js_1 = require("b0cd3d041c79ef16");
const ReadableStream = globalThis.ReadableStream;
class OAuthSession {
    constructor(server, sub, sessionGetter, fetch = globalThis.fetch){
        Object.defineProperty(this, "server", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: server
        });
        Object.defineProperty(this, "sub", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: sub
        });
        Object.defineProperty(this, "sessionGetter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: sessionGetter
        });
        Object.defineProperty(this, "dpopFetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.dpopFetch = (0, fetch_dpop_js_1.dpopFetchWrapper)({
            fetch: (0, fetch_1.bindFetch)(fetch),
            iss: server.clientMetadata.client_id,
            key: server.dpopKey,
            supportedAlgs: server.serverMetadata.dpop_signing_alg_values_supported,
            sha256: async (v)=>server.runtime.sha256(v),
            nonces: server.dpopNonces,
            isAuthServer: false
        });
    }
    get did() {
        return this.sub;
    }
    get serverMetadata() {
        return this.server.serverMetadata;
    }
    /**
     * @param refresh When `true`, the credentials will be refreshed even if they
     * are not expired. When `false`, the credentials will not be refreshed even
     * if they are expired. When `undefined`, the credentials will be refreshed
     * if, and only if, they are (about to be) expired. Defaults to `undefined`.
     */ async getTokenSet(refresh) {
        const { tokenSet } = await this.sessionGetter.get(this.sub, {
            noCache: refresh === true,
            allowStale: refresh === false
        });
        return tokenSet;
    }
    async getTokenInfo(refresh = 'auto') {
        const tokenSet = await this.getTokenSet(refresh);
        const expiresAt = tokenSet.expires_at == null ? undefined : new Date(tokenSet.expires_at);
        return {
            expiresAt,
            get expired () {
                return expiresAt == null ? undefined : expiresAt.getTime() < Date.now() - 5e3;
            },
            scope: tokenSet.scope,
            iss: tokenSet.iss,
            aud: tokenSet.aud,
            sub: tokenSet.sub
        };
    }
    async signOut() {
        try {
            const tokenSet = await this.getTokenSet(false);
            await this.server.revoke(tokenSet.access_token);
        } finally{
            await this.sessionGetter.delStored(this.sub, new token_revoked_error_js_1.TokenRevokedError(this.sub));
        }
    }
    async fetchHandler(pathname, init) {
        // This will try and refresh the token if it is known to be expired
        const tokenSet = await this.getTokenSet('auto');
        const initialUrl = new URL(pathname, tokenSet.aud);
        const initialAuth = `${tokenSet.token_type} ${tokenSet.access_token}`;
        const headers = new Headers(init?.headers);
        headers.set('Authorization', initialAuth);
        const initialResponse = await this.dpopFetch(initialUrl, {
            ...init,
            headers
        });
        // If the token is not expired, we don't need to refresh it
        if (!isInvalidTokenResponse(initialResponse)) return initialResponse;
        let tokenSetFresh;
        try {
            // Force a refresh
            tokenSetFresh = await this.getTokenSet(true);
        } catch (err) {
            return initialResponse;
        }
        // The stream was already consumed. We cannot retry the request. A solution
        // would be to tee() the input stream but that would bufferize the entire
        // stream in memory which can lead to memory starvation. Instead, we will
        // return the original response and let the calling code handle retries.
        if (ReadableStream && init?.body instanceof ReadableStream) return initialResponse;
        const finalAuth = `${tokenSetFresh.token_type} ${tokenSetFresh.access_token}`;
        const finalUrl = new URL(pathname, tokenSetFresh.aud);
        headers.set('Authorization', finalAuth);
        const finalResponse = await this.dpopFetch(finalUrl, {
            ...init,
            headers
        });
        // The token was successfully refreshed, but is still not accepted by the
        // resource server. This might be due to the resource server not accepting
        // credentials from the authorization server (e.g. because some migration
        // occurred). Any ways, there is no point in keeping the session.
        if (isInvalidTokenResponse(finalResponse)) // @TODO Is there a "softer" way to handle this, e.g. by marking the
        // session as "expired" in the session store, allowing the user to trigger
        // a new login (using login_hint)?
        await this.sessionGetter.delStored(this.sub, new token_invalid_error_js_1.TokenInvalidError(this.sub));
        return finalResponse;
    }
}
exports.OAuthSession = OAuthSession;
/**
 * @see {@link https://datatracker.ietf.org/doc/html/rfc6750#section-3}
 * @see {@link https://datatracker.ietf.org/doc/html/rfc9449#name-resource-server-provided-no}
 */ function isInvalidTokenResponse(response) {
    if (response.status !== 401) return false;
    const wwwAuth = response.headers.get('WWW-Authenticate');
    return wwwAuth != null && (wwwAuth.startsWith('Bearer ') || wwwAuth.startsWith('DPoP ')) && wwwAuth.includes('error="invalid_token"');
}

},{"eb0b034dbd26cbd8":"8GrWo","124f89ce38ec5858":"8DgfL","87e4746a58ae04ee":"bC4BG","b0cd3d041c79ef16":"brr3V"}],"8DgfL":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TokenInvalidError = void 0;
class TokenInvalidError extends Error {
    constructor(sub, message = `The session for "${sub}" is invalid`, options){
        super(message, options);
        Object.defineProperty(this, "sub", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: sub
        });
    }
}
exports.TokenInvalidError = TokenInvalidError;

},{}],"fAke0":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Runtime = void 0;
const base64_1 = require("43c3e004dda33b95");
const lock_js_1 = require("727b3f3220173589");
class Runtime {
    constructor(implementation){
        Object.defineProperty(this, "implementation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: implementation
        });
        Object.defineProperty(this, "hasImplementationLock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "usingLock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        const { requestLock } = implementation;
        this.hasImplementationLock = requestLock != null;
        this.usingLock = requestLock?.bind(implementation) || // Falling back to a local lock
        lock_js_1.requestLocalLock;
    }
    async generateKey(algs) {
        const algsSorted = Array.from(algs).sort(compareAlgos);
        return this.implementation.createKey(algsSorted);
    }
    async sha256(text) {
        const bytes = new TextEncoder().encode(text);
        const digest = await this.implementation.digest(bytes, {
            name: 'sha256'
        });
        return base64_1.base64url.baseEncode(digest);
    }
    async generateNonce(length = 16) {
        const bytes = await this.implementation.getRandomValues(length);
        return base64_1.base64url.baseEncode(bytes);
    }
    async generatePKCE(byteLength) {
        const verifier = await this.generateVerifier(byteLength);
        return {
            verifier,
            challenge: await this.sha256(verifier),
            method: 'S256'
        };
    }
    async calculateJwkThumbprint(jwk) {
        const components = extractJktComponents(jwk);
        const data = JSON.stringify(components);
        return this.sha256(data);
    }
    /**
     * @see {@link https://datatracker.ietf.org/doc/html/rfc7636#section-4.1}
     * @note It is RECOMMENDED that the output of a suitable random number generator
     * be used to create a 32-octet sequence. The octet sequence is then
     * base64url-encoded to produce a 43-octet URL safe string to use as the code
     * verifier.
     */ async generateVerifier(byteLength = 32) {
        if (byteLength < 32 || byteLength > 96) throw new TypeError('Invalid code_verifier length');
        const bytes = await this.implementation.getRandomValues(byteLength);
        return base64_1.base64url.baseEncode(bytes);
    }
}
exports.Runtime = Runtime;
function extractJktComponents(jwk) {
    const get = (field)=>{
        const value = jwk[field];
        if (typeof value !== 'string' || !value) throw new TypeError(`"${field}" Parameter missing or invalid`);
        return value;
    };
    switch(jwk.kty){
        case 'EC':
            return {
                crv: get('crv'),
                kty: get('kty'),
                x: get('x'),
                y: get('y')
            };
        case 'OKP':
            return {
                crv: get('crv'),
                kty: get('kty'),
                x: get('x')
            };
        case 'RSA':
            return {
                e: get('e'),
                kty: get('kty'),
                n: get('n')
            };
        case 'oct':
            return {
                k: get('k'),
                kty: get('kty')
            };
        default:
            throw new TypeError('"kty" (Key Type) Parameter missing or unsupported');
    }
}
/**
 * 256K > ES (256 > 384 > 512) > PS (256 > 384 > 512) > RS (256 > 384 > 512) > other (in original order)
 */ function compareAlgos(a, b) {
    if (a === 'ES256K') return -1;
    if (b === 'ES256K') return 1;
    for (const prefix of [
        'ES',
        'PS',
        'RS'
    ]){
        if (a.startsWith(prefix)) {
            if (b.startsWith(prefix)) {
                const aLen = parseInt(a.slice(2, 5));
                const bLen = parseInt(b.slice(2, 5));
                // Prefer shorter key lengths
                return aLen - bLen;
            }
            return -1;
        } else if (b.startsWith(prefix)) return 1;
    }
    // Don't know how to compare, keep original order
    return 0;
}

},{"43c3e004dda33b95":"jzjLH","727b3f3220173589":"fJD45"}],"fJD45":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.requestLocalLock = void 0;
const locks = new Map();
function acquireLocalLock(name) {
    return new Promise((resolveAcquire)=>{
        const prev = locks.get(name) ?? Promise.resolve();
        const next = prev.then(()=>{
            return new Promise((resolveRelease)=>{
                const release = ()=>{
                    // Only delete the lock if it is still the current one
                    if (locks.get(name) === next) locks.delete(name);
                    resolveRelease();
                };
                resolveAcquire(release);
            });
        });
        locks.set(name, next);
    });
}
const requestLocalLock = (name, fn)=>{
    return acquireLocalLock(name).then(async (release)=>{
        try {
            return await fn();
        } finally{
            release();
        }
    });
};
exports.requestLocalLock = requestLocalLock;

},{}],"9raN3":[function(require,module,exports,__globalThis) {
"use strict";
var __addDisposableResource = this && this.__addDisposableResource || function(env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose, inner;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
            if (async) inner = dispose;
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        if (inner) dispose = function() {
            try {
                inner.call(this);
            } catch (e) {
                return Promise.reject(e);
            }
        };
        env.stack.push({
            value: value,
            dispose: dispose,
            async: async
        });
    } else if (async) env.stack.push({
        async: true
    });
    return value;
};
var __disposeResources = this && this.__disposeResources || function(SuppressedError1) {
    return function(env) {
        function fail(e) {
            env.error = env.hasError ? new SuppressedError1(e, env.error, "An error was suppressed during disposal.") : e;
            env.hasError = true;
        }
        var r, s = 0;
        function next() {
            while(r = env.stack.pop())try {
                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
                if (r.dispose) {
                    var result = r.dispose.call(r.value);
                    if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {
                        fail(e);
                        return next();
                    });
                } else s |= 1;
            } catch (e) {
                fail(e);
            }
            if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
            if (env.hasError) throw env.error;
        }
        return next();
    };
}(typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SessionGetter = void 0;
const simple_store_1 = require("6dc398a563c99c0c");
const token_invalid_error_js_1 = require("dafc84d4b348fcfa");
const token_refresh_error_js_1 = require("f840eb027dda190e");
const token_revoked_error_js_1 = require("21df6643ed7b05f3");
const oauth_response_error_js_1 = require("cfa71ab647dda398");
const util_js_1 = require("a7311df1d5fd76b8");
/**
 * There are several advantages to wrapping the sessionStore in a (single)
 * CachedGetter, the main of which is that the cached getter will ensure that at
 * most one fresh call is ever being made. Another advantage, is that it
 * contains the logic for reading from the cache which, if the cache is based on
 * localStorage/indexedDB, will sync across multiple tabs (for a given sub).
 */ class SessionGetter extends simple_store_1.CachedGetter {
    constructor(sessionStore, serverFactory, runtime){
        super(async (sub, options, storedSession)=>{
            // There needs to be a previous session to be able to refresh. If
            // storedSession is undefined, it means that the store does not contain
            // a session for the given sub.
            if (storedSession === undefined) {
                // Because the session is not in the store, this.delStored() method
                // will not be called by the CachedGetter class (because there is
                // nothing to delete). This would typically happen if there is no
                // synchronization mechanism between instances of this class. Let's
                // make sure an event is dispatched here if this occurs.
                const msg = 'The session was deleted by another process';
                const cause = new token_refresh_error_js_1.TokenRefreshError(sub, msg);
                this.dispatchEvent('deleted', {
                    sub,
                    cause
                });
                throw cause;
            }
            // From this point forward, throwing a TokenRefreshError will result in
            // this.delStored() being called, resulting in an event being
            // dispatched, even if the session was removed from the store through a
            // concurrent access (which, normally, should not happen if a proper
            // runtime lock was provided).
            const { dpopKey, tokenSet } = storedSession;
            if (sub !== tokenSet.sub) // Fool-proofing (e.g. against invalid session storage)
            throw new token_refresh_error_js_1.TokenRefreshError(sub, 'Stored session sub mismatch');
            if (!tokenSet.refresh_token) throw new token_refresh_error_js_1.TokenRefreshError(sub, 'No refresh token available');
            // Since refresh tokens can only be used once, we might run into
            // concurrency issues if multiple instances (e.g. browser tabs) are
            // trying to refresh the same token simultaneously. The chances of this
            // happening when multiple instances are started simultaneously is
            // reduced by randomizing the expiry time (see isStale() below). The
            // best solution is to use a mutex/lock to ensure that only one instance
            // is refreshing the token at a time (runtime.usingLock) but that is not
            // always possible. If no lock implementation is provided, we will use
            // the store to check if a concurrent refresh occurred.
            const server = await serverFactory.fromIssuer(tokenSet.iss, dpopKey);
            // Because refresh tokens can only be used once, we must not use the
            // "signal" to abort the refresh, or throw any abort error beyond this
            // point. Any thrown error beyond this point will prevent the
            // TokenGetter from obtaining, and storing, the new token set,
            // effectively rendering the currently saved session unusable.
            options?.signal?.throwIfAborted();
            try {
                const newTokenSet = await server.refresh(tokenSet);
                if (sub !== newTokenSet.sub) // The server returned another sub. Was the tokenSet manipulated?
                throw new token_refresh_error_js_1.TokenRefreshError(sub, 'Token set sub mismatch');
                return {
                    dpopKey,
                    tokenSet: newTokenSet
                };
            } catch (cause) {
                // If the refresh token is invalid, let's try to recover from
                // concurrency issues, or make sure the session is deleted by throwing
                // a TokenRefreshError.
                if (cause instanceof oauth_response_error_js_1.OAuthResponseError && cause.status === 400 && cause.error === 'invalid_grant') {
                    // In case there is no lock implementation in the runtime, we will
                    // wait for a short time to give the other concurrent instances a
                    // chance to finish their refreshing of the token. If a concurrent
                    // refresh did occur, we will pretend that this one succeeded.
                    if (!runtime.hasImplementationLock) {
                        await new Promise((r)=>setTimeout(r, 1000));
                        const stored = await this.getStored(sub);
                        if (stored === undefined) {
                            // A concurrent refresh occurred and caused the session to be
                            // deleted (for a reason we can't know at this point).
                            // Using a distinct error message mainly for debugging
                            // purposes. Also, throwing a TokenRefreshError to trigger
                            // deletion through the deleteOnError callback.
                            const msg = 'The session was deleted by another process';
                            throw new token_refresh_error_js_1.TokenRefreshError(sub, msg, {
                                cause
                            });
                        } else if (stored.tokenSet.access_token !== tokenSet.access_token || stored.tokenSet.refresh_token !== tokenSet.refresh_token) // A concurrent refresh occurred. Pretend this one succeeded.
                        return stored;
                    }
                    // Make sure the session gets deleted from the store
                    const msg = cause.errorDescription ?? 'The session was revoked';
                    throw new token_refresh_error_js_1.TokenRefreshError(sub, msg, {
                        cause
                    });
                }
                throw cause;
            }
        }, sessionStore, {
            isStale: (sub, { tokenSet })=>{
                return tokenSet.expires_at != null && new Date(tokenSet.expires_at).getTime() < Date.now() + // Add some lee way to ensure the token is not expired when it
                // reaches the server.
                10e3 + // Add some randomness to reduce the chances of multiple
                // instances trying to refresh the token at the same.
                30e3 * Math.random();
            },
            onStoreError: async (err, sub, { tokenSet, dpopKey })=>{
                // If the token data cannot be stored, let's revoke it
                const server = await serverFactory.fromIssuer(tokenSet.iss, dpopKey);
                await server.revoke(tokenSet.refresh_token ?? tokenSet.access_token);
                throw err;
            },
            deleteOnError: async (err)=>// Optimization: More likely to happen first
                err instanceof token_refresh_error_js_1.TokenRefreshError || err instanceof token_revoked_error_js_1.TokenRevokedError || err instanceof token_invalid_error_js_1.TokenInvalidError
        });
        Object.defineProperty(this, "runtime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: runtime
        });
        Object.defineProperty(this, "eventTarget", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new util_js_1.CustomEventTarget()
        });
    }
    addEventListener(type, callback, options) {
        this.eventTarget.addEventListener(type, callback, options);
    }
    removeEventListener(type, callback, options) {
        this.eventTarget.removeEventListener(type, callback, options);
    }
    dispatchEvent(type, detail) {
        return this.eventTarget.dispatchCustomEvent(type, detail);
    }
    async setStored(sub, session) {
        // Prevent tampering with the stored value
        if (sub !== session.tokenSet.sub) throw new TypeError('Token set does not match the expected sub');
        await super.setStored(sub, session);
        this.dispatchEvent('updated', {
            sub,
            ...session
        });
    }
    async delStored(sub, cause) {
        await super.delStored(sub, cause);
        this.dispatchEvent('deleted', {
            sub,
            cause
        });
    }
    /**
     * @param refresh When `true`, the credentials will be refreshed even if they
     * are not expired. When `false`, the credentials will not be refreshed even
     * if they are expired. When `undefined`, the credentials will be refreshed
     * if, and only if, they are (about to be) expired. Defaults to `undefined`.
     */ async getSession(sub, refresh) {
        return this.get(sub, {
            noCache: refresh === true,
            allowStale: refresh === false
        });
    }
    async get(sub, options) {
        const session = await this.runtime.usingLock(`@atproto-oauth-client-${sub}`, async ()=>{
            const env_1 = {
                stack: [],
                error: void 0,
                hasError: false
            };
            try {
                // Make sure, even if there is no signal in the options, that the
                // request will be cancelled after at most 30 seconds.
                const signal = __addDisposableResource(env_1, (0, util_js_1.timeoutSignal)(30e3, options), false);
                const abortController = __addDisposableResource(env_1, (0, util_js_1.combineSignals)([
                    options?.signal,
                    signal
                ]), false);
                return await super.get(sub, {
                    ...options,
                    signal: abortController.signal
                });
            } catch (e_1) {
                env_1.error = e_1;
                env_1.hasError = true;
            } finally{
                __disposeResources(env_1);
            }
        });
        if (sub !== session.tokenSet.sub) // Fool-proofing (e.g. against invalid session storage)
        throw new Error('Token set does not match the expected sub');
        return session;
    }
}
exports.SessionGetter = SessionGetter;

},{"6dc398a563c99c0c":"27R7J","dafc84d4b348fcfa":"8DgfL","f840eb027dda190e":"bUeSG","21df6643ed7b05f3":"bC4BG","cfa71ab647dda398":"3bSLV","a7311df1d5fd76b8":"7DcXL"}],"cR0vb":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validateClientMetadata = validateClientMetadata;
const oauth_types_1 = require("7d25edda7023676b");
const types_js_1 = require("ab76c392dc5eb0ad");
const TOKEN_ENDPOINT_AUTH_METHOD = `token_endpoint_auth_method`;
const TOKEN_ENDPOINT_AUTH_SIGNING_ALG = `token_endpoint_auth_signing_alg`;
function validateClientMetadata(input, keyset) {
    if (input.jwks) {
        if (!keyset) throw new TypeError(`Keyset must not be provided when jwks is provided`);
        for (const key of input.jwks.keys){
            if (!key.kid) throw new TypeError(`Key must have a "kid" property`);
            else if (!keyset.has(key.kid)) throw new TypeError(`Key with kid "${key.kid}" not found in keyset`);
        }
    }
    // Allow to pass a keyset and omit the jwks/jwks_uri properties
    if (!input.jwks && !input.jwks_uri && keyset?.size) input = {
        ...input,
        jwks: keyset.toJSON()
    };
    const metadata = types_js_1.clientMetadataSchema.parse(input);
    // Validate client ID
    if (metadata.client_id.startsWith('http:')) (0, oauth_types_1.assertOAuthLoopbackClientId)(metadata.client_id);
    else (0, oauth_types_1.assertOAuthDiscoverableClientId)(metadata.client_id);
    const scopes = metadata.scope?.split(' ');
    if (!scopes?.includes('atproto')) throw new TypeError(`Client metadata must include the "atproto" scope`);
    if (!metadata.response_types.includes('code')) throw new TypeError(`"response_types" must include "code"`);
    if (!metadata.grant_types.includes('authorization_code')) throw new TypeError(`"grant_types" must include "authorization_code"`);
    const method = metadata[TOKEN_ENDPOINT_AUTH_METHOD];
    switch(method){
        case undefined:
            throw new TypeError(`${TOKEN_ENDPOINT_AUTH_METHOD} must be provided`);
        case 'none':
            if (metadata[TOKEN_ENDPOINT_AUTH_SIGNING_ALG]) throw new TypeError(`${TOKEN_ENDPOINT_AUTH_SIGNING_ALG} must not be provided when ${TOKEN_ENDPOINT_AUTH_METHOD} is "${method}"`);
            break;
        case 'private_key_jwt':
            if (!keyset?.size) throw new TypeError(`A non-empty keyset must be provided when ${TOKEN_ENDPOINT_AUTH_METHOD} is "${method}"`);
            if (!metadata[TOKEN_ENDPOINT_AUTH_SIGNING_ALG]) throw new TypeError(`${TOKEN_ENDPOINT_AUTH_SIGNING_ALG} must be provided when ${TOKEN_ENDPOINT_AUTH_METHOD} is "${method}"`);
            break;
        default:
            throw new TypeError(`Invalid "token_endpoint_auth_method" value: ${method}`);
    }
    return metadata;
}

},{"7d25edda7023676b":"B9q5y","ab76c392dc5eb0ad":"ehXE1"}],"ehXE1":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.clientMetadataSchema = void 0;
const zod_1 = require("6089a382cdeeeb8d");
const oauth_types_1 = require("8b845d5004e26a97");
exports.clientMetadataSchema = oauth_types_1.oauthClientMetadataSchema.extend({
    client_id: zod_1.z.union([
        oauth_types_1.oauthClientIdDiscoverableSchema,
        oauth_types_1.oauthClientIdLoopbackSchema
    ])
});

},{"6089a382cdeeeb8d":"gcE23","8b845d5004e26a97":"B9q5y"}],"gG1N4":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"d2zT1":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"kke79":[function(require,module,exports,__globalThis) {
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BrowserOAuthClient = void 0;
const oauth_client_1 = require("def2b9426c4aeb61");
const oauth_types_1 = require("b6bfe6bcea687c82");
const browser_oauth_database_js_1 = require("663ac65aec2accc7");
const browser_runtime_implementation_js_1 = require("4a3b055377e319f0");
const errors_js_1 = require("f504a47c2c50a497");
const util_js_1 = require("e6f1ab531d0712d1");
const NAMESPACE = `@@atproto/oauth-client-browser`;
//- Popup channel
const POPUP_CHANNEL_NAME = `${NAMESPACE}(popup-channel)`;
const POPUP_STATE_PREFIX = `${NAMESPACE}(popup-state):`;
const syncChannel = new BroadcastChannel(`${NAMESPACE}(synchronization-channel)`);
class BrowserOAuthClient extends oauth_client_1.OAuthClient {
    static async load({ clientId, ...options }) {
        if (clientId.startsWith('http:')) {
            const clientMetadata = (0, oauth_types_1.atprotoLoopbackClientMetadata)(clientId);
            return new BrowserOAuthClient({
                clientMetadata,
                ...options
            });
        } else if (clientId.startsWith('https:')) {
            (0, oauth_types_1.assertOAuthDiscoverableClientId)(clientId);
            const clientMetadata = await oauth_client_1.OAuthClient.fetchMetadata({
                clientId,
                ...options
            });
            return new BrowserOAuthClient({
                clientMetadata,
                ...options
            });
        } else throw new TypeError(`Invalid client id: ${clientId}`);
    }
    constructor({ clientMetadata = (0, oauth_types_1.atprotoLoopbackClientMetadata)((0, util_js_1.buildLoopbackClientId)(window.location)), // "fragment" is a safer default as the query params will not be sent to the server
    responseMode = 'fragment', ...options }){
        if (!globalThis.crypto?.subtle) throw new Error('WebCrypto API is required');
        if (![
            'query',
            'fragment'
        ].includes(responseMode)) // Make sure "form_post" is not used as it is not supported in the browser
        throw new TypeError(`Invalid response mode: ${responseMode}`);
        const database = new browser_oauth_database_js_1.BrowserOAuthDatabase();
        super({
            ...options,
            clientMetadata,
            responseMode,
            keyset: undefined,
            runtimeImplementation: new browser_runtime_implementation_js_1.BrowserRuntimeImplementation(),
            sessionStore: database.getSessionStore(),
            stateStore: database.getStateStore(),
            didCache: database.getDidCache(),
            handleCache: database.getHandleCache(),
            dpopNonceCache: database.getDpopNonceCache(),
            authorizationServerMetadataCache: database.getAuthorizationServerMetadataCache(),
            protectedResourceMetadataCache: database.getProtectedResourceMetadataCache()
        });
        Object.defineProperty(this, _a, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // @TODO replace with AsyncDisposableStack once they are standardized
        const ac = new AbortController();
        const { signal } = ac;
        this[Symbol.dispose] = ()=>ac.abort();
        signal.addEventListener('abort', ()=>database[Symbol.asyncDispose](), {
            once: true
        });
        // Keep track of the current session
        this.addEventListener('deleted', ({ detail: { sub } })=>{
            if (localStorage.getItem(`${NAMESPACE}(sub)`) === sub) localStorage.removeItem(`${NAMESPACE}(sub)`);
        });
        // Session synchronization across tabs
        for (const type of [
            'deleted',
            'updated'
        ])this.sessionGetter.addEventListener(type, ({ detail })=>{
            // Notify other tabs when a session is deleted or updated
            syncChannel.postMessage([
                type,
                detail
            ]);
        });
        syncChannel.addEventListener('message', (event)=>{
            if (event.source !== window) {
                // Trigger listeners when an event is received from another tab
                const [type, detail] = event.data;
                this.dispatchCustomEvent(type, detail);
            }
        }, // Remove the listener when the client is disposed
        {
            signal
        });
    }
    async init(refresh) {
        await fixLocation(this.clientMetadata);
        const signInResult = await this.signInCallback();
        if (signInResult) {
            localStorage.setItem(`${NAMESPACE}(sub)`, signInResult.session.sub);
            return signInResult;
        }
        const sub = localStorage.getItem(`${NAMESPACE}(sub)`);
        if (sub) try {
            const session = await this.restore(sub, refresh);
            return {
                session
            };
        } catch (err) {
            localStorage.removeItem(`${NAMESPACE}(sub)`);
            throw err;
        }
    }
    async restore(sub, refresh) {
        const session = await super.restore(sub, refresh);
        localStorage.setItem(`${NAMESPACE}(sub)`, session.sub);
        return session;
    }
    async revoke(sub) {
        localStorage.removeItem(`${NAMESPACE}(sub)`);
        return super.revoke(sub);
    }
    async signIn(input, options) {
        if (options?.display === 'popup') return this.signInPopup(input, options);
        else return this.signInRedirect(input, options);
    }
    async signInRedirect(input, options) {
        const url = await this.authorize(input, options);
        window.location.href = url.href;
        // back-forward cache
        return new Promise((resolve, reject)=>{
            setTimeout((err)=>{
                // Take the opportunity to proactively cancel the pending request
                this.abortRequest(url).then(()=>reject(err), (reason)=>reject(new AggregateError([
                        err,
                        reason
                    ])));
            }, 5e3, new Error('User navigated back'));
        });
    }
    async signInPopup(input, options) {
        // Open new window asap to prevent popup busting by browsers
        const popupFeatures = 'width=600,height=600,menubar=no,toolbar=no';
        let popup = window.open('about:blank', '_blank', popupFeatures);
        const stateKey = `${Math.random().toString(36).slice(2)}`;
        const url = await this.authorize(input, {
            ...options,
            state: `${POPUP_STATE_PREFIX}${stateKey}`,
            display: options?.display ?? 'popup'
        });
        options?.signal?.throwIfAborted();
        if (popup) popup.window.location.href = url.href;
        else popup = window.open(url.href, '_blank', popupFeatures);
        popup?.focus();
        return new Promise((resolve, reject)=>{
            const popupChannel = new BroadcastChannel(POPUP_CHANNEL_NAME);
            const cleanup = ()=>{
                clearTimeout(timeout);
                popupChannel.removeEventListener('message', onMessage);
                popupChannel.close();
                options?.signal?.removeEventListener('abort', cancel);
                popup?.close();
            };
            const cancel = ()=>{
                // @TODO Store fact that the request was cancelled, allowing any
                // callback (e.g. in the popup) to revoke the session or credentials.
                reject(new Error(options?.signal?.aborted ? 'Aborted' : 'Timeout'));
                cleanup();
            };
            options?.signal?.addEventListener('abort', cancel);
            const timeout = setTimeout(cancel, 300000);
            const onMessage = async ({ data })=>{
                if (data.key !== stateKey) return;
                if (!('result' in data)) return;
                // Send acknowledgment to popup window
                popupChannel.postMessage({
                    key: stateKey,
                    ack: true
                });
                cleanup();
                const { result } = data;
                if (result.status === 'fulfilled') {
                    const sub = result.value;
                    try {
                        options?.signal?.throwIfAborted();
                        resolve(await this.restore(sub, false));
                    } catch (err) {
                        reject(err);
                        this.revoke(sub);
                    }
                } else {
                    const { message, params } = result.reason;
                    reject(new oauth_client_1.OAuthCallbackError(new URLSearchParams(params), message));
                }
            };
            popupChannel.addEventListener('message', onMessage);
        });
    }
    readCallbackParams() {
        const params = this.responseMode === 'fragment' ? new URLSearchParams(location.hash.slice(1)) : new URLSearchParams(location.search);
        // Only if the current URL contains a valid oauth response params
        if (!params.has('state') || !(params.has('code') || params.has('error'))) return null;
        const matchesLocation = (url)=>location.origin === url.origin && location.pathname === url.pathname;
        const redirectUrls = this.clientMetadata.redirect_uris.map((uri)=>new URL(uri));
        // Only if the current URL is one of the redirect_uris
        if (!redirectUrls.some(matchesLocation)) return null;
        return params;
    }
    async signInCallback() {
        const params = this.readCallbackParams();
        // Not a (valid) OAuth redirect
        if (!params) return null;
        // Replace the current history entry without the params (this will prevent
        // the following code to run again if the user refreshes the page)
        if (this.responseMode === 'fragment') history.replaceState(null, '', location.pathname + location.search);
        else if (this.responseMode === 'query') history.replaceState(null, '', location.pathname);
        // Utility function to send the result of the popup to the parent window
        const sendPopupResult = (message)=>{
            const popupChannel = new BroadcastChannel(POPUP_CHANNEL_NAME);
            return new Promise((resolve)=>{
                const cleanup = (result)=>{
                    clearTimeout(timer);
                    popupChannel.removeEventListener('message', onMessage);
                    popupChannel.close();
                    resolve(result);
                };
                const onMessage = ({ data })=>{
                    if ('ack' in data && message.key === data.key) cleanup(true);
                };
                popupChannel.addEventListener('message', onMessage);
                popupChannel.postMessage(message);
                // Receiving of "ack" should be very fast, giving it 500 ms anyway
                const timer = setTimeout(cleanup, 500, false);
            });
        };
        return this.callback(params).then(async (result)=>{
            if (result.state?.startsWith(POPUP_STATE_PREFIX)) {
                const receivedByParent = await sendPopupResult({
                    key: result.state.slice(POPUP_STATE_PREFIX.length),
                    result: {
                        status: 'fulfilled',
                        value: result.session.sub
                    }
                });
                // Revoke the credentials if the parent window was closed
                if (!receivedByParent) await result.session.signOut();
                throw new errors_js_1.LoginContinuedInParentWindowError(); // signInPopup
            }
            return result;
        }).catch(async (err)=>{
            if (err instanceof oauth_client_1.OAuthCallbackError && err.state?.startsWith(POPUP_STATE_PREFIX)) {
                await sendPopupResult({
                    key: err.state.slice(POPUP_STATE_PREFIX.length),
                    result: {
                        status: 'rejected',
                        reason: {
                            message: err.message,
                            params: Array.from(err.params.entries())
                        }
                    }
                });
                throw new errors_js_1.LoginContinuedInParentWindowError(); // signInPopup
            }
            // Most probable cause at this point is that the "state" parameter is
            // invalid.
            throw err;
        }).catch((err)=>{
            if (err instanceof errors_js_1.LoginContinuedInParentWindowError) // parent will also try to close the popup
            window.close();
            throw err;
        });
    }
    dispose() {
        this[Symbol.dispose]();
    }
}
exports.BrowserOAuthClient = BrowserOAuthClient;
_a = Symbol.dispose;
/**
 * Since "localhost" is often used either in IP mode or in hostname mode,
 * and because the redirect uris must use the IP mode, we need to make sure
 * that the current location url is not using "localhost".
 *
 * This is required for the IndexedDB to work properly. Indeed, the IndexedDB
 * is shared by origin, so we must ensure to be on the same origin as the
 * redirect uris.
 */ function fixLocation(clientMetadata) {
    if (!(0, oauth_types_1.isOAuthClientIdLoopback)(clientMetadata.client_id)) return;
    if (window.location.hostname !== 'localhost') return;
    const locationUrl = new URL(window.location.href);
    for (const uri of clientMetadata.redirect_uris){
        const url = new URL(uri);
        if ((url.hostname === '127.0.0.1' || url.hostname === '[::1]') && (!url.port || url.port === locationUrl.port) && url.protocol === locationUrl.protocol && url.pathname === locationUrl.pathname) {
            url.port = locationUrl.port;
            window.location.href = url.href;
            // Prevent init() on the wrong origin
            throw new Error('Redirecting to loopback IP...');
        }
    }
    throw new Error(`Please use the loopback IP address instead of ${locationUrl}`);
}

},{"def2b9426c4aeb61":"6S90m","b6bfe6bcea687c82":"B9q5y","663ac65aec2accc7":"es9bV","4a3b055377e319f0":"kLMM3","f504a47c2c50a497":"5Y1UF","e6f1ab531d0712d1":"fHNzi"}],"es9bV":[function(require,module,exports,__globalThis) {
"use strict";
var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _BrowserOAuthDatabase_dbPromise, _BrowserOAuthDatabase_cleanupInterval;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BrowserOAuthDatabase = void 0;
const jwk_webcrypto_1 = require("44cb30f65ff3696a");
const index_js_1 = require("a51ce37d1dd8812c");
function encodeKey(key) {
    if (!(key instanceof jwk_webcrypto_1.WebcryptoKey) || !key.kid) throw new Error('Invalid key object');
    return {
        keyId: key.kid,
        keyPair: key.cryptoKeyPair
    };
}
async function decodeKey(encoded) {
    return jwk_webcrypto_1.WebcryptoKey.fromKeypair(encoded.keyPair, encoded.keyId);
}
const STORES = [
    'state',
    'session',
    'didCache',
    'dpopNonceCache',
    'handleCache',
    'authorizationServerMetadataCache',
    'protectedResourceMetadataCache'
];
class BrowserOAuthDatabase {
    constructor(options){
        _BrowserOAuthDatabase_dbPromise.set(this, void 0);
        _BrowserOAuthDatabase_cleanupInterval.set(this, void 0);
        __classPrivateFieldSet(this, _BrowserOAuthDatabase_dbPromise, index_js_1.DB.open(options?.name ?? '@atproto-oauth-client', [
            (db)=>{
                for (const name of STORES){
                    const store = db.createObjectStore(name, {
                        autoIncrement: true
                    });
                    store.createIndex('expiresAt', 'expiresAt', {
                        unique: false
                    });
                }
            }
        ], {
            durability: options?.durability ?? 'strict'
        }), "f");
        __classPrivateFieldSet(this, _BrowserOAuthDatabase_cleanupInterval, setInterval(()=>{
            this.cleanup();
        }, options?.cleanupInterval ?? 30e3), "f");
    }
    async run(storeName, mode, fn) {
        const db = await __classPrivateFieldGet(this, _BrowserOAuthDatabase_dbPromise, "f");
        return await db.transaction([
            storeName
        ], mode, (tx)=>fn(tx.objectStore(storeName)));
    }
    createStore(name, { encode, decode, expiresAt }) {
        return {
            get: async (key)=>{
                // Find item in store
                const item = await this.run(name, 'readonly', (store)=>store.get(key));
                // Not found
                if (item === undefined) return undefined;
                // Too old (delete)
                if (item.expiresAt != null && new Date(item.expiresAt) < new Date()) {
                    await this.run(name, 'readwrite', (store)=>store.delete(key));
                    return undefined;
                }
                // Item found and valid. Decode
                return decode(item.value);
            },
            set: async (key, value)=>{
                // Create encoded item record
                const item = {
                    value: await encode(value),
                    expiresAt: expiresAt(value)?.toISOString()
                };
                // Store item record
                await this.run(name, 'readwrite', (store)=>store.put(item, key));
            },
            del: async (key)=>{
                // Delete
                await this.run(name, 'readwrite', (store)=>store.delete(key));
            }
        };
    }
    getSessionStore() {
        return this.createStore('session', {
            expiresAt: ({ tokenSet })=>tokenSet.refresh_token || tokenSet.expires_at == null ? null : new Date(tokenSet.expires_at),
            encode: ({ dpopKey, ...session })=>({
                    ...session,
                    dpopKey: encodeKey(dpopKey)
                }),
            decode: async ({ dpopKey, ...encoded })=>({
                    ...encoded,
                    dpopKey: await decodeKey(dpopKey)
                })
        });
    }
    getStateStore() {
        return this.createStore('state', {
            expiresAt: (_value)=>new Date(Date.now() + 600000),
            encode: ({ dpopKey, ...session })=>({
                    ...session,
                    dpopKey: encodeKey(dpopKey)
                }),
            decode: async ({ dpopKey, ...encoded })=>({
                    ...encoded,
                    dpopKey: await decodeKey(dpopKey)
                })
        });
    }
    getDpopNonceCache() {
        return this.createStore('dpopNonceCache', {
            expiresAt: (_value)=>new Date(Date.now() + 600e3),
            encode: (value)=>value,
            decode: (encoded)=>encoded
        });
    }
    getDidCache() {
        return this.createStore('didCache', {
            expiresAt: (_value)=>new Date(Date.now() + 60e3),
            encode: (value)=>value,
            decode: (encoded)=>encoded
        });
    }
    getHandleCache() {
        return this.createStore('handleCache', {
            expiresAt: (_value)=>new Date(Date.now() + 60e3),
            encode: (value)=>value,
            decode: (encoded)=>encoded
        });
    }
    getAuthorizationServerMetadataCache() {
        return this.createStore('authorizationServerMetadataCache', {
            expiresAt: (_value)=>new Date(Date.now() + 60e3),
            encode: (value)=>value,
            decode: (encoded)=>encoded
        });
    }
    getProtectedResourceMetadataCache() {
        return this.createStore('protectedResourceMetadataCache', {
            expiresAt: (_value)=>new Date(Date.now() + 60e3),
            encode: (value)=>value,
            decode: (encoded)=>encoded
        });
    }
    async cleanup() {
        const db = await __classPrivateFieldGet(this, _BrowserOAuthDatabase_dbPromise, "f");
        for (const name of STORES)await db.transaction([
            name
        ], 'readwrite', (tx)=>tx.objectStore(name).index('expiresAt').deleteAll(IDBKeyRange.upperBound(Date.now())));
    }
    async [(_BrowserOAuthDatabase_dbPromise = new WeakMap(), _BrowserOAuthDatabase_cleanupInterval = new WeakMap(), Symbol.asyncDispose)]() {
        clearInterval(__classPrivateFieldGet(this, _BrowserOAuthDatabase_cleanupInterval, "f"));
        __classPrivateFieldSet(this, _BrowserOAuthDatabase_cleanupInterval, undefined, "f");
        const dbPromise = __classPrivateFieldGet(this, _BrowserOAuthDatabase_dbPromise, "f");
        __classPrivateFieldSet(this, _BrowserOAuthDatabase_dbPromise, Promise.reject(new Error('Database has been disposed')), "f");
        // Avoid "unhandled promise rejection"
        __classPrivateFieldGet(this, _BrowserOAuthDatabase_dbPromise, "f").catch(()=>null);
        // Spec recommends not to throw errors in dispose
        const db = await dbPromise.catch(()=>null);
        if (db) await (db[Symbol.asyncDispose] || db[Symbol.dispose]).call(db);
    }
}
exports.BrowserOAuthDatabase = BrowserOAuthDatabase;

},{"44cb30f65ff3696a":"8o5XE","a51ce37d1dd8812c":"3KUbM"}],"3KUbM":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("cdc63a67570d3c3a");
__exportStar(require("2aa16f01b4bd288b"), exports);
__exportStar(require("62a85e7447a4c6a9"), exports);
__exportStar(require("fcb2585132a3050"), exports);
__exportStar(require("ddb2a6d72264bf87"), exports);

},{"cdc63a67570d3c3a":"B9ii9","2aa16f01b4bd288b":"g098c","62a85e7447a4c6a9":"1c7ig","fcb2585132a3050":"22BvQ","ddb2a6d72264bf87":"konnl"}],"g098c":[function(require,module,exports,__globalThis) {
"use strict";
var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DB_db;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DB = void 0;
const db_transaction_js_1 = require("88fd3854481893eb");
class DB {
    static async open(dbName, migrations, txOptions) {
        const db = await new Promise((resolve, reject)=>{
            const request = indexedDB.open(dbName, migrations.length);
            request.onerror = ()=>reject(request.error);
            request.onsuccess = ()=>resolve(request.result);
            request.onupgradeneeded = ({ oldVersion, newVersion })=>{
                const db = request.result;
                try {
                    for(let version = oldVersion; version < (newVersion ?? migrations.length); ++version){
                        const migration = migrations[version];
                        if (migration) migration(db);
                        else throw new Error(`Missing migration for version ${version}`);
                    }
                } catch (err) {
                    db.close();
                    reject(err);
                }
            };
        });
        return new DB(db, txOptions);
    }
    constructor(db, txOptions){
        Object.defineProperty(this, "txOptions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: txOptions
        });
        _DB_db.set(this, void 0);
        __classPrivateFieldSet(this, _DB_db, db, "f");
        const cleanup = ()=>{
            __classPrivateFieldSet(this, _DB_db, null, "f");
            db.removeEventListener('versionchange', cleanup);
            db.removeEventListener('close', cleanup);
            db.close(); // Can we call close on a "closed" database?
        };
        db.addEventListener('versionchange', cleanup);
        db.addEventListener('close', cleanup);
    }
    get db() {
        if (!__classPrivateFieldGet(this, _DB_db, "f")) throw new Error('Database closed');
        return __classPrivateFieldGet(this, _DB_db, "f");
    }
    get name() {
        return this.db.name;
    }
    get objectStoreNames() {
        return this.db.objectStoreNames;
    }
    get version() {
        return this.db.version;
    }
    async transaction(storeNames, mode, run) {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise(async (resolve, reject)=>{
            try {
                const tx = this.db.transaction(storeNames, mode, this.txOptions);
                let result = {
                    done: false
                };
                tx.oncomplete = ()=>{
                    if (result.done) resolve(result.value);
                    else reject(new Error('Transaction completed without result'));
                };
                tx.onerror = ()=>reject(tx.error);
                tx.onabort = ()=>reject(tx.error || new Error('Transaction aborted'));
                try {
                    const value = await run(new db_transaction_js_1.DBTransaction(tx));
                    result = {
                        done: true,
                        value
                    };
                    tx.commit();
                } catch (err) {
                    tx.abort();
                    throw err;
                }
            } catch (err) {
                reject(err);
            }
        });
    }
    close() {
        const { db } = this;
        __classPrivateFieldSet(this, _DB_db, null, "f");
        db.close();
    }
    [(_DB_db = new WeakMap(), Symbol.dispose)]() {
        if (__classPrivateFieldGet(this, _DB_db, "f")) return this.close();
    }
}
exports.DB = DB;

},{"88fd3854481893eb":"konnl"}],"konnl":[function(require,module,exports,__globalThis) {
"use strict";
var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DBTransaction_tx;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DBTransaction = void 0;
const db_object_store_js_1 = require("89f7e257d9ed27ab");
class DBTransaction {
    constructor(tx){
        _DBTransaction_tx.set(this, void 0);
        __classPrivateFieldSet(this, _DBTransaction_tx, tx, "f");
        const onAbort = ()=>{
            cleanup();
        };
        const onComplete = ()=>{
            cleanup();
        };
        const cleanup = ()=>{
            __classPrivateFieldSet(this, _DBTransaction_tx, null, "f");
            tx.removeEventListener('abort', onAbort);
            tx.removeEventListener('complete', onComplete);
        };
        tx.addEventListener('abort', onAbort);
        tx.addEventListener('complete', onComplete);
    }
    get tx() {
        if (!__classPrivateFieldGet(this, _DBTransaction_tx, "f")) throw new Error('Transaction already ended');
        return __classPrivateFieldGet(this, _DBTransaction_tx, "f");
    }
    async abort() {
        const { tx } = this;
        __classPrivateFieldSet(this, _DBTransaction_tx, null, "f");
        tx.abort();
    }
    async commit() {
        const { tx } = this;
        __classPrivateFieldSet(this, _DBTransaction_tx, null, "f");
        tx.commit?.();
    }
    objectStore(name) {
        const store = this.tx.objectStore(name);
        return new db_object_store_js_1.DBObjectStore(store);
    }
    [(_DBTransaction_tx = new WeakMap(), Symbol.dispose)]() {
        if (__classPrivateFieldGet(this, _DBTransaction_tx, "f")) this.commit();
    }
}
exports.DBTransaction = DBTransaction;

},{"89f7e257d9ed27ab":"22BvQ"}],"22BvQ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DBObjectStore = void 0;
const db_index_js_1 = require("88525098e86bb668");
const util_js_1 = require("39dcf300fafe651b");
class DBObjectStore {
    constructor(idbObjStore){
        Object.defineProperty(this, "idbObjStore", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: idbObjStore
        });
    }
    get name() {
        return this.idbObjStore.name;
    }
    index(name) {
        return new db_index_js_1.DBIndex(this.idbObjStore.index(name));
    }
    get(key) {
        return (0, util_js_1.promisify)(this.idbObjStore.get(key));
    }
    getKey(query) {
        return (0, util_js_1.promisify)(this.idbObjStore.getKey(query));
    }
    getAll(query, count) {
        return (0, util_js_1.promisify)(this.idbObjStore.getAll(query, count));
    }
    getAllKeys(query, count) {
        return (0, util_js_1.promisify)(this.idbObjStore.getAllKeys(query, count));
    }
    add(value, key) {
        return (0, util_js_1.promisify)(this.idbObjStore.add(value, key));
    }
    put(value, key) {
        return (0, util_js_1.promisify)(this.idbObjStore.put(value, key));
    }
    delete(key) {
        return (0, util_js_1.promisify)(this.idbObjStore.delete(key));
    }
    clear() {
        return (0, util_js_1.promisify)(this.idbObjStore.clear());
    }
}
exports.DBObjectStore = DBObjectStore;

},{"88525098e86bb668":"1c7ig","39dcf300fafe651b":"hgnWJ"}],"1c7ig":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DBIndex = void 0;
const util_js_1 = require("46ddce8fe78bdabb");
class DBIndex {
    constructor(idbIndex){
        Object.defineProperty(this, "idbIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: idbIndex
        });
    }
    count(query) {
        return (0, util_js_1.promisify)(this.idbIndex.count(query));
    }
    get(query) {
        return (0, util_js_1.promisify)(this.idbIndex.get(query));
    }
    getKey(query) {
        return (0, util_js_1.promisify)(this.idbIndex.getKey(query));
    }
    getAll(query, count) {
        return (0, util_js_1.promisify)(this.idbIndex.getAll(query, count));
    }
    getAllKeys(query, count) {
        return (0, util_js_1.promisify)(this.idbIndex.getAllKeys(query, count));
    }
    deleteAll(query) {
        return new Promise((resolve, reject)=>{
            const result = this.idbIndex.openCursor(query);
            result.onsuccess = function(event) {
                const cursor = event.target.result;
                if (cursor) {
                    cursor.delete();
                    cursor.continue();
                } else resolve();
            };
            result.onerror = function(event) {
                reject(event.target?.error || new Error('Unexpected error'));
            };
        });
    }
}
exports.DBIndex = DBIndex;

},{"46ddce8fe78bdabb":"hgnWJ"}],"hgnWJ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.handleRequest = handleRequest;
exports.promisify = promisify;
function handleRequest(request, onSuccess, onError) {
    const cleanup = ()=>{
        request.removeEventListener('success', success);
        request.removeEventListener('error', error);
    };
    const success = ()=>{
        onSuccess(request.result);
        cleanup();
    };
    const error = ()=>{
        onError(request.error || new Error('Unknown error'));
        cleanup();
    };
    request.addEventListener('success', success);
    request.addEventListener('error', error);
}
function promisify(request) {
    return new Promise((resolve, reject)=>{
        handleRequest(request, resolve, reject);
    });
}

},{}],"kLMM3":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BrowserRuntimeImplementation = void 0;
const jwk_webcrypto_1 = require("601d19d4cf73d2f0");
/**
 * @see {@link // https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request}
 */ const nativeRequestLock = navigator.locks?.request ? (name, fn)=>navigator.locks.request(name, {
        mode: 'exclusive'
    }, async ()=>fn()) : undefined;
class BrowserRuntimeImplementation {
    constructor(){
        Object.defineProperty(this, "requestLock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: nativeRequestLock
        });
        if (typeof crypto !== 'object' || !crypto?.subtle) throw new Error('Crypto with CryptoSubtle is required. If running in a browser, make sure the current page is loaded over HTTPS.');
        if (!this.requestLock) // There is no real need to polyfill this on older browsers. Indeed, the
        // oauth-client library will try and recover from concurrency issues when
        // refreshing tokens.
        console.warn('Locks API not available. You should consider using a more recent browser.');
    }
    async createKey(algs) {
        return jwk_webcrypto_1.WebcryptoKey.generate(algs);
    }
    getRandomValues(byteLength) {
        return crypto.getRandomValues(new Uint8Array(byteLength));
    }
    async digest(data, { name }) {
        switch(name){
            case 'sha256':
            case 'sha384':
            case 'sha512':
                {
                    const buf = await crypto.subtle.digest(`SHA-${name.slice(3)}`, data);
                    return new Uint8Array(buf);
                }
            default:
                throw new Error(`Unsupported digest algorithm: ${name}`);
        }
    }
}
exports.BrowserRuntimeImplementation = BrowserRuntimeImplementation;

},{"601d19d4cf73d2f0":"8o5XE"}],"5Y1UF":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LoginContinuedInParentWindowError = void 0;
/**
 * Special error class destined to be thrown when the login process was
 * performed in a popup and should be continued in the parent/initiating window.
 */ class LoginContinuedInParentWindowError extends Error {
    constructor(){
        super('Login complete, please close the popup window.');
        Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'LOGIN_CONTINUED_IN_PARENT_WINDOW'
        });
    }
}
exports.LoginContinuedInParentWindowError = LoginContinuedInParentWindowError;

},{}],"fHNzi":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.buildLoopbackClientId = buildLoopbackClientId;
const oauth_types_1 = require("14ed9ccf5ea603f1");
/**
 * @example
 * ```ts
 * const clientId = buildLoopbackClientId(window.location)
 * ```
 */ function buildLoopbackClientId(location, localhost = '127.0.0.1') {
    if (!(0, oauth_types_1.isLoopbackHost)(location.hostname)) throw new TypeError(`Expected a loopback host, got ${location.hostname}`);
    const redirectUri = `http://${location.hostname === 'localhost' ? localhost : location.hostname}${location.port && !location.port.startsWith(':') ? `:${location.port}` : location.port}${location.pathname}`;
    return `http://localhost${location.pathname === '/' ? '' : location.pathname}?redirect_uri=${encodeURIComponent(redirectUri)}`;
}

},{"14ed9ccf5ea603f1":"B9q5y"}],"fkrLB":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.lexicons = exports.default = exports.BskyAgent = exports.CredentialSession = exports.AtpAgent = exports.Agent = exports.LABELS = exports.DEFAULT_LABEL_SETTINGS = exports.asPredicate = exports.schemas = exports.parseLanguage = exports.stringifyLex = exports.lexToJson = exports.jsonToLex = exports.jsonStringToLex = exports.BlobRef = exports.AtUri = void 0;
const lexicon_1 = require("7b5a27133ddec79e");
const lexicons_1 = require("8692800009c0f9d6");
var syntax_1 = require("70077e5041397e5c");
Object.defineProperty(exports, "AtUri", {
    enumerable: true,
    get: function() {
        return syntax_1.AtUri;
    }
});
var lexicon_2 = require("7b5a27133ddec79e");
Object.defineProperty(exports, "BlobRef", {
    enumerable: true,
    get: function() {
        return lexicon_2.BlobRef;
    }
});
Object.defineProperty(exports, "jsonStringToLex", {
    enumerable: true,
    get: function() {
        return lexicon_2.jsonStringToLex;
    }
});
Object.defineProperty(exports, "jsonToLex", {
    enumerable: true,
    get: function() {
        return lexicon_2.jsonToLex;
    }
});
Object.defineProperty(exports, "lexToJson", {
    enumerable: true,
    get: function() {
        return lexicon_2.lexToJson;
    }
});
Object.defineProperty(exports, "stringifyLex", {
    enumerable: true,
    get: function() {
        return lexicon_2.stringifyLex;
    }
});
var common_web_1 = require("338956f3eac4fe43");
Object.defineProperty(exports, "parseLanguage", {
    enumerable: true,
    get: function() {
        return common_web_1.parseLanguage;
    }
});
__exportStar(require("f9d143c6bd80144b"), exports);
__exportStar(require("57163e7182b01539"), exports);
__exportStar(require("9609e2bf8fd4b4df"), exports);
__exportStar(require("8620c9d97525fba2"), exports);
var lexicons_2 = require("8692800009c0f9d6");
Object.defineProperty(exports, "schemas", {
    enumerable: true,
    get: function() {
        return lexicons_2.schemas;
    }
});
var util_1 = require("387e95a7a1c76aea");
Object.defineProperty(exports, "asPredicate", {
    enumerable: true,
    get: function() {
        return util_1.asPredicate;
    }
});
__exportStar(require("6cfe2106b0b0cf73"), exports);
__exportStar(require("ae72a0433413459a"), exports);
__exportStar(require("84d02c55041fe02d"), exports);
__exportStar(require("a4f32b641f6dd95"), exports);
__exportStar(require("93c3d8c370c1f9ed"), exports);
__exportStar(require("b1335d3574e8503c"), exports);
__exportStar(require("b8dabfdbe20e2265"), exports);
var labels_1 = require("29e401dbf384013f");
Object.defineProperty(exports, "DEFAULT_LABEL_SETTINGS", {
    enumerable: true,
    get: function() {
        return labels_1.DEFAULT_LABEL_SETTINGS;
    }
});
Object.defineProperty(exports, "LABELS", {
    enumerable: true,
    get: function() {
        return labels_1.LABELS;
    }
});
var agent_1 = require("cbf29fc3b5a77883");
Object.defineProperty(exports, "Agent", {
    enumerable: true,
    get: function() {
        return agent_1.Agent;
    }
});
var atp_agent_1 = require("216503faee5503b0");
Object.defineProperty(exports, "AtpAgent", {
    enumerable: true,
    get: function() {
        return atp_agent_1.AtpAgent;
    }
});
var atp_agent_2 = require("216503faee5503b0");
Object.defineProperty(exports, "CredentialSession", {
    enumerable: true,
    get: function() {
        return atp_agent_2.CredentialSession;
    }
});
var bsky_agent_1 = require("884b72374d894dff");
Object.defineProperty(exports, "BskyAgent", {
    enumerable: true,
    get: function() {
        return bsky_agent_1.BskyAgent;
    }
});
var atp_agent_3 = require("216503faee5503b0");
/** @deprecated */ Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return atp_agent_3.AtpAgent;
    }
});
// Expose a copy to prevent alteration of the internal Lexicon instance used by
// the AtpBaseClient class.
exports.lexicons = new lexicon_1.Lexicons(lexicons_1.lexicons);

},{"7b5a27133ddec79e":"dXkdv","8692800009c0f9d6":"b1XzS","70077e5041397e5c":"gN2Ao","338956f3eac4fe43":"2onrJ","f9d143c6bd80144b":"j3TEa","57163e7182b01539":"2AA0F","9609e2bf8fd4b4df":"OcJzf","8620c9d97525fba2":"hHmOB","387e95a7a1c76aea":"hnRug","6cfe2106b0b0cf73":"2YUaj","ae72a0433413459a":"chBlz","84d02c55041fe02d":"afKwO","a4f32b641f6dd95":"lEmjE","93c3d8c370c1f9ed":"dQ5lX","b1335d3574e8503c":"c5Es2","b8dabfdbe20e2265":"kJbRR","29e401dbf384013f":"36sFr","cbf29fc3b5a77883":"hrVL0","216503faee5503b0":"8iA5h","884b72374d894dff":"1WlmE"}],"dXkdv":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(require("b146d7fe0feb0a4a"), exports);
__exportStar(require("b7726f7120d93341"), exports);
__exportStar(require("69922ce5182ebbe6"), exports);
__exportStar(require("eea6d31faec9d1d4"), exports);

},{"b146d7fe0feb0a4a":"eGc9I","b7726f7120d93341":"k4O0D","69922ce5182ebbe6":"1vvpZ","eea6d31faec9d1d4":"f2RgF"}],"eGc9I":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LexiconDefNotFoundError = exports.InvalidLexiconError = exports.ValidationError = exports.lexiconDoc = exports.lexUserType = exports.lexRecord = exports.lexXrpcSubscription = exports.lexXrpcProcedure = exports.lexXrpcQuery = exports.lexXrpcError = exports.lexXrpcSubscriptionMessage = exports.lexXrpcBody = exports.lexXrpcParameters = exports.lexObject = exports.lexToken = exports.lexPrimitiveArray = exports.lexArray = exports.lexBlob = exports.lexRefVariant = exports.lexRefUnion = exports.lexRef = exports.lexIpldType = exports.lexCidLink = exports.lexBytes = exports.lexPrimitive = exports.lexUnknown = exports.lexString = exports.lexStringFormat = exports.lexInteger = exports.lexBoolean = void 0;
exports.isValidLexiconDoc = isValidLexiconDoc;
exports.isObj = isObj;
exports.isDiscriminatedObject = isDiscriminatedObject;
exports.parseLexiconDoc = parseLexiconDoc;
const zod_1 = require("132f5a32099880f5");
const syntax_1 = require("2701c84529a80469");
const util_1 = require("2e04173fbac7b8a9");
// primitives
// =
exports.lexBoolean = zod_1.z.object({
    type: zod_1.z.literal('boolean'),
    description: zod_1.z.string().optional(),
    default: zod_1.z.boolean().optional(),
    const: zod_1.z.boolean().optional()
}).strict();
exports.lexInteger = zod_1.z.object({
    type: zod_1.z.literal('integer'),
    description: zod_1.z.string().optional(),
    default: zod_1.z.number().int().optional(),
    minimum: zod_1.z.number().int().optional(),
    maximum: zod_1.z.number().int().optional(),
    enum: zod_1.z.number().int().array().optional(),
    const: zod_1.z.number().int().optional()
}).strict();
exports.lexStringFormat = zod_1.z.enum([
    'datetime',
    'uri',
    'at-uri',
    'did',
    'handle',
    'at-identifier',
    'nsid',
    'cid',
    'language',
    'tid',
    'record-key'
]);
exports.lexString = zod_1.z.object({
    type: zod_1.z.literal('string'),
    format: exports.lexStringFormat.optional(),
    description: zod_1.z.string().optional(),
    default: zod_1.z.string().optional(),
    minLength: zod_1.z.number().int().optional(),
    maxLength: zod_1.z.number().int().optional(),
    minGraphemes: zod_1.z.number().int().optional(),
    maxGraphemes: zod_1.z.number().int().optional(),
    enum: zod_1.z.string().array().optional(),
    const: zod_1.z.string().optional(),
    knownValues: zod_1.z.string().array().optional()
}).strict();
exports.lexUnknown = zod_1.z.object({
    type: zod_1.z.literal('unknown'),
    description: zod_1.z.string().optional()
}).strict();
exports.lexPrimitive = zod_1.z.discriminatedUnion('type', [
    exports.lexBoolean,
    exports.lexInteger,
    exports.lexString,
    exports.lexUnknown
]);
// ipld types
// =
exports.lexBytes = zod_1.z.object({
    type: zod_1.z.literal('bytes'),
    description: zod_1.z.string().optional(),
    maxLength: zod_1.z.number().optional(),
    minLength: zod_1.z.number().optional()
}).strict();
exports.lexCidLink = zod_1.z.object({
    type: zod_1.z.literal('cid-link'),
    description: zod_1.z.string().optional()
}).strict();
exports.lexIpldType = zod_1.z.discriminatedUnion('type', [
    exports.lexBytes,
    exports.lexCidLink
]);
// references
// =
exports.lexRef = zod_1.z.object({
    type: zod_1.z.literal('ref'),
    description: zod_1.z.string().optional(),
    ref: zod_1.z.string()
}).strict();
exports.lexRefUnion = zod_1.z.object({
    type: zod_1.z.literal('union'),
    description: zod_1.z.string().optional(),
    refs: zod_1.z.string().array(),
    closed: zod_1.z.boolean().optional()
}).strict();
exports.lexRefVariant = zod_1.z.discriminatedUnion('type', [
    exports.lexRef,
    exports.lexRefUnion
]);
// blobs
// =
exports.lexBlob = zod_1.z.object({
    type: zod_1.z.literal('blob'),
    description: zod_1.z.string().optional(),
    accept: zod_1.z.string().array().optional(),
    maxSize: zod_1.z.number().optional()
}).strict();
// complex types
// =
exports.lexArray = zod_1.z.object({
    type: zod_1.z.literal('array'),
    description: zod_1.z.string().optional(),
    items: zod_1.z.discriminatedUnion('type', [
        // lexPrimitive
        exports.lexBoolean,
        exports.lexInteger,
        exports.lexString,
        exports.lexUnknown,
        // lexIpldType
        exports.lexBytes,
        exports.lexCidLink,
        // lexRefVariant
        exports.lexRef,
        exports.lexRefUnion,
        // other
        exports.lexBlob
    ]),
    minLength: zod_1.z.number().int().optional(),
    maxLength: zod_1.z.number().int().optional()
}).strict();
exports.lexPrimitiveArray = exports.lexArray.merge(zod_1.z.object({
    items: exports.lexPrimitive
}).strict());
exports.lexToken = zod_1.z.object({
    type: zod_1.z.literal('token'),
    description: zod_1.z.string().optional()
}).strict();
exports.lexObject = zod_1.z.object({
    type: zod_1.z.literal('object'),
    description: zod_1.z.string().optional(),
    required: zod_1.z.string().array().optional(),
    nullable: zod_1.z.string().array().optional(),
    properties: zod_1.z.record(zod_1.z.discriminatedUnion('type', [
        exports.lexArray,
        // lexPrimitive
        exports.lexBoolean,
        exports.lexInteger,
        exports.lexString,
        exports.lexUnknown,
        // lexIpldType
        exports.lexBytes,
        exports.lexCidLink,
        // lexRefVariant
        exports.lexRef,
        exports.lexRefUnion,
        // other
        exports.lexBlob
    ]))
}).strict().superRefine(util_1.requiredPropertiesRefinement);
// xrpc
// =
exports.lexXrpcParameters = zod_1.z.object({
    type: zod_1.z.literal('params'),
    description: zod_1.z.string().optional(),
    required: zod_1.z.string().array().optional(),
    properties: zod_1.z.record(zod_1.z.discriminatedUnion('type', [
        exports.lexPrimitiveArray,
        // lexPrimitive
        exports.lexBoolean,
        exports.lexInteger,
        exports.lexString,
        exports.lexUnknown
    ]))
}).strict().superRefine(util_1.requiredPropertiesRefinement);
exports.lexXrpcBody = zod_1.z.object({
    description: zod_1.z.string().optional(),
    encoding: zod_1.z.string(),
    // @NOTE using discriminatedUnion with a refined schema requires zod >= 4
    schema: zod_1.z.union([
        exports.lexRefVariant,
        exports.lexObject
    ]).optional()
}).strict();
exports.lexXrpcSubscriptionMessage = zod_1.z.object({
    description: zod_1.z.string().optional(),
    // @NOTE using discriminatedUnion with a refined schema requires zod >= 4
    schema: zod_1.z.union([
        exports.lexRefVariant,
        exports.lexObject
    ]).optional()
}).strict();
exports.lexXrpcError = zod_1.z.object({
    name: zod_1.z.string(),
    description: zod_1.z.string().optional()
}).strict();
exports.lexXrpcQuery = zod_1.z.object({
    type: zod_1.z.literal('query'),
    description: zod_1.z.string().optional(),
    parameters: exports.lexXrpcParameters.optional(),
    output: exports.lexXrpcBody.optional(),
    errors: exports.lexXrpcError.array().optional()
}).strict();
exports.lexXrpcProcedure = zod_1.z.object({
    type: zod_1.z.literal('procedure'),
    description: zod_1.z.string().optional(),
    parameters: exports.lexXrpcParameters.optional(),
    input: exports.lexXrpcBody.optional(),
    output: exports.lexXrpcBody.optional(),
    errors: exports.lexXrpcError.array().optional()
}).strict();
exports.lexXrpcSubscription = zod_1.z.object({
    type: zod_1.z.literal('subscription'),
    description: zod_1.z.string().optional(),
    parameters: exports.lexXrpcParameters.optional(),
    message: exports.lexXrpcSubscriptionMessage.optional(),
    errors: exports.lexXrpcError.array().optional()
}).strict();
// database
// =
exports.lexRecord = zod_1.z.object({
    type: zod_1.z.literal('record'),
    description: zod_1.z.string().optional(),
    key: zod_1.z.string().optional(),
    record: exports.lexObject
}).strict();
// core
// =
// We need to use `z.custom` here because
// lexXrpcProperty and lexObject are refined
// `z.union` would work, but it's too slow
// see #915 for details
exports.lexUserType = zod_1.z.custom((val)=>{
    if (!val || typeof val !== 'object') return;
    if (val['type'] === undefined) return;
    switch(val['type']){
        case 'record':
            return exports.lexRecord.parse(val);
        case 'query':
            return exports.lexXrpcQuery.parse(val);
        case 'procedure':
            return exports.lexXrpcProcedure.parse(val);
        case 'subscription':
            return exports.lexXrpcSubscription.parse(val);
        case 'blob':
            return exports.lexBlob.parse(val);
        case 'array':
            return exports.lexArray.parse(val);
        case 'token':
            return exports.lexToken.parse(val);
        case 'object':
            return exports.lexObject.parse(val);
        case 'boolean':
            return exports.lexBoolean.parse(val);
        case 'integer':
            return exports.lexInteger.parse(val);
        case 'string':
            return exports.lexString.parse(val);
        case 'bytes':
            return exports.lexBytes.parse(val);
        case 'cid-link':
            return exports.lexCidLink.parse(val);
        case 'unknown':
            return exports.lexUnknown.parse(val);
    }
}, (val)=>{
    if (!val || typeof val !== 'object') return {
        message: 'Must be an object',
        fatal: true
    };
    if (val['type'] === undefined) return {
        message: 'Must have a type',
        fatal: true
    };
    if (typeof val['type'] !== 'string') return {
        message: 'Type property must be a string',
        fatal: true
    };
    return {
        message: `Invalid type: ${val['type']} must be one of: record, query, procedure, subscription, blob, array, token, object, boolean, integer, string, bytes, cid-link, unknown`,
        fatal: true
    };
});
exports.lexiconDoc = zod_1.z.object({
    lexicon: zod_1.z.literal(1),
    id: zod_1.z.string().refine((v)=>syntax_1.NSID.isValid(v), {
        message: 'Must be a valid NSID'
    }),
    revision: zod_1.z.number().optional(),
    description: zod_1.z.string().optional(),
    defs: zod_1.z.record(exports.lexUserType)
}).strict().superRefine((doc, ctx)=>{
    for(const defId in doc.defs){
        const def = doc.defs[defId];
        if (defId !== 'main' && (def.type === 'record' || def.type === 'procedure' || def.type === 'query' || def.type === 'subscription')) ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: `Records, procedures, queries, and subscriptions must be the main definition.`
        });
    }
});
// helpers
// =
function isValidLexiconDoc(v) {
    return exports.lexiconDoc.safeParse(v).success;
}
function isObj(v) {
    return v != null && typeof v === 'object';
}
function isDiscriminatedObject(v) {
    return isObj(v) && '$type' in v && typeof v.$type === 'string';
}
function parseLexiconDoc(v) {
    exports.lexiconDoc.parse(v);
    return v;
}
class ValidationError extends Error {
}
exports.ValidationError = ValidationError;
class InvalidLexiconError extends Error {
}
exports.InvalidLexiconError = InvalidLexiconError;
class LexiconDefNotFoundError extends Error {
}
exports.LexiconDefNotFoundError = LexiconDefNotFoundError;

},{"132f5a32099880f5":"gcE23","2701c84529a80469":"gN2Ao","2e04173fbac7b8a9":"1yqLT"}],"1yqLT":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toLexUri = toLexUri;
exports.requiredPropertiesRefinement = requiredPropertiesRefinement;
const zod_1 = require("aec9bee04e32dfa2");
function toLexUri(str, baseUri) {
    if (str.split('#').length > 2) throw new Error('Uri can only have one hash segment');
    if (str.startsWith('lex:')) return str;
    if (str.startsWith('#')) {
        if (!baseUri) throw new Error(`Unable to resolve uri without anchor: ${str}`);
        return `${baseUri}${str}`;
    }
    return `lex:${str}`;
}
function requiredPropertiesRefinement(object, ctx) {
    // Required fields check
    if (object.required === undefined) return;
    if (!Array.isArray(object.required)) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.invalid_type,
            received: typeof object.required,
            expected: 'array'
        });
        return;
    }
    if (object.properties === undefined) {
        if (object.required.length > 0) ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: `Required fields defined but no properties defined`
        });
        return;
    }
    for (const field of object.required)if (object.properties[field] === undefined) ctx.addIssue({
        code: zod_1.z.ZodIssueCode.custom,
        message: `Required field "${field}" not defined`
    });
}

},{"aec9bee04e32dfa2":"gcE23"}],"k4O0D":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Lexicons = void 0;
const types_1 = require("7c9592d782a9886e");
const util_1 = require("74a9f8204ae2c55");
const validation_1 = require("75ccea718dab7587");
const complex_1 = require("abcb4b9718933cb6");
/**
 * A collection of compiled lexicons.
 */ class Lexicons {
    constructor(docs){
        Object.defineProperty(this, "docs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "defs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        if (docs) for (const doc of docs)this.add(doc);
    }
    /**
     * @example clone a lexicon:
     * ```ts
     * const clone = new Lexicons(originalLexicon)
     * ```
     *
     * @example get docs array:
     * ```ts
     * const docs = Array.from(lexicons)
     * ```
     */ [Symbol.iterator]() {
        return this.docs.values();
    }
    /**
     * Add a lexicon doc.
     */ add(doc) {
        const uri = (0, util_1.toLexUri)(doc.id);
        if (this.docs.has(uri)) throw new Error(`${uri} has already been registered`);
        // WARNING
        // mutates the object
        // -prf
        resolveRefUris(doc, uri);
        this.docs.set(uri, doc);
        for (const [defUri, def] of iterDefs(doc))this.defs.set(defUri, def);
    }
    /**
     * Remove a lexicon doc.
     */ remove(uri) {
        uri = (0, util_1.toLexUri)(uri);
        const doc = this.docs.get(uri);
        if (!doc) throw new Error(`Unable to remove "${uri}": does not exist`);
        for (const [defUri, _def] of iterDefs(doc))this.defs.delete(defUri);
        this.docs.delete(uri);
    }
    /**
     * Get a lexicon doc.
     */ get(uri) {
        uri = (0, util_1.toLexUri)(uri);
        return this.docs.get(uri);
    }
    /**
     * Get a definition.
     */ getDef(uri) {
        uri = (0, util_1.toLexUri)(uri);
        return this.defs.get(uri);
    }
    getDefOrThrow(uri, types) {
        const def = this.getDef(uri);
        if (!def) throw new types_1.LexiconDefNotFoundError(`Lexicon not found: ${uri}`);
        if (types && !types.includes(def.type)) throw new types_1.InvalidLexiconError(`Not a ${types.join(' or ')} lexicon: ${uri}`);
        return def;
    }
    /**
     * Validate a record or object.
     */ validate(lexUri, value) {
        if (!(0, types_1.isObj)(value)) throw new types_1.ValidationError(`Value must be an object`);
        const lexUriNormalized = (0, util_1.toLexUri)(lexUri);
        const def = this.getDefOrThrow(lexUriNormalized, [
            'record',
            'object'
        ]);
        if (def.type === 'record') return (0, complex_1.object)(this, 'Record', def.record, value);
        else if (def.type === 'object') return (0, complex_1.object)(this, 'Object', def, value);
        else // shouldn't happen
        throw new types_1.InvalidLexiconError('Definition must be a record or object');
    }
    /**
     * Validate a record and throw on any error.
     */ assertValidRecord(lexUri, value) {
        if (!(0, types_1.isObj)(value)) throw new types_1.ValidationError(`Record must be an object`);
        if (!('$type' in value)) throw new types_1.ValidationError(`Record/$type must be a string`);
        const { $type } = value;
        if (typeof $type !== 'string') throw new types_1.ValidationError(`Record/$type must be a string`);
        const lexUriNormalized = (0, util_1.toLexUri)(lexUri);
        if ((0, util_1.toLexUri)($type) !== lexUriNormalized) throw new types_1.ValidationError(`Invalid $type: must be ${lexUriNormalized}, got ${$type}`);
        const def = this.getDefOrThrow(lexUriNormalized, [
            'record'
        ]);
        return (0, validation_1.assertValidRecord)(this, def, value);
    }
    /**
     * Validate xrpc query params and throw on any error.
     */ assertValidXrpcParams(lexUri, value) {
        lexUri = (0, util_1.toLexUri)(lexUri);
        const def = this.getDefOrThrow(lexUri, [
            'query',
            'procedure',
            'subscription'
        ]);
        return (0, validation_1.assertValidXrpcParams)(this, def, value);
    }
    /**
     * Validate xrpc input body and throw on any error.
     */ assertValidXrpcInput(lexUri, value) {
        lexUri = (0, util_1.toLexUri)(lexUri);
        const def = this.getDefOrThrow(lexUri, [
            'procedure'
        ]);
        return (0, validation_1.assertValidXrpcInput)(this, def, value);
    }
    /**
     * Validate xrpc output body and throw on any error.
     */ assertValidXrpcOutput(lexUri, value) {
        lexUri = (0, util_1.toLexUri)(lexUri);
        const def = this.getDefOrThrow(lexUri, [
            'query',
            'procedure'
        ]);
        return (0, validation_1.assertValidXrpcOutput)(this, def, value);
    }
    /**
     * Validate xrpc subscription message and throw on any error.
     */ assertValidXrpcMessage(lexUri, value) {
        lexUri = (0, util_1.toLexUri)(lexUri);
        const def = this.getDefOrThrow(lexUri, [
            'subscription'
        ]);
        return (0, validation_1.assertValidXrpcMessage)(this, def, value);
    }
    /**
     * Resolve a lex uri given a ref
     */ resolveLexUri(lexUri, ref) {
        lexUri = (0, util_1.toLexUri)(lexUri);
        return (0, util_1.toLexUri)(ref, lexUri);
    }
}
exports.Lexicons = Lexicons;
function* iterDefs(doc) {
    for(const defId in doc.defs){
        yield [
            `lex:${doc.id}#${defId}`,
            doc.defs[defId]
        ];
        if (defId === 'main') yield [
            `lex:${doc.id}`,
            doc.defs[defId]
        ];
    }
}
// WARNING
// this method mutates objects
// -prf
function resolveRefUris(obj, baseUri) {
    for(const k in obj){
        if (obj.type === 'ref') obj.ref = (0, util_1.toLexUri)(obj.ref, baseUri);
        else if (obj.type === 'union') obj.refs = obj.refs.map((ref)=>(0, util_1.toLexUri)(ref, baseUri));
        else if (Array.isArray(obj[k])) obj[k] = obj[k].map((item)=>{
            if (typeof item === 'string') return item.startsWith('#') ? (0, util_1.toLexUri)(item, baseUri) : item;
            else if (item && typeof item === 'object') return resolveRefUris(item, baseUri);
            return item;
        });
        else if (obj[k] && typeof obj[k] === 'object') obj[k] = resolveRefUris(obj[k], baseUri);
    }
    return obj;
}

},{"7c9592d782a9886e":"eGc9I","74a9f8204ae2c55":"1yqLT","75ccea718dab7587":"ema22","abcb4b9718933cb6":"gANHY"}],"ema22":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.assertValidRecord = assertValidRecord;
exports.assertValidXrpcParams = assertValidXrpcParams;
exports.assertValidXrpcInput = assertValidXrpcInput;
exports.assertValidXrpcOutput = assertValidXrpcOutput;
exports.assertValidXrpcMessage = assertValidXrpcMessage;
const complex_1 = require("e42127d36bada190");
const xrpc_1 = require("f0f3620ac699835b");
function assertValidRecord(lexicons, def, value) {
    const res = (0, complex_1.object)(lexicons, 'Record', def.record, value);
    if (!res.success) throw res.error;
    return res.value;
}
function assertValidXrpcParams(lexicons, def, value) {
    if (def.parameters) {
        const res = (0, xrpc_1.params)(lexicons, 'Params', def.parameters, value);
        if (!res.success) throw res.error;
        return res.value;
    }
}
function assertValidXrpcInput(lexicons, def, value) {
    if (def.input?.schema) // loop: all input schema definitions
    return assertValidOneOf(lexicons, 'Input', def.input.schema, value, true);
}
function assertValidXrpcOutput(lexicons, def, value) {
    if (def.output?.schema) // loop: all output schema definitions
    return assertValidOneOf(lexicons, 'Output', def.output.schema, value, true);
}
function assertValidXrpcMessage(lexicons, def, value) {
    if (def.message?.schema) // loop: all output schema definitions
    return assertValidOneOf(lexicons, 'Message', def.message.schema, value, true);
}
function assertValidOneOf(lexicons, path, def, value, mustBeObj = false) {
    const res = (0, complex_1.validateOneOf)(lexicons, path, def, value, mustBeObj);
    if (!res.success) throw res.error;
    return res.value;
}

},{"e42127d36bada190":"gANHY","f0f3620ac699835b":"hEfun"}],"gANHY":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validate = validate;
exports.array = array;
exports.object = object;
exports.validateOneOf = validateOneOf;
const types_1 = require("faf1e7c7715cb2ed");
const util_1 = require("798fd1e084dbbf46");
const blob_1 = require("8a7b707cbb7e15d5");
const primitives_1 = require("8576d7069b62b531");
function validate(lexicons, path, def, value) {
    switch(def.type){
        case 'object':
            return object(lexicons, path, def, value);
        case 'array':
            return array(lexicons, path, def, value);
        case 'blob':
            return (0, blob_1.blob)(lexicons, path, def, value);
        default:
            return (0, primitives_1.validate)(lexicons, path, def, value);
    }
}
function array(lexicons, path, def, value) {
    // type
    if (!Array.isArray(value)) return {
        success: false,
        error: new types_1.ValidationError(`${path} must be an array`)
    };
    // maxLength
    if (typeof def.maxLength === 'number') {
        if (value.length > def.maxLength) return {
            success: false,
            error: new types_1.ValidationError(`${path} must not have more than ${def.maxLength} elements`)
        };
    }
    // minLength
    if (typeof def.minLength === 'number') {
        if (value.length < def.minLength) return {
            success: false,
            error: new types_1.ValidationError(`${path} must not have fewer than ${def.minLength} elements`)
        };
    }
    // items
    const itemsDef = def.items;
    for(let i = 0; i < value.length; i++){
        const itemValue = value[i];
        const itemPath = `${path}/${i}`;
        const res = validateOneOf(lexicons, itemPath, itemsDef, itemValue);
        if (!res.success) return res;
    }
    return {
        success: true,
        value
    };
}
function object(lexicons, path, def, value) {
    // type
    if (!(0, types_1.isObj)(value)) return {
        success: false,
        error: new types_1.ValidationError(`${path} must be an object`)
    };
    // properties
    let resultValue = value;
    if ('properties' in def && def.properties != null) for(const key in def.properties){
        const keyValue = value[key];
        if (keyValue === null && def.nullable?.includes(key)) continue;
        const propDef = def.properties[key];
        if (keyValue === undefined && !def.required?.includes(key)) {
            // Fast path for non-required undefined props.
            if (propDef.type === 'integer' || propDef.type === 'boolean' || propDef.type === 'string') {
                if (propDef.default === undefined) continue;
            } else continue;
        }
        const propPath = `${path}/${key}`;
        const validated = validateOneOf(lexicons, propPath, propDef, keyValue);
        const propValue = validated.success ? validated.value : keyValue;
        // Return error for bad validation, giving required rule precedence
        if (propValue === undefined) {
            if (def.required?.includes(key)) return {
                success: false,
                error: new types_1.ValidationError(`${path} must have the property "${key}"`)
            };
        } else {
            if (!validated.success) return validated;
        }
        // Adjust value based on e.g. applied defaults, cloning shallowly if there was a changed value
        if (propValue !== keyValue) {
            if (resultValue === value) // Lazy shallow clone
            resultValue = {
                ...value
            };
            resultValue[key] = propValue;
        }
    }
    return {
        success: true,
        value: resultValue
    };
}
function validateOneOf(lexicons, path, def, value, mustBeObj = false) {
    let concreteDef;
    if (def.type === 'union') {
        if (!(0, types_1.isDiscriminatedObject)(value)) return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an object which includes the "$type" property`)
        };
        if (!refsContainType(def.refs, value.$type)) {
            if (def.closed) return {
                success: false,
                error: new types_1.ValidationError(`${path} $type must be one of ${def.refs.join(', ')}`)
            };
            return {
                success: true,
                value
            };
        } else concreteDef = lexicons.getDefOrThrow(value.$type);
    } else if (def.type === 'ref') concreteDef = lexicons.getDefOrThrow(def.ref);
    else concreteDef = def;
    return mustBeObj ? object(lexicons, path, concreteDef, value) : validate(lexicons, path, concreteDef, value);
}
// to avoid bugs like #0189 this needs to handle both
// explicit and implicit #main
const refsContainType = (refs, type)=>{
    const lexUri = (0, util_1.toLexUri)(type);
    if (refs.includes(lexUri)) return true;
    if (lexUri.endsWith('#main')) return refs.includes(lexUri.slice(0, -5));
    else return !lexUri.includes('#') && refs.includes(`${lexUri}#main`);
};

},{"faf1e7c7715cb2ed":"eGc9I","798fd1e084dbbf46":"1yqLT","8a7b707cbb7e15d5":"542Aa","8576d7069b62b531":"30rmL"}],"542Aa":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.blob = blob;
const blob_refs_1 = require("59b80b1538303859");
const types_1 = require("3eb9029018858a49");
function blob(lexicons, path, def, value) {
    // check
    if (!value || !(value instanceof blob_refs_1.BlobRef)) return {
        success: false,
        error: new types_1.ValidationError(`${path} should be a blob ref`)
    };
    return {
        success: true,
        value
    };
}

},{"59b80b1538303859":"1vvpZ","3eb9029018858a49":"eGc9I"}],"1vvpZ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BlobRef = exports.jsonBlobRef = exports.untypedJsonBlobRef = exports.typedJsonBlobRef = void 0;
const cid_1 = require("ed8a9ce6dc15c2e1");
const zod_1 = require("99ee5096da6673b9");
const common_web_1 = require("d98e4bda308b8188");
exports.typedJsonBlobRef = zod_1.z.object({
    $type: zod_1.z.literal('blob'),
    ref: common_web_1.schema.cid,
    mimeType: zod_1.z.string(),
    size: zod_1.z.number()
}).strict();
exports.untypedJsonBlobRef = zod_1.z.object({
    cid: zod_1.z.string(),
    mimeType: zod_1.z.string()
}).strict();
exports.jsonBlobRef = zod_1.z.union([
    exports.typedJsonBlobRef,
    exports.untypedJsonBlobRef
]);
class BlobRef {
    constructor(ref, mimeType, size, original){
        Object.defineProperty(this, "ref", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ref
        });
        Object.defineProperty(this, "mimeType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: mimeType
        });
        Object.defineProperty(this, "size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: size
        });
        Object.defineProperty(this, "original", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.original = original ?? {
            $type: 'blob',
            ref,
            mimeType,
            size
        };
    }
    static asBlobRef(obj) {
        if (common_web_1.check.is(obj, exports.jsonBlobRef)) return BlobRef.fromJsonRef(obj);
        return null;
    }
    static fromJsonRef(json) {
        if (common_web_1.check.is(json, exports.typedJsonBlobRef)) return new BlobRef(json.ref, json.mimeType, json.size);
        else return new BlobRef(cid_1.CID.parse(json.cid), json.mimeType, -1, json);
    }
    ipld() {
        return {
            $type: 'blob',
            ref: this.ref,
            mimeType: this.mimeType,
            size: this.size
        };
    }
    toJSON() {
        return (0, common_web_1.ipldToJson)(this.ipld());
    }
}
exports.BlobRef = BlobRef;

},{"ed8a9ce6dc15c2e1":"g3FxW","99ee5096da6673b9":"gcE23","d98e4bda308b8188":"2onrJ"}],"g3FxW":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var varint = require("dda600cb6dfe2c14");
var digest = require("e60e0cbf7a7b4441");
var base58 = require("c43bfafc5e72478d");
var base32 = require("d760cfaeab93deb3");
var bytes = require("64a08ea414b56326");
class CID {
    constructor(version, code, multihash, bytes){
        this.code = code;
        this.version = version;
        this.multihash = multihash;
        this.bytes = bytes;
        this.byteOffset = bytes.byteOffset;
        this.byteLength = bytes.byteLength;
        this.asCID = this;
        this._baseCache = new Map();
        Object.defineProperties(this, {
            byteOffset: hidden,
            byteLength: hidden,
            code: readonly,
            version: readonly,
            multihash: readonly,
            bytes: readonly,
            _baseCache: hidden,
            asCID: hidden
        });
    }
    toV0() {
        switch(this.version){
            case 0:
                return this;
            default:
                {
                    const { code, multihash } = this;
                    if (code !== DAG_PB_CODE) throw new Error('Cannot convert a non dag-pb CID to CIDv0');
                    if (multihash.code !== SHA_256_CODE) throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');
                    return CID.createV0(multihash);
                }
        }
    }
    toV1() {
        switch(this.version){
            case 0:
                {
                    const { code, digest: digest$1 } = this.multihash;
                    const multihash = digest.create(code, digest$1);
                    return CID.createV1(this.code, multihash);
                }
            case 1:
                return this;
            default:
                throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
        }
    }
    equals(other) {
        return other && this.code === other.code && this.version === other.version && digest.equals(this.multihash, other.multihash);
    }
    toString(base) {
        const { bytes, version, _baseCache } = this;
        switch(version){
            case 0:
                return toStringV0(bytes, _baseCache, base || base58.base58btc.encoder);
            default:
                return toStringV1(bytes, _baseCache, base || base32.base32.encoder);
        }
    }
    toJSON() {
        return {
            code: this.code,
            version: this.version,
            hash: this.multihash.bytes
        };
    }
    get [Symbol.toStringTag]() {
        return 'CID';
    }
    [Symbol.for('nodejs.util.inspect.custom')]() {
        return 'CID(' + this.toString() + ')';
    }
    static isCID(value) {
        deprecate(/^0\.0/, IS_CID_DEPRECATION);
        return !!(value && (value[cidSymbol] || value.asCID === value));
    }
    get toBaseEncodedString() {
        throw new Error('Deprecated, use .toString()');
    }
    get codec() {
        throw new Error('"codec" property is deprecated, use integer "code" property instead');
    }
    get buffer() {
        throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');
    }
    get multibaseName() {
        throw new Error('"multibaseName" property is deprecated');
    }
    get prefix() {
        throw new Error('"prefix" property is deprecated');
    }
    static asCID(value) {
        if (value instanceof CID) return value;
        else if (value != null && value.asCID === value) {
            const { version, code, multihash, bytes } = value;
            return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));
        } else if (value != null && value[cidSymbol] === true) {
            const { version, multihash, code } = value;
            const digest$1 = digest.decode(multihash);
            return CID.create(version, code, digest$1);
        } else return null;
    }
    static create(version, code, digest) {
        if (typeof code !== 'number') throw new Error('String codecs are no longer supported');
        switch(version){
            case 0:
                if (code !== DAG_PB_CODE) throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
                else return new CID(version, code, digest, digest.bytes);
            case 1:
                {
                    const bytes = encodeCID(version, code, digest.bytes);
                    return new CID(version, code, digest, bytes);
                }
            default:
                throw new Error('Invalid version');
        }
    }
    static createV0(digest) {
        return CID.create(0, DAG_PB_CODE, digest);
    }
    static createV1(code, digest) {
        return CID.create(1, code, digest);
    }
    static decode(bytes) {
        const [cid, remainder] = CID.decodeFirst(bytes);
        if (remainder.length) throw new Error('Incorrect length');
        return cid;
    }
    static decodeFirst(bytes$1) {
        const specs = CID.inspectBytes(bytes$1);
        const prefixSize = specs.size - specs.multihashSize;
        const multihashBytes = bytes.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));
        if (multihashBytes.byteLength !== specs.multihashSize) throw new Error('Incorrect length');
        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
        const digest$1 = new digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
        const cid = specs.version === 0 ? CID.createV0(digest$1) : CID.createV1(specs.codec, digest$1);
        return [
            cid,
            bytes$1.subarray(specs.size)
        ];
    }
    static inspectBytes(initialBytes) {
        let offset = 0;
        const next = ()=>{
            const [i, length] = varint.decode(initialBytes.subarray(offset));
            offset += length;
            return i;
        };
        let version = next();
        let codec = DAG_PB_CODE;
        if (version === 18) {
            version = 0;
            offset = 0;
        } else if (version === 1) codec = next();
        if (version !== 0 && version !== 1) throw new RangeError(`Invalid CID version ${version}`);
        const prefixSize = offset;
        const multihashCode = next();
        const digestSize = next();
        const size = offset + digestSize;
        const multihashSize = size - prefixSize;
        return {
            version,
            codec,
            multihashCode,
            digestSize,
            multihashSize,
            size
        };
    }
    static parse(source, base) {
        const [prefix, bytes] = parseCIDtoBytes(source, base);
        const cid = CID.decode(bytes);
        cid._baseCache.set(prefix, source);
        return cid;
    }
}
const parseCIDtoBytes = (source, base)=>{
    switch(source[0]){
        case 'Q':
            {
                const decoder = base || base58.base58btc;
                return [
                    base58.base58btc.prefix,
                    decoder.decode(`${base58.base58btc.prefix}${source}`)
                ];
            }
        case base58.base58btc.prefix:
            {
                const decoder = base || base58.base58btc;
                return [
                    base58.base58btc.prefix,
                    decoder.decode(source)
                ];
            }
        case base32.base32.prefix:
            {
                const decoder = base || base32.base32;
                return [
                    base32.base32.prefix,
                    decoder.decode(source)
                ];
            }
        default:
            if (base == null) throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');
            return [
                source[0],
                base.decode(source)
            ];
    }
};
const toStringV0 = (bytes, cache, base)=>{
    const { prefix } = base;
    if (prefix !== base58.base58btc.prefix) throw Error(`Cannot string encode V0 in ${base.name} encoding`);
    const cid = cache.get(prefix);
    if (cid == null) {
        const cid = base.encode(bytes).slice(1);
        cache.set(prefix, cid);
        return cid;
    } else return cid;
};
const toStringV1 = (bytes, cache, base)=>{
    const { prefix } = base;
    const cid = cache.get(prefix);
    if (cid == null) {
        const cid = base.encode(bytes);
        cache.set(prefix, cid);
        return cid;
    } else return cid;
};
const DAG_PB_CODE = 112;
const SHA_256_CODE = 18;
const encodeCID = (version, code, multihash)=>{
    const codeOffset = varint.encodingLength(version);
    const hashOffset = codeOffset + varint.encodingLength(code);
    const bytes = new Uint8Array(hashOffset + multihash.byteLength);
    varint.encodeTo(version, bytes, 0);
    varint.encodeTo(code, bytes, codeOffset);
    bytes.set(multihash, hashOffset);
    return bytes;
};
const cidSymbol = Symbol.for('@ipld/js-cid/CID');
const readonly = {
    writable: false,
    configurable: false,
    enumerable: true
};
const hidden = {
    writable: false,
    enumerable: false,
    configurable: false
};
const version = '0.0.0-dev';
const deprecate = (range, message)=>{
    if (range.test(version)) console.warn(message);
    else throw new Error(message);
};
const IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
exports.CID = CID;

},{"dda600cb6dfe2c14":"8GNHV","e60e0cbf7a7b4441":"cZxF3","c43bfafc5e72478d":"fphOB","d760cfaeab93deb3":"5Y5LU","64a08ea414b56326":"lENC2"}],"8GNHV":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var varint$1 = require("49ac8faca326d517");
const decode = (data, offset = 0)=>{
    const code = varint$1.decode(data, offset);
    return [
        code,
        varint$1.decode.bytes
    ];
};
const encodeTo = (int, target, offset = 0)=>{
    varint$1.encode(int, target, offset);
    return target;
};
const encodingLength = (int)=>{
    return varint$1.encodingLength(int);
};
exports.decode = decode;
exports.encodeTo = encodeTo;
exports.encodingLength = encodingLength;

},{"49ac8faca326d517":"f3Ut1"}],"f3Ut1":[function(require,module,exports,__globalThis) {
'use strict';
var encode_1 = encode;
var MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);
function encode(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while(num >= INT){
        out[offset++] = num & 255 | MSB;
        num /= 128;
    }
    while(num & MSBALL){
        out[offset++] = num & 255 | MSB;
        num >>>= 7;
    }
    out[offset] = num | 0;
    encode.bytes = offset - oldOffset + 1;
    return out;
}
var decode = read;
var MSB$1 = 128, REST$1 = 127;
function read(buf, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
    do {
        if (counter >= l) {
            read.bytes = 0;
            throw new RangeError('Could not decode varint');
        }
        b = buf[counter++];
        res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);
        shift += 7;
    }while (b >= MSB$1);
    read.bytes = counter - offset;
    return res;
}
var N1 = Math.pow(2, 7);
var N2 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);
var length = function(value) {
    return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};
var varint = {
    encode: encode_1,
    decode: decode,
    encodingLength: length
};
var _brrp_varint = varint;
var varint$1 = _brrp_varint;
module.exports = varint$1;

},{}],"cZxF3":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var bytes = require("2b489620e8a505e");
var varint = require("7f2da23f950d1d6e");
const create = (code, digest)=>{
    const size = digest.byteLength;
    const sizeOffset = varint.encodingLength(code);
    const digestOffset = sizeOffset + varint.encodingLength(size);
    const bytes = new Uint8Array(digestOffset + size);
    varint.encodeTo(code, bytes, 0);
    varint.encodeTo(size, bytes, sizeOffset);
    bytes.set(digest, digestOffset);
    return new Digest(code, size, digest, bytes);
};
const decode = (multihash)=>{
    const bytes$1 = bytes.coerce(multihash);
    const [code, sizeOffset] = varint.decode(bytes$1);
    const [size, digestOffset] = varint.decode(bytes$1.subarray(sizeOffset));
    const digest = bytes$1.subarray(sizeOffset + digestOffset);
    if (digest.byteLength !== size) throw new Error('Incorrect length');
    return new Digest(code, size, digest, bytes$1);
};
const equals = (a, b)=>{
    if (a === b) return true;
    else return a.code === b.code && a.size === b.size && bytes.equals(a.bytes, b.bytes);
};
class Digest {
    constructor(code, size, digest, bytes){
        this.code = code;
        this.size = size;
        this.digest = digest;
        this.bytes = bytes;
    }
}
exports.Digest = Digest;
exports.create = create;
exports.decode = decode;
exports.equals = equals;

},{"2b489620e8a505e":"lENC2","7f2da23f950d1d6e":"8GNHV"}],"fphOB":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var base = require("83679cee3a38c3ed");
const base58btc = base.baseX({
    name: 'base58btc',
    prefix: 'z',
    alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
});
const base58flickr = base.baseX({
    name: 'base58flickr',
    prefix: 'Z',
    alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
});
exports.base58btc = base58btc;
exports.base58flickr = base58flickr;

},{"83679cee3a38c3ed":"eEt2D"}],"5Y5LU":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var base = require("a71f95f446e3afc0");
const base32 = base.rfc4648({
    prefix: 'b',
    name: 'base32',
    alphabet: 'abcdefghijklmnopqrstuvwxyz234567',
    bitsPerChar: 5
});
const base32upper = base.rfc4648({
    prefix: 'B',
    name: 'base32upper',
    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
    bitsPerChar: 5
});
const base32pad = base.rfc4648({
    prefix: 'c',
    name: 'base32pad',
    alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',
    bitsPerChar: 5
});
const base32padupper = base.rfc4648({
    prefix: 'C',
    name: 'base32padupper',
    alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',
    bitsPerChar: 5
});
const base32hex = base.rfc4648({
    prefix: 'v',
    name: 'base32hex',
    alphabet: '0123456789abcdefghijklmnopqrstuv',
    bitsPerChar: 5
});
const base32hexupper = base.rfc4648({
    prefix: 'V',
    name: 'base32hexupper',
    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',
    bitsPerChar: 5
});
const base32hexpad = base.rfc4648({
    prefix: 't',
    name: 'base32hexpad',
    alphabet: '0123456789abcdefghijklmnopqrstuv=',
    bitsPerChar: 5
});
const base32hexpadupper = base.rfc4648({
    prefix: 'T',
    name: 'base32hexpadupper',
    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',
    bitsPerChar: 5
});
const base32z = base.rfc4648({
    prefix: 'h',
    name: 'base32z',
    alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',
    bitsPerChar: 5
});
exports.base32 = base32;
exports.base32hex = base32hex;
exports.base32hexpad = base32hexpad;
exports.base32hexpadupper = base32hexpadupper;
exports.base32hexupper = base32hexupper;
exports.base32pad = base32pad;
exports.base32padupper = base32padupper;
exports.base32upper = base32upper;
exports.base32z = base32z;

},{"a71f95f446e3afc0":"eEt2D"}],"2onrJ":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function() {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o) {
            var ar = [];
            for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
            for(var k = ownKeys(mod), i = 0; i < k.length; i++)if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
    };
}();
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.util = exports.check = void 0;
exports.check = __importStar(require("fb164dab0f8b8c06"));
exports.util = __importStar(require("4042f4f714b4074"));
__exportStar(require("b86fbe814598bf03"), exports);
__exportStar(require("e37cf4d9258e1a4a"), exports);
__exportStar(require("4042f4f714b4074"), exports);
__exportStar(require("f093109f1835ea5e"), exports);
__exportStar(require("7971c56d35f461db"), exports);
__exportStar(require("3f0e982b4133ba8d"), exports);
__exportStar(require("50113bc61486587d"), exports);
__exportStar(require("8c211330f05a38c3"), exports);
__exportStar(require("3f84292a8b12f84a"), exports);
__exportStar(require("12a33cc6f9c9ec88"), exports);

},{"fb164dab0f8b8c06":"j47Yd","4042f4f714b4074":"eegAI","b86fbe814598bf03":"kAayJ","e37cf4d9258e1a4a":"4gYH8","f093109f1835ea5e":"kLw2E","7971c56d35f461db":"djzDe","3f0e982b4133ba8d":"fZ5Ra","50113bc61486587d":"dYPyd","8c211330f05a38c3":"lSqK9","3f84292a8b12f84a":"l1UMa","12a33cc6f9c9ec88":"tQ7sG"}],"j47Yd":[function(require,module,exports,__globalThis) {
"use strict";
// Explicitly not using "zod" types here to avoid mismatching types due to
// version differences.
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isObject = exports.assure = exports.create = exports.is = void 0;
const is = (obj, def)=>{
    return def.safeParse(obj).success;
};
exports.is = is;
const create = (def)=>(v)=>def.safeParse(v).success;
exports.create = create;
const assure = (def, obj)=>{
    return def.parse(obj);
};
exports.assure = assure;
const isObject = (obj)=>{
    return typeof obj === 'object' && obj !== null;
};
exports.isObject = isObject;

},{}],"eegAI":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseIntWithFallback = exports.dedupeStrs = exports.range = exports.chunkArray = exports.errHasMsg = exports.isErrnoException = exports.asyncFilter = exports.s32decode = exports.s32encode = exports.streamToBuffer = exports.flattenUint8Arrays = exports.bailableWait = exports.wait = exports.jitter = exports.noUndefinedVals = void 0;
exports.omit = omit;
const noUndefinedVals = (obj)=>{
    Object.keys(obj).forEach((k)=>{
        if (obj[k] === undefined) delete obj[k];
    });
    return obj;
};
exports.noUndefinedVals = noUndefinedVals;
function omit(src, rejectedKeys) {
    // Hot path
    if (!src) return src;
    const dst = {};
    const srcKeys = Object.keys(src);
    for(let i = 0; i < srcKeys.length; i++){
        const key = srcKeys[i];
        if (!rejectedKeys.includes(key)) dst[key] = src[key];
    }
    return dst;
}
const jitter = (maxMs)=>{
    return Math.round((Math.random() - 0.5) * maxMs * 2);
};
exports.jitter = jitter;
const wait = (ms)=>{
    return new Promise((res)=>setTimeout(res, ms));
};
exports.wait = wait;
const bailableWait = (ms)=>{
    let bail;
    const waitPromise = new Promise((res)=>{
        const timeout = setTimeout(res, ms);
        bail = ()=>{
            clearTimeout(timeout);
            res();
        };
    });
    return {
        bail,
        wait: ()=>waitPromise
    };
};
exports.bailableWait = bailableWait;
const flattenUint8Arrays = (arrs)=>{
    const length = arrs.reduce((acc, cur)=>{
        return acc + cur.length;
    }, 0);
    const flattened = new Uint8Array(length);
    let offset = 0;
    arrs.forEach((arr)=>{
        flattened.set(arr, offset);
        offset += arr.length;
    });
    return flattened;
};
exports.flattenUint8Arrays = flattenUint8Arrays;
const streamToBuffer = async (stream)=>{
    const arrays = [];
    for await (const chunk of stream)arrays.push(chunk);
    return (0, exports.flattenUint8Arrays)(arrays);
};
exports.streamToBuffer = streamToBuffer;
const S32_CHAR = '234567abcdefghijklmnopqrstuvwxyz';
const s32encode = (i)=>{
    let s = '';
    while(i){
        const c = i % 32;
        i = Math.floor(i / 32);
        s = S32_CHAR.charAt(c) + s;
    }
    return s;
};
exports.s32encode = s32encode;
const s32decode = (s)=>{
    let i = 0;
    for (const c of s)i = i * 32 + S32_CHAR.indexOf(c);
    return i;
};
exports.s32decode = s32decode;
const asyncFilter = async (arr, fn)=>{
    const results = await Promise.all(arr.map((t)=>fn(t)));
    return arr.filter((_, i)=>results[i]);
};
exports.asyncFilter = asyncFilter;
const isErrnoException = (err)=>{
    return !!err && err['code'];
};
exports.isErrnoException = isErrnoException;
const errHasMsg = (err, msg)=>{
    return !!err && typeof err === 'object' && err['message'] === msg;
};
exports.errHasMsg = errHasMsg;
const chunkArray = (arr, chunkSize)=>{
    return arr.reduce((acc, cur, i)=>{
        const chunkI = Math.floor(i / chunkSize);
        if (!acc[chunkI]) acc[chunkI] = [];
        acc[chunkI].push(cur);
        return acc;
    }, []);
};
exports.chunkArray = chunkArray;
const range = (num)=>{
    const nums = [];
    for(let i = 0; i < num; i++)nums.push(i);
    return nums;
};
exports.range = range;
const dedupeStrs = (strs)=>{
    return [
        ...new Set(strs)
    ];
};
exports.dedupeStrs = dedupeStrs;
const parseIntWithFallback = (value, fallback)=>{
    const parsed = parseInt(value || '', 10);
    return isNaN(parsed) ? fallback : parsed;
};
exports.parseIntWithFallback = parseIntWithFallback;

},{}],"kAayJ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mapDefined = void 0;
exports.keyBy = keyBy;
function keyBy(arr, key) {
    return arr.reduce((acc, cur)=>{
        acc.set(cur[key], cur);
        return acc;
    }, new Map());
}
const mapDefined = (arr, fn)=>{
    const output = [];
    for (const item of arr){
        const val = fn(item);
        if (val !== undefined) output.push(val);
    }
    return output;
};
exports.mapDefined = mapDefined;

},{}],"4gYH8":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AsyncBufferFullError = exports.AsyncBuffer = exports.allComplete = exports.createDeferrables = exports.createDeferrable = exports.readFromGenerator = void 0;
exports.allFulfilled = allFulfilled;
exports.handleAllSettledErrors = handleAllSettledErrors;
exports.isRejectedResult = isRejectedResult;
exports.isFulfilledResult = isFulfilledResult;
const util_1 = require("936cb102052738f6");
// reads values from a generator into a list
// breaks when isDone signals `true` AND `waitFor` completes OR when a max length is reached
// NOTE: does not signal generator to close. it *will* continue to produce values
const readFromGenerator = async (gen, isDone, waitFor = Promise.resolve(), maxLength = Number.MAX_SAFE_INTEGER)=>{
    const evts = [];
    let bail;
    let hasBroke = false;
    const awaitDone = async ()=>{
        if (await isDone(evts.at(-1))) return true;
        const bailable = (0, util_1.bailableWait)(20);
        await bailable.wait();
        bail = bailable.bail;
        if (hasBroke) return false;
        return await awaitDone();
    };
    const breakOn = new Promise((resolve)=>{
        waitFor.then(()=>{
            awaitDone().then(()=>resolve());
        });
    });
    try {
        while(evts.length < maxLength){
            const maybeEvt = await Promise.race([
                gen.next(),
                breakOn
            ]);
            if (!maybeEvt) break;
            const evt = maybeEvt;
            if (evt.done) break;
            evts.push(evt.value);
        }
    } finally{
        hasBroke = true;
        bail && bail();
    }
    return evts;
};
exports.readFromGenerator = readFromGenerator;
const createDeferrable = ()=>{
    let resolve;
    const promise = new Promise((res)=>{
        resolve = ()=>res();
    });
    return {
        resolve,
        complete: promise
    };
};
exports.createDeferrable = createDeferrable;
const createDeferrables = (count)=>{
    const list = [];
    for(let i = 0; i < count; i++)list.push((0, exports.createDeferrable)());
    return list;
};
exports.createDeferrables = createDeferrables;
const allComplete = async (deferrables)=>{
    await Promise.all(deferrables.map((d)=>d.complete));
};
exports.allComplete = allComplete;
class AsyncBuffer {
    constructor(maxSize){
        Object.defineProperty(this, "maxSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: maxSize
        });
        Object.defineProperty(this, "buffer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "promise", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "resolve", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "closed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "toThrow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // Initializing to satisfy types/build, immediately reset by resetPromise()
        this.promise = Promise.resolve();
        this.resolve = ()=>null;
        this.resetPromise();
    }
    get curr() {
        return this.buffer;
    }
    get size() {
        return this.buffer.length;
    }
    get isClosed() {
        return this.closed;
    }
    resetPromise() {
        this.promise = new Promise((r)=>this.resolve = r);
    }
    push(item) {
        this.buffer.push(item);
        this.resolve();
    }
    pushMany(items) {
        items.forEach((i)=>this.buffer.push(i));
        this.resolve();
    }
    async *events() {
        while(true){
            if (this.closed && this.buffer.length === 0) {
                if (this.toThrow) throw this.toThrow;
                else return;
            }
            await this.promise;
            if (this.toThrow) throw this.toThrow;
            if (this.maxSize && this.size > this.maxSize) throw new AsyncBufferFullError(this.maxSize);
            const [first, ...rest] = this.buffer;
            if (first) {
                this.buffer = rest;
                yield first;
            } else this.resetPromise();
        }
    }
    throw(err) {
        this.toThrow = err;
        this.closed = true;
        this.resolve();
    }
    close() {
        this.closed = true;
        this.resolve();
    }
}
exports.AsyncBuffer = AsyncBuffer;
class AsyncBufferFullError extends Error {
    constructor(maxSize){
        super(`ReachedMaxBufferSize: ${maxSize}`);
    }
}
exports.AsyncBufferFullError = AsyncBufferFullError;
function allFulfilled(promises) {
    return Promise.allSettled(promises).then(handleAllSettledErrors);
}
function handleAllSettledErrors(results) {
    const errors = results.filter(isRejectedResult).map(extractReason);
    if (errors.length === 0) // No need to filter here, it is safe to assume that all promises are fulfilled
    return results.map(extractValue);
    if (errors.length === 1) throw errors[0];
    throw new AggregateError(errors, `Multiple errors: ${errors.map(stringifyReason).join('\n')}`);
}
function isRejectedResult(result) {
    return result.status === 'rejected';
}
function extractReason(result) {
    return result.reason;
}
function isFulfilledResult(result) {
    return result.status === 'fulfilled';
}
function extractValue(result) {
    return result.value;
}
function stringifyReason(reason) {
    if (reason instanceof Error) return reason.message;
    return String(reason);
}

},{"936cb102052738f6":"eegAI"}],"kLw2E":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TID = void 0;
const util_1 = require("7e9a28c1bd443729");
const TID_LEN = 13;
let lastTimestamp = 0;
let timestampCount = 0;
let clockid = null;
function dedash(str) {
    return str.replaceAll('-', '');
}
class TID {
    constructor(str){
        Object.defineProperty(this, "str", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        const noDashes = dedash(str);
        if (noDashes.length !== TID_LEN) throw new Error(`Poorly formatted TID: ${noDashes.length} length`);
        this.str = noDashes;
    }
    static next(prev) {
        // javascript does not have microsecond precision
        // instead, we append a counter to the timestamp to indicate if multiple timestamps were created within the same millisecond
        // take max of current time & last timestamp to prevent tids moving backwards if system clock drifts backwards
        const time = Math.max(Date.now(), lastTimestamp);
        if (time === lastTimestamp) timestampCount++;
        lastTimestamp = time;
        const timestamp = time * 1000 + timestampCount;
        // the bottom 32 clock ids can be randomized & are not guaranteed to be collision resistant
        // we use the same clockid for all tids coming from this machine
        if (clockid === null) clockid = Math.floor(Math.random() * 32);
        const tid = TID.fromTime(timestamp, clockid);
        if (!prev || tid.newerThan(prev)) return tid;
        return TID.fromTime(prev.timestamp() + 1, clockid);
    }
    static nextStr(prev) {
        return TID.next(prev ? new TID(prev) : undefined).toString();
    }
    static fromTime(timestamp, clockid) {
        // base32 encode with encoding variant sort (s32)
        const str = `${(0, util_1.s32encode)(timestamp)}${(0, util_1.s32encode)(clockid).padStart(2, '2')}`;
        return new TID(str);
    }
    static fromStr(str) {
        return new TID(str);
    }
    static oldestFirst(a, b) {
        return a.compareTo(b);
    }
    static newestFirst(a, b) {
        return b.compareTo(a);
    }
    static is(str) {
        return dedash(str).length === TID_LEN;
    }
    timestamp() {
        return (0, util_1.s32decode)(this.str.slice(0, 11));
    }
    clockid() {
        return (0, util_1.s32decode)(this.str.slice(11, 13));
    }
    formatted() {
        const str = this.toString();
        return `${str.slice(0, 4)}-${str.slice(4, 7)}-${str.slice(7, 11)}-${str.slice(11, 13)}`;
    }
    toString() {
        return this.str;
    }
    // newer > older
    compareTo(other) {
        if (this.str > other.str) return 1;
        if (this.str < other.str) return -1;
        return 0;
    }
    equals(other) {
        return this.str === other.str;
    }
    newerThan(other) {
        return this.compareTo(other) > 0;
    }
    olderThan(other) {
        return this.compareTo(other) < 0;
    }
}
exports.TID = TID;

},{"7e9a28c1bd443729":"eegAI"}],"djzDe":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function() {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o) {
            var ar = [];
            for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
            for(var k = ownKeys(mod), i = 0; i < k.length; i++)if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ipldEquals = exports.ipldToJson = exports.jsonToIpld = void 0;
const cid_1 = require("ce0318bbbb6a5464");
const ui8 = __importStar(require("598ae83b38a4d1c9"));
// @NOTE avoiding use of check.is() here only because it makes
// these implementations slow, and they often live in hot paths.
const jsonToIpld = (val)=>{
    // walk arrays
    if (Array.isArray(val)) return val.map((item)=>(0, exports.jsonToIpld)(item));
    // objects
    if (val && typeof val === 'object') {
        // check for dag json values
        if (typeof val['$link'] === 'string' && Object.keys(val).length === 1) return cid_1.CID.parse(val['$link']);
        if (typeof val['$bytes'] === 'string' && Object.keys(val).length === 1) return ui8.fromString(val['$bytes'], 'base64');
        // walk plain objects
        const toReturn = {};
        for (const key of Object.keys(val))toReturn[key] = (0, exports.jsonToIpld)(val[key]);
        return toReturn;
    }
    // pass through
    return val;
};
exports.jsonToIpld = jsonToIpld;
const ipldToJson = (val)=>{
    // walk arrays
    if (Array.isArray(val)) return val.map((item)=>(0, exports.ipldToJson)(item));
    // objects
    if (val && typeof val === 'object') {
        // convert bytes
        if (val instanceof Uint8Array) return {
            $bytes: ui8.toString(val, 'base64')
        };
        // convert cids
        if (cid_1.CID.asCID(val)) return {
            $link: val.toString()
        };
        // walk plain objects
        const toReturn = {};
        for (const key of Object.keys(val))toReturn[key] = (0, exports.ipldToJson)(val[key]);
        return toReturn;
    }
    // pass through
    return val;
};
exports.ipldToJson = ipldToJson;
const ipldEquals = (a, b)=>{
    // walk arrays
    if (Array.isArray(a) && Array.isArray(b)) {
        if (a.length !== b.length) return false;
        for(let i = 0; i < a.length; i++){
            if (!(0, exports.ipldEquals)(a[i], b[i])) return false;
        }
        return true;
    }
    // objects
    if (a && b && typeof a === 'object' && typeof b === 'object') {
        // check bytes
        if (a instanceof Uint8Array && b instanceof Uint8Array) return ui8.equals(a, b);
        // check cids
        if (cid_1.CID.asCID(a) && cid_1.CID.asCID(b)) return cid_1.CID.asCID(a)?.equals(cid_1.CID.asCID(b));
        // walk plain objects
        if (Object.keys(a).length !== Object.keys(b).length) return false;
        for (const key of Object.keys(a)){
            if (!(0, exports.ipldEquals)(a[key], b[key])) return false;
        }
        return true;
    }
    return a === b;
};
exports.ipldEquals = ipldEquals;

},{"ce0318bbbb6a5464":"g3FxW","598ae83b38a4d1c9":"YIvn7"}],"YIvn7":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var compare = require("2723be925479f9b5");
var concat = require("55601d17c951cece");
var equals = require("d6e785ac4c89a0f4");
var fromString = require("6d9691200c10f5ac");
var toString = require("4f7d775db91966d");
var xor = require("6b9ec6020595ff59");
exports.compare = compare.compare;
exports.concat = concat.concat;
exports.equals = equals.equals;
exports.fromString = fromString.fromString;
exports.toString = toString.toString;
exports.xor = xor.xor;

},{"2723be925479f9b5":"dfVvE","55601d17c951cece":"3z6zG","d6e785ac4c89a0f4":"dzZhM","6d9691200c10f5ac":"f8Mhv","4f7d775db91966d":"kYdPt","6b9ec6020595ff59":"drhHN"}],"dfVvE":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
function compare(a, b) {
    for(let i = 0; i < a.byteLength; i++){
        if (a[i] < b[i]) return -1;
        if (a[i] > b[i]) return 1;
    }
    if (a.byteLength > b.byteLength) return 1;
    if (a.byteLength < b.byteLength) return -1;
    return 0;
}
exports.compare = compare;

},{}],"3z6zG":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
function concat(arrays, length) {
    if (!length) length = arrays.reduce((acc, curr)=>acc + curr.length, 0);
    const output = new Uint8Array(length);
    let offset = 0;
    for (const arr of arrays){
        output.set(arr, offset);
        offset += arr.length;
    }
    return output;
}
exports.concat = concat;

},{}],"dzZhM":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
function equals(a, b) {
    if (a === b) return true;
    if (a.byteLength !== b.byteLength) return false;
    for(let i = 0; i < a.byteLength; i++){
        if (a[i] !== b[i]) return false;
    }
    return true;
}
exports.equals = equals;

},{}],"f8Mhv":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var bases = require("99480b3736a45df8");
function fromString(string, encoding = 'utf8') {
    const base = bases[encoding];
    if (!base) throw new Error(`Unsupported encoding "${encoding}"`);
    return base.decoder.decode(`${base.prefix}${string}`);
}
exports.fromString = fromString;

},{"99480b3736a45df8":"c65We"}],"c65We":[function(require,module,exports,__globalThis) {
'use strict';
var basics = require("190b60d88612a55");
function createCodec(name, prefix, encode, decode) {
    return {
        name,
        prefix,
        encoder: {
            name,
            prefix,
            encode
        },
        decoder: {
            decode
        }
    };
}
const string = createCodec('utf8', 'u', (buf)=>{
    const decoder = new TextDecoder('utf8');
    return 'u' + decoder.decode(buf);
}, (str)=>{
    const encoder = new TextEncoder();
    return encoder.encode(str.substring(1));
});
const ascii = createCodec('ascii', 'a', (buf)=>{
    let string = 'a';
    for(let i = 0; i < buf.length; i++)string += String.fromCharCode(buf[i]);
    return string;
}, (str)=>{
    str = str.substring(1);
    const buf = new Uint8Array(str.length);
    for(let i = 0; i < str.length; i++)buf[i] = str.charCodeAt(i);
    return buf;
});
const BASES = {
    utf8: string,
    'utf-8': string,
    hex: basics.bases.base16,
    latin1: ascii,
    ascii: ascii,
    binary: ascii,
    ...basics.bases
};
module.exports = BASES;

},{"190b60d88612a55":"4qPoz"}],"4qPoz":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var identity = require("5661bf79a4a86163");
var base2 = require("92f7de35992ff529");
var base8 = require("99403555646e4b01");
var base10 = require("7bd4c12dbdbfa352");
var base16 = require("5d0a92fef6fb89bf");
var base32 = require("c1a0d10fb67cd525");
var base36 = require("faca89b129a6c1b2");
var base58 = require("3ab4168f23b15924");
var base64 = require("33e7c811597529af");
var base256emoji = require("b5ec1ca7b3019d4");
var sha2 = require("d25d3b6bcb424c86");
var identity$1 = require("460d65c54398a6e4");
var raw = require("addaf882fdf30c51");
var json = require("cd95f9ca9f42ac1e");
require("b09ac10d5fa2ec4b");
var cid = require("79cc7d8ad966fcf");
var hasher = require("d6f49237d20b9c1c");
var digest = require("f6479bf16d9a334c");
var varint = require("6391ff4d314b3214");
var bytes = require("27296f9a39cee6a4");
const bases = {
    ...identity,
    ...base2,
    ...base8,
    ...base10,
    ...base16,
    ...base32,
    ...base36,
    ...base58,
    ...base64,
    ...base256emoji
};
const hashes = {
    ...sha2,
    ...identity$1
};
const codecs = {
    raw,
    json
};
exports.CID = cid.CID;
exports.hasher = hasher;
exports.digest = digest;
exports.varint = varint;
exports.bytes = bytes;
exports.bases = bases;
exports.codecs = codecs;
exports.hashes = hashes;

},{"5661bf79a4a86163":"1TFSr","92f7de35992ff529":"gneXV","99403555646e4b01":"1gf3Y","7bd4c12dbdbfa352":"618DO","5d0a92fef6fb89bf":"2usT5","c1a0d10fb67cd525":"5Y5LU","faca89b129a6c1b2":"iDVrW","3ab4168f23b15924":"fphOB","33e7c811597529af":"jzjLH","b5ec1ca7b3019d4":"iqy4A","d25d3b6bcb424c86":"eMH1E","460d65c54398a6e4":"iqWrO","addaf882fdf30c51":"1BHkE","cd95f9ca9f42ac1e":"aWgEB","b09ac10d5fa2ec4b":"dFJYr","79cc7d8ad966fcf":"g3FxW","d6f49237d20b9c1c":"10X5h","f6479bf16d9a334c":"cZxF3","6391ff4d314b3214":"8GNHV","27296f9a39cee6a4":"lENC2"}],"1TFSr":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var base = require("bab538411f8ce9c0");
var bytes = require("64f3cab3fd4dd6b");
const identity = base.from({
    prefix: '\0',
    name: 'identity',
    encode: (buf)=>bytes.toString(buf),
    decode: (str)=>bytes.fromString(str)
});
exports.identity = identity;

},{"bab538411f8ce9c0":"eEt2D","64f3cab3fd4dd6b":"lENC2"}],"gneXV":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var base = require("d92b1da40210e764");
const base2 = base.rfc4648({
    prefix: '0',
    name: 'base2',
    alphabet: '01',
    bitsPerChar: 1
});
exports.base2 = base2;

},{"d92b1da40210e764":"eEt2D"}],"1gf3Y":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var base = require("8f834d7ec49f71ea");
const base8 = base.rfc4648({
    prefix: '7',
    name: 'base8',
    alphabet: '01234567',
    bitsPerChar: 3
});
exports.base8 = base8;

},{"8f834d7ec49f71ea":"eEt2D"}],"618DO":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var base = require("72679f0e6da595d0");
const base10 = base.baseX({
    prefix: '9',
    name: 'base10',
    alphabet: '0123456789'
});
exports.base10 = base10;

},{"72679f0e6da595d0":"eEt2D"}],"2usT5":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var base = require("20fe0ea66660873a");
const base16 = base.rfc4648({
    prefix: 'f',
    name: 'base16',
    alphabet: '0123456789abcdef',
    bitsPerChar: 4
});
const base16upper = base.rfc4648({
    prefix: 'F',
    name: 'base16upper',
    alphabet: '0123456789ABCDEF',
    bitsPerChar: 4
});
exports.base16 = base16;
exports.base16upper = base16upper;

},{"20fe0ea66660873a":"eEt2D"}],"iDVrW":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var base = require("f8d89a854fe0304b");
const base36 = base.baseX({
    prefix: 'k',
    name: 'base36',
    alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'
});
const base36upper = base.baseX({
    prefix: 'K',
    name: 'base36upper',
    alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
});
exports.base36 = base36;
exports.base36upper = base36upper;

},{"f8d89a854fe0304b":"eEt2D"}],"iqy4A":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var base = require("e6238c0263a514ec");
const alphabet = Array.from('\uD83D\uDE80\uD83E\uDE90\u2604\uD83D\uDEF0\uD83C\uDF0C\uD83C\uDF11\uD83C\uDF12\uD83C\uDF13\uD83C\uDF14\uD83C\uDF15\uD83C\uDF16\uD83C\uDF17\uD83C\uDF18\uD83C\uDF0D\uD83C\uDF0F\uD83C\uDF0E\uD83D\uDC09\u2600\uD83D\uDCBB\uD83D\uDDA5\uD83D\uDCBE\uD83D\uDCBF\uD83D\uDE02\u2764\uD83D\uDE0D\uD83E\uDD23\uD83D\uDE0A\uD83D\uDE4F\uD83D\uDC95\uD83D\uDE2D\uD83D\uDE18\uD83D\uDC4D\uD83D\uDE05\uD83D\uDC4F\uD83D\uDE01\uD83D\uDD25\uD83E\uDD70\uD83D\uDC94\uD83D\uDC96\uD83D\uDC99\uD83D\uDE22\uD83E\uDD14\uD83D\uDE06\uD83D\uDE44\uD83D\uDCAA\uD83D\uDE09\u263A\uD83D\uDC4C\uD83E\uDD17\uD83D\uDC9C\uD83D\uDE14\uD83D\uDE0E\uD83D\uDE07\uD83C\uDF39\uD83E\uDD26\uD83C\uDF89\uD83D\uDC9E\u270C\u2728\uD83E\uDD37\uD83D\uDE31\uD83D\uDE0C\uD83C\uDF38\uD83D\uDE4C\uD83D\uDE0B\uD83D\uDC97\uD83D\uDC9A\uD83D\uDE0F\uD83D\uDC9B\uD83D\uDE42\uD83D\uDC93\uD83E\uDD29\uD83D\uDE04\uD83D\uDE00\uD83D\uDDA4\uD83D\uDE03\uD83D\uDCAF\uD83D\uDE48\uD83D\uDC47\uD83C\uDFB6\uD83D\uDE12\uD83E\uDD2D\u2763\uD83D\uDE1C\uD83D\uDC8B\uD83D\uDC40\uD83D\uDE2A\uD83D\uDE11\uD83D\uDCA5\uD83D\uDE4B\uD83D\uDE1E\uD83D\uDE29\uD83D\uDE21\uD83E\uDD2A\uD83D\uDC4A\uD83E\uDD73\uD83D\uDE25\uD83E\uDD24\uD83D\uDC49\uD83D\uDC83\uD83D\uDE33\u270B\uD83D\uDE1A\uD83D\uDE1D\uD83D\uDE34\uD83C\uDF1F\uD83D\uDE2C\uD83D\uDE43\uD83C\uDF40\uD83C\uDF37\uD83D\uDE3B\uD83D\uDE13\u2B50\u2705\uD83E\uDD7A\uD83C\uDF08\uD83D\uDE08\uD83E\uDD18\uD83D\uDCA6\u2714\uD83D\uDE23\uD83C\uDFC3\uD83D\uDC90\u2639\uD83C\uDF8A\uD83D\uDC98\uD83D\uDE20\u261D\uD83D\uDE15\uD83C\uDF3A\uD83C\uDF82\uD83C\uDF3B\uD83D\uDE10\uD83D\uDD95\uD83D\uDC9D\uD83D\uDE4A\uD83D\uDE39\uD83D\uDDE3\uD83D\uDCAB\uD83D\uDC80\uD83D\uDC51\uD83C\uDFB5\uD83E\uDD1E\uD83D\uDE1B\uD83D\uDD34\uD83D\uDE24\uD83C\uDF3C\uD83D\uDE2B\u26BD\uD83E\uDD19\u2615\uD83C\uDFC6\uD83E\uDD2B\uD83D\uDC48\uD83D\uDE2E\uD83D\uDE46\uD83C\uDF7B\uD83C\uDF43\uD83D\uDC36\uD83D\uDC81\uD83D\uDE32\uD83C\uDF3F\uD83E\uDDE1\uD83C\uDF81\u26A1\uD83C\uDF1E\uD83C\uDF88\u274C\u270A\uD83D\uDC4B\uD83D\uDE30\uD83E\uDD28\uD83D\uDE36\uD83E\uDD1D\uD83D\uDEB6\uD83D\uDCB0\uD83C\uDF53\uD83D\uDCA2\uD83E\uDD1F\uD83D\uDE41\uD83D\uDEA8\uD83D\uDCA8\uD83E\uDD2C\u2708\uD83C\uDF80\uD83C\uDF7A\uD83E\uDD13\uD83D\uDE19\uD83D\uDC9F\uD83C\uDF31\uD83D\uDE16\uD83D\uDC76\uD83E\uDD74\u25B6\u27A1\u2753\uD83D\uDC8E\uD83D\uDCB8\u2B07\uD83D\uDE28\uD83C\uDF1A\uD83E\uDD8B\uD83D\uDE37\uD83D\uDD7A\u26A0\uD83D\uDE45\uD83D\uDE1F\uD83D\uDE35\uD83D\uDC4E\uD83E\uDD32\uD83E\uDD20\uD83E\uDD27\uD83D\uDCCC\uD83D\uDD35\uD83D\uDC85\uD83E\uDDD0\uD83D\uDC3E\uD83C\uDF52\uD83D\uDE17\uD83E\uDD11\uD83C\uDF0A\uD83E\uDD2F\uD83D\uDC37\u260E\uD83D\uDCA7\uD83D\uDE2F\uD83D\uDC86\uD83D\uDC46\uD83C\uDFA4\uD83D\uDE47\uD83C\uDF51\u2744\uD83C\uDF34\uD83D\uDCA3\uD83D\uDC38\uD83D\uDC8C\uD83D\uDCCD\uD83E\uDD40\uD83E\uDD22\uD83D\uDC45\uD83D\uDCA1\uD83D\uDCA9\uD83D\uDC50\uD83D\uDCF8\uD83D\uDC7B\uD83E\uDD10\uD83E\uDD2E\uD83C\uDFBC\uD83E\uDD75\uD83D\uDEA9\uD83C\uDF4E\uD83C\uDF4A\uD83D\uDC7C\uD83D\uDC8D\uD83D\uDCE3\uD83E\uDD42');
const alphabetBytesToChars = alphabet.reduce((p, c, i)=>{
    p[i] = c;
    return p;
}, []);
const alphabetCharsToBytes = alphabet.reduce((p, c, i)=>{
    p[c.codePointAt(0)] = i;
    return p;
}, []);
function encode(data) {
    return data.reduce((p, c)=>{
        p += alphabetBytesToChars[c];
        return p;
    }, '');
}
function decode(str) {
    const byts = [];
    for (const char of str){
        const byt = alphabetCharsToBytes[char.codePointAt(0)];
        if (byt === undefined) throw new Error(`Non-base256emoji character: ${char}`);
        byts.push(byt);
    }
    return new Uint8Array(byts);
}
const base256emoji = base.from({
    prefix: '\uD83D\uDE80',
    name: 'base256emoji',
    encode,
    decode
});
exports.base256emoji = base256emoji;

},{"e6238c0263a514ec":"eEt2D"}],"eMH1E":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var hasher = require("87c93fe66805c4b2");
const sha = (name)=>async (data)=>new Uint8Array(await crypto.subtle.digest(name, data));
const sha256 = hasher.from({
    name: 'sha2-256',
    code: 18,
    encode: sha('SHA-256')
});
const sha512 = hasher.from({
    name: 'sha2-512',
    code: 19,
    encode: sha('SHA-512')
});
exports.sha256 = sha256;
exports.sha512 = sha512;

},{"87c93fe66805c4b2":"10X5h"}],"10X5h":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var digest = require("c1652a21a595dba0");
const from = ({ name, code, encode })=>new Hasher(name, code, encode);
class Hasher {
    constructor(name, code, encode){
        this.name = name;
        this.code = code;
        this.encode = encode;
    }
    digest(input) {
        if (input instanceof Uint8Array) {
            const result = this.encode(input);
            return result instanceof Uint8Array ? digest.create(this.code, result) : result.then((digest$1)=>digest.create(this.code, digest$1));
        } else throw Error('Unknown type, must be binary type');
    }
}
exports.Hasher = Hasher;
exports.from = from;

},{"c1652a21a595dba0":"cZxF3"}],"iqWrO":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var bytes = require("31f761986cad8f87");
var digest$1 = require("28f7d5b97a7f9531");
const code = 0;
const name = 'identity';
const encode = bytes.coerce;
const digest = (input)=>digest$1.create(code, encode(input));
const identity = {
    code,
    name,
    encode,
    digest
};
exports.identity = identity;

},{"31f761986cad8f87":"lENC2","28f7d5b97a7f9531":"cZxF3"}],"1BHkE":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var bytes = require("d6ff41dc2ba68cf7");
const name = 'raw';
const code = 85;
const encode = (node)=>bytes.coerce(node);
const decode = (data)=>bytes.coerce(data);
exports.code = code;
exports.decode = decode;
exports.encode = encode;
exports.name = name;

},{"d6ff41dc2ba68cf7":"lENC2"}],"aWgEB":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
const textEncoder = new TextEncoder();
const textDecoder = new TextDecoder();
const name = 'json';
const code = 512;
const encode = (node)=>textEncoder.encode(JSON.stringify(node));
const decode = (data)=>JSON.parse(textDecoder.decode(data));
exports.code = code;
exports.decode = decode;
exports.encode = encode;
exports.name = name;

},{}],"dFJYr":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var cid = require("ed6c6fe9a905f417");
var varint = require("e06d36b96b5c2352");
var bytes = require("1d23ed7c351b4be9");
var hasher = require("3a38bf5318adcc6f");
var digest = require("4a8c46149de7f8e2");
exports.CID = cid.CID;
exports.varint = varint;
exports.bytes = bytes;
exports.hasher = hasher;
exports.digest = digest;

},{"ed6c6fe9a905f417":"g3FxW","e06d36b96b5c2352":"8GNHV","1d23ed7c351b4be9":"lENC2","3a38bf5318adcc6f":"10X5h","4a8c46149de7f8e2":"cZxF3"}],"kYdPt":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
var bases = require("e6f7ed57dbbb83e3");
function toString(array, encoding = 'utf8') {
    const base = bases[encoding];
    if (!base) throw new Error(`Unsupported encoding "${encoding}"`);
    return base.encoder.encode(array).substring(1);
}
exports.toString = toString;

},{"e6f7ed57dbbb83e3":"c65We"}],"drhHN":[function(require,module,exports,__globalThis) {
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
function xor(a, b) {
    if (a.length !== b.length) throw new Error('Inputs should have the same length');
    const result = new Uint8Array(a.length);
    for(let i = 0; i < a.length; i++)result[i] = a[i] ^ b[i];
    return result;
}
exports.xor = xor;

},{}],"fZ5Ra":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.retry = retry;
exports.createRetryable = createRetryable;
exports.backoffMs = backoffMs;
const util_1 = require("97eba4b3c8911fb4");
async function retry(fn, opts = {}) {
    const { maxRetries = 3, retryable = ()=>true, getWaitMs = backoffMs } = opts;
    let retries = 0;
    let doneError;
    while(!doneError)try {
        return await fn();
    } catch (err) {
        const waitMs = getWaitMs(retries);
        const willRetry = retries < maxRetries && waitMs !== null && retryable(err);
        if (willRetry) {
            retries += 1;
            if (waitMs !== 0) await (0, util_1.wait)(waitMs);
        } else doneError = err;
    }
    throw doneError;
}
function createRetryable(retryable) {
    return async (fn, opts)=>retry(fn, {
            ...opts,
            retryable
        });
}
// Waits exponential backoff with max and jitter: ~100, ~200, ~400, ~800, ~1000, ~1000, ...
function backoffMs(n, multiplier = 100, max = 1000) {
    const exponentialMs = Math.pow(2, n) * multiplier;
    const ms = Math.min(exponentialMs, max);
    return jitter(ms);
}
// Adds randomness +/-15% of value
function jitter(value) {
    const delta = value * 0.15;
    return value + randomRange(-delta, delta);
}
function randomRange(from, to) {
    const rand = Math.random() * (to - from);
    return rand + from;
}

},{"97eba4b3c8911fb4":"eegAI"}],"dYPyd":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.def = exports.schema = void 0;
const cid_1 = require("ef0cc6e96aa15c1c");
const zod_1 = require("f0d839a1403bad2");
const cidSchema = zod_1.z.unknown().transform((obj, ctx)=>{
    const cid = cid_1.CID.asCID(obj);
    if (cid == null) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'Not a valid CID'
        });
        return zod_1.z.NEVER;
    }
    return cid;
});
const carHeader = zod_1.z.object({
    version: zod_1.z.literal(1),
    roots: zod_1.z.array(cidSchema)
});
exports.schema = {
    cid: cidSchema,
    carHeader,
    bytes: zod_1.z.instanceof(Uint8Array),
    string: zod_1.z.string(),
    array: zod_1.z.array(zod_1.z.unknown()),
    map: zod_1.z.record(zod_1.z.string(), zod_1.z.unknown()),
    unknown: zod_1.z.unknown()
};
exports.def = {
    cid: {
        name: 'cid',
        schema: exports.schema.cid
    },
    carHeader: {
        name: 'CAR header',
        schema: exports.schema.carHeader
    },
    bytes: {
        name: 'bytes',
        schema: exports.schema.bytes
    },
    string: {
        name: 'string',
        schema: exports.schema.string
    },
    map: {
        name: 'map',
        schema: exports.schema.map
    },
    unknown: {
        name: 'unknown',
        schema: exports.schema.unknown
    }
};

},{"ef0cc6e96aa15c1c":"g3FxW","f0d839a1403bad2":"gcE23"}],"lSqK9":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.addHoursToDate = exports.lessThanAgoMs = exports.DAY = exports.HOUR = exports.MINUTE = exports.SECOND = void 0;
exports.SECOND = 1000;
exports.MINUTE = exports.SECOND * 60;
exports.HOUR = exports.MINUTE * 60;
exports.DAY = exports.HOUR * 24;
const lessThanAgoMs = (time, range)=>{
    return Date.now() < time.getTime() + range;
};
exports.lessThanAgoMs = lessThanAgoMs;
const addHoursToDate = (hours, startingDate)=>{
    // When date is passed, clone before calling `setHours()` so that we are not mutating the original date
    const currentDate = startingDate ? new Date(startingDate) : new Date();
    currentDate.setHours(currentDate.getHours() + hours);
    return currentDate;
};
exports.addHoursToDate = addHoursToDate;

},{}],"l1UMa":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function() {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o) {
            var ar = [];
            for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
            for(var k = ownKeys(mod), i = 0; i < k.length; i++)if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
    };
}();
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validateLanguage = exports.parseLanguage = exports.b64UrlToUtf8 = exports.utf8ToB64Url = exports.graphemeLen = exports.utf8Len = void 0;
const graphemer_1 = __importDefault(require("a50e7029d67fd6b4"));
const ui8 = __importStar(require("c339778da33ff874"));
// counts the number of bytes in a utf8 string
const utf8Len = (str)=>{
    return new TextEncoder().encode(str).byteLength;
};
exports.utf8Len = utf8Len;
// counts the number of graphemes (user-displayed characters) in a string
const graphemeLen = (str)=>{
    const splitter = new graphemer_1.default();
    return splitter.countGraphemes(str);
};
exports.graphemeLen = graphemeLen;
const utf8ToB64Url = (utf8)=>{
    return ui8.toString(ui8.fromString(utf8, 'utf8'), 'base64url');
};
exports.utf8ToB64Url = utf8ToB64Url;
const b64UrlToUtf8 = (b64)=>{
    return ui8.toString(ui8.fromString(b64, 'base64url'), 'utf8');
};
exports.b64UrlToUtf8 = b64UrlToUtf8;
const parseLanguage = (langTag)=>{
    const parsed = langTag.match(bcp47Regexp);
    if (!parsed?.groups) return null;
    const parts = parsed.groups;
    return {
        grandfathered: parts.grandfathered,
        language: parts.language,
        extlang: parts.extlang,
        script: parts.script,
        region: parts.region,
        variant: parts.variant,
        extension: parts.extension,
        privateUse: parts.privateUseA || parts.privateUseB
    };
};
exports.parseLanguage = parseLanguage;
const validateLanguage = (langTag)=>{
    return bcp47Regexp.test(langTag);
};
exports.validateLanguage = validateLanguage;
// Validates well-formed BCP 47 syntax: https://www.rfc-editor.org/rfc/rfc5646.html#section-2.1
const bcp47Regexp = /^((?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?<privateUseA>x(-[A-Za-z0-9]{1,8})+))?)|(?<privateUseB>x(-[A-Za-z0-9]{1,8})+))$/;

},{"a50e7029d67fd6b4":"6PgJo","c339778da33ff874":"YIvn7"}],"6PgJo":[function(require,module,exports,__globalThis) {
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Graphemer_1 = __importDefault(require("704bc5d352163c90"));
exports.default = Graphemer_1.default;

},{"704bc5d352163c90":"a1xzX"}],"a1xzX":[function(require,module,exports,__globalThis) {
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const boundaries_1 = require("c66f707714d0a681");
const GraphemerHelper_1 = __importDefault(require("cf456655d60f0dc1"));
const GraphemerIterator_1 = __importDefault(require("4da0ff3200da4614"));
class Graphemer {
    /**
     * Returns the next grapheme break in the string after the given index
     * @param string {string}
     * @param index {number}
     * @returns {number}
     */ static nextBreak(string, index) {
        if (index === undefined) index = 0;
        if (index < 0) return 0;
        if (index >= string.length - 1) return string.length;
        const prevCP = GraphemerHelper_1.default.codePointAt(string, index);
        const prev = Graphemer.getGraphemeBreakProperty(prevCP);
        const prevEmoji = Graphemer.getEmojiProperty(prevCP);
        const mid = [];
        const midEmoji = [];
        for(let i = index + 1; i < string.length; i++){
            // check for already processed low surrogates
            if (GraphemerHelper_1.default.isSurrogate(string, i - 1)) continue;
            const nextCP = GraphemerHelper_1.default.codePointAt(string, i);
            const next = Graphemer.getGraphemeBreakProperty(nextCP);
            const nextEmoji = Graphemer.getEmojiProperty(nextCP);
            if (GraphemerHelper_1.default.shouldBreak(prev, mid, next, prevEmoji, midEmoji, nextEmoji)) return i;
            mid.push(next);
            midEmoji.push(nextEmoji);
        }
        return string.length;
    }
    /**
     * Breaks the given string into an array of grapheme clusters
     * @param str {string}
     * @returns {string[]}
     */ splitGraphemes(str) {
        const res = [];
        let index = 0;
        let brk;
        while((brk = Graphemer.nextBreak(str, index)) < str.length){
            res.push(str.slice(index, brk));
            index = brk;
        }
        if (index < str.length) res.push(str.slice(index));
        return res;
    }
    /**
     * Returns an iterator of grapheme clusters in the given string
     * @param str {string}
     * @returns {GraphemerIterator}
     */ iterateGraphemes(str) {
        return new GraphemerIterator_1.default(str, Graphemer.nextBreak);
    }
    /**
     * Returns the number of grapheme clusters in the given string
     * @param str {string}
     * @returns {number}
     */ countGraphemes(str) {
        let count = 0;
        let index = 0;
        let brk;
        while((brk = Graphemer.nextBreak(str, index)) < str.length){
            index = brk;
            count++;
        }
        if (index < str.length) count++;
        return count;
    }
    /**
     * Given a Unicode code point, determines this symbol's grapheme break property
     * @param code {number} Unicode code point
     * @returns {number}
     */ static getGraphemeBreakProperty(code) {
        // Grapheme break property taken from:
        // https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt
        // and generated by
        // node ./scripts/generate-grapheme-break.js
        if (code < 0xbf09) {
            if (code < 0xac54) {
                if (code < 0x102d) {
                    if (code < 0xb02) {
                        if (code < 0x93b) {
                            if (code < 0x6df) {
                                if (code < 0x5bf) {
                                    if (code < 0x7f) {
                                        if (code < 0xb) {
                                            if (code < 0xa) {
                                                // Cc  [10] <control-0000>..<control-0009>
                                                if (0x0 <= code && code <= 0x9) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                            } else {
                                                // Cc       <control-000A>
                                                if (0xa === code) return boundaries_1.CLUSTER_BREAK.LF;
                                            }
                                        } else {
                                            if (code < 0xd) {
                                                // Cc   [2] <control-000B>..<control-000C>
                                                if (0xb <= code && code <= 0xc) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                            } else if (code < 0xe) {
                                                // Cc       <control-000D>
                                                if (0xd === code) return boundaries_1.CLUSTER_BREAK.CR;
                                            } else {
                                                // Cc  [18] <control-000E>..<control-001F>
                                                if (0xe <= code && code <= 0x1f) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                            }
                                        }
                                    } else if (code < 0x300) {
                                        if (code < 0xad) {
                                            // Cc  [33] <control-007F>..<control-009F>
                                            if (0x7f <= code && code <= 0x9f) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                        } else {
                                            // Cf       SOFT HYPHEN
                                            if (0xad === code) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                        }
                                    } else {
                                        if (code < 0x483) {
                                            // Mn [112] COMBINING GRAVE ACCENT..COMBINING LATIN SMALL LETTER X
                                            if (0x300 <= code && code <= 0x36f) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0x591) {
                                            // Mn   [5] COMBINING CYRILLIC TITLO..COMBINING CYRILLIC POKRYTIE
                                            // Me   [2] COMBINING CYRILLIC HUNDRED THOUSANDS SIGN..COMBINING CYRILLIC MILLIONS SIGN
                                            if (0x483 <= code && code <= 0x489) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mn  [45] HEBREW ACCENT ETNAHTA..HEBREW POINT METEG
                                            if (0x591 <= code && code <= 0x5bd) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else {
                                    if (code < 0x610) {
                                        if (code < 0x5c4) {
                                            if (code < 0x5c1) {
                                                // Mn       HEBREW POINT RAFE
                                                if (0x5bf === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                // Mn   [2] HEBREW POINT SHIN DOT..HEBREW POINT SIN DOT
                                                if (0x5c1 <= code && code <= 0x5c2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code < 0x5c7) {
                                                // Mn   [2] HEBREW MARK UPPER DOT..HEBREW MARK LOWER DOT
                                                if (0x5c4 <= code && code <= 0x5c5) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code < 0x600) {
                                                // Mn       HEBREW POINT QAMATS QATAN
                                                if (0x5c7 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                // Cf   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE
                                                if (0x600 <= code && code <= 0x605) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                            }
                                        }
                                    } else if (code < 0x670) {
                                        if (code < 0x61c) {
                                            // Mn  [11] ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM..ARABIC SMALL KASRA
                                            if (0x610 <= code && code <= 0x61a) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0x64b) {
                                            // Cf       ARABIC LETTER MARK
                                            if (0x61c === code) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                        } else {
                                            // Mn  [21] ARABIC FATHATAN..ARABIC WAVY HAMZA BELOW
                                            if (0x64b <= code && code <= 0x65f) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code < 0x6d6) {
                                            // Mn       ARABIC LETTER SUPERSCRIPT ALEF
                                            if (0x670 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0x6dd) {
                                            // Mn   [7] ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA..ARABIC SMALL HIGH SEEN
                                            if (0x6d6 <= code && code <= 0x6dc) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Cf       ARABIC END OF AYAH
                                            if (0x6dd === code) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                        }
                                    }
                                }
                            } else {
                                if (code < 0x81b) {
                                    if (code < 0x730) {
                                        if (code < 0x6ea) {
                                            if (code < 0x6e7) {
                                                // Mn   [6] ARABIC SMALL HIGH ROUNDED ZERO..ARABIC SMALL HIGH MADDA
                                                if (0x6df <= code && code <= 0x6e4) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                // Mn   [2] ARABIC SMALL HIGH YEH..ARABIC SMALL HIGH NOON
                                                if (0x6e7 <= code && code <= 0x6e8) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else if (code < 0x70f) {
                                            // Mn   [4] ARABIC EMPTY CENTRE LOW STOP..ARABIC SMALL LOW MEEM
                                            if (0x6ea <= code && code <= 0x6ed) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Cf       SYRIAC ABBREVIATION MARK
                                            if (0x70f === code) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                            // Mn       SYRIAC LETTER SUPERSCRIPT ALAPH
                                            if (0x711 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else if (code < 0x7eb) {
                                        if (code < 0x7a6) {
                                            // Mn  [27] SYRIAC PTHAHA ABOVE..SYRIAC BARREKH
                                            if (0x730 <= code && code <= 0x74a) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mn  [11] THAANA ABAFILI..THAANA SUKUN
                                            if (0x7a6 <= code && code <= 0x7b0) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code < 0x7fd) {
                                            // Mn   [9] NKO COMBINING SHORT HIGH TONE..NKO COMBINING DOUBLE DOT ABOVE
                                            if (0x7eb <= code && code <= 0x7f3) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0x816) {
                                            // Mn       NKO DANTAYALAN
                                            if (0x7fd === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mn   [4] SAMARITAN MARK IN..SAMARITAN MARK DAGESH
                                            if (0x816 <= code && code <= 0x819) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else if (code < 0x898) {
                                    if (code < 0x829) {
                                        if (code < 0x825) {
                                            // Mn   [9] SAMARITAN MARK EPENTHETIC YUT..SAMARITAN VOWEL SIGN A
                                            if (0x81b <= code && code <= 0x823) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mn   [3] SAMARITAN VOWEL SIGN SHORT A..SAMARITAN VOWEL SIGN U
                                            if (0x825 <= code && code <= 0x827) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code < 0x859) {
                                            // Mn   [5] SAMARITAN VOWEL SIGN LONG I..SAMARITAN MARK NEQUDAA
                                            if (0x829 <= code && code <= 0x82d) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0x890) {
                                            // Mn   [3] MANDAIC AFFRICATION MARK..MANDAIC GEMINATION MARK
                                            if (0x859 <= code && code <= 0x85b) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Cf   [2] ARABIC POUND MARK ABOVE..ARABIC PIASTRE MARK ABOVE
                                            if (0x890 <= code && code <= 0x891) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                        }
                                    }
                                } else {
                                    if (code < 0x8e3) {
                                        if (code < 0x8ca) {
                                            // Mn   [8] ARABIC SMALL HIGH WORD AL-JUZ..ARABIC HALF MADDA OVER MADDA
                                            if (0x898 <= code && code <= 0x89f) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0x8e2) {
                                            // Mn  [24] ARABIC SMALL HIGH FARSI YEH..ARABIC SMALL HIGH SIGN SAFHA
                                            if (0x8ca <= code && code <= 0x8e1) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Cf       ARABIC DISPUTED END OF AYAH
                                            if (0x8e2 === code) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                        }
                                    } else if (code < 0x903) {
                                        // Mn  [32] ARABIC TURNED DAMMA BELOW..DEVANAGARI SIGN ANUSVARA
                                        if (0x8e3 <= code && code <= 0x902) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc       DEVANAGARI SIGN VISARGA
                                        if (0x903 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        // Mn       DEVANAGARI VOWEL SIGN OE
                                        if (0x93a === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            }
                        } else {
                            if (code < 0xa01) {
                                if (code < 0x982) {
                                    if (code < 0x94d) {
                                        if (code < 0x93e) {
                                            // Mc       DEVANAGARI VOWEL SIGN OOE
                                            if (0x93b === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            // Mn       DEVANAGARI SIGN NUKTA
                                            if (0x93c === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            if (code < 0x941) {
                                                // Mc   [3] DEVANAGARI VOWEL SIGN AA..DEVANAGARI VOWEL SIGN II
                                                if (0x93e <= code && code <= 0x940) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code < 0x949) {
                                                // Mn   [8] DEVANAGARI VOWEL SIGN U..DEVANAGARI VOWEL SIGN AI
                                                if (0x941 <= code && code <= 0x948) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                // Mc   [4] DEVANAGARI VOWEL SIGN CANDRA O..DEVANAGARI VOWEL SIGN AU
                                                if (0x949 <= code && code <= 0x94c) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        }
                                    } else if (code < 0x951) {
                                        if (code < 0x94e) {
                                            // Mn       DEVANAGARI SIGN VIRAMA
                                            if (0x94d === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mc   [2] DEVANAGARI VOWEL SIGN PRISHTHAMATRA E..DEVANAGARI VOWEL SIGN AW
                                            if (0x94e <= code && code <= 0x94f) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else {
                                        if (code < 0x962) {
                                            // Mn   [7] DEVANAGARI STRESS SIGN UDATTA..DEVANAGARI VOWEL SIGN UUE
                                            if (0x951 <= code && code <= 0x957) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0x981) {
                                            // Mn   [2] DEVANAGARI VOWEL SIGN VOCALIC L..DEVANAGARI VOWEL SIGN VOCALIC LL
                                            if (0x962 <= code && code <= 0x963) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mn       BENGALI SIGN CANDRABINDU
                                            if (0x981 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else {
                                    if (code < 0x9c7) {
                                        if (code < 0x9be) {
                                            if (code < 0x9bc) {
                                                // Mc   [2] BENGALI SIGN ANUSVARA..BENGALI SIGN VISARGA
                                                if (0x982 <= code && code <= 0x983) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                // Mn       BENGALI SIGN NUKTA
                                                if (0x9bc === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code < 0x9bf) {
                                                // Mc       BENGALI VOWEL SIGN AA
                                                if (0x9be === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code < 0x9c1) {
                                                // Mc   [2] BENGALI VOWEL SIGN I..BENGALI VOWEL SIGN II
                                                if (0x9bf <= code && code <= 0x9c0) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                // Mn   [4] BENGALI VOWEL SIGN U..BENGALI VOWEL SIGN VOCALIC RR
                                                if (0x9c1 <= code && code <= 0x9c4) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else if (code < 0x9d7) {
                                        if (code < 0x9cb) {
                                            // Mc   [2] BENGALI VOWEL SIGN E..BENGALI VOWEL SIGN AI
                                            if (0x9c7 <= code && code <= 0x9c8) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else if (code < 0x9cd) {
                                            // Mc   [2] BENGALI VOWEL SIGN O..BENGALI VOWEL SIGN AU
                                            if (0x9cb <= code && code <= 0x9cc) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            // Mn       BENGALI SIGN VIRAMA
                                            if (0x9cd === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code < 0x9e2) {
                                            // Mc       BENGALI AU LENGTH MARK
                                            if (0x9d7 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0x9fe) {
                                            // Mn   [2] BENGALI VOWEL SIGN VOCALIC L..BENGALI VOWEL SIGN VOCALIC LL
                                            if (0x9e2 <= code && code <= 0x9e3) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mn       BENGALI SANDHI MARK
                                            if (0x9fe === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                }
                            } else if (code < 0xa83) {
                                if (code < 0xa47) {
                                    if (code < 0xa3c) {
                                        if (code < 0xa03) {
                                            // Mn   [2] GURMUKHI SIGN ADAK BINDI..GURMUKHI SIGN BINDI
                                            if (0xa01 <= code && code <= 0xa02) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mc       GURMUKHI SIGN VISARGA
                                            if (0xa03 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else {
                                        if (code < 0xa3e) {
                                            // Mn       GURMUKHI SIGN NUKTA
                                            if (0xa3c === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0xa41) {
                                            // Mc   [3] GURMUKHI VOWEL SIGN AA..GURMUKHI VOWEL SIGN II
                                            if (0xa3e <= code && code <= 0xa40) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            // Mn   [2] GURMUKHI VOWEL SIGN U..GURMUKHI VOWEL SIGN UU
                                            if (0xa41 <= code && code <= 0xa42) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else if (code < 0xa70) {
                                    if (code < 0xa4b) {
                                        // Mn   [2] GURMUKHI VOWEL SIGN EE..GURMUKHI VOWEL SIGN AI
                                        if (0xa47 <= code && code <= 0xa48) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0xa51) {
                                        // Mn   [3] GURMUKHI VOWEL SIGN OO..GURMUKHI SIGN VIRAMA
                                        if (0xa4b <= code && code <= 0xa4d) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn       GURMUKHI SIGN UDAAT
                                        if (0xa51 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code < 0xa75) {
                                        // Mn   [2] GURMUKHI TIPPI..GURMUKHI ADDAK
                                        if (0xa70 <= code && code <= 0xa71) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0xa81) {
                                        // Mn       GURMUKHI SIGN YAKASH
                                        if (0xa75 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn   [2] GUJARATI SIGN CANDRABINDU..GUJARATI SIGN ANUSVARA
                                        if (0xa81 <= code && code <= 0xa82) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else {
                                if (code < 0xac9) {
                                    if (code < 0xabe) {
                                        // Mc       GUJARATI SIGN VISARGA
                                        if (0xa83 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        // Mn       GUJARATI SIGN NUKTA
                                        if (0xabc === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (code < 0xac1) {
                                            // Mc   [3] GUJARATI VOWEL SIGN AA..GUJARATI VOWEL SIGN II
                                            if (0xabe <= code && code <= 0xac0) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else if (code < 0xac7) {
                                            // Mn   [5] GUJARATI VOWEL SIGN U..GUJARATI VOWEL SIGN CANDRA E
                                            if (0xac1 <= code && code <= 0xac5) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mn   [2] GUJARATI VOWEL SIGN E..GUJARATI VOWEL SIGN AI
                                            if (0xac7 <= code && code <= 0xac8) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else if (code < 0xae2) {
                                    if (code < 0xacb) {
                                        // Mc       GUJARATI VOWEL SIGN CANDRA O
                                        if (0xac9 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else if (code < 0xacd) {
                                        // Mc   [2] GUJARATI VOWEL SIGN O..GUJARATI VOWEL SIGN AU
                                        if (0xacb <= code && code <= 0xacc) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn       GUJARATI SIGN VIRAMA
                                        if (0xacd === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code < 0xafa) {
                                        // Mn   [2] GUJARATI VOWEL SIGN VOCALIC L..GUJARATI VOWEL SIGN VOCALIC LL
                                        if (0xae2 <= code && code <= 0xae3) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0xb01) {
                                        // Mn   [6] GUJARATI SIGN SUKUN..GUJARATI SIGN TWO-CIRCLE NUKTA ABOVE
                                        if (0xafa <= code && code <= 0xaff) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn       ORIYA SIGN CANDRABINDU
                                        if (0xb01 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            }
                        }
                    } else if (code < 0xcf3) {
                        if (code < 0xc04) {
                            if (code < 0xb82) {
                                if (code < 0xb47) {
                                    if (code < 0xb3e) {
                                        if (code < 0xb3c) {
                                            // Mc   [2] ORIYA SIGN ANUSVARA..ORIYA SIGN VISARGA
                                            if (0xb02 <= code && code <= 0xb03) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            // Mn       ORIYA SIGN NUKTA
                                            if (0xb3c === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code < 0xb40) {
                                            // Mc       ORIYA VOWEL SIGN AA
                                            // Mn       ORIYA VOWEL SIGN I
                                            if (0xb3e <= code && code <= 0xb3f) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0xb41) {
                                            // Mc       ORIYA VOWEL SIGN II
                                            if (0xb40 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            // Mn   [4] ORIYA VOWEL SIGN U..ORIYA VOWEL SIGN VOCALIC RR
                                            if (0xb41 <= code && code <= 0xb44) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else if (code < 0xb4d) {
                                    if (code < 0xb4b) {
                                        // Mc   [2] ORIYA VOWEL SIGN E..ORIYA VOWEL SIGN AI
                                        if (0xb47 <= code && code <= 0xb48) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mc   [2] ORIYA VOWEL SIGN O..ORIYA VOWEL SIGN AU
                                        if (0xb4b <= code && code <= 0xb4c) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                } else {
                                    if (code < 0xb55) {
                                        // Mn       ORIYA SIGN VIRAMA
                                        if (0xb4d === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0xb62) {
                                        // Mn   [2] ORIYA SIGN OVERLINE..ORIYA AI LENGTH MARK
                                        // Mc       ORIYA AU LENGTH MARK
                                        if (0xb55 <= code && code <= 0xb57) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn   [2] ORIYA VOWEL SIGN VOCALIC L..ORIYA VOWEL SIGN VOCALIC LL
                                        if (0xb62 <= code && code <= 0xb63) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else {
                                if (code < 0xbc6) {
                                    if (code < 0xbbf) {
                                        // Mn       TAMIL SIGN ANUSVARA
                                        if (0xb82 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        // Mc       TAMIL VOWEL SIGN AA
                                        if (0xbbe === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (code < 0xbc0) {
                                            // Mc       TAMIL VOWEL SIGN I
                                            if (0xbbf === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else if (code < 0xbc1) {
                                            // Mn       TAMIL VOWEL SIGN II
                                            if (0xbc0 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mc   [2] TAMIL VOWEL SIGN U..TAMIL VOWEL SIGN UU
                                            if (0xbc1 <= code && code <= 0xbc2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    }
                                } else if (code < 0xbd7) {
                                    if (code < 0xbca) {
                                        // Mc   [3] TAMIL VOWEL SIGN E..TAMIL VOWEL SIGN AI
                                        if (0xbc6 <= code && code <= 0xbc8) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else if (code < 0xbcd) {
                                        // Mc   [3] TAMIL VOWEL SIGN O..TAMIL VOWEL SIGN AU
                                        if (0xbca <= code && code <= 0xbcc) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn       TAMIL SIGN VIRAMA
                                        if (0xbcd === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code < 0xc00) {
                                        // Mc       TAMIL AU LENGTH MARK
                                        if (0xbd7 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0xc01) {
                                        // Mn       TELUGU SIGN COMBINING CANDRABINDU ABOVE
                                        if (0xc00 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc   [3] TELUGU SIGN CANDRABINDU..TELUGU SIGN VISARGA
                                        if (0xc01 <= code && code <= 0xc03) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                }
                            }
                        } else if (code < 0xcbe) {
                            if (code < 0xc4a) {
                                if (code < 0xc3e) {
                                    // Mn       TELUGU SIGN COMBINING ANUSVARA ABOVE
                                    if (0xc04 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    // Mn       TELUGU SIGN NUKTA
                                    if (0xc3c === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    if (code < 0xc41) {
                                        // Mn   [3] TELUGU VOWEL SIGN AA..TELUGU VOWEL SIGN II
                                        if (0xc3e <= code && code <= 0xc40) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0xc46) {
                                        // Mc   [4] TELUGU VOWEL SIGN U..TELUGU VOWEL SIGN VOCALIC RR
                                        if (0xc41 <= code && code <= 0xc44) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn   [3] TELUGU VOWEL SIGN E..TELUGU VOWEL SIGN AI
                                        if (0xc46 <= code && code <= 0xc48) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else if (code < 0xc81) {
                                if (code < 0xc55) {
                                    // Mn   [4] TELUGU VOWEL SIGN O..TELUGU SIGN VIRAMA
                                    if (0xc4a <= code && code <= 0xc4d) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0xc62) {
                                    // Mn   [2] TELUGU LENGTH MARK..TELUGU AI LENGTH MARK
                                    if (0xc55 <= code && code <= 0xc56) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn   [2] TELUGU VOWEL SIGN VOCALIC L..TELUGU VOWEL SIGN VOCALIC LL
                                    if (0xc62 <= code && code <= 0xc63) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            } else {
                                if (code < 0xc82) {
                                    // Mn       KANNADA SIGN CANDRABINDU
                                    if (0xc81 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0xcbc) {
                                    // Mc   [2] KANNADA SIGN ANUSVARA..KANNADA SIGN VISARGA
                                    if (0xc82 <= code && code <= 0xc83) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else {
                                    // Mn       KANNADA SIGN NUKTA
                                    if (0xcbc === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        } else {
                            if (code < 0xcc6) {
                                if (code < 0xcc0) {
                                    // Mc       KANNADA VOWEL SIGN AA
                                    if (0xcbe === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    // Mn       KANNADA VOWEL SIGN I
                                    if (0xcbf === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    if (code < 0xcc2) {
                                        // Mc   [2] KANNADA VOWEL SIGN II..KANNADA VOWEL SIGN U
                                        if (0xcc0 <= code && code <= 0xcc1) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else if (code < 0xcc3) {
                                        // Mc       KANNADA VOWEL SIGN UU
                                        if (0xcc2 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc   [2] KANNADA VOWEL SIGN VOCALIC R..KANNADA VOWEL SIGN VOCALIC RR
                                        if (0xcc3 <= code && code <= 0xcc4) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                }
                            } else if (code < 0xccc) {
                                if (code < 0xcc7) {
                                    // Mn       KANNADA VOWEL SIGN E
                                    if (0xcc6 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0xcca) {
                                    // Mc   [2] KANNADA VOWEL SIGN EE..KANNADA VOWEL SIGN AI
                                    if (0xcc7 <= code && code <= 0xcc8) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else {
                                    // Mc   [2] KANNADA VOWEL SIGN O..KANNADA VOWEL SIGN OO
                                    if (0xcca <= code && code <= 0xccb) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                            } else {
                                if (code < 0xcd5) {
                                    // Mn   [2] KANNADA VOWEL SIGN AU..KANNADA SIGN VIRAMA
                                    if (0xccc <= code && code <= 0xccd) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0xce2) {
                                    // Mc   [2] KANNADA LENGTH MARK..KANNADA AI LENGTH MARK
                                    if (0xcd5 <= code && code <= 0xcd6) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn   [2] KANNADA VOWEL SIGN VOCALIC L..KANNADA VOWEL SIGN VOCALIC LL
                                    if (0xce2 <= code && code <= 0xce3) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        }
                    } else {
                        if (code < 0xddf) {
                            if (code < 0xd4e) {
                                if (code < 0xd3f) {
                                    if (code < 0xd02) {
                                        if (code < 0xd00) {
                                            // Mc       KANNADA SIGN COMBINING ANUSVARA ABOVE RIGHT
                                            if (0xcf3 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            // Mn   [2] MALAYALAM SIGN COMBINING ANUSVARA ABOVE..MALAYALAM SIGN CANDRABINDU
                                            if (0xd00 <= code && code <= 0xd01) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code < 0xd3b) {
                                            // Mc   [2] MALAYALAM SIGN ANUSVARA..MALAYALAM SIGN VISARGA
                                            if (0xd02 <= code && code <= 0xd03) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else if (code < 0xd3e) {
                                            // Mn   [2] MALAYALAM SIGN VERTICAL BAR VIRAMA..MALAYALAM SIGN CIRCULAR VIRAMA
                                            if (0xd3b <= code && code <= 0xd3c) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mc       MALAYALAM VOWEL SIGN AA
                                            if (0xd3e === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else if (code < 0xd46) {
                                    if (code < 0xd41) {
                                        // Mc   [2] MALAYALAM VOWEL SIGN I..MALAYALAM VOWEL SIGN II
                                        if (0xd3f <= code && code <= 0xd40) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn   [4] MALAYALAM VOWEL SIGN U..MALAYALAM VOWEL SIGN VOCALIC RR
                                        if (0xd41 <= code && code <= 0xd44) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code < 0xd4a) {
                                        // Mc   [3] MALAYALAM VOWEL SIGN E..MALAYALAM VOWEL SIGN AI
                                        if (0xd46 <= code && code <= 0xd48) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else if (code < 0xd4d) {
                                        // Mc   [3] MALAYALAM VOWEL SIGN O..MALAYALAM VOWEL SIGN AU
                                        if (0xd4a <= code && code <= 0xd4c) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn       MALAYALAM SIGN VIRAMA
                                        if (0xd4d === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else {
                                if (code < 0xdca) {
                                    if (code < 0xd62) {
                                        // Lo       MALAYALAM LETTER DOT REPH
                                        if (0xd4e === code) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                        // Mc       MALAYALAM AU LENGTH MARK
                                        if (0xd57 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (code < 0xd81) {
                                            // Mn   [2] MALAYALAM VOWEL SIGN VOCALIC L..MALAYALAM VOWEL SIGN VOCALIC LL
                                            if (0xd62 <= code && code <= 0xd63) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0xd82) {
                                            // Mn       SINHALA SIGN CANDRABINDU
                                            if (0xd81 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mc   [2] SINHALA SIGN ANUSVARAYA..SINHALA SIGN VISARGAYA
                                            if (0xd82 <= code && code <= 0xd83) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    }
                                } else if (code < 0xdd2) {
                                    if (code < 0xdcf) {
                                        // Mn       SINHALA SIGN AL-LAKUNA
                                        if (0xdca === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0xdd0) {
                                        // Mc       SINHALA VOWEL SIGN AELA-PILLA
                                        if (0xdcf === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc   [2] SINHALA VOWEL SIGN KETTI AEDA-PILLA..SINHALA VOWEL SIGN DIGA AEDA-PILLA
                                        if (0xdd0 <= code && code <= 0xdd1) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                } else {
                                    if (code < 0xdd6) {
                                        // Mn   [3] SINHALA VOWEL SIGN KETTI IS-PILLA..SINHALA VOWEL SIGN KETTI PAA-PILLA
                                        if (0xdd2 <= code && code <= 0xdd4) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0xdd8) {
                                        // Mn       SINHALA VOWEL SIGN DIGA PAA-PILLA
                                        if (0xdd6 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc   [7] SINHALA VOWEL SIGN GAETTA-PILLA..SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA
                                        if (0xdd8 <= code && code <= 0xdde) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                }
                            }
                        } else if (code < 0xf35) {
                            if (code < 0xe47) {
                                if (code < 0xe31) {
                                    if (code < 0xdf2) {
                                        // Mc       SINHALA VOWEL SIGN GAYANUKITTA
                                        if (0xddf === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc   [2] SINHALA VOWEL SIGN DIGA GAETTA-PILLA..SINHALA VOWEL SIGN DIGA GAYANUKITTA
                                        if (0xdf2 <= code && code <= 0xdf3) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                } else {
                                    if (code < 0xe33) {
                                        // Mn       THAI CHARACTER MAI HAN-AKAT
                                        if (0xe31 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0xe34) {
                                        // Lo       THAI CHARACTER SARA AM
                                        if (0xe33 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU
                                        if (0xe34 <= code && code <= 0xe3a) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else if (code < 0xeb4) {
                                if (code < 0xeb1) {
                                    // Mn   [8] THAI CHARACTER MAITAIKHU..THAI CHARACTER YAMAKKAN
                                    if (0xe47 <= code && code <= 0xe4e) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn       LAO VOWEL SIGN MAI KAN
                                    if (0xeb1 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    // Lo       LAO VOWEL SIGN AM
                                    if (0xeb3 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                            } else {
                                if (code < 0xec8) {
                                    // Mn   [9] LAO VOWEL SIGN I..LAO SEMIVOWEL SIGN LO
                                    if (0xeb4 <= code && code <= 0xebc) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0xf18) {
                                    // Mn   [7] LAO TONE MAI EK..LAO YAMAKKAN
                                    if (0xec8 <= code && code <= 0xece) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn   [2] TIBETAN ASTROLOGICAL SIGN -KHYUD PA..TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS
                                    if (0xf18 <= code && code <= 0xf19) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        } else {
                            if (code < 0xf7f) {
                                if (code < 0xf39) {
                                    // Mn       TIBETAN MARK NGAS BZUNG NYI ZLA
                                    if (0xf35 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    // Mn       TIBETAN MARK NGAS BZUNG SGOR RTAGS
                                    if (0xf37 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    if (code < 0xf3e) {
                                        // Mn       TIBETAN MARK TSA -PHRU
                                        if (0xf39 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0xf71) {
                                        // Mc   [2] TIBETAN SIGN YAR TSHES..TIBETAN SIGN MAR TSHES
                                        if (0xf3e <= code && code <= 0xf3f) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn  [14] TIBETAN VOWEL SIGN AA..TIBETAN SIGN RJES SU NGA RO
                                        if (0xf71 <= code && code <= 0xf7e) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else if (code < 0xf8d) {
                                if (code < 0xf80) {
                                    // Mc       TIBETAN SIGN RNAM BCAD
                                    if (0xf7f === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else if (code < 0xf86) {
                                    // Mn   [5] TIBETAN VOWEL SIGN REVERSED I..TIBETAN MARK HALANTA
                                    if (0xf80 <= code && code <= 0xf84) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn   [2] TIBETAN SIGN LCI RTAGS..TIBETAN SIGN YANG RTAGS
                                    if (0xf86 <= code && code <= 0xf87) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            } else {
                                if (code < 0xf99) {
                                    // Mn  [11] TIBETAN SUBJOINED SIGN LCE TSA CAN..TIBETAN SUBJOINED LETTER JA
                                    if (0xf8d <= code && code <= 0xf97) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0xfc6) {
                                    // Mn  [36] TIBETAN SUBJOINED LETTER NYA..TIBETAN SUBJOINED LETTER FIXED-FORM RA
                                    if (0xf99 <= code && code <= 0xfbc) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn       TIBETAN SYMBOL PADMA GDAN
                                    if (0xfc6 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        }
                    }
                } else {
                    if (code < 0x1c24) {
                        if (code < 0x1930) {
                            if (code < 0x1732) {
                                if (code < 0x1082) {
                                    if (code < 0x103d) {
                                        if (code < 0x1032) {
                                            if (code < 0x1031) {
                                                // Mn   [4] MYANMAR VOWEL SIGN I..MYANMAR VOWEL SIGN UU
                                                if (0x102d <= code && code <= 0x1030) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                // Mc       MYANMAR VOWEL SIGN E
                                                if (0x1031 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        } else {
                                            if (code < 0x1039) {
                                                // Mn   [6] MYANMAR VOWEL SIGN AI..MYANMAR SIGN DOT BELOW
                                                if (0x1032 <= code && code <= 0x1037) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code < 0x103b) {
                                                // Mn   [2] MYANMAR SIGN VIRAMA..MYANMAR SIGN ASAT
                                                if (0x1039 <= code && code <= 0x103a) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                // Mc   [2] MYANMAR CONSONANT SIGN MEDIAL YA..MYANMAR CONSONANT SIGN MEDIAL RA
                                                if (0x103b <= code && code <= 0x103c) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        }
                                    } else if (code < 0x1058) {
                                        if (code < 0x1056) {
                                            // Mn   [2] MYANMAR CONSONANT SIGN MEDIAL WA..MYANMAR CONSONANT SIGN MEDIAL HA
                                            if (0x103d <= code && code <= 0x103e) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mc   [2] MYANMAR VOWEL SIGN VOCALIC R..MYANMAR VOWEL SIGN VOCALIC RR
                                            if (0x1056 <= code && code <= 0x1057) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else {
                                        if (code < 0x105e) {
                                            // Mn   [2] MYANMAR VOWEL SIGN VOCALIC L..MYANMAR VOWEL SIGN VOCALIC LL
                                            if (0x1058 <= code && code <= 0x1059) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0x1071) {
                                            // Mn   [3] MYANMAR CONSONANT SIGN MON MEDIAL NA..MYANMAR CONSONANT SIGN MON MEDIAL LA
                                            if (0x105e <= code && code <= 0x1060) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mn   [4] MYANMAR VOWEL SIGN GEBA KAREN I..MYANMAR VOWEL SIGN KAYAH EE
                                            if (0x1071 <= code && code <= 0x1074) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else {
                                    if (code < 0x1100) {
                                        if (code < 0x1085) {
                                            // Mn       MYANMAR CONSONANT SIGN SHAN MEDIAL WA
                                            if (0x1082 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            // Mc       MYANMAR VOWEL SIGN SHAN E
                                            if (0x1084 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else if (code < 0x108d) {
                                            // Mn   [2] MYANMAR VOWEL SIGN SHAN E ABOVE..MYANMAR VOWEL SIGN SHAN FINAL Y
                                            if (0x1085 <= code && code <= 0x1086) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mn       MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE
                                            if (0x108d === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            // Mn       MYANMAR VOWEL SIGN AITON AI
                                            if (0x109d === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else if (code < 0x135d) {
                                        if (code < 0x1160) {
                                            // Lo  [96] HANGUL CHOSEONG KIYEOK..HANGUL CHOSEONG FILLER
                                            if (0x1100 <= code && code <= 0x115f) return boundaries_1.CLUSTER_BREAK.L;
                                        } else if (code < 0x11a8) {
                                            // Lo  [72] HANGUL JUNGSEONG FILLER..HANGUL JUNGSEONG O-YAE
                                            if (0x1160 <= code && code <= 0x11a7) return boundaries_1.CLUSTER_BREAK.V;
                                        } else {
                                            // Lo  [88] HANGUL JONGSEONG KIYEOK..HANGUL JONGSEONG SSANGNIEUN
                                            if (0x11a8 <= code && code <= 0x11ff) return boundaries_1.CLUSTER_BREAK.T;
                                        }
                                    } else {
                                        if (code < 0x1712) {
                                            // Mn   [3] ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK..ETHIOPIC COMBINING GEMINATION MARK
                                            if (0x135d <= code && code <= 0x135f) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0x1715) {
                                            // Mn   [3] TAGALOG VOWEL SIGN I..TAGALOG SIGN VIRAMA
                                            if (0x1712 <= code && code <= 0x1714) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mc       TAGALOG SIGN PAMUDPOD
                                            if (0x1715 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    }
                                }
                            } else if (code < 0x17c9) {
                                if (code < 0x17b6) {
                                    if (code < 0x1752) {
                                        if (code < 0x1734) {
                                            // Mn   [2] HANUNOO VOWEL SIGN I..HANUNOO VOWEL SIGN U
                                            if (0x1732 <= code && code <= 0x1733) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mc       HANUNOO SIGN PAMUDPOD
                                            if (0x1734 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else {
                                        if (code < 0x1772) {
                                            // Mn   [2] BUHID VOWEL SIGN I..BUHID VOWEL SIGN U
                                            if (0x1752 <= code && code <= 0x1753) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0x17b4) {
                                            // Mn   [2] TAGBANWA VOWEL SIGN I..TAGBANWA VOWEL SIGN U
                                            if (0x1772 <= code && code <= 0x1773) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mn   [2] KHMER VOWEL INHERENT AQ..KHMER VOWEL INHERENT AA
                                            if (0x17b4 <= code && code <= 0x17b5) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else if (code < 0x17be) {
                                    if (code < 0x17b7) {
                                        // Mc       KHMER VOWEL SIGN AA
                                        if (0x17b6 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn   [7] KHMER VOWEL SIGN I..KHMER VOWEL SIGN UA
                                        if (0x17b7 <= code && code <= 0x17bd) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code < 0x17c6) {
                                        // Mc   [8] KHMER VOWEL SIGN OE..KHMER VOWEL SIGN AU
                                        if (0x17be <= code && code <= 0x17c5) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else if (code < 0x17c7) {
                                        // Mn       KHMER SIGN NIKAHIT
                                        if (0x17c6 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc   [2] KHMER SIGN REAHMUK..KHMER SIGN YUUKALEAPINTU
                                        if (0x17c7 <= code && code <= 0x17c8) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                }
                            } else {
                                if (code < 0x1885) {
                                    if (code < 0x180b) {
                                        if (code < 0x17dd) {
                                            // Mn  [11] KHMER SIGN MUUSIKATOAN..KHMER SIGN BATHAMASAT
                                            if (0x17c9 <= code && code <= 0x17d3) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mn       KHMER SIGN ATTHACAN
                                            if (0x17dd === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else if (code < 0x180e) {
                                        // Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE
                                        if (0x180b <= code && code <= 0x180d) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Cf       MONGOLIAN VOWEL SEPARATOR
                                        if (0x180e === code) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                        // Mn       MONGOLIAN FREE VARIATION SELECTOR FOUR
                                        if (0x180f === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else if (code < 0x1923) {
                                    if (code < 0x18a9) {
                                        // Mn   [2] MONGOLIAN LETTER ALI GALI BALUDA..MONGOLIAN LETTER ALI GALI THREE BALUDA
                                        if (0x1885 <= code && code <= 0x1886) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0x1920) {
                                        // Mn       MONGOLIAN LETTER ALI GALI DAGALGA
                                        if (0x18a9 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn   [3] LIMBU VOWEL SIGN A..LIMBU VOWEL SIGN U
                                        if (0x1920 <= code && code <= 0x1922) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code < 0x1927) {
                                        // Mc   [4] LIMBU VOWEL SIGN EE..LIMBU VOWEL SIGN AU
                                        if (0x1923 <= code && code <= 0x1926) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else if (code < 0x1929) {
                                        // Mn   [2] LIMBU VOWEL SIGN E..LIMBU VOWEL SIGN O
                                        if (0x1927 <= code && code <= 0x1928) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc   [3] LIMBU SUBJOINED LETTER YA..LIMBU SUBJOINED LETTER WA
                                        if (0x1929 <= code && code <= 0x192b) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                }
                            }
                        } else {
                            if (code < 0x1b3b) {
                                if (code < 0x1a58) {
                                    if (code < 0x1a19) {
                                        if (code < 0x1933) {
                                            if (code < 0x1932) {
                                                // Mc   [2] LIMBU SMALL LETTER KA..LIMBU SMALL LETTER NGA
                                                if (0x1930 <= code && code <= 0x1931) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                // Mn       LIMBU SMALL LETTER ANUSVARA
                                                if (0x1932 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code < 0x1939) {
                                                // Mc   [6] LIMBU SMALL LETTER TA..LIMBU SMALL LETTER LA
                                                if (0x1933 <= code && code <= 0x1938) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else if (code < 0x1a17) {
                                                // Mn   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I
                                                if (0x1939 <= code && code <= 0x193b) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                // Mn   [2] BUGINESE VOWEL SIGN I..BUGINESE VOWEL SIGN U
                                                if (0x1a17 <= code && code <= 0x1a18) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        }
                                    } else {
                                        if (code < 0x1a55) {
                                            if (code < 0x1a1b) {
                                                // Mc   [2] BUGINESE VOWEL SIGN E..BUGINESE VOWEL SIGN O
                                                if (0x1a19 <= code && code <= 0x1a1a) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            } else {
                                                // Mn       BUGINESE VOWEL SIGN AE
                                                if (0x1a1b === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else if (code < 0x1a56) {
                                            // Mc       TAI THAM CONSONANT SIGN MEDIAL RA
                                            if (0x1a55 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            // Mn       TAI THAM CONSONANT SIGN MEDIAL LA
                                            if (0x1a56 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            // Mc       TAI THAM CONSONANT SIGN LA TANG LAI
                                            if (0x1a57 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    }
                                } else {
                                    if (code < 0x1a73) {
                                        if (code < 0x1a62) {
                                            if (code < 0x1a60) {
                                                // Mn   [7] TAI THAM SIGN MAI KANG LAI..TAI THAM CONSONANT SIGN SA
                                                if (0x1a58 <= code && code <= 0x1a5e) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                // Mn       TAI THAM SIGN SAKOT
                                                if (0x1a60 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            }
                                        } else {
                                            if (code < 0x1a65) {
                                                // Mn       TAI THAM VOWEL SIGN MAI SAT
                                                if (0x1a62 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else if (code < 0x1a6d) {
                                                // Mn   [8] TAI THAM VOWEL SIGN I..TAI THAM VOWEL SIGN OA BELOW
                                                if (0x1a65 <= code && code <= 0x1a6c) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                            } else {
                                                // Mc   [6] TAI THAM VOWEL SIGN OY..TAI THAM VOWEL SIGN THAM AI
                                                if (0x1a6d <= code && code <= 0x1a72) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                            }
                                        }
                                    } else if (code < 0x1b00) {
                                        if (code < 0x1a7f) {
                                            // Mn  [10] TAI THAM VOWEL SIGN OA ABOVE..TAI THAM SIGN KHUEN-LUE KARAN
                                            if (0x1a73 <= code && code <= 0x1a7c) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0x1ab0) {
                                            // Mn       TAI THAM COMBINING CRYPTOGRAMMIC DOT
                                            if (0x1a7f === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mn  [14] COMBINING DOUBLED CIRCUMFLEX ACCENT..COMBINING PARENTHESES BELOW
                                            // Me       COMBINING PARENTHESES OVERLAY
                                            // Mn  [16] COMBINING LATIN SMALL LETTER W BELOW..COMBINING LATIN SMALL LETTER INSULAR T
                                            if (0x1ab0 <= code && code <= 0x1ace) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code < 0x1b04) {
                                            // Mn   [4] BALINESE SIGN ULU RICEM..BALINESE SIGN SURANG
                                            if (0x1b00 <= code && code <= 0x1b03) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0x1b34) {
                                            // Mc       BALINESE SIGN BISAH
                                            if (0x1b04 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            // Mn       BALINESE SIGN REREKAN
                                            // Mc       BALINESE VOWEL SIGN TEDUNG
                                            // Mn   [5] BALINESE VOWEL SIGN ULU..BALINESE VOWEL SIGN RA REPA
                                            if (0x1b34 <= code && code <= 0x1b3a) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                }
                            } else if (code < 0x1ba8) {
                                if (code < 0x1b6b) {
                                    if (code < 0x1b3d) {
                                        // Mc       BALINESE VOWEL SIGN RA REPA TEDUNG
                                        if (0x1b3b === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        // Mn       BALINESE VOWEL SIGN LA LENGA
                                        if (0x1b3c === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        if (code < 0x1b42) {
                                            // Mc   [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG
                                            if (0x1b3d <= code && code <= 0x1b41) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else if (code < 0x1b43) {
                                            // Mn       BALINESE VOWEL SIGN PEPET
                                            if (0x1b42 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mc   [2] BALINESE VOWEL SIGN PEPET TEDUNG..BALINESE ADEG ADEG
                                            if (0x1b43 <= code && code <= 0x1b44) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    }
                                } else if (code < 0x1ba1) {
                                    if (code < 0x1b80) {
                                        // Mn   [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG
                                        if (0x1b6b <= code && code <= 0x1b73) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0x1b82) {
                                        // Mn   [2] SUNDANESE SIGN PANYECEK..SUNDANESE SIGN PANGLAYAR
                                        if (0x1b80 <= code && code <= 0x1b81) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc       SUNDANESE SIGN PANGWISAD
                                        if (0x1b82 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                } else {
                                    if (code < 0x1ba2) {
                                        // Mc       SUNDANESE CONSONANT SIGN PAMINGKAL
                                        if (0x1ba1 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else if (code < 0x1ba6) {
                                        // Mn   [4] SUNDANESE CONSONANT SIGN PANYAKRA..SUNDANESE VOWEL SIGN PANYUKU
                                        if (0x1ba2 <= code && code <= 0x1ba5) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc   [2] SUNDANESE VOWEL SIGN PANAELAENG..SUNDANESE VOWEL SIGN PANOLONG
                                        if (0x1ba6 <= code && code <= 0x1ba7) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                }
                            } else {
                                if (code < 0x1be8) {
                                    if (code < 0x1bab) {
                                        if (code < 0x1baa) {
                                            // Mn   [2] SUNDANESE VOWEL SIGN PAMEPET..SUNDANESE VOWEL SIGN PANEULEUNG
                                            if (0x1ba8 <= code && code <= 0x1ba9) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mc       SUNDANESE SIGN PAMAAEH
                                            if (0x1baa === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else if (code < 0x1be6) {
                                        // Mn   [3] SUNDANESE SIGN VIRAMA..SUNDANESE CONSONANT SIGN PASANGAN WA
                                        if (0x1bab <= code && code <= 0x1bad) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn       BATAK SIGN TOMPI
                                        if (0x1be6 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        // Mc       BATAK VOWEL SIGN E
                                        if (0x1be7 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                } else if (code < 0x1bee) {
                                    if (code < 0x1bea) {
                                        // Mn   [2] BATAK VOWEL SIGN PAKPAK E..BATAK VOWEL SIGN EE
                                        if (0x1be8 <= code && code <= 0x1be9) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0x1bed) {
                                        // Mc   [3] BATAK VOWEL SIGN I..BATAK VOWEL SIGN O
                                        if (0x1bea <= code && code <= 0x1bec) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn       BATAK VOWEL SIGN KARO O
                                        if (0x1bed === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code < 0x1bef) {
                                        // Mc       BATAK VOWEL SIGN U
                                        if (0x1bee === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else if (code < 0x1bf2) {
                                        // Mn   [3] BATAK VOWEL SIGN U FOR SIMALUNGUN SA..BATAK CONSONANT SIGN H
                                        if (0x1bef <= code && code <= 0x1bf1) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc   [2] BATAK PANGOLAT..BATAK PANONGONAN
                                        if (0x1bf2 <= code && code <= 0x1bf3) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                }
                            }
                        }
                    } else if (code < 0xa952) {
                        if (code < 0x2d7f) {
                            if (code < 0x1cf7) {
                                if (code < 0x1cd4) {
                                    if (code < 0x1c34) {
                                        if (code < 0x1c2c) {
                                            // Mc   [8] LEPCHA SUBJOINED LETTER YA..LEPCHA VOWEL SIGN UU
                                            if (0x1c24 <= code && code <= 0x1c2b) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            // Mn   [8] LEPCHA VOWEL SIGN E..LEPCHA CONSONANT SIGN T
                                            if (0x1c2c <= code && code <= 0x1c33) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code < 0x1c36) {
                                            // Mc   [2] LEPCHA CONSONANT SIGN NYIN-DO..LEPCHA CONSONANT SIGN KANG
                                            if (0x1c34 <= code && code <= 0x1c35) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else if (code < 0x1cd0) {
                                            // Mn   [2] LEPCHA SIGN RAN..LEPCHA SIGN NUKTA
                                            if (0x1c36 <= code && code <= 0x1c37) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mn   [3] VEDIC TONE KARSHANA..VEDIC TONE PRENKHA
                                            if (0x1cd0 <= code && code <= 0x1cd2) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else {
                                    if (code < 0x1ce2) {
                                        if (code < 0x1ce1) {
                                            // Mn  [13] VEDIC SIGN YAJURVEDIC MIDLINE SVARITA..VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA
                                            if (0x1cd4 <= code && code <= 0x1ce0) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mc       VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA
                                            if (0x1ce1 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else if (code < 0x1ced) {
                                        // Mn   [7] VEDIC SIGN VISARGA SVARITA..VEDIC SIGN VISARGA ANUDATTA WITH TAIL
                                        if (0x1ce2 <= code && code <= 0x1ce8) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn       VEDIC SIGN TIRYAK
                                        if (0x1ced === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        // Mn       VEDIC TONE CANDRA ABOVE
                                        if (0x1cf4 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else {
                                if (code < 0x200d) {
                                    if (code < 0x1dc0) {
                                        if (code < 0x1cf8) {
                                            // Mc       VEDIC SIGN ATIKRAMA
                                            if (0x1cf7 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            // Mn   [2] VEDIC TONE RING ABOVE..VEDIC TONE DOUBLE RING ABOVE
                                            if (0x1cf8 <= code && code <= 0x1cf9) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else if (code < 0x200b) {
                                        // Mn  [64] COMBINING DOTTED GRAVE ACCENT..COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW
                                        if (0x1dc0 <= code && code <= 0x1dff) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Cf       ZERO WIDTH SPACE
                                        if (0x200b === code) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                        // Cf       ZERO WIDTH NON-JOINER
                                        if (0x200c === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else if (code < 0x2060) {
                                    if (code < 0x200e) {
                                        // Cf       ZERO WIDTH JOINER
                                        if (0x200d === code) return boundaries_1.CLUSTER_BREAK.ZWJ;
                                    } else if (code < 0x2028) {
                                        // Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK
                                        if (0x200e <= code && code <= 0x200f) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    } else {
                                        // Zl       LINE SEPARATOR
                                        // Zp       PARAGRAPH SEPARATOR
                                        // Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE
                                        if (0x2028 <= code && code <= 0x202e) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    }
                                } else {
                                    if (code < 0x20d0) {
                                        // Cf   [5] WORD JOINER..INVISIBLE PLUS
                                        // Cn       <reserved-2065>
                                        // Cf  [10] LEFT-TO-RIGHT ISOLATE..NOMINAL DIGIT SHAPES
                                        if (0x2060 <= code && code <= 0x206f) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    } else if (code < 0x2cef) {
                                        // Mn  [13] COMBINING LEFT HARPOON ABOVE..COMBINING FOUR DOTS ABOVE
                                        // Me   [4] COMBINING ENCLOSING CIRCLE..COMBINING ENCLOSING CIRCLE BACKSLASH
                                        // Mn       COMBINING LEFT RIGHT ARROW ABOVE
                                        // Me   [3] COMBINING ENCLOSING SCREEN..COMBINING ENCLOSING UPWARD POINTING TRIANGLE
                                        // Mn  [12] COMBINING REVERSE SOLIDUS OVERLAY..COMBINING ASTERISK ABOVE
                                        if (0x20d0 <= code && code <= 0x20f0) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn   [3] COPTIC COMBINING NI ABOVE..COPTIC COMBINING SPIRITUS LENIS
                                        if (0x2cef <= code && code <= 0x2cf1) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            }
                        } else if (code < 0xa823) {
                            if (code < 0xa674) {
                                if (code < 0x302a) {
                                    if (code < 0x2de0) {
                                        // Mn       TIFINAGH CONSONANT JOINER
                                        if (0x2d7f === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn  [32] COMBINING CYRILLIC LETTER BE..COMBINING CYRILLIC LETTER IOTIFIED BIG YUS
                                        if (0x2de0 <= code && code <= 0x2dff) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code < 0x3099) {
                                        // Mn   [4] IDEOGRAPHIC LEVEL TONE MARK..IDEOGRAPHIC ENTERING TONE MARK
                                        // Mc   [2] HANGUL SINGLE DOT TONE MARK..HANGUL DOUBLE DOT TONE MARK
                                        if (0x302a <= code && code <= 0x302f) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0xa66f) {
                                        // Mn   [2] COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK..COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK
                                        if (0x3099 <= code && code <= 0x309a) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn       COMBINING CYRILLIC VZMET
                                        // Me   [3] COMBINING CYRILLIC TEN MILLIONS SIGN..COMBINING CYRILLIC THOUSAND MILLIONS SIGN
                                        if (0xa66f <= code && code <= 0xa672) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else {
                                if (code < 0xa802) {
                                    if (code < 0xa69e) {
                                        // Mn  [10] COMBINING CYRILLIC LETTER UKRAINIAN IE..COMBINING CYRILLIC PAYEROK
                                        if (0xa674 <= code && code <= 0xa67d) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0xa6f0) {
                                        // Mn   [2] COMBINING CYRILLIC LETTER EF..COMBINING CYRILLIC LETTER IOTIFIED E
                                        if (0xa69e <= code && code <= 0xa69f) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn   [2] BAMUM COMBINING MARK KOQNDON..BAMUM COMBINING MARK TUKWENTIS
                                        if (0xa6f0 <= code && code <= 0xa6f1) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else if (code < 0xa806) {
                                    // Mn       SYLOTI NAGRI SIGN DVISVARA
                                    if (0xa802 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn       SYLOTI NAGRI SIGN HASANTA
                                    if (0xa806 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    // Mn       SYLOTI NAGRI SIGN ANUSVARA
                                    if (0xa80b === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        } else {
                            if (code < 0xa8b4) {
                                if (code < 0xa827) {
                                    if (code < 0xa825) {
                                        // Mc   [2] SYLOTI NAGRI VOWEL SIGN A..SYLOTI NAGRI VOWEL SIGN I
                                        if (0xa823 <= code && code <= 0xa824) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn   [2] SYLOTI NAGRI VOWEL SIGN U..SYLOTI NAGRI VOWEL SIGN E
                                        if (0xa825 <= code && code <= 0xa826) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code < 0xa82c) {
                                        // Mc       SYLOTI NAGRI VOWEL SIGN OO
                                        if (0xa827 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else if (code < 0xa880) {
                                        // Mn       SYLOTI NAGRI SIGN ALTERNATE HASANTA
                                        if (0xa82c === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc   [2] SAURASHTRA SIGN ANUSVARA..SAURASHTRA SIGN VISARGA
                                        if (0xa880 <= code && code <= 0xa881) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                }
                            } else if (code < 0xa8ff) {
                                if (code < 0xa8c4) {
                                    // Mc  [16] SAURASHTRA CONSONANT SIGN HAARU..SAURASHTRA VOWEL SIGN AU
                                    if (0xa8b4 <= code && code <= 0xa8c3) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else if (code < 0xa8e0) {
                                    // Mn   [2] SAURASHTRA SIGN VIRAMA..SAURASHTRA SIGN CANDRABINDU
                                    if (0xa8c4 <= code && code <= 0xa8c5) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn  [18] COMBINING DEVANAGARI DIGIT ZERO..COMBINING DEVANAGARI SIGN AVAGRAHA
                                    if (0xa8e0 <= code && code <= 0xa8f1) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            } else {
                                if (code < 0xa926) {
                                    // Mn       DEVANAGARI VOWEL SIGN AY
                                    if (0xa8ff === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0xa947) {
                                    // Mn   [8] KAYAH LI VOWEL UE..KAYAH LI TONE CALYA PLOPHU
                                    if (0xa926 <= code && code <= 0xa92d) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn  [11] REJANG VOWEL SIGN I..REJANG CONSONANT SIGN R
                                    if (0xa947 <= code && code <= 0xa951) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        }
                    } else {
                        if (code < 0xaab2) {
                            if (code < 0xa9e5) {
                                if (code < 0xa9b4) {
                                    if (code < 0xa980) {
                                        if (code < 0xa960) {
                                            // Mc   [2] REJANG CONSONANT SIGN H..REJANG VIRAMA
                                            if (0xa952 <= code && code <= 0xa953) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            // Lo  [29] HANGUL CHOSEONG TIKEUT-MIEUM..HANGUL CHOSEONG SSANGYEORINHIEUH
                                            if (0xa960 <= code && code <= 0xa97c) return boundaries_1.CLUSTER_BREAK.L;
                                        }
                                    } else if (code < 0xa983) {
                                        // Mn   [3] JAVANESE SIGN PANYANGGA..JAVANESE SIGN LAYAR
                                        if (0xa980 <= code && code <= 0xa982) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc       JAVANESE SIGN WIGNYAN
                                        if (0xa983 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        // Mn       JAVANESE SIGN CECAK TELU
                                        if (0xa9b3 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else if (code < 0xa9ba) {
                                    if (code < 0xa9b6) {
                                        // Mc   [2] JAVANESE VOWEL SIGN TARUNG..JAVANESE VOWEL SIGN TOLONG
                                        if (0xa9b4 <= code && code <= 0xa9b5) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn   [4] JAVANESE VOWEL SIGN WULU..JAVANESE VOWEL SIGN SUKU MENDUT
                                        if (0xa9b6 <= code && code <= 0xa9b9) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code < 0xa9bc) {
                                        // Mc   [2] JAVANESE VOWEL SIGN TALING..JAVANESE VOWEL SIGN DIRGA MURE
                                        if (0xa9ba <= code && code <= 0xa9bb) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else if (code < 0xa9be) {
                                        // Mn   [2] JAVANESE VOWEL SIGN PEPET..JAVANESE CONSONANT SIGN KERET
                                        if (0xa9bc <= code && code <= 0xa9bd) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc   [3] JAVANESE CONSONANT SIGN PENGKAL..JAVANESE PANGKON
                                        if (0xa9be <= code && code <= 0xa9c0) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                }
                            } else if (code < 0xaa35) {
                                if (code < 0xaa2f) {
                                    if (code < 0xaa29) {
                                        // Mn       MYANMAR SIGN SHAN SAW
                                        if (0xa9e5 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn   [6] CHAM VOWEL SIGN AA..CHAM VOWEL SIGN OE
                                        if (0xaa29 <= code && code <= 0xaa2e) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code < 0xaa31) {
                                        // Mc   [2] CHAM VOWEL SIGN O..CHAM VOWEL SIGN AI
                                        if (0xaa2f <= code && code <= 0xaa30) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else if (code < 0xaa33) {
                                        // Mn   [2] CHAM VOWEL SIGN AU..CHAM VOWEL SIGN UE
                                        if (0xaa31 <= code && code <= 0xaa32) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc   [2] CHAM CONSONANT SIGN YA..CHAM CONSONANT SIGN RA
                                        if (0xaa33 <= code && code <= 0xaa34) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                }
                            } else {
                                if (code < 0xaa4d) {
                                    if (code < 0xaa43) {
                                        // Mn   [2] CHAM CONSONANT SIGN LA..CHAM CONSONANT SIGN WA
                                        if (0xaa35 <= code && code <= 0xaa36) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn       CHAM CONSONANT SIGN FINAL NG
                                        if (0xaa43 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        // Mn       CHAM CONSONANT SIGN FINAL M
                                        if (0xaa4c === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else if (code < 0xaa7c) {
                                    // Mc       CHAM CONSONANT SIGN FINAL H
                                    if (0xaa4d === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else {
                                    // Mn       MYANMAR SIGN TAI LAING TONE-2
                                    if (0xaa7c === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    // Mn       TAI VIET MAI KANG
                                    if (0xaab0 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        } else if (code < 0xabe6) {
                            if (code < 0xaaec) {
                                if (code < 0xaabe) {
                                    if (code < 0xaab7) {
                                        // Mn   [3] TAI VIET VOWEL I..TAI VIET VOWEL U
                                        if (0xaab2 <= code && code <= 0xaab4) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn   [2] TAI VIET MAI KHIT..TAI VIET VOWEL IA
                                        if (0xaab7 <= code && code <= 0xaab8) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else if (code < 0xaac1) {
                                    // Mn   [2] TAI VIET VOWEL AM..TAI VIET TONE MAI EK
                                    if (0xaabe <= code && code <= 0xaabf) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn       TAI VIET TONE MAI THO
                                    if (0xaac1 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    // Mc       MEETEI MAYEK VOWEL SIGN II
                                    if (0xaaeb === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                            } else if (code < 0xaaf6) {
                                if (code < 0xaaee) {
                                    // Mn   [2] MEETEI MAYEK VOWEL SIGN UU..MEETEI MAYEK VOWEL SIGN AAI
                                    if (0xaaec <= code && code <= 0xaaed) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0xaaf5) {
                                    // Mc   [2] MEETEI MAYEK VOWEL SIGN AU..MEETEI MAYEK VOWEL SIGN AAU
                                    if (0xaaee <= code && code <= 0xaaef) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else {
                                    // Mc       MEETEI MAYEK VOWEL SIGN VISARGA
                                    if (0xaaf5 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                            } else {
                                if (code < 0xabe3) {
                                    // Mn       MEETEI MAYEK VIRAMA
                                    if (0xaaf6 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0xabe5) {
                                    // Mc   [2] MEETEI MAYEK VOWEL SIGN ONAP..MEETEI MAYEK VOWEL SIGN INAP
                                    if (0xabe3 <= code && code <= 0xabe4) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else {
                                    // Mn       MEETEI MAYEK VOWEL SIGN ANAP
                                    if (0xabe5 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        } else {
                            if (code < 0xac00) {
                                if (code < 0xabe9) {
                                    if (code < 0xabe8) {
                                        // Mc   [2] MEETEI MAYEK VOWEL SIGN YENAP..MEETEI MAYEK VOWEL SIGN SOUNAP
                                        if (0xabe6 <= code && code <= 0xabe7) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn       MEETEI MAYEK VOWEL SIGN UNAP
                                        if (0xabe8 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else if (code < 0xabec) {
                                    // Mc   [2] MEETEI MAYEK VOWEL SIGN CHEINAP..MEETEI MAYEK VOWEL SIGN NUNG
                                    if (0xabe9 <= code && code <= 0xabea) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else {
                                    // Mc       MEETEI MAYEK LUM IYEK
                                    if (0xabec === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    // Mn       MEETEI MAYEK APUN IYEK
                                    if (0xabed === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            } else if (code < 0xac1d) {
                                if (code < 0xac01) {
                                    // Lo       HANGUL SYLLABLE GA
                                    if (0xac00 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xac1c) {
                                    // Lo  [27] HANGUL SYLLABLE GAG..HANGUL SYLLABLE GAH
                                    if (0xac01 <= code && code <= 0xac1b) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE GAE
                                    if (0xac1c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xac38) {
                                    // Lo  [27] HANGUL SYLLABLE GAEG..HANGUL SYLLABLE GAEH
                                    if (0xac1d <= code && code <= 0xac37) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xac39) {
                                    // Lo       HANGUL SYLLABLE GYA
                                    if (0xac38 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE GYAG..HANGUL SYLLABLE GYAH
                                    if (0xac39 <= code && code <= 0xac53) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        }
                    }
                }
            } else if (code < 0xb5a1) {
                if (code < 0xb0ed) {
                    if (code < 0xaea0) {
                        if (code < 0xad6d) {
                            if (code < 0xace0) {
                                if (code < 0xac8d) {
                                    if (code < 0xac70) {
                                        if (code < 0xac55) {
                                            // Lo       HANGUL SYLLABLE GYAE
                                            if (0xac54 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE GYAEG..HANGUL SYLLABLE GYAEH
                                            if (0xac55 <= code && code <= 0xac6f) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xac71) {
                                            // Lo       HANGUL SYLLABLE GEO
                                            if (0xac70 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xac8c) {
                                            // Lo  [27] HANGUL SYLLABLE GEOG..HANGUL SYLLABLE GEOH
                                            if (0xac71 <= code && code <= 0xac8b) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE GE
                                            if (0xac8c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xaca9) {
                                    if (code < 0xaca8) {
                                        // Lo  [27] HANGUL SYLLABLE GEG..HANGUL SYLLABLE GEH
                                        if (0xac8d <= code && code <= 0xaca7) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE GYEO
                                        if (0xaca8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xacc4) {
                                        // Lo  [27] HANGUL SYLLABLE GYEOG..HANGUL SYLLABLE GYEOH
                                        if (0xaca9 <= code && code <= 0xacc3) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xacc5) {
                                        // Lo       HANGUL SYLLABLE GYE
                                        if (0xacc4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE GYEG..HANGUL SYLLABLE GYEH
                                        if (0xacc5 <= code && code <= 0xacdf) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else {
                                if (code < 0xad19) {
                                    if (code < 0xacfc) {
                                        if (code < 0xace1) {
                                            // Lo       HANGUL SYLLABLE GO
                                            if (0xace0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE GOG..HANGUL SYLLABLE GOH
                                            if (0xace1 <= code && code <= 0xacfb) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xacfd) {
                                            // Lo       HANGUL SYLLABLE GWA
                                            if (0xacfc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xad18) {
                                            // Lo  [27] HANGUL SYLLABLE GWAG..HANGUL SYLLABLE GWAH
                                            if (0xacfd <= code && code <= 0xad17) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE GWAE
                                            if (0xad18 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xad50) {
                                    if (code < 0xad34) {
                                        // Lo  [27] HANGUL SYLLABLE GWAEG..HANGUL SYLLABLE GWAEH
                                        if (0xad19 <= code && code <= 0xad33) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xad35) {
                                        // Lo       HANGUL SYLLABLE GOE
                                        if (0xad34 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE GOEG..HANGUL SYLLABLE GOEH
                                        if (0xad35 <= code && code <= 0xad4f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xad51) {
                                        // Lo       HANGUL SYLLABLE GYO
                                        if (0xad50 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xad6c) {
                                        // Lo  [27] HANGUL SYLLABLE GYOG..HANGUL SYLLABLE GYOH
                                        if (0xad51 <= code && code <= 0xad6b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE GU
                                        if (0xad6c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            }
                        } else if (code < 0xadf9) {
                            if (code < 0xadc0) {
                                if (code < 0xad89) {
                                    if (code < 0xad88) {
                                        // Lo  [27] HANGUL SYLLABLE GUG..HANGUL SYLLABLE GUH
                                        if (0xad6d <= code && code <= 0xad87) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE GWEO
                                        if (0xad88 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xada4) {
                                        // Lo  [27] HANGUL SYLLABLE GWEOG..HANGUL SYLLABLE GWEOH
                                        if (0xad89 <= code && code <= 0xada3) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xada5) {
                                        // Lo       HANGUL SYLLABLE GWE
                                        if (0xada4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE GWEG..HANGUL SYLLABLE GWEH
                                        if (0xada5 <= code && code <= 0xadbf) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xaddc) {
                                if (code < 0xadc1) {
                                    // Lo       HANGUL SYLLABLE GWI
                                    if (0xadc0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE GWIG..HANGUL SYLLABLE GWIH
                                    if (0xadc1 <= code && code <= 0xaddb) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xaddd) {
                                    // Lo       HANGUL SYLLABLE GYU
                                    if (0xaddc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xadf8) {
                                    // Lo  [27] HANGUL SYLLABLE GYUG..HANGUL SYLLABLE GYUH
                                    if (0xaddd <= code && code <= 0xadf7) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE GEU
                                    if (0xadf8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        } else {
                            if (code < 0xae4c) {
                                if (code < 0xae15) {
                                    if (code < 0xae14) {
                                        // Lo  [27] HANGUL SYLLABLE GEUG..HANGUL SYLLABLE GEUH
                                        if (0xadf9 <= code && code <= 0xae13) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE GYI
                                        if (0xae14 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xae30) {
                                        // Lo  [27] HANGUL SYLLABLE GYIG..HANGUL SYLLABLE GYIH
                                        if (0xae15 <= code && code <= 0xae2f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xae31) {
                                        // Lo       HANGUL SYLLABLE GI
                                        if (0xae30 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE GIG..HANGUL SYLLABLE GIH
                                        if (0xae31 <= code && code <= 0xae4b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xae69) {
                                if (code < 0xae4d) {
                                    // Lo       HANGUL SYLLABLE GGA
                                    if (0xae4c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xae68) {
                                    // Lo  [27] HANGUL SYLLABLE GGAG..HANGUL SYLLABLE GGAH
                                    if (0xae4d <= code && code <= 0xae67) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE GGAE
                                    if (0xae68 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xae84) {
                                    // Lo  [27] HANGUL SYLLABLE GGAEG..HANGUL SYLLABLE GGAEH
                                    if (0xae69 <= code && code <= 0xae83) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xae85) {
                                    // Lo       HANGUL SYLLABLE GGYA
                                    if (0xae84 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE GGYAG..HANGUL SYLLABLE GGYAH
                                    if (0xae85 <= code && code <= 0xae9f) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        }
                    } else {
                        if (code < 0xafb9) {
                            if (code < 0xaf2c) {
                                if (code < 0xaed9) {
                                    if (code < 0xaebc) {
                                        if (code < 0xaea1) {
                                            // Lo       HANGUL SYLLABLE GGYAE
                                            if (0xaea0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE GGYAEG..HANGUL SYLLABLE GGYAEH
                                            if (0xaea1 <= code && code <= 0xaebb) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xaebd) {
                                            // Lo       HANGUL SYLLABLE GGEO
                                            if (0xaebc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xaed8) {
                                            // Lo  [27] HANGUL SYLLABLE GGEOG..HANGUL SYLLABLE GGEOH
                                            if (0xaebd <= code && code <= 0xaed7) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE GGE
                                            if (0xaed8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xaef5) {
                                    if (code < 0xaef4) {
                                        // Lo  [27] HANGUL SYLLABLE GGEG..HANGUL SYLLABLE GGEH
                                        if (0xaed9 <= code && code <= 0xaef3) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE GGYEO
                                        if (0xaef4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xaf10) {
                                        // Lo  [27] HANGUL SYLLABLE GGYEOG..HANGUL SYLLABLE GGYEOH
                                        if (0xaef5 <= code && code <= 0xaf0f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xaf11) {
                                        // Lo       HANGUL SYLLABLE GGYE
                                        if (0xaf10 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE GGYEG..HANGUL SYLLABLE GGYEH
                                        if (0xaf11 <= code && code <= 0xaf2b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else {
                                if (code < 0xaf65) {
                                    if (code < 0xaf48) {
                                        if (code < 0xaf2d) {
                                            // Lo       HANGUL SYLLABLE GGO
                                            if (0xaf2c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE GGOG..HANGUL SYLLABLE GGOH
                                            if (0xaf2d <= code && code <= 0xaf47) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xaf49) {
                                            // Lo       HANGUL SYLLABLE GGWA
                                            if (0xaf48 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xaf64) {
                                            // Lo  [27] HANGUL SYLLABLE GGWAG..HANGUL SYLLABLE GGWAH
                                            if (0xaf49 <= code && code <= 0xaf63) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE GGWAE
                                            if (0xaf64 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xaf9c) {
                                    if (code < 0xaf80) {
                                        // Lo  [27] HANGUL SYLLABLE GGWAEG..HANGUL SYLLABLE GGWAEH
                                        if (0xaf65 <= code && code <= 0xaf7f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xaf81) {
                                        // Lo       HANGUL SYLLABLE GGOE
                                        if (0xaf80 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE GGOEG..HANGUL SYLLABLE GGOEH
                                        if (0xaf81 <= code && code <= 0xaf9b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xaf9d) {
                                        // Lo       HANGUL SYLLABLE GGYO
                                        if (0xaf9c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xafb8) {
                                        // Lo  [27] HANGUL SYLLABLE GGYOG..HANGUL SYLLABLE GGYOH
                                        if (0xaf9d <= code && code <= 0xafb7) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE GGU
                                        if (0xafb8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            }
                        } else if (code < 0xb060) {
                            if (code < 0xb00c) {
                                if (code < 0xafd5) {
                                    if (code < 0xafd4) {
                                        // Lo  [27] HANGUL SYLLABLE GGUG..HANGUL SYLLABLE GGUH
                                        if (0xafb9 <= code && code <= 0xafd3) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE GGWEO
                                        if (0xafd4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xaff0) {
                                        // Lo  [27] HANGUL SYLLABLE GGWEOG..HANGUL SYLLABLE GGWEOH
                                        if (0xafd5 <= code && code <= 0xafef) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xaff1) {
                                        // Lo       HANGUL SYLLABLE GGWE
                                        if (0xaff0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE GGWEG..HANGUL SYLLABLE GGWEH
                                        if (0xaff1 <= code && code <= 0xb00b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xb029) {
                                if (code < 0xb00d) {
                                    // Lo       HANGUL SYLLABLE GGWI
                                    if (0xb00c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xb028) {
                                    // Lo  [27] HANGUL SYLLABLE GGWIG..HANGUL SYLLABLE GGWIH
                                    if (0xb00d <= code && code <= 0xb027) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE GGYU
                                    if (0xb028 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xb044) {
                                    // Lo  [27] HANGUL SYLLABLE GGYUG..HANGUL SYLLABLE GGYUH
                                    if (0xb029 <= code && code <= 0xb043) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xb045) {
                                    // Lo       HANGUL SYLLABLE GGEU
                                    if (0xb044 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE GGEUG..HANGUL SYLLABLE GGEUH
                                    if (0xb045 <= code && code <= 0xb05f) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        } else {
                            if (code < 0xb099) {
                                if (code < 0xb07c) {
                                    if (code < 0xb061) {
                                        // Lo       HANGUL SYLLABLE GGYI
                                        if (0xb060 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE GGYIG..HANGUL SYLLABLE GGYIH
                                        if (0xb061 <= code && code <= 0xb07b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xb07d) {
                                        // Lo       HANGUL SYLLABLE GGI
                                        if (0xb07c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xb098) {
                                        // Lo  [27] HANGUL SYLLABLE GGIG..HANGUL SYLLABLE GGIH
                                        if (0xb07d <= code && code <= 0xb097) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE NA
                                        if (0xb098 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else if (code < 0xb0d0) {
                                if (code < 0xb0b4) {
                                    // Lo  [27] HANGUL SYLLABLE NAG..HANGUL SYLLABLE NAH
                                    if (0xb099 <= code && code <= 0xb0b3) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xb0b5) {
                                    // Lo       HANGUL SYLLABLE NAE
                                    if (0xb0b4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE NAEG..HANGUL SYLLABLE NAEH
                                    if (0xb0b5 <= code && code <= 0xb0cf) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xb0d1) {
                                    // Lo       HANGUL SYLLABLE NYA
                                    if (0xb0d0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xb0ec) {
                                    // Lo  [27] HANGUL SYLLABLE NYAG..HANGUL SYLLABLE NYAH
                                    if (0xb0d1 <= code && code <= 0xb0eb) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE NYAE
                                    if (0xb0ec === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        }
                    }
                } else if (code < 0xb354) {
                    if (code < 0xb220) {
                        if (code < 0xb179) {
                            if (code < 0xb140) {
                                if (code < 0xb109) {
                                    if (code < 0xb108) {
                                        // Lo  [27] HANGUL SYLLABLE NYAEG..HANGUL SYLLABLE NYAEH
                                        if (0xb0ed <= code && code <= 0xb107) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE NEO
                                        if (0xb108 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xb124) {
                                        // Lo  [27] HANGUL SYLLABLE NEOG..HANGUL SYLLABLE NEOH
                                        if (0xb109 <= code && code <= 0xb123) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xb125) {
                                        // Lo       HANGUL SYLLABLE NE
                                        if (0xb124 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE NEG..HANGUL SYLLABLE NEH
                                        if (0xb125 <= code && code <= 0xb13f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xb15c) {
                                if (code < 0xb141) {
                                    // Lo       HANGUL SYLLABLE NYEO
                                    if (0xb140 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE NYEOG..HANGUL SYLLABLE NYEOH
                                    if (0xb141 <= code && code <= 0xb15b) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xb15d) {
                                    // Lo       HANGUL SYLLABLE NYE
                                    if (0xb15c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xb178) {
                                    // Lo  [27] HANGUL SYLLABLE NYEG..HANGUL SYLLABLE NYEH
                                    if (0xb15d <= code && code <= 0xb177) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE NO
                                    if (0xb178 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        } else {
                            if (code < 0xb1cc) {
                                if (code < 0xb195) {
                                    if (code < 0xb194) {
                                        // Lo  [27] HANGUL SYLLABLE NOG..HANGUL SYLLABLE NOH
                                        if (0xb179 <= code && code <= 0xb193) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE NWA
                                        if (0xb194 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xb1b0) {
                                        // Lo  [27] HANGUL SYLLABLE NWAG..HANGUL SYLLABLE NWAH
                                        if (0xb195 <= code && code <= 0xb1af) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xb1b1) {
                                        // Lo       HANGUL SYLLABLE NWAE
                                        if (0xb1b0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE NWAEG..HANGUL SYLLABLE NWAEH
                                        if (0xb1b1 <= code && code <= 0xb1cb) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xb1e9) {
                                if (code < 0xb1cd) {
                                    // Lo       HANGUL SYLLABLE NOE
                                    if (0xb1cc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xb1e8) {
                                    // Lo  [27] HANGUL SYLLABLE NOEG..HANGUL SYLLABLE NOEH
                                    if (0xb1cd <= code && code <= 0xb1e7) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE NYO
                                    if (0xb1e8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xb204) {
                                    // Lo  [27] HANGUL SYLLABLE NYOG..HANGUL SYLLABLE NYOH
                                    if (0xb1e9 <= code && code <= 0xb203) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xb205) {
                                    // Lo       HANGUL SYLLABLE NU
                                    if (0xb204 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE NUG..HANGUL SYLLABLE NUH
                                    if (0xb205 <= code && code <= 0xb21f) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        }
                    } else if (code < 0xb2ad) {
                        if (code < 0xb259) {
                            if (code < 0xb23c) {
                                if (code < 0xb221) {
                                    // Lo       HANGUL SYLLABLE NWEO
                                    if (0xb220 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE NWEOG..HANGUL SYLLABLE NWEOH
                                    if (0xb221 <= code && code <= 0xb23b) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xb23d) {
                                    // Lo       HANGUL SYLLABLE NWE
                                    if (0xb23c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xb258) {
                                    // Lo  [27] HANGUL SYLLABLE NWEG..HANGUL SYLLABLE NWEH
                                    if (0xb23d <= code && code <= 0xb257) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE NWI
                                    if (0xb258 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        } else if (code < 0xb290) {
                            if (code < 0xb274) {
                                // Lo  [27] HANGUL SYLLABLE NWIG..HANGUL SYLLABLE NWIH
                                if (0xb259 <= code && code <= 0xb273) return boundaries_1.CLUSTER_BREAK.LVT;
                            } else if (code < 0xb275) {
                                // Lo       HANGUL SYLLABLE NYU
                                if (0xb274 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            } else {
                                // Lo  [27] HANGUL SYLLABLE NYUG..HANGUL SYLLABLE NYUH
                                if (0xb275 <= code && code <= 0xb28f) return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                        } else {
                            if (code < 0xb291) {
                                // Lo       HANGUL SYLLABLE NEU
                                if (0xb290 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            } else if (code < 0xb2ac) {
                                // Lo  [27] HANGUL SYLLABLE NEUG..HANGUL SYLLABLE NEUH
                                if (0xb291 <= code && code <= 0xb2ab) return boundaries_1.CLUSTER_BREAK.LVT;
                            } else {
                                // Lo       HANGUL SYLLABLE NYI
                                if (0xb2ac === code) return boundaries_1.CLUSTER_BREAK.LV;
                            }
                        }
                    } else {
                        if (code < 0xb300) {
                            if (code < 0xb2c9) {
                                if (code < 0xb2c8) {
                                    // Lo  [27] HANGUL SYLLABLE NYIG..HANGUL SYLLABLE NYIH
                                    if (0xb2ad <= code && code <= 0xb2c7) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE NI
                                    if (0xb2c8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xb2e4) {
                                    // Lo  [27] HANGUL SYLLABLE NIG..HANGUL SYLLABLE NIH
                                    if (0xb2c9 <= code && code <= 0xb2e3) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xb2e5) {
                                    // Lo       HANGUL SYLLABLE DA
                                    if (0xb2e4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE DAG..HANGUL SYLLABLE DAH
                                    if (0xb2e5 <= code && code <= 0xb2ff) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        } else if (code < 0xb31d) {
                            if (code < 0xb301) {
                                // Lo       HANGUL SYLLABLE DAE
                                if (0xb300 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            } else if (code < 0xb31c) {
                                // Lo  [27] HANGUL SYLLABLE DAEG..HANGUL SYLLABLE DAEH
                                if (0xb301 <= code && code <= 0xb31b) return boundaries_1.CLUSTER_BREAK.LVT;
                            } else {
                                // Lo       HANGUL SYLLABLE DYA
                                if (0xb31c === code) return boundaries_1.CLUSTER_BREAK.LV;
                            }
                        } else {
                            if (code < 0xb338) {
                                // Lo  [27] HANGUL SYLLABLE DYAG..HANGUL SYLLABLE DYAH
                                if (0xb31d <= code && code <= 0xb337) return boundaries_1.CLUSTER_BREAK.LVT;
                            } else if (code < 0xb339) {
                                // Lo       HANGUL SYLLABLE DYAE
                                if (0xb338 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            } else {
                                // Lo  [27] HANGUL SYLLABLE DYAEG..HANGUL SYLLABLE DYAEH
                                if (0xb339 <= code && code <= 0xb353) return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                        }
                    }
                } else {
                    if (code < 0xb46d) {
                        if (code < 0xb3e0) {
                            if (code < 0xb38d) {
                                if (code < 0xb370) {
                                    if (code < 0xb355) {
                                        // Lo       HANGUL SYLLABLE DEO
                                        if (0xb354 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE DEOG..HANGUL SYLLABLE DEOH
                                        if (0xb355 <= code && code <= 0xb36f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xb371) {
                                        // Lo       HANGUL SYLLABLE DE
                                        if (0xb370 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xb38c) {
                                        // Lo  [27] HANGUL SYLLABLE DEG..HANGUL SYLLABLE DEH
                                        if (0xb371 <= code && code <= 0xb38b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE DYEO
                                        if (0xb38c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else if (code < 0xb3a9) {
                                if (code < 0xb3a8) {
                                    // Lo  [27] HANGUL SYLLABLE DYEOG..HANGUL SYLLABLE DYEOH
                                    if (0xb38d <= code && code <= 0xb3a7) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE DYE
                                    if (0xb3a8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xb3c4) {
                                    // Lo  [27] HANGUL SYLLABLE DYEG..HANGUL SYLLABLE DYEH
                                    if (0xb3a9 <= code && code <= 0xb3c3) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xb3c5) {
                                    // Lo       HANGUL SYLLABLE DO
                                    if (0xb3c4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE DOG..HANGUL SYLLABLE DOH
                                    if (0xb3c5 <= code && code <= 0xb3df) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        } else {
                            if (code < 0xb419) {
                                if (code < 0xb3fc) {
                                    if (code < 0xb3e1) {
                                        // Lo       HANGUL SYLLABLE DWA
                                        if (0xb3e0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE DWAG..HANGUL SYLLABLE DWAH
                                        if (0xb3e1 <= code && code <= 0xb3fb) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xb3fd) {
                                        // Lo       HANGUL SYLLABLE DWAE
                                        if (0xb3fc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xb418) {
                                        // Lo  [27] HANGUL SYLLABLE DWAEG..HANGUL SYLLABLE DWAEH
                                        if (0xb3fd <= code && code <= 0xb417) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE DOE
                                        if (0xb418 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else if (code < 0xb450) {
                                if (code < 0xb434) {
                                    // Lo  [27] HANGUL SYLLABLE DOEG..HANGUL SYLLABLE DOEH
                                    if (0xb419 <= code && code <= 0xb433) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xb435) {
                                    // Lo       HANGUL SYLLABLE DYO
                                    if (0xb434 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE DYOG..HANGUL SYLLABLE DYOH
                                    if (0xb435 <= code && code <= 0xb44f) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xb451) {
                                    // Lo       HANGUL SYLLABLE DU
                                    if (0xb450 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xb46c) {
                                    // Lo  [27] HANGUL SYLLABLE DUG..HANGUL SYLLABLE DUH
                                    if (0xb451 <= code && code <= 0xb46b) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE DWEO
                                    if (0xb46c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        }
                    } else if (code < 0xb514) {
                        if (code < 0xb4c0) {
                            if (code < 0xb489) {
                                if (code < 0xb488) {
                                    // Lo  [27] HANGUL SYLLABLE DWEOG..HANGUL SYLLABLE DWEOH
                                    if (0xb46d <= code && code <= 0xb487) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE DWE
                                    if (0xb488 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xb4a4) {
                                    // Lo  [27] HANGUL SYLLABLE DWEG..HANGUL SYLLABLE DWEH
                                    if (0xb489 <= code && code <= 0xb4a3) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xb4a5) {
                                    // Lo       HANGUL SYLLABLE DWI
                                    if (0xb4a4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE DWIG..HANGUL SYLLABLE DWIH
                                    if (0xb4a5 <= code && code <= 0xb4bf) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        } else if (code < 0xb4dd) {
                            if (code < 0xb4c1) {
                                // Lo       HANGUL SYLLABLE DYU
                                if (0xb4c0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            } else if (code < 0xb4dc) {
                                // Lo  [27] HANGUL SYLLABLE DYUG..HANGUL SYLLABLE DYUH
                                if (0xb4c1 <= code && code <= 0xb4db) return boundaries_1.CLUSTER_BREAK.LVT;
                            } else {
                                // Lo       HANGUL SYLLABLE DEU
                                if (0xb4dc === code) return boundaries_1.CLUSTER_BREAK.LV;
                            }
                        } else {
                            if (code < 0xb4f8) {
                                // Lo  [27] HANGUL SYLLABLE DEUG..HANGUL SYLLABLE DEUH
                                if (0xb4dd <= code && code <= 0xb4f7) return boundaries_1.CLUSTER_BREAK.LVT;
                            } else if (code < 0xb4f9) {
                                // Lo       HANGUL SYLLABLE DYI
                                if (0xb4f8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            } else {
                                // Lo  [27] HANGUL SYLLABLE DYIG..HANGUL SYLLABLE DYIH
                                if (0xb4f9 <= code && code <= 0xb513) return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                        }
                    } else {
                        if (code < 0xb54d) {
                            if (code < 0xb530) {
                                if (code < 0xb515) {
                                    // Lo       HANGUL SYLLABLE DI
                                    if (0xb514 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE DIG..HANGUL SYLLABLE DIH
                                    if (0xb515 <= code && code <= 0xb52f) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xb531) {
                                    // Lo       HANGUL SYLLABLE DDA
                                    if (0xb530 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xb54c) {
                                    // Lo  [27] HANGUL SYLLABLE DDAG..HANGUL SYLLABLE DDAH
                                    if (0xb531 <= code && code <= 0xb54b) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE DDAE
                                    if (0xb54c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        } else if (code < 0xb584) {
                            if (code < 0xb568) {
                                // Lo  [27] HANGUL SYLLABLE DDAEG..HANGUL SYLLABLE DDAEH
                                if (0xb54d <= code && code <= 0xb567) return boundaries_1.CLUSTER_BREAK.LVT;
                            } else if (code < 0xb569) {
                                // Lo       HANGUL SYLLABLE DDYA
                                if (0xb568 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            } else {
                                // Lo  [27] HANGUL SYLLABLE DDYAG..HANGUL SYLLABLE DDYAH
                                if (0xb569 <= code && code <= 0xb583) return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                        } else {
                            if (code < 0xb585) {
                                // Lo       HANGUL SYLLABLE DDYAE
                                if (0xb584 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            } else if (code < 0xb5a0) {
                                // Lo  [27] HANGUL SYLLABLE DDYAEG..HANGUL SYLLABLE DDYAEH
                                if (0xb585 <= code && code <= 0xb59f) return boundaries_1.CLUSTER_BREAK.LVT;
                            } else {
                                // Lo       HANGUL SYLLABLE DDEO
                                if (0xb5a0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            }
                        }
                    }
                }
            } else {
                if (code < 0xba55) {
                    if (code < 0xb808) {
                        if (code < 0xb6d4) {
                            if (code < 0xb62d) {
                                if (code < 0xb5f4) {
                                    if (code < 0xb5bd) {
                                        if (code < 0xb5bc) {
                                            // Lo  [27] HANGUL SYLLABLE DDEOG..HANGUL SYLLABLE DDEOH
                                            if (0xb5a1 <= code && code <= 0xb5bb) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE DDE
                                            if (0xb5bc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code < 0xb5d8) {
                                            // Lo  [27] HANGUL SYLLABLE DDEG..HANGUL SYLLABLE DDEH
                                            if (0xb5bd <= code && code <= 0xb5d7) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code < 0xb5d9) {
                                            // Lo       HANGUL SYLLABLE DDYEO
                                            if (0xb5d8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE DDYEOG..HANGUL SYLLABLE DDYEOH
                                            if (0xb5d9 <= code && code <= 0xb5f3) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else if (code < 0xb610) {
                                    if (code < 0xb5f5) {
                                        // Lo       HANGUL SYLLABLE DDYE
                                        if (0xb5f4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE DDYEG..HANGUL SYLLABLE DDYEH
                                        if (0xb5f5 <= code && code <= 0xb60f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xb611) {
                                        // Lo       HANGUL SYLLABLE DDO
                                        if (0xb610 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xb62c) {
                                        // Lo  [27] HANGUL SYLLABLE DDOG..HANGUL SYLLABLE DDOH
                                        if (0xb611 <= code && code <= 0xb62b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE DDWA
                                        if (0xb62c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else {
                                if (code < 0xb680) {
                                    if (code < 0xb649) {
                                        if (code < 0xb648) {
                                            // Lo  [27] HANGUL SYLLABLE DDWAG..HANGUL SYLLABLE DDWAH
                                            if (0xb62d <= code && code <= 0xb647) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE DDWAE
                                            if (0xb648 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code < 0xb664) {
                                            // Lo  [27] HANGUL SYLLABLE DDWAEG..HANGUL SYLLABLE DDWAEH
                                            if (0xb649 <= code && code <= 0xb663) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code < 0xb665) {
                                            // Lo       HANGUL SYLLABLE DDOE
                                            if (0xb664 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE DDOEG..HANGUL SYLLABLE DDOEH
                                            if (0xb665 <= code && code <= 0xb67f) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else if (code < 0xb69d) {
                                    if (code < 0xb681) {
                                        // Lo       HANGUL SYLLABLE DDYO
                                        if (0xb680 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xb69c) {
                                        // Lo  [27] HANGUL SYLLABLE DDYOG..HANGUL SYLLABLE DDYOH
                                        if (0xb681 <= code && code <= 0xb69b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE DDU
                                        if (0xb69c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xb6b8) {
                                        // Lo  [27] HANGUL SYLLABLE DDUG..HANGUL SYLLABLE DDUH
                                        if (0xb69d <= code && code <= 0xb6b7) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xb6b9) {
                                        // Lo       HANGUL SYLLABLE DDWEO
                                        if (0xb6b8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE DDWEOG..HANGUL SYLLABLE DDWEOH
                                        if (0xb6b9 <= code && code <= 0xb6d3) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            }
                        } else if (code < 0xb761) {
                            if (code < 0xb70d) {
                                if (code < 0xb6f0) {
                                    if (code < 0xb6d5) {
                                        // Lo       HANGUL SYLLABLE DDWE
                                        if (0xb6d4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE DDWEG..HANGUL SYLLABLE DDWEH
                                        if (0xb6d5 <= code && code <= 0xb6ef) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xb6f1) {
                                        // Lo       HANGUL SYLLABLE DDWI
                                        if (0xb6f0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xb70c) {
                                        // Lo  [27] HANGUL SYLLABLE DDWIG..HANGUL SYLLABLE DDWIH
                                        if (0xb6f1 <= code && code <= 0xb70b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE DDYU
                                        if (0xb70c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else if (code < 0xb744) {
                                if (code < 0xb728) {
                                    // Lo  [27] HANGUL SYLLABLE DDYUG..HANGUL SYLLABLE DDYUH
                                    if (0xb70d <= code && code <= 0xb727) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xb729) {
                                    // Lo       HANGUL SYLLABLE DDEU
                                    if (0xb728 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE DDEUG..HANGUL SYLLABLE DDEUH
                                    if (0xb729 <= code && code <= 0xb743) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xb745) {
                                    // Lo       HANGUL SYLLABLE DDYI
                                    if (0xb744 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xb760) {
                                    // Lo  [27] HANGUL SYLLABLE DDYIG..HANGUL SYLLABLE DDYIH
                                    if (0xb745 <= code && code <= 0xb75f) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE DDI
                                    if (0xb760 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        } else {
                            if (code < 0xb7b4) {
                                if (code < 0xb77d) {
                                    if (code < 0xb77c) {
                                        // Lo  [27] HANGUL SYLLABLE DDIG..HANGUL SYLLABLE DDIH
                                        if (0xb761 <= code && code <= 0xb77b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE RA
                                        if (0xb77c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xb798) {
                                        // Lo  [27] HANGUL SYLLABLE RAG..HANGUL SYLLABLE RAH
                                        if (0xb77d <= code && code <= 0xb797) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xb799) {
                                        // Lo       HANGUL SYLLABLE RAE
                                        if (0xb798 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE RAEG..HANGUL SYLLABLE RAEH
                                        if (0xb799 <= code && code <= 0xb7b3) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xb7d1) {
                                if (code < 0xb7b5) {
                                    // Lo       HANGUL SYLLABLE RYA
                                    if (0xb7b4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xb7d0) {
                                    // Lo  [27] HANGUL SYLLABLE RYAG..HANGUL SYLLABLE RYAH
                                    if (0xb7b5 <= code && code <= 0xb7cf) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE RYAE
                                    if (0xb7d0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xb7ec) {
                                    // Lo  [27] HANGUL SYLLABLE RYAEG..HANGUL SYLLABLE RYAEH
                                    if (0xb7d1 <= code && code <= 0xb7eb) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xb7ed) {
                                    // Lo       HANGUL SYLLABLE REO
                                    if (0xb7ec === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE REOG..HANGUL SYLLABLE REOH
                                    if (0xb7ed <= code && code <= 0xb807) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        }
                    } else {
                        if (code < 0xb921) {
                            if (code < 0xb894) {
                                if (code < 0xb841) {
                                    if (code < 0xb824) {
                                        if (code < 0xb809) {
                                            // Lo       HANGUL SYLLABLE RE
                                            if (0xb808 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE REG..HANGUL SYLLABLE REH
                                            if (0xb809 <= code && code <= 0xb823) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xb825) {
                                            // Lo       HANGUL SYLLABLE RYEO
                                            if (0xb824 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xb840) {
                                            // Lo  [27] HANGUL SYLLABLE RYEOG..HANGUL SYLLABLE RYEOH
                                            if (0xb825 <= code && code <= 0xb83f) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE RYE
                                            if (0xb840 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xb85d) {
                                    if (code < 0xb85c) {
                                        // Lo  [27] HANGUL SYLLABLE RYEG..HANGUL SYLLABLE RYEH
                                        if (0xb841 <= code && code <= 0xb85b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE RO
                                        if (0xb85c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xb878) {
                                        // Lo  [27] HANGUL SYLLABLE ROG..HANGUL SYLLABLE ROH
                                        if (0xb85d <= code && code <= 0xb877) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xb879) {
                                        // Lo       HANGUL SYLLABLE RWA
                                        if (0xb878 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE RWAG..HANGUL SYLLABLE RWAH
                                        if (0xb879 <= code && code <= 0xb893) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else {
                                if (code < 0xb8cd) {
                                    if (code < 0xb8b0) {
                                        if (code < 0xb895) {
                                            // Lo       HANGUL SYLLABLE RWAE
                                            if (0xb894 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE RWAEG..HANGUL SYLLABLE RWAEH
                                            if (0xb895 <= code && code <= 0xb8af) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xb8b1) {
                                            // Lo       HANGUL SYLLABLE ROE
                                            if (0xb8b0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xb8cc) {
                                            // Lo  [27] HANGUL SYLLABLE ROEG..HANGUL SYLLABLE ROEH
                                            if (0xb8b1 <= code && code <= 0xb8cb) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE RYO
                                            if (0xb8cc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xb904) {
                                    if (code < 0xb8e8) {
                                        // Lo  [27] HANGUL SYLLABLE RYOG..HANGUL SYLLABLE RYOH
                                        if (0xb8cd <= code && code <= 0xb8e7) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xb8e9) {
                                        // Lo       HANGUL SYLLABLE RU
                                        if (0xb8e8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE RUG..HANGUL SYLLABLE RUH
                                        if (0xb8e9 <= code && code <= 0xb903) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xb905) {
                                        // Lo       HANGUL SYLLABLE RWEO
                                        if (0xb904 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xb920) {
                                        // Lo  [27] HANGUL SYLLABLE RWEOG..HANGUL SYLLABLE RWEOH
                                        if (0xb905 <= code && code <= 0xb91f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE RWE
                                        if (0xb920 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            }
                        } else if (code < 0xb9c8) {
                            if (code < 0xb974) {
                                if (code < 0xb93d) {
                                    if (code < 0xb93c) {
                                        // Lo  [27] HANGUL SYLLABLE RWEG..HANGUL SYLLABLE RWEH
                                        if (0xb921 <= code && code <= 0xb93b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE RWI
                                        if (0xb93c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xb958) {
                                        // Lo  [27] HANGUL SYLLABLE RWIG..HANGUL SYLLABLE RWIH
                                        if (0xb93d <= code && code <= 0xb957) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xb959) {
                                        // Lo       HANGUL SYLLABLE RYU
                                        if (0xb958 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE RYUG..HANGUL SYLLABLE RYUH
                                        if (0xb959 <= code && code <= 0xb973) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xb991) {
                                if (code < 0xb975) {
                                    // Lo       HANGUL SYLLABLE REU
                                    if (0xb974 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xb990) {
                                    // Lo  [27] HANGUL SYLLABLE REUG..HANGUL SYLLABLE REUH
                                    if (0xb975 <= code && code <= 0xb98f) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE RYI
                                    if (0xb990 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xb9ac) {
                                    // Lo  [27] HANGUL SYLLABLE RYIG..HANGUL SYLLABLE RYIH
                                    if (0xb991 <= code && code <= 0xb9ab) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xb9ad) {
                                    // Lo       HANGUL SYLLABLE RI
                                    if (0xb9ac === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE RIG..HANGUL SYLLABLE RIH
                                    if (0xb9ad <= code && code <= 0xb9c7) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        } else {
                            if (code < 0xba01) {
                                if (code < 0xb9e4) {
                                    if (code < 0xb9c9) {
                                        // Lo       HANGUL SYLLABLE MA
                                        if (0xb9c8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE MAG..HANGUL SYLLABLE MAH
                                        if (0xb9c9 <= code && code <= 0xb9e3) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xb9e5) {
                                        // Lo       HANGUL SYLLABLE MAE
                                        if (0xb9e4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xba00) {
                                        // Lo  [27] HANGUL SYLLABLE MAEG..HANGUL SYLLABLE MAEH
                                        if (0xb9e5 <= code && code <= 0xb9ff) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE MYA
                                        if (0xba00 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else if (code < 0xba38) {
                                if (code < 0xba1c) {
                                    // Lo  [27] HANGUL SYLLABLE MYAG..HANGUL SYLLABLE MYAH
                                    if (0xba01 <= code && code <= 0xba1b) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xba1d) {
                                    // Lo       HANGUL SYLLABLE MYAE
                                    if (0xba1c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE MYAEG..HANGUL SYLLABLE MYAEH
                                    if (0xba1d <= code && code <= 0xba37) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xba39) {
                                    // Lo       HANGUL SYLLABLE MEO
                                    if (0xba38 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xba54) {
                                    // Lo  [27] HANGUL SYLLABLE MEOG..HANGUL SYLLABLE MEOH
                                    if (0xba39 <= code && code <= 0xba53) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE ME
                                    if (0xba54 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        }
                    }
                } else if (code < 0xbcbc) {
                    if (code < 0xbb88) {
                        if (code < 0xbae1) {
                            if (code < 0xbaa8) {
                                if (code < 0xba71) {
                                    if (code < 0xba70) {
                                        // Lo  [27] HANGUL SYLLABLE MEG..HANGUL SYLLABLE MEH
                                        if (0xba55 <= code && code <= 0xba6f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE MYEO
                                        if (0xba70 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xba8c) {
                                        // Lo  [27] HANGUL SYLLABLE MYEOG..HANGUL SYLLABLE MYEOH
                                        if (0xba71 <= code && code <= 0xba8b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xba8d) {
                                        // Lo       HANGUL SYLLABLE MYE
                                        if (0xba8c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE MYEG..HANGUL SYLLABLE MYEH
                                        if (0xba8d <= code && code <= 0xbaa7) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xbac4) {
                                if (code < 0xbaa9) {
                                    // Lo       HANGUL SYLLABLE MO
                                    if (0xbaa8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE MOG..HANGUL SYLLABLE MOH
                                    if (0xbaa9 <= code && code <= 0xbac3) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xbac5) {
                                    // Lo       HANGUL SYLLABLE MWA
                                    if (0xbac4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xbae0) {
                                    // Lo  [27] HANGUL SYLLABLE MWAG..HANGUL SYLLABLE MWAH
                                    if (0xbac5 <= code && code <= 0xbadf) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE MWAE
                                    if (0xbae0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        } else {
                            if (code < 0xbb34) {
                                if (code < 0xbafd) {
                                    if (code < 0xbafc) {
                                        // Lo  [27] HANGUL SYLLABLE MWAEG..HANGUL SYLLABLE MWAEH
                                        if (0xbae1 <= code && code <= 0xbafb) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE MOE
                                        if (0xbafc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xbb18) {
                                        // Lo  [27] HANGUL SYLLABLE MOEG..HANGUL SYLLABLE MOEH
                                        if (0xbafd <= code && code <= 0xbb17) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xbb19) {
                                        // Lo       HANGUL SYLLABLE MYO
                                        if (0xbb18 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE MYOG..HANGUL SYLLABLE MYOH
                                        if (0xbb19 <= code && code <= 0xbb33) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xbb51) {
                                if (code < 0xbb35) {
                                    // Lo       HANGUL SYLLABLE MU
                                    if (0xbb34 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xbb50) {
                                    // Lo  [27] HANGUL SYLLABLE MUG..HANGUL SYLLABLE MUH
                                    if (0xbb35 <= code && code <= 0xbb4f) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE MWEO
                                    if (0xbb50 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xbb6c) {
                                    // Lo  [27] HANGUL SYLLABLE MWEOG..HANGUL SYLLABLE MWEOH
                                    if (0xbb51 <= code && code <= 0xbb6b) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xbb6d) {
                                    // Lo       HANGUL SYLLABLE MWE
                                    if (0xbb6c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE MWEG..HANGUL SYLLABLE MWEH
                                    if (0xbb6d <= code && code <= 0xbb87) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        }
                    } else if (code < 0xbc15) {
                        if (code < 0xbbc1) {
                            if (code < 0xbba4) {
                                if (code < 0xbb89) {
                                    // Lo       HANGUL SYLLABLE MWI
                                    if (0xbb88 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE MWIG..HANGUL SYLLABLE MWIH
                                    if (0xbb89 <= code && code <= 0xbba3) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xbba5) {
                                    // Lo       HANGUL SYLLABLE MYU
                                    if (0xbba4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xbbc0) {
                                    // Lo  [27] HANGUL SYLLABLE MYUG..HANGUL SYLLABLE MYUH
                                    if (0xbba5 <= code && code <= 0xbbbf) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE MEU
                                    if (0xbbc0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        } else if (code < 0xbbf8) {
                            if (code < 0xbbdc) {
                                // Lo  [27] HANGUL SYLLABLE MEUG..HANGUL SYLLABLE MEUH
                                if (0xbbc1 <= code && code <= 0xbbdb) return boundaries_1.CLUSTER_BREAK.LVT;
                            } else if (code < 0xbbdd) {
                                // Lo       HANGUL SYLLABLE MYI
                                if (0xbbdc === code) return boundaries_1.CLUSTER_BREAK.LV;
                            } else {
                                // Lo  [27] HANGUL SYLLABLE MYIG..HANGUL SYLLABLE MYIH
                                if (0xbbdd <= code && code <= 0xbbf7) return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                        } else {
                            if (code < 0xbbf9) {
                                // Lo       HANGUL SYLLABLE MI
                                if (0xbbf8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            } else if (code < 0xbc14) {
                                // Lo  [27] HANGUL SYLLABLE MIG..HANGUL SYLLABLE MIH
                                if (0xbbf9 <= code && code <= 0xbc13) return boundaries_1.CLUSTER_BREAK.LVT;
                            } else {
                                // Lo       HANGUL SYLLABLE BA
                                if (0xbc14 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            }
                        }
                    } else {
                        if (code < 0xbc68) {
                            if (code < 0xbc31) {
                                if (code < 0xbc30) {
                                    // Lo  [27] HANGUL SYLLABLE BAG..HANGUL SYLLABLE BAH
                                    if (0xbc15 <= code && code <= 0xbc2f) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE BAE
                                    if (0xbc30 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xbc4c) {
                                    // Lo  [27] HANGUL SYLLABLE BAEG..HANGUL SYLLABLE BAEH
                                    if (0xbc31 <= code && code <= 0xbc4b) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xbc4d) {
                                    // Lo       HANGUL SYLLABLE BYA
                                    if (0xbc4c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE BYAG..HANGUL SYLLABLE BYAH
                                    if (0xbc4d <= code && code <= 0xbc67) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        } else if (code < 0xbc85) {
                            if (code < 0xbc69) {
                                // Lo       HANGUL SYLLABLE BYAE
                                if (0xbc68 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            } else if (code < 0xbc84) {
                                // Lo  [27] HANGUL SYLLABLE BYAEG..HANGUL SYLLABLE BYAEH
                                if (0xbc69 <= code && code <= 0xbc83) return boundaries_1.CLUSTER_BREAK.LVT;
                            } else {
                                // Lo       HANGUL SYLLABLE BEO
                                if (0xbc84 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            }
                        } else {
                            if (code < 0xbca0) {
                                // Lo  [27] HANGUL SYLLABLE BEOG..HANGUL SYLLABLE BEOH
                                if (0xbc85 <= code && code <= 0xbc9f) return boundaries_1.CLUSTER_BREAK.LVT;
                            } else if (code < 0xbca1) {
                                // Lo       HANGUL SYLLABLE BE
                                if (0xbca0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            } else {
                                // Lo  [27] HANGUL SYLLABLE BEG..HANGUL SYLLABLE BEH
                                if (0xbca1 <= code && code <= 0xbcbb) return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                        }
                    }
                } else {
                    if (code < 0xbdd5) {
                        if (code < 0xbd48) {
                            if (code < 0xbcf5) {
                                if (code < 0xbcd8) {
                                    if (code < 0xbcbd) {
                                        // Lo       HANGUL SYLLABLE BYEO
                                        if (0xbcbc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE BYEOG..HANGUL SYLLABLE BYEOH
                                        if (0xbcbd <= code && code <= 0xbcd7) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xbcd9) {
                                        // Lo       HANGUL SYLLABLE BYE
                                        if (0xbcd8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xbcf4) {
                                        // Lo  [27] HANGUL SYLLABLE BYEG..HANGUL SYLLABLE BYEH
                                        if (0xbcd9 <= code && code <= 0xbcf3) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE BO
                                        if (0xbcf4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else if (code < 0xbd11) {
                                if (code < 0xbd10) {
                                    // Lo  [27] HANGUL SYLLABLE BOG..HANGUL SYLLABLE BOH
                                    if (0xbcf5 <= code && code <= 0xbd0f) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE BWA
                                    if (0xbd10 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xbd2c) {
                                    // Lo  [27] HANGUL SYLLABLE BWAG..HANGUL SYLLABLE BWAH
                                    if (0xbd11 <= code && code <= 0xbd2b) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xbd2d) {
                                    // Lo       HANGUL SYLLABLE BWAE
                                    if (0xbd2c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE BWAEG..HANGUL SYLLABLE BWAEH
                                    if (0xbd2d <= code && code <= 0xbd47) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        } else {
                            if (code < 0xbd81) {
                                if (code < 0xbd64) {
                                    if (code < 0xbd49) {
                                        // Lo       HANGUL SYLLABLE BOE
                                        if (0xbd48 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE BOEG..HANGUL SYLLABLE BOEH
                                        if (0xbd49 <= code && code <= 0xbd63) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xbd65) {
                                        // Lo       HANGUL SYLLABLE BYO
                                        if (0xbd64 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xbd80) {
                                        // Lo  [27] HANGUL SYLLABLE BYOG..HANGUL SYLLABLE BYOH
                                        if (0xbd65 <= code && code <= 0xbd7f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE BU
                                        if (0xbd80 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else if (code < 0xbdb8) {
                                if (code < 0xbd9c) {
                                    // Lo  [27] HANGUL SYLLABLE BUG..HANGUL SYLLABLE BUH
                                    if (0xbd81 <= code && code <= 0xbd9b) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xbd9d) {
                                    // Lo       HANGUL SYLLABLE BWEO
                                    if (0xbd9c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE BWEOG..HANGUL SYLLABLE BWEOH
                                    if (0xbd9d <= code && code <= 0xbdb7) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xbdb9) {
                                    // Lo       HANGUL SYLLABLE BWE
                                    if (0xbdb8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xbdd4) {
                                    // Lo  [27] HANGUL SYLLABLE BWEG..HANGUL SYLLABLE BWEH
                                    if (0xbdb9 <= code && code <= 0xbdd3) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE BWI
                                    if (0xbdd4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        }
                    } else if (code < 0xbe7c) {
                        if (code < 0xbe28) {
                            if (code < 0xbdf1) {
                                if (code < 0xbdf0) {
                                    // Lo  [27] HANGUL SYLLABLE BWIG..HANGUL SYLLABLE BWIH
                                    if (0xbdd5 <= code && code <= 0xbdef) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE BYU
                                    if (0xbdf0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xbe0c) {
                                    // Lo  [27] HANGUL SYLLABLE BYUG..HANGUL SYLLABLE BYUH
                                    if (0xbdf1 <= code && code <= 0xbe0b) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xbe0d) {
                                    // Lo       HANGUL SYLLABLE BEU
                                    if (0xbe0c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE BEUG..HANGUL SYLLABLE BEUH
                                    if (0xbe0d <= code && code <= 0xbe27) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        } else if (code < 0xbe45) {
                            if (code < 0xbe29) {
                                // Lo       HANGUL SYLLABLE BYI
                                if (0xbe28 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            } else if (code < 0xbe44) {
                                // Lo  [27] HANGUL SYLLABLE BYIG..HANGUL SYLLABLE BYIH
                                if (0xbe29 <= code && code <= 0xbe43) return boundaries_1.CLUSTER_BREAK.LVT;
                            } else {
                                // Lo       HANGUL SYLLABLE BI
                                if (0xbe44 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            }
                        } else {
                            if (code < 0xbe60) {
                                // Lo  [27] HANGUL SYLLABLE BIG..HANGUL SYLLABLE BIH
                                if (0xbe45 <= code && code <= 0xbe5f) return boundaries_1.CLUSTER_BREAK.LVT;
                            } else if (code < 0xbe61) {
                                // Lo       HANGUL SYLLABLE BBA
                                if (0xbe60 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            } else {
                                // Lo  [27] HANGUL SYLLABLE BBAG..HANGUL SYLLABLE BBAH
                                if (0xbe61 <= code && code <= 0xbe7b) return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                        }
                    } else {
                        if (code < 0xbeb5) {
                            if (code < 0xbe98) {
                                if (code < 0xbe7d) {
                                    // Lo       HANGUL SYLLABLE BBAE
                                    if (0xbe7c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE BBAEG..HANGUL SYLLABLE BBAEH
                                    if (0xbe7d <= code && code <= 0xbe97) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xbe99) {
                                    // Lo       HANGUL SYLLABLE BBYA
                                    if (0xbe98 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xbeb4) {
                                    // Lo  [27] HANGUL SYLLABLE BBYAG..HANGUL SYLLABLE BBYAH
                                    if (0xbe99 <= code && code <= 0xbeb3) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE BBYAE
                                    if (0xbeb4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        } else if (code < 0xbeec) {
                            if (code < 0xbed0) {
                                // Lo  [27] HANGUL SYLLABLE BBYAEG..HANGUL SYLLABLE BBYAEH
                                if (0xbeb5 <= code && code <= 0xbecf) return boundaries_1.CLUSTER_BREAK.LVT;
                            } else if (code < 0xbed1) {
                                // Lo       HANGUL SYLLABLE BBEO
                                if (0xbed0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            } else {
                                // Lo  [27] HANGUL SYLLABLE BBEOG..HANGUL SYLLABLE BBEOH
                                if (0xbed1 <= code && code <= 0xbeeb) return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                        } else {
                            if (code < 0xbeed) {
                                // Lo       HANGUL SYLLABLE BBE
                                if (0xbeec === code) return boundaries_1.CLUSTER_BREAK.LV;
                            } else if (code < 0xbf08) {
                                // Lo  [27] HANGUL SYLLABLE BBEG..HANGUL SYLLABLE BBEH
                                if (0xbeed <= code && code <= 0xbf07) return boundaries_1.CLUSTER_BREAK.LVT;
                            } else {
                                // Lo       HANGUL SYLLABLE BBYEO
                                if (0xbf08 === code) return boundaries_1.CLUSTER_BREAK.LV;
                            }
                        }
                    }
                }
            }
        } else {
            if (code < 0xd1d8) {
                if (code < 0xc870) {
                    if (code < 0xc3bc) {
                        if (code < 0xc155) {
                            if (code < 0xc03c) {
                                if (code < 0xbf95) {
                                    if (code < 0xbf5c) {
                                        if (code < 0xbf25) {
                                            if (code < 0xbf24) {
                                                // Lo  [27] HANGUL SYLLABLE BBYEOG..HANGUL SYLLABLE BBYEOH
                                                if (0xbf09 <= code && code <= 0xbf23) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                // Lo       HANGUL SYLLABLE BBYE
                                                if (0xbf24 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code < 0xbf40) {
                                                // Lo  [27] HANGUL SYLLABLE BBYEG..HANGUL SYLLABLE BBYEH
                                                if (0xbf25 <= code && code <= 0xbf3f) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code < 0xbf41) {
                                                // Lo       HANGUL SYLLABLE BBO
                                                if (0xbf40 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                // Lo  [27] HANGUL SYLLABLE BBOG..HANGUL SYLLABLE BBOH
                                                if (0xbf41 <= code && code <= 0xbf5b) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code < 0xbf78) {
                                        if (code < 0xbf5d) {
                                            // Lo       HANGUL SYLLABLE BBWA
                                            if (0xbf5c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE BBWAG..HANGUL SYLLABLE BBWAH
                                            if (0xbf5d <= code && code <= 0xbf77) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xbf79) {
                                            // Lo       HANGUL SYLLABLE BBWAE
                                            if (0xbf78 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xbf94) {
                                            // Lo  [27] HANGUL SYLLABLE BBWAEG..HANGUL SYLLABLE BBWAEH
                                            if (0xbf79 <= code && code <= 0xbf93) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE BBOE
                                            if (0xbf94 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else {
                                    if (code < 0xbfe8) {
                                        if (code < 0xbfb1) {
                                            if (code < 0xbfb0) {
                                                // Lo  [27] HANGUL SYLLABLE BBOEG..HANGUL SYLLABLE BBOEH
                                                if (0xbf95 <= code && code <= 0xbfaf) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                // Lo       HANGUL SYLLABLE BBYO
                                                if (0xbfb0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code < 0xbfcc) {
                                                // Lo  [27] HANGUL SYLLABLE BBYOG..HANGUL SYLLABLE BBYOH
                                                if (0xbfb1 <= code && code <= 0xbfcb) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code < 0xbfcd) {
                                                // Lo       HANGUL SYLLABLE BBU
                                                if (0xbfcc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                // Lo  [27] HANGUL SYLLABLE BBUG..HANGUL SYLLABLE BBUH
                                                if (0xbfcd <= code && code <= 0xbfe7) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code < 0xc005) {
                                        if (code < 0xbfe9) {
                                            // Lo       HANGUL SYLLABLE BBWEO
                                            if (0xbfe8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xc004) {
                                            // Lo  [27] HANGUL SYLLABLE BBWEOG..HANGUL SYLLABLE BBWEOH
                                            if (0xbfe9 <= code && code <= 0xc003) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE BBWE
                                            if (0xc004 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code < 0xc020) {
                                            // Lo  [27] HANGUL SYLLABLE BBWEG..HANGUL SYLLABLE BBWEH
                                            if (0xc005 <= code && code <= 0xc01f) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code < 0xc021) {
                                            // Lo       HANGUL SYLLABLE BBWI
                                            if (0xc020 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE BBWIG..HANGUL SYLLABLE BBWIH
                                            if (0xc021 <= code && code <= 0xc03b) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                }
                            } else if (code < 0xc0c8) {
                                if (code < 0xc075) {
                                    if (code < 0xc058) {
                                        if (code < 0xc03d) {
                                            // Lo       HANGUL SYLLABLE BBYU
                                            if (0xc03c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE BBYUG..HANGUL SYLLABLE BBYUH
                                            if (0xc03d <= code && code <= 0xc057) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xc059) {
                                            // Lo       HANGUL SYLLABLE BBEU
                                            if (0xc058 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xc074) {
                                            // Lo  [27] HANGUL SYLLABLE BBEUG..HANGUL SYLLABLE BBEUH
                                            if (0xc059 <= code && code <= 0xc073) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE BBYI
                                            if (0xc074 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xc091) {
                                    if (code < 0xc090) {
                                        // Lo  [27] HANGUL SYLLABLE BBYIG..HANGUL SYLLABLE BBYIH
                                        if (0xc075 <= code && code <= 0xc08f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE BBI
                                        if (0xc090 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xc0ac) {
                                        // Lo  [27] HANGUL SYLLABLE BBIG..HANGUL SYLLABLE BBIH
                                        if (0xc091 <= code && code <= 0xc0ab) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xc0ad) {
                                        // Lo       HANGUL SYLLABLE SA
                                        if (0xc0ac === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE SAG..HANGUL SYLLABLE SAH
                                        if (0xc0ad <= code && code <= 0xc0c7) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else {
                                if (code < 0xc101) {
                                    if (code < 0xc0e4) {
                                        if (code < 0xc0c9) {
                                            // Lo       HANGUL SYLLABLE SAE
                                            if (0xc0c8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE SAEG..HANGUL SYLLABLE SAEH
                                            if (0xc0c9 <= code && code <= 0xc0e3) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xc0e5) {
                                            // Lo       HANGUL SYLLABLE SYA
                                            if (0xc0e4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xc100) {
                                            // Lo  [27] HANGUL SYLLABLE SYAG..HANGUL SYLLABLE SYAH
                                            if (0xc0e5 <= code && code <= 0xc0ff) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE SYAE
                                            if (0xc100 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xc138) {
                                    if (code < 0xc11c) {
                                        // Lo  [27] HANGUL SYLLABLE SYAEG..HANGUL SYLLABLE SYAEH
                                        if (0xc101 <= code && code <= 0xc11b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xc11d) {
                                        // Lo       HANGUL SYLLABLE SEO
                                        if (0xc11c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE SEOG..HANGUL SYLLABLE SEOH
                                        if (0xc11d <= code && code <= 0xc137) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xc139) {
                                        // Lo       HANGUL SYLLABLE SE
                                        if (0xc138 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xc154) {
                                        // Lo  [27] HANGUL SYLLABLE SEG..HANGUL SYLLABLE SEH
                                        if (0xc139 <= code && code <= 0xc153) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE SYEO
                                        if (0xc154 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            }
                        } else {
                            if (code < 0xc288) {
                                if (code < 0xc1e1) {
                                    if (code < 0xc1a8) {
                                        if (code < 0xc171) {
                                            if (code < 0xc170) {
                                                // Lo  [27] HANGUL SYLLABLE SYEOG..HANGUL SYLLABLE SYEOH
                                                if (0xc155 <= code && code <= 0xc16f) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                // Lo       HANGUL SYLLABLE SYE
                                                if (0xc170 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code < 0xc18c) {
                                                // Lo  [27] HANGUL SYLLABLE SYEG..HANGUL SYLLABLE SYEH
                                                if (0xc171 <= code && code <= 0xc18b) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code < 0xc18d) {
                                                // Lo       HANGUL SYLLABLE SO
                                                if (0xc18c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                // Lo  [27] HANGUL SYLLABLE SOG..HANGUL SYLLABLE SOH
                                                if (0xc18d <= code && code <= 0xc1a7) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code < 0xc1c4) {
                                        if (code < 0xc1a9) {
                                            // Lo       HANGUL SYLLABLE SWA
                                            if (0xc1a8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE SWAG..HANGUL SYLLABLE SWAH
                                            if (0xc1a9 <= code && code <= 0xc1c3) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xc1c5) {
                                            // Lo       HANGUL SYLLABLE SWAE
                                            if (0xc1c4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xc1e0) {
                                            // Lo  [27] HANGUL SYLLABLE SWAEG..HANGUL SYLLABLE SWAEH
                                            if (0xc1c5 <= code && code <= 0xc1df) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE SOE
                                            if (0xc1e0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else {
                                    if (code < 0xc234) {
                                        if (code < 0xc1fd) {
                                            if (code < 0xc1fc) {
                                                // Lo  [27] HANGUL SYLLABLE SOEG..HANGUL SYLLABLE SOEH
                                                if (0xc1e1 <= code && code <= 0xc1fb) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                // Lo       HANGUL SYLLABLE SYO
                                                if (0xc1fc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code < 0xc218) {
                                                // Lo  [27] HANGUL SYLLABLE SYOG..HANGUL SYLLABLE SYOH
                                                if (0xc1fd <= code && code <= 0xc217) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code < 0xc219) {
                                                // Lo       HANGUL SYLLABLE SU
                                                if (0xc218 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                // Lo  [27] HANGUL SYLLABLE SUG..HANGUL SYLLABLE SUH
                                                if (0xc219 <= code && code <= 0xc233) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code < 0xc251) {
                                        if (code < 0xc235) {
                                            // Lo       HANGUL SYLLABLE SWEO
                                            if (0xc234 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xc250) {
                                            // Lo  [27] HANGUL SYLLABLE SWEOG..HANGUL SYLLABLE SWEOH
                                            if (0xc235 <= code && code <= 0xc24f) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE SWE
                                            if (0xc250 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code < 0xc26c) {
                                            // Lo  [27] HANGUL SYLLABLE SWEG..HANGUL SYLLABLE SWEH
                                            if (0xc251 <= code && code <= 0xc26b) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code < 0xc26d) {
                                            // Lo       HANGUL SYLLABLE SWI
                                            if (0xc26c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE SWIG..HANGUL SYLLABLE SWIH
                                            if (0xc26d <= code && code <= 0xc287) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                }
                            } else if (code < 0xc315) {
                                if (code < 0xc2c1) {
                                    if (code < 0xc2a4) {
                                        if (code < 0xc289) {
                                            // Lo       HANGUL SYLLABLE SYU
                                            if (0xc288 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE SYUG..HANGUL SYLLABLE SYUH
                                            if (0xc289 <= code && code <= 0xc2a3) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xc2a5) {
                                            // Lo       HANGUL SYLLABLE SEU
                                            if (0xc2a4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xc2c0) {
                                            // Lo  [27] HANGUL SYLLABLE SEUG..HANGUL SYLLABLE SEUH
                                            if (0xc2a5 <= code && code <= 0xc2bf) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE SYI
                                            if (0xc2c0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xc2f8) {
                                    if (code < 0xc2dc) {
                                        // Lo  [27] HANGUL SYLLABLE SYIG..HANGUL SYLLABLE SYIH
                                        if (0xc2c1 <= code && code <= 0xc2db) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xc2dd) {
                                        // Lo       HANGUL SYLLABLE SI
                                        if (0xc2dc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE SIG..HANGUL SYLLABLE SIH
                                        if (0xc2dd <= code && code <= 0xc2f7) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xc2f9) {
                                        // Lo       HANGUL SYLLABLE SSA
                                        if (0xc2f8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xc314) {
                                        // Lo  [27] HANGUL SYLLABLE SSAG..HANGUL SYLLABLE SSAH
                                        if (0xc2f9 <= code && code <= 0xc313) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE SSAE
                                        if (0xc314 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else {
                                if (code < 0xc368) {
                                    if (code < 0xc331) {
                                        if (code < 0xc330) {
                                            // Lo  [27] HANGUL SYLLABLE SSAEG..HANGUL SYLLABLE SSAEH
                                            if (0xc315 <= code && code <= 0xc32f) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE SSYA
                                            if (0xc330 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code < 0xc34c) {
                                            // Lo  [27] HANGUL SYLLABLE SSYAG..HANGUL SYLLABLE SSYAH
                                            if (0xc331 <= code && code <= 0xc34b) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code < 0xc34d) {
                                            // Lo       HANGUL SYLLABLE SSYAE
                                            if (0xc34c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE SSYAEG..HANGUL SYLLABLE SSYAEH
                                            if (0xc34d <= code && code <= 0xc367) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else if (code < 0xc385) {
                                    if (code < 0xc369) {
                                        // Lo       HANGUL SYLLABLE SSEO
                                        if (0xc368 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xc384) {
                                        // Lo  [27] HANGUL SYLLABLE SSEOG..HANGUL SYLLABLE SSEOH
                                        if (0xc369 <= code && code <= 0xc383) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE SSE
                                        if (0xc384 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xc3a0) {
                                        // Lo  [27] HANGUL SYLLABLE SSEG..HANGUL SYLLABLE SSEH
                                        if (0xc385 <= code && code <= 0xc39f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xc3a1) {
                                        // Lo       HANGUL SYLLABLE SSYEO
                                        if (0xc3a0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE SSYEOG..HANGUL SYLLABLE SSYEOH
                                        if (0xc3a1 <= code && code <= 0xc3bb) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            }
                        }
                    } else if (code < 0xc609) {
                        if (code < 0xc4d5) {
                            if (code < 0xc448) {
                                if (code < 0xc3f5) {
                                    if (code < 0xc3d8) {
                                        if (code < 0xc3bd) {
                                            // Lo       HANGUL SYLLABLE SSYE
                                            if (0xc3bc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE SSYEG..HANGUL SYLLABLE SSYEH
                                            if (0xc3bd <= code && code <= 0xc3d7) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xc3d9) {
                                            // Lo       HANGUL SYLLABLE SSO
                                            if (0xc3d8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xc3f4) {
                                            // Lo  [27] HANGUL SYLLABLE SSOG..HANGUL SYLLABLE SSOH
                                            if (0xc3d9 <= code && code <= 0xc3f3) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE SSWA
                                            if (0xc3f4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xc411) {
                                    if (code < 0xc410) {
                                        // Lo  [27] HANGUL SYLLABLE SSWAG..HANGUL SYLLABLE SSWAH
                                        if (0xc3f5 <= code && code <= 0xc40f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE SSWAE
                                        if (0xc410 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xc42c) {
                                        // Lo  [27] HANGUL SYLLABLE SSWAEG..HANGUL SYLLABLE SSWAEH
                                        if (0xc411 <= code && code <= 0xc42b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xc42d) {
                                        // Lo       HANGUL SYLLABLE SSOE
                                        if (0xc42c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE SSOEG..HANGUL SYLLABLE SSOEH
                                        if (0xc42d <= code && code <= 0xc447) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else {
                                if (code < 0xc481) {
                                    if (code < 0xc464) {
                                        if (code < 0xc449) {
                                            // Lo       HANGUL SYLLABLE SSYO
                                            if (0xc448 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE SSYOG..HANGUL SYLLABLE SSYOH
                                            if (0xc449 <= code && code <= 0xc463) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xc465) {
                                            // Lo       HANGUL SYLLABLE SSU
                                            if (0xc464 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xc480) {
                                            // Lo  [27] HANGUL SYLLABLE SSUG..HANGUL SYLLABLE SSUH
                                            if (0xc465 <= code && code <= 0xc47f) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE SSWEO
                                            if (0xc480 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xc4b8) {
                                    if (code < 0xc49c) {
                                        // Lo  [27] HANGUL SYLLABLE SSWEOG..HANGUL SYLLABLE SSWEOH
                                        if (0xc481 <= code && code <= 0xc49b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xc49d) {
                                        // Lo       HANGUL SYLLABLE SSWE
                                        if (0xc49c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE SSWEG..HANGUL SYLLABLE SSWEH
                                        if (0xc49d <= code && code <= 0xc4b7) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xc4b9) {
                                        // Lo       HANGUL SYLLABLE SSWI
                                        if (0xc4b8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xc4d4) {
                                        // Lo  [27] HANGUL SYLLABLE SSWIG..HANGUL SYLLABLE SSWIH
                                        if (0xc4b9 <= code && code <= 0xc4d3) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE SSYU
                                        if (0xc4d4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            }
                        } else if (code < 0xc57c) {
                            if (code < 0xc528) {
                                if (code < 0xc4f1) {
                                    if (code < 0xc4f0) {
                                        // Lo  [27] HANGUL SYLLABLE SSYUG..HANGUL SYLLABLE SSYUH
                                        if (0xc4d5 <= code && code <= 0xc4ef) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE SSEU
                                        if (0xc4f0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xc50c) {
                                        // Lo  [27] HANGUL SYLLABLE SSEUG..HANGUL SYLLABLE SSEUH
                                        if (0xc4f1 <= code && code <= 0xc50b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xc50d) {
                                        // Lo       HANGUL SYLLABLE SSYI
                                        if (0xc50c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE SSYIG..HANGUL SYLLABLE SSYIH
                                        if (0xc50d <= code && code <= 0xc527) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xc545) {
                                if (code < 0xc529) {
                                    // Lo       HANGUL SYLLABLE SSI
                                    if (0xc528 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xc544) {
                                    // Lo  [27] HANGUL SYLLABLE SSIG..HANGUL SYLLABLE SSIH
                                    if (0xc529 <= code && code <= 0xc543) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE A
                                    if (0xc544 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xc560) {
                                    // Lo  [27] HANGUL SYLLABLE AG..HANGUL SYLLABLE AH
                                    if (0xc545 <= code && code <= 0xc55f) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xc561) {
                                    // Lo       HANGUL SYLLABLE AE
                                    if (0xc560 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE AEG..HANGUL SYLLABLE AEH
                                    if (0xc561 <= code && code <= 0xc57b) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        } else {
                            if (code < 0xc5b5) {
                                if (code < 0xc598) {
                                    if (code < 0xc57d) {
                                        // Lo       HANGUL SYLLABLE YA
                                        if (0xc57c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE YAG..HANGUL SYLLABLE YAH
                                        if (0xc57d <= code && code <= 0xc597) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xc599) {
                                        // Lo       HANGUL SYLLABLE YAE
                                        if (0xc598 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xc5b4) {
                                        // Lo  [27] HANGUL SYLLABLE YAEG..HANGUL SYLLABLE YAEH
                                        if (0xc599 <= code && code <= 0xc5b3) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE EO
                                        if (0xc5b4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else if (code < 0xc5ec) {
                                if (code < 0xc5d0) {
                                    // Lo  [27] HANGUL SYLLABLE EOG..HANGUL SYLLABLE EOH
                                    if (0xc5b5 <= code && code <= 0xc5cf) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xc5d1) {
                                    // Lo       HANGUL SYLLABLE E
                                    if (0xc5d0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE EG..HANGUL SYLLABLE EH
                                    if (0xc5d1 <= code && code <= 0xc5eb) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xc5ed) {
                                    // Lo       HANGUL SYLLABLE YEO
                                    if (0xc5ec === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xc608) {
                                    // Lo  [27] HANGUL SYLLABLE YEOG..HANGUL SYLLABLE YEOH
                                    if (0xc5ed <= code && code <= 0xc607) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE YE
                                    if (0xc608 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        }
                    } else {
                        if (code < 0xc73c) {
                            if (code < 0xc695) {
                                if (code < 0xc65c) {
                                    if (code < 0xc625) {
                                        if (code < 0xc624) {
                                            // Lo  [27] HANGUL SYLLABLE YEG..HANGUL SYLLABLE YEH
                                            if (0xc609 <= code && code <= 0xc623) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE O
                                            if (0xc624 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code < 0xc640) {
                                            // Lo  [27] HANGUL SYLLABLE OG..HANGUL SYLLABLE OH
                                            if (0xc625 <= code && code <= 0xc63f) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code < 0xc641) {
                                            // Lo       HANGUL SYLLABLE WA
                                            if (0xc640 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE WAG..HANGUL SYLLABLE WAH
                                            if (0xc641 <= code && code <= 0xc65b) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else if (code < 0xc678) {
                                    if (code < 0xc65d) {
                                        // Lo       HANGUL SYLLABLE WAE
                                        if (0xc65c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE WAEG..HANGUL SYLLABLE WAEH
                                        if (0xc65d <= code && code <= 0xc677) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xc679) {
                                        // Lo       HANGUL SYLLABLE OE
                                        if (0xc678 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xc694) {
                                        // Lo  [27] HANGUL SYLLABLE OEG..HANGUL SYLLABLE OEH
                                        if (0xc679 <= code && code <= 0xc693) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE YO
                                        if (0xc694 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else {
                                if (code < 0xc6e8) {
                                    if (code < 0xc6b1) {
                                        if (code < 0xc6b0) {
                                            // Lo  [27] HANGUL SYLLABLE YOG..HANGUL SYLLABLE YOH
                                            if (0xc695 <= code && code <= 0xc6af) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE U
                                            if (0xc6b0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code < 0xc6cc) {
                                            // Lo  [27] HANGUL SYLLABLE UG..HANGUL SYLLABLE UH
                                            if (0xc6b1 <= code && code <= 0xc6cb) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code < 0xc6cd) {
                                            // Lo       HANGUL SYLLABLE WEO
                                            if (0xc6cc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE WEOG..HANGUL SYLLABLE WEOH
                                            if (0xc6cd <= code && code <= 0xc6e7) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else if (code < 0xc705) {
                                    if (code < 0xc6e9) {
                                        // Lo       HANGUL SYLLABLE WE
                                        if (0xc6e8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xc704) {
                                        // Lo  [27] HANGUL SYLLABLE WEG..HANGUL SYLLABLE WEH
                                        if (0xc6e9 <= code && code <= 0xc703) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE WI
                                        if (0xc704 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xc720) {
                                        // Lo  [27] HANGUL SYLLABLE WIG..HANGUL SYLLABLE WIH
                                        if (0xc705 <= code && code <= 0xc71f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xc721) {
                                        // Lo       HANGUL SYLLABLE YU
                                        if (0xc720 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE YUG..HANGUL SYLLABLE YUH
                                        if (0xc721 <= code && code <= 0xc73b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            }
                        } else if (code < 0xc7c9) {
                            if (code < 0xc775) {
                                if (code < 0xc758) {
                                    if (code < 0xc73d) {
                                        // Lo       HANGUL SYLLABLE EU
                                        if (0xc73c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE EUG..HANGUL SYLLABLE EUH
                                        if (0xc73d <= code && code <= 0xc757) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xc759) {
                                        // Lo       HANGUL SYLLABLE YI
                                        if (0xc758 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xc774) {
                                        // Lo  [27] HANGUL SYLLABLE YIG..HANGUL SYLLABLE YIH
                                        if (0xc759 <= code && code <= 0xc773) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE I
                                        if (0xc774 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else if (code < 0xc7ac) {
                                if (code < 0xc790) {
                                    // Lo  [27] HANGUL SYLLABLE IG..HANGUL SYLLABLE IH
                                    if (0xc775 <= code && code <= 0xc78f) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xc791) {
                                    // Lo       HANGUL SYLLABLE JA
                                    if (0xc790 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE JAG..HANGUL SYLLABLE JAH
                                    if (0xc791 <= code && code <= 0xc7ab) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xc7ad) {
                                    // Lo       HANGUL SYLLABLE JAE
                                    if (0xc7ac === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xc7c8) {
                                    // Lo  [27] HANGUL SYLLABLE JAEG..HANGUL SYLLABLE JAEH
                                    if (0xc7ad <= code && code <= 0xc7c7) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE JYA
                                    if (0xc7c8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        } else {
                            if (code < 0xc81c) {
                                if (code < 0xc7e5) {
                                    if (code < 0xc7e4) {
                                        // Lo  [27] HANGUL SYLLABLE JYAG..HANGUL SYLLABLE JYAH
                                        if (0xc7c9 <= code && code <= 0xc7e3) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE JYAE
                                        if (0xc7e4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xc800) {
                                        // Lo  [27] HANGUL SYLLABLE JYAEG..HANGUL SYLLABLE JYAEH
                                        if (0xc7e5 <= code && code <= 0xc7ff) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xc801) {
                                        // Lo       HANGUL SYLLABLE JEO
                                        if (0xc800 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE JEOG..HANGUL SYLLABLE JEOH
                                        if (0xc801 <= code && code <= 0xc81b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xc839) {
                                if (code < 0xc81d) {
                                    // Lo       HANGUL SYLLABLE JE
                                    if (0xc81c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xc838) {
                                    // Lo  [27] HANGUL SYLLABLE JEG..HANGUL SYLLABLE JEH
                                    if (0xc81d <= code && code <= 0xc837) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE JYEO
                                    if (0xc838 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xc854) {
                                    // Lo  [27] HANGUL SYLLABLE JYEOG..HANGUL SYLLABLE JYEOH
                                    if (0xc839 <= code && code <= 0xc853) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xc855) {
                                    // Lo       HANGUL SYLLABLE JYE
                                    if (0xc854 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE JYEG..HANGUL SYLLABLE JYEH
                                    if (0xc855 <= code && code <= 0xc86f) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        }
                    }
                } else {
                    if (code < 0xcd24) {
                        if (code < 0xcabd) {
                            if (code < 0xc989) {
                                if (code < 0xc8fc) {
                                    if (code < 0xc8a9) {
                                        if (code < 0xc88c) {
                                            if (code < 0xc871) {
                                                // Lo       HANGUL SYLLABLE JO
                                                if (0xc870 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                // Lo  [27] HANGUL SYLLABLE JOG..HANGUL SYLLABLE JOH
                                                if (0xc871 <= code && code <= 0xc88b) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code < 0xc88d) {
                                                // Lo       HANGUL SYLLABLE JWA
                                                if (0xc88c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code < 0xc8a8) {
                                                // Lo  [27] HANGUL SYLLABLE JWAG..HANGUL SYLLABLE JWAH
                                                if (0xc88d <= code && code <= 0xc8a7) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                // Lo       HANGUL SYLLABLE JWAE
                                                if (0xc8a8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else if (code < 0xc8c5) {
                                        if (code < 0xc8c4) {
                                            // Lo  [27] HANGUL SYLLABLE JWAEG..HANGUL SYLLABLE JWAEH
                                            if (0xc8a9 <= code && code <= 0xc8c3) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE JOE
                                            if (0xc8c4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code < 0xc8e0) {
                                            // Lo  [27] HANGUL SYLLABLE JOEG..HANGUL SYLLABLE JOEH
                                            if (0xc8c5 <= code && code <= 0xc8df) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code < 0xc8e1) {
                                            // Lo       HANGUL SYLLABLE JYO
                                            if (0xc8e0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE JYOG..HANGUL SYLLABLE JYOH
                                            if (0xc8e1 <= code && code <= 0xc8fb) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else {
                                    if (code < 0xc935) {
                                        if (code < 0xc918) {
                                            if (code < 0xc8fd) {
                                                // Lo       HANGUL SYLLABLE JU
                                                if (0xc8fc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                // Lo  [27] HANGUL SYLLABLE JUG..HANGUL SYLLABLE JUH
                                                if (0xc8fd <= code && code <= 0xc917) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        } else {
                                            if (code < 0xc919) {
                                                // Lo       HANGUL SYLLABLE JWEO
                                                if (0xc918 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else if (code < 0xc934) {
                                                // Lo  [27] HANGUL SYLLABLE JWEOG..HANGUL SYLLABLE JWEOH
                                                if (0xc919 <= code && code <= 0xc933) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                // Lo       HANGUL SYLLABLE JWE
                                                if (0xc934 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        }
                                    } else if (code < 0xc96c) {
                                        if (code < 0xc950) {
                                            // Lo  [27] HANGUL SYLLABLE JWEG..HANGUL SYLLABLE JWEH
                                            if (0xc935 <= code && code <= 0xc94f) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code < 0xc951) {
                                            // Lo       HANGUL SYLLABLE JWI
                                            if (0xc950 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE JWIG..HANGUL SYLLABLE JWIH
                                            if (0xc951 <= code && code <= 0xc96b) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xc96d) {
                                            // Lo       HANGUL SYLLABLE JYU
                                            if (0xc96c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xc988) {
                                            // Lo  [27] HANGUL SYLLABLE JYUG..HANGUL SYLLABLE JYUH
                                            if (0xc96d <= code && code <= 0xc987) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE JEU
                                            if (0xc988 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                }
                            } else if (code < 0xca30) {
                                if (code < 0xc9dc) {
                                    if (code < 0xc9a5) {
                                        if (code < 0xc9a4) {
                                            // Lo  [27] HANGUL SYLLABLE JEUG..HANGUL SYLLABLE JEUH
                                            if (0xc989 <= code && code <= 0xc9a3) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE JYI
                                            if (0xc9a4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code < 0xc9c0) {
                                            // Lo  [27] HANGUL SYLLABLE JYIG..HANGUL SYLLABLE JYIH
                                            if (0xc9a5 <= code && code <= 0xc9bf) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code < 0xc9c1) {
                                            // Lo       HANGUL SYLLABLE JI
                                            if (0xc9c0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE JIG..HANGUL SYLLABLE JIH
                                            if (0xc9c1 <= code && code <= 0xc9db) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else if (code < 0xc9f9) {
                                    if (code < 0xc9dd) {
                                        // Lo       HANGUL SYLLABLE JJA
                                        if (0xc9dc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xc9f8) {
                                        // Lo  [27] HANGUL SYLLABLE JJAG..HANGUL SYLLABLE JJAH
                                        if (0xc9dd <= code && code <= 0xc9f7) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE JJAE
                                        if (0xc9f8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xca14) {
                                        // Lo  [27] HANGUL SYLLABLE JJAEG..HANGUL SYLLABLE JJAEH
                                        if (0xc9f9 <= code && code <= 0xca13) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xca15) {
                                        // Lo       HANGUL SYLLABLE JJYA
                                        if (0xca14 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE JJYAG..HANGUL SYLLABLE JJYAH
                                        if (0xca15 <= code && code <= 0xca2f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else {
                                if (code < 0xca69) {
                                    if (code < 0xca4c) {
                                        if (code < 0xca31) {
                                            // Lo       HANGUL SYLLABLE JJYAE
                                            if (0xca30 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE JJYAEG..HANGUL SYLLABLE JJYAEH
                                            if (0xca31 <= code && code <= 0xca4b) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xca4d) {
                                            // Lo       HANGUL SYLLABLE JJEO
                                            if (0xca4c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xca68) {
                                            // Lo  [27] HANGUL SYLLABLE JJEOG..HANGUL SYLLABLE JJEOH
                                            if (0xca4d <= code && code <= 0xca67) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE JJE
                                            if (0xca68 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xcaa0) {
                                    if (code < 0xca84) {
                                        // Lo  [27] HANGUL SYLLABLE JJEG..HANGUL SYLLABLE JJEH
                                        if (0xca69 <= code && code <= 0xca83) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xca85) {
                                        // Lo       HANGUL SYLLABLE JJYEO
                                        if (0xca84 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE JJYEOG..HANGUL SYLLABLE JJYEOH
                                        if (0xca85 <= code && code <= 0xca9f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xcaa1) {
                                        // Lo       HANGUL SYLLABLE JJYE
                                        if (0xcaa0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xcabc) {
                                        // Lo  [27] HANGUL SYLLABLE JJYEG..HANGUL SYLLABLE JJYEH
                                        if (0xcaa1 <= code && code <= 0xcabb) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE JJO
                                        if (0xcabc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            }
                        } else {
                            if (code < 0xcbf0) {
                                if (code < 0xcb49) {
                                    if (code < 0xcb10) {
                                        if (code < 0xcad9) {
                                            if (code < 0xcad8) {
                                                // Lo  [27] HANGUL SYLLABLE JJOG..HANGUL SYLLABLE JJOH
                                                if (0xcabd <= code && code <= 0xcad7) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                // Lo       HANGUL SYLLABLE JJWA
                                                if (0xcad8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code < 0xcaf4) {
                                                // Lo  [27] HANGUL SYLLABLE JJWAG..HANGUL SYLLABLE JJWAH
                                                if (0xcad9 <= code && code <= 0xcaf3) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code < 0xcaf5) {
                                                // Lo       HANGUL SYLLABLE JJWAE
                                                if (0xcaf4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                // Lo  [27] HANGUL SYLLABLE JJWAEG..HANGUL SYLLABLE JJWAEH
                                                if (0xcaf5 <= code && code <= 0xcb0f) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code < 0xcb2c) {
                                        if (code < 0xcb11) {
                                            // Lo       HANGUL SYLLABLE JJOE
                                            if (0xcb10 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE JJOEG..HANGUL SYLLABLE JJOEH
                                            if (0xcb11 <= code && code <= 0xcb2b) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xcb2d) {
                                            // Lo       HANGUL SYLLABLE JJYO
                                            if (0xcb2c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xcb48) {
                                            // Lo  [27] HANGUL SYLLABLE JJYOG..HANGUL SYLLABLE JJYOH
                                            if (0xcb2d <= code && code <= 0xcb47) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE JJU
                                            if (0xcb48 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else {
                                    if (code < 0xcb9c) {
                                        if (code < 0xcb65) {
                                            if (code < 0xcb64) {
                                                // Lo  [27] HANGUL SYLLABLE JJUG..HANGUL SYLLABLE JJUH
                                                if (0xcb49 <= code && code <= 0xcb63) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else {
                                                // Lo       HANGUL SYLLABLE JJWEO
                                                if (0xcb64 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            }
                                        } else {
                                            if (code < 0xcb80) {
                                                // Lo  [27] HANGUL SYLLABLE JJWEOG..HANGUL SYLLABLE JJWEOH
                                                if (0xcb65 <= code && code <= 0xcb7f) return boundaries_1.CLUSTER_BREAK.LVT;
                                            } else if (code < 0xcb81) {
                                                // Lo       HANGUL SYLLABLE JJWE
                                                if (0xcb80 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                            } else {
                                                // Lo  [27] HANGUL SYLLABLE JJWEG..HANGUL SYLLABLE JJWEH
                                                if (0xcb81 <= code && code <= 0xcb9b) return boundaries_1.CLUSTER_BREAK.LVT;
                                            }
                                        }
                                    } else if (code < 0xcbb9) {
                                        if (code < 0xcb9d) {
                                            // Lo       HANGUL SYLLABLE JJWI
                                            if (0xcb9c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xcbb8) {
                                            // Lo  [27] HANGUL SYLLABLE JJWIG..HANGUL SYLLABLE JJWIH
                                            if (0xcb9d <= code && code <= 0xcbb7) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE JJYU
                                            if (0xcbb8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code < 0xcbd4) {
                                            // Lo  [27] HANGUL SYLLABLE JJYUG..HANGUL SYLLABLE JJYUH
                                            if (0xcbb9 <= code && code <= 0xcbd3) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code < 0xcbd5) {
                                            // Lo       HANGUL SYLLABLE JJEU
                                            if (0xcbd4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE JJEUG..HANGUL SYLLABLE JJEUH
                                            if (0xcbd5 <= code && code <= 0xcbef) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                }
                            } else if (code < 0xcc7d) {
                                if (code < 0xcc29) {
                                    if (code < 0xcc0c) {
                                        if (code < 0xcbf1) {
                                            // Lo       HANGUL SYLLABLE JJYI
                                            if (0xcbf0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE JJYIG..HANGUL SYLLABLE JJYIH
                                            if (0xcbf1 <= code && code <= 0xcc0b) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xcc0d) {
                                            // Lo       HANGUL SYLLABLE JJI
                                            if (0xcc0c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xcc28) {
                                            // Lo  [27] HANGUL SYLLABLE JJIG..HANGUL SYLLABLE JJIH
                                            if (0xcc0d <= code && code <= 0xcc27) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE CA
                                            if (0xcc28 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xcc60) {
                                    if (code < 0xcc44) {
                                        // Lo  [27] HANGUL SYLLABLE CAG..HANGUL SYLLABLE CAH
                                        if (0xcc29 <= code && code <= 0xcc43) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xcc45) {
                                        // Lo       HANGUL SYLLABLE CAE
                                        if (0xcc44 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE CAEG..HANGUL SYLLABLE CAEH
                                        if (0xcc45 <= code && code <= 0xcc5f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xcc61) {
                                        // Lo       HANGUL SYLLABLE CYA
                                        if (0xcc60 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xcc7c) {
                                        // Lo  [27] HANGUL SYLLABLE CYAG..HANGUL SYLLABLE CYAH
                                        if (0xcc61 <= code && code <= 0xcc7b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE CYAE
                                        if (0xcc7c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else {
                                if (code < 0xccd0) {
                                    if (code < 0xcc99) {
                                        if (code < 0xcc98) {
                                            // Lo  [27] HANGUL SYLLABLE CYAEG..HANGUL SYLLABLE CYAEH
                                            if (0xcc7d <= code && code <= 0xcc97) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE CEO
                                            if (0xcc98 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code < 0xccb4) {
                                            // Lo  [27] HANGUL SYLLABLE CEOG..HANGUL SYLLABLE CEOH
                                            if (0xcc99 <= code && code <= 0xccb3) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code < 0xccb5) {
                                            // Lo       HANGUL SYLLABLE CE
                                            if (0xccb4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE CEG..HANGUL SYLLABLE CEH
                                            if (0xccb5 <= code && code <= 0xcccf) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else if (code < 0xcced) {
                                    if (code < 0xccd1) {
                                        // Lo       HANGUL SYLLABLE CYEO
                                        if (0xccd0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xccec) {
                                        // Lo  [27] HANGUL SYLLABLE CYEOG..HANGUL SYLLABLE CYEOH
                                        if (0xccd1 <= code && code <= 0xcceb) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE CYE
                                        if (0xccec === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xcd08) {
                                        // Lo  [27] HANGUL SYLLABLE CYEG..HANGUL SYLLABLE CYEH
                                        if (0xcced <= code && code <= 0xcd07) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xcd09) {
                                        // Lo       HANGUL SYLLABLE CO
                                        if (0xcd08 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE COG..HANGUL SYLLABLE COH
                                        if (0xcd09 <= code && code <= 0xcd23) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            }
                        }
                    } else if (code < 0xcf71) {
                        if (code < 0xce3d) {
                            if (code < 0xcdb0) {
                                if (code < 0xcd5d) {
                                    if (code < 0xcd40) {
                                        if (code < 0xcd25) {
                                            // Lo       HANGUL SYLLABLE CWA
                                            if (0xcd24 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE CWAG..HANGUL SYLLABLE CWAH
                                            if (0xcd25 <= code && code <= 0xcd3f) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xcd41) {
                                            // Lo       HANGUL SYLLABLE CWAE
                                            if (0xcd40 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xcd5c) {
                                            // Lo  [27] HANGUL SYLLABLE CWAEG..HANGUL SYLLABLE CWAEH
                                            if (0xcd41 <= code && code <= 0xcd5b) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE COE
                                            if (0xcd5c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xcd79) {
                                    if (code < 0xcd78) {
                                        // Lo  [27] HANGUL SYLLABLE COEG..HANGUL SYLLABLE COEH
                                        if (0xcd5d <= code && code <= 0xcd77) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE CYO
                                        if (0xcd78 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xcd94) {
                                        // Lo  [27] HANGUL SYLLABLE CYOG..HANGUL SYLLABLE CYOH
                                        if (0xcd79 <= code && code <= 0xcd93) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xcd95) {
                                        // Lo       HANGUL SYLLABLE CU
                                        if (0xcd94 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE CUG..HANGUL SYLLABLE CUH
                                        if (0xcd95 <= code && code <= 0xcdaf) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else {
                                if (code < 0xcde9) {
                                    if (code < 0xcdcc) {
                                        if (code < 0xcdb1) {
                                            // Lo       HANGUL SYLLABLE CWEO
                                            if (0xcdb0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE CWEOG..HANGUL SYLLABLE CWEOH
                                            if (0xcdb1 <= code && code <= 0xcdcb) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xcdcd) {
                                            // Lo       HANGUL SYLLABLE CWE
                                            if (0xcdcc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xcde8) {
                                            // Lo  [27] HANGUL SYLLABLE CWEG..HANGUL SYLLABLE CWEH
                                            if (0xcdcd <= code && code <= 0xcde7) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE CWI
                                            if (0xcde8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xce20) {
                                    if (code < 0xce04) {
                                        // Lo  [27] HANGUL SYLLABLE CWIG..HANGUL SYLLABLE CWIH
                                        if (0xcde9 <= code && code <= 0xce03) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xce05) {
                                        // Lo       HANGUL SYLLABLE CYU
                                        if (0xce04 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE CYUG..HANGUL SYLLABLE CYUH
                                        if (0xce05 <= code && code <= 0xce1f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xce21) {
                                        // Lo       HANGUL SYLLABLE CEU
                                        if (0xce20 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xce3c) {
                                        // Lo  [27] HANGUL SYLLABLE CEUG..HANGUL SYLLABLE CEUH
                                        if (0xce21 <= code && code <= 0xce3b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE CYI
                                        if (0xce3c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            }
                        } else if (code < 0xcee4) {
                            if (code < 0xce90) {
                                if (code < 0xce59) {
                                    if (code < 0xce58) {
                                        // Lo  [27] HANGUL SYLLABLE CYIG..HANGUL SYLLABLE CYIH
                                        if (0xce3d <= code && code <= 0xce57) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE CI
                                        if (0xce58 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xce74) {
                                        // Lo  [27] HANGUL SYLLABLE CIG..HANGUL SYLLABLE CIH
                                        if (0xce59 <= code && code <= 0xce73) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xce75) {
                                        // Lo       HANGUL SYLLABLE KA
                                        if (0xce74 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE KAG..HANGUL SYLLABLE KAH
                                        if (0xce75 <= code && code <= 0xce8f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xcead) {
                                if (code < 0xce91) {
                                    // Lo       HANGUL SYLLABLE KAE
                                    if (0xce90 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xceac) {
                                    // Lo  [27] HANGUL SYLLABLE KAEG..HANGUL SYLLABLE KAEH
                                    if (0xce91 <= code && code <= 0xceab) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE KYA
                                    if (0xceac === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xcec8) {
                                    // Lo  [27] HANGUL SYLLABLE KYAG..HANGUL SYLLABLE KYAH
                                    if (0xcead <= code && code <= 0xcec7) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xcec9) {
                                    // Lo       HANGUL SYLLABLE KYAE
                                    if (0xcec8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE KYAEG..HANGUL SYLLABLE KYAEH
                                    if (0xcec9 <= code && code <= 0xcee3) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        } else {
                            if (code < 0xcf1d) {
                                if (code < 0xcf00) {
                                    if (code < 0xcee5) {
                                        // Lo       HANGUL SYLLABLE KEO
                                        if (0xcee4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE KEOG..HANGUL SYLLABLE KEOH
                                        if (0xcee5 <= code && code <= 0xceff) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xcf01) {
                                        // Lo       HANGUL SYLLABLE KE
                                        if (0xcf00 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xcf1c) {
                                        // Lo  [27] HANGUL SYLLABLE KEG..HANGUL SYLLABLE KEH
                                        if (0xcf01 <= code && code <= 0xcf1b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE KYEO
                                        if (0xcf1c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else if (code < 0xcf54) {
                                if (code < 0xcf38) {
                                    // Lo  [27] HANGUL SYLLABLE KYEOG..HANGUL SYLLABLE KYEOH
                                    if (0xcf1d <= code && code <= 0xcf37) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xcf39) {
                                    // Lo       HANGUL SYLLABLE KYE
                                    if (0xcf38 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE KYEG..HANGUL SYLLABLE KYEH
                                    if (0xcf39 <= code && code <= 0xcf53) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xcf55) {
                                    // Lo       HANGUL SYLLABLE KO
                                    if (0xcf54 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xcf70) {
                                    // Lo  [27] HANGUL SYLLABLE KOG..HANGUL SYLLABLE KOH
                                    if (0xcf55 <= code && code <= 0xcf6f) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE KWA
                                    if (0xcf70 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        }
                    } else {
                        if (code < 0xd0a4) {
                            if (code < 0xcffd) {
                                if (code < 0xcfc4) {
                                    if (code < 0xcf8d) {
                                        if (code < 0xcf8c) {
                                            // Lo  [27] HANGUL SYLLABLE KWAG..HANGUL SYLLABLE KWAH
                                            if (0xcf71 <= code && code <= 0xcf8b) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE KWAE
                                            if (0xcf8c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code < 0xcfa8) {
                                            // Lo  [27] HANGUL SYLLABLE KWAEG..HANGUL SYLLABLE KWAEH
                                            if (0xcf8d <= code && code <= 0xcfa7) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code < 0xcfa9) {
                                            // Lo       HANGUL SYLLABLE KOE
                                            if (0xcfa8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE KOEG..HANGUL SYLLABLE KOEH
                                            if (0xcfa9 <= code && code <= 0xcfc3) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else if (code < 0xcfe0) {
                                    if (code < 0xcfc5) {
                                        // Lo       HANGUL SYLLABLE KYO
                                        if (0xcfc4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE KYOG..HANGUL SYLLABLE KYOH
                                        if (0xcfc5 <= code && code <= 0xcfdf) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xcfe1) {
                                        // Lo       HANGUL SYLLABLE KU
                                        if (0xcfe0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xcffc) {
                                        // Lo  [27] HANGUL SYLLABLE KUG..HANGUL SYLLABLE KUH
                                        if (0xcfe1 <= code && code <= 0xcffb) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE KWEO
                                        if (0xcffc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else {
                                if (code < 0xd050) {
                                    if (code < 0xd019) {
                                        if (code < 0xd018) {
                                            // Lo  [27] HANGUL SYLLABLE KWEOG..HANGUL SYLLABLE KWEOH
                                            if (0xcffd <= code && code <= 0xd017) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE KWE
                                            if (0xd018 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    } else {
                                        if (code < 0xd034) {
                                            // Lo  [27] HANGUL SYLLABLE KWEG..HANGUL SYLLABLE KWEH
                                            if (0xd019 <= code && code <= 0xd033) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else if (code < 0xd035) {
                                            // Lo       HANGUL SYLLABLE KWI
                                            if (0xd034 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE KWIG..HANGUL SYLLABLE KWIH
                                            if (0xd035 <= code && code <= 0xd04f) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    }
                                } else if (code < 0xd06d) {
                                    if (code < 0xd051) {
                                        // Lo       HANGUL SYLLABLE KYU
                                        if (0xd050 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xd06c) {
                                        // Lo  [27] HANGUL SYLLABLE KYUG..HANGUL SYLLABLE KYUH
                                        if (0xd051 <= code && code <= 0xd06b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE KEU
                                        if (0xd06c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xd088) {
                                        // Lo  [27] HANGUL SYLLABLE KEUG..HANGUL SYLLABLE KEUH
                                        if (0xd06d <= code && code <= 0xd087) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xd089) {
                                        // Lo       HANGUL SYLLABLE KYI
                                        if (0xd088 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE KYIG..HANGUL SYLLABLE KYIH
                                        if (0xd089 <= code && code <= 0xd0a3) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            }
                        } else if (code < 0xd131) {
                            if (code < 0xd0dd) {
                                if (code < 0xd0c0) {
                                    if (code < 0xd0a5) {
                                        // Lo       HANGUL SYLLABLE KI
                                        if (0xd0a4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE KIG..HANGUL SYLLABLE KIH
                                        if (0xd0a5 <= code && code <= 0xd0bf) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xd0c1) {
                                        // Lo       HANGUL SYLLABLE TA
                                        if (0xd0c0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xd0dc) {
                                        // Lo  [27] HANGUL SYLLABLE TAG..HANGUL SYLLABLE TAH
                                        if (0xd0c1 <= code && code <= 0xd0db) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE TAE
                                        if (0xd0dc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else if (code < 0xd114) {
                                if (code < 0xd0f8) {
                                    // Lo  [27] HANGUL SYLLABLE TAEG..HANGUL SYLLABLE TAEH
                                    if (0xd0dd <= code && code <= 0xd0f7) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xd0f9) {
                                    // Lo       HANGUL SYLLABLE TYA
                                    if (0xd0f8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE TYAG..HANGUL SYLLABLE TYAH
                                    if (0xd0f9 <= code && code <= 0xd113) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xd115) {
                                    // Lo       HANGUL SYLLABLE TYAE
                                    if (0xd114 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xd130) {
                                    // Lo  [27] HANGUL SYLLABLE TYAEG..HANGUL SYLLABLE TYAEH
                                    if (0xd115 <= code && code <= 0xd12f) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE TEO
                                    if (0xd130 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        } else {
                            if (code < 0xd184) {
                                if (code < 0xd14d) {
                                    if (code < 0xd14c) {
                                        // Lo  [27] HANGUL SYLLABLE TEOG..HANGUL SYLLABLE TEOH
                                        if (0xd131 <= code && code <= 0xd14b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE TE
                                        if (0xd14c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xd168) {
                                        // Lo  [27] HANGUL SYLLABLE TEG..HANGUL SYLLABLE TEH
                                        if (0xd14d <= code && code <= 0xd167) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xd169) {
                                        // Lo       HANGUL SYLLABLE TYEO
                                        if (0xd168 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE TYEOG..HANGUL SYLLABLE TYEOH
                                        if (0xd169 <= code && code <= 0xd183) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xd1a1) {
                                if (code < 0xd185) {
                                    // Lo       HANGUL SYLLABLE TYE
                                    if (0xd184 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xd1a0) {
                                    // Lo  [27] HANGUL SYLLABLE TYEG..HANGUL SYLLABLE TYEH
                                    if (0xd185 <= code && code <= 0xd19f) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE TO
                                    if (0xd1a0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xd1bc) {
                                    // Lo  [27] HANGUL SYLLABLE TOG..HANGUL SYLLABLE TOH
                                    if (0xd1a1 <= code && code <= 0xd1bb) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xd1bd) {
                                    // Lo       HANGUL SYLLABLE TWA
                                    if (0xd1bc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE TWAG..HANGUL SYLLABLE TWAH
                                    if (0xd1bd <= code && code <= 0xd1d7) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        }
                    }
                }
            } else if (code < 0x1133b) {
                if (code < 0xd671) {
                    if (code < 0xd424) {
                        if (code < 0xd2f1) {
                            if (code < 0xd264) {
                                if (code < 0xd211) {
                                    if (code < 0xd1f4) {
                                        if (code < 0xd1d9) {
                                            // Lo       HANGUL SYLLABLE TWAE
                                            if (0xd1d8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE TWAEG..HANGUL SYLLABLE TWAEH
                                            if (0xd1d9 <= code && code <= 0xd1f3) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xd1f5) {
                                            // Lo       HANGUL SYLLABLE TOE
                                            if (0xd1f4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xd210) {
                                            // Lo  [27] HANGUL SYLLABLE TOEG..HANGUL SYLLABLE TOEH
                                            if (0xd1f5 <= code && code <= 0xd20f) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE TYO
                                            if (0xd210 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xd22d) {
                                    if (code < 0xd22c) {
                                        // Lo  [27] HANGUL SYLLABLE TYOG..HANGUL SYLLABLE TYOH
                                        if (0xd211 <= code && code <= 0xd22b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE TU
                                        if (0xd22c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xd248) {
                                        // Lo  [27] HANGUL SYLLABLE TUG..HANGUL SYLLABLE TUH
                                        if (0xd22d <= code && code <= 0xd247) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xd249) {
                                        // Lo       HANGUL SYLLABLE TWEO
                                        if (0xd248 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE TWEOG..HANGUL SYLLABLE TWEOH
                                        if (0xd249 <= code && code <= 0xd263) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else {
                                if (code < 0xd29d) {
                                    if (code < 0xd280) {
                                        if (code < 0xd265) {
                                            // Lo       HANGUL SYLLABLE TWE
                                            if (0xd264 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE TWEG..HANGUL SYLLABLE TWEH
                                            if (0xd265 <= code && code <= 0xd27f) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xd281) {
                                            // Lo       HANGUL SYLLABLE TWI
                                            if (0xd280 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xd29c) {
                                            // Lo  [27] HANGUL SYLLABLE TWIG..HANGUL SYLLABLE TWIH
                                            if (0xd281 <= code && code <= 0xd29b) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE TYU
                                            if (0xd29c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xd2d4) {
                                    if (code < 0xd2b8) {
                                        // Lo  [27] HANGUL SYLLABLE TYUG..HANGUL SYLLABLE TYUH
                                        if (0xd29d <= code && code <= 0xd2b7) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xd2b9) {
                                        // Lo       HANGUL SYLLABLE TEU
                                        if (0xd2b8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE TEUG..HANGUL SYLLABLE TEUH
                                        if (0xd2b9 <= code && code <= 0xd2d3) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xd2d5) {
                                        // Lo       HANGUL SYLLABLE TYI
                                        if (0xd2d4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xd2f0) {
                                        // Lo  [27] HANGUL SYLLABLE TYIG..HANGUL SYLLABLE TYIH
                                        if (0xd2d5 <= code && code <= 0xd2ef) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE TI
                                        if (0xd2f0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            }
                        } else if (code < 0xd37d) {
                            if (code < 0xd344) {
                                if (code < 0xd30d) {
                                    if (code < 0xd30c) {
                                        // Lo  [27] HANGUL SYLLABLE TIG..HANGUL SYLLABLE TIH
                                        if (0xd2f1 <= code && code <= 0xd30b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE PA
                                        if (0xd30c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xd328) {
                                        // Lo  [27] HANGUL SYLLABLE PAG..HANGUL SYLLABLE PAH
                                        if (0xd30d <= code && code <= 0xd327) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xd329) {
                                        // Lo       HANGUL SYLLABLE PAE
                                        if (0xd328 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE PAEG..HANGUL SYLLABLE PAEH
                                        if (0xd329 <= code && code <= 0xd343) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xd360) {
                                if (code < 0xd345) {
                                    // Lo       HANGUL SYLLABLE PYA
                                    if (0xd344 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE PYAG..HANGUL SYLLABLE PYAH
                                    if (0xd345 <= code && code <= 0xd35f) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xd361) {
                                    // Lo       HANGUL SYLLABLE PYAE
                                    if (0xd360 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xd37c) {
                                    // Lo  [27] HANGUL SYLLABLE PYAEG..HANGUL SYLLABLE PYAEH
                                    if (0xd361 <= code && code <= 0xd37b) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE PEO
                                    if (0xd37c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        } else {
                            if (code < 0xd3d0) {
                                if (code < 0xd399) {
                                    if (code < 0xd398) {
                                        // Lo  [27] HANGUL SYLLABLE PEOG..HANGUL SYLLABLE PEOH
                                        if (0xd37d <= code && code <= 0xd397) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE PE
                                        if (0xd398 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xd3b4) {
                                        // Lo  [27] HANGUL SYLLABLE PEG..HANGUL SYLLABLE PEH
                                        if (0xd399 <= code && code <= 0xd3b3) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xd3b5) {
                                        // Lo       HANGUL SYLLABLE PYEO
                                        if (0xd3b4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE PYEOG..HANGUL SYLLABLE PYEOH
                                        if (0xd3b5 <= code && code <= 0xd3cf) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xd3ed) {
                                if (code < 0xd3d1) {
                                    // Lo       HANGUL SYLLABLE PYE
                                    if (0xd3d0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xd3ec) {
                                    // Lo  [27] HANGUL SYLLABLE PYEG..HANGUL SYLLABLE PYEH
                                    if (0xd3d1 <= code && code <= 0xd3eb) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE PO
                                    if (0xd3ec === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xd408) {
                                    // Lo  [27] HANGUL SYLLABLE POG..HANGUL SYLLABLE POH
                                    if (0xd3ed <= code && code <= 0xd407) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xd409) {
                                    // Lo       HANGUL SYLLABLE PWA
                                    if (0xd408 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE PWAG..HANGUL SYLLABLE PWAH
                                    if (0xd409 <= code && code <= 0xd423) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        }
                    } else {
                        if (code < 0xd53d) {
                            if (code < 0xd4b0) {
                                if (code < 0xd45d) {
                                    if (code < 0xd440) {
                                        if (code < 0xd425) {
                                            // Lo       HANGUL SYLLABLE PWAE
                                            if (0xd424 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE PWAEG..HANGUL SYLLABLE PWAEH
                                            if (0xd425 <= code && code <= 0xd43f) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xd441) {
                                            // Lo       HANGUL SYLLABLE POE
                                            if (0xd440 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xd45c) {
                                            // Lo  [27] HANGUL SYLLABLE POEG..HANGUL SYLLABLE POEH
                                            if (0xd441 <= code && code <= 0xd45b) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE PYO
                                            if (0xd45c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xd479) {
                                    if (code < 0xd478) {
                                        // Lo  [27] HANGUL SYLLABLE PYOG..HANGUL SYLLABLE PYOH
                                        if (0xd45d <= code && code <= 0xd477) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE PU
                                        if (0xd478 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xd494) {
                                        // Lo  [27] HANGUL SYLLABLE PUG..HANGUL SYLLABLE PUH
                                        if (0xd479 <= code && code <= 0xd493) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xd495) {
                                        // Lo       HANGUL SYLLABLE PWEO
                                        if (0xd494 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE PWEOG..HANGUL SYLLABLE PWEOH
                                        if (0xd495 <= code && code <= 0xd4af) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else {
                                if (code < 0xd4e9) {
                                    if (code < 0xd4cc) {
                                        if (code < 0xd4b1) {
                                            // Lo       HANGUL SYLLABLE PWE
                                            if (0xd4b0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else {
                                            // Lo  [27] HANGUL SYLLABLE PWEG..HANGUL SYLLABLE PWEH
                                            if (0xd4b1 <= code && code <= 0xd4cb) return boundaries_1.CLUSTER_BREAK.LVT;
                                        }
                                    } else {
                                        if (code < 0xd4cd) {
                                            // Lo       HANGUL SYLLABLE PWI
                                            if (0xd4cc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        } else if (code < 0xd4e8) {
                                            // Lo  [27] HANGUL SYLLABLE PWIG..HANGUL SYLLABLE PWIH
                                            if (0xd4cd <= code && code <= 0xd4e7) return boundaries_1.CLUSTER_BREAK.LVT;
                                        } else {
                                            // Lo       HANGUL SYLLABLE PYU
                                            if (0xd4e8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                        }
                                    }
                                } else if (code < 0xd520) {
                                    if (code < 0xd504) {
                                        // Lo  [27] HANGUL SYLLABLE PYUG..HANGUL SYLLABLE PYUH
                                        if (0xd4e9 <= code && code <= 0xd503) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xd505) {
                                        // Lo       HANGUL SYLLABLE PEU
                                        if (0xd504 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE PEUG..HANGUL SYLLABLE PEUH
                                        if (0xd505 <= code && code <= 0xd51f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xd521) {
                                        // Lo       HANGUL SYLLABLE PYI
                                        if (0xd520 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xd53c) {
                                        // Lo  [27] HANGUL SYLLABLE PYIG..HANGUL SYLLABLE PYIH
                                        if (0xd521 <= code && code <= 0xd53b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE PI
                                        if (0xd53c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            }
                        } else if (code < 0xd5e4) {
                            if (code < 0xd590) {
                                if (code < 0xd559) {
                                    if (code < 0xd558) {
                                        // Lo  [27] HANGUL SYLLABLE PIG..HANGUL SYLLABLE PIH
                                        if (0xd53d <= code && code <= 0xd557) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE HA
                                        if (0xd558 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xd574) {
                                        // Lo  [27] HANGUL SYLLABLE HAG..HANGUL SYLLABLE HAH
                                        if (0xd559 <= code && code <= 0xd573) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xd575) {
                                        // Lo       HANGUL SYLLABLE HAE
                                        if (0xd574 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE HAEG..HANGUL SYLLABLE HAEH
                                        if (0xd575 <= code && code <= 0xd58f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xd5ad) {
                                if (code < 0xd591) {
                                    // Lo       HANGUL SYLLABLE HYA
                                    if (0xd590 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xd5ac) {
                                    // Lo  [27] HANGUL SYLLABLE HYAG..HANGUL SYLLABLE HYAH
                                    if (0xd591 <= code && code <= 0xd5ab) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE HYAE
                                    if (0xd5ac === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xd5c8) {
                                    // Lo  [27] HANGUL SYLLABLE HYAEG..HANGUL SYLLABLE HYAEH
                                    if (0xd5ad <= code && code <= 0xd5c7) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xd5c9) {
                                    // Lo       HANGUL SYLLABLE HEO
                                    if (0xd5c8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE HEOG..HANGUL SYLLABLE HEOH
                                    if (0xd5c9 <= code && code <= 0xd5e3) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        } else {
                            if (code < 0xd61d) {
                                if (code < 0xd600) {
                                    if (code < 0xd5e5) {
                                        // Lo       HANGUL SYLLABLE HE
                                        if (0xd5e4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE HEG..HANGUL SYLLABLE HEH
                                        if (0xd5e5 <= code && code <= 0xd5ff) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                } else {
                                    if (code < 0xd601) {
                                        // Lo       HANGUL SYLLABLE HYEO
                                        if (0xd600 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else if (code < 0xd61c) {
                                        // Lo  [27] HANGUL SYLLABLE HYEOG..HANGUL SYLLABLE HYEOH
                                        if (0xd601 <= code && code <= 0xd61b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE HYE
                                        if (0xd61c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                }
                            } else if (code < 0xd654) {
                                if (code < 0xd638) {
                                    // Lo  [27] HANGUL SYLLABLE HYEG..HANGUL SYLLABLE HYEH
                                    if (0xd61d <= code && code <= 0xd637) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xd639) {
                                    // Lo       HANGUL SYLLABLE HO
                                    if (0xd638 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE HOG..HANGUL SYLLABLE HOH
                                    if (0xd639 <= code && code <= 0xd653) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xd655) {
                                    // Lo       HANGUL SYLLABLE HWA
                                    if (0xd654 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xd670) {
                                    // Lo  [27] HANGUL SYLLABLE HWAG..HANGUL SYLLABLE HWAH
                                    if (0xd655 <= code && code <= 0xd66f) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE HWAE
                                    if (0xd670 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        }
                    }
                } else if (code < 0x11000) {
                    if (code < 0xd7b0) {
                        if (code < 0xd6fd) {
                            if (code < 0xd6c4) {
                                if (code < 0xd68d) {
                                    if (code < 0xd68c) {
                                        // Lo  [27] HANGUL SYLLABLE HWAEG..HANGUL SYLLABLE HWAEH
                                        if (0xd671 <= code && code <= 0xd68b) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE HOE
                                        if (0xd68c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xd6a8) {
                                        // Lo  [27] HANGUL SYLLABLE HOEG..HANGUL SYLLABLE HOEH
                                        if (0xd68d <= code && code <= 0xd6a7) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xd6a9) {
                                        // Lo       HANGUL SYLLABLE HYO
                                        if (0xd6a8 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE HYOG..HANGUL SYLLABLE HYOH
                                        if (0xd6a9 <= code && code <= 0xd6c3) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xd6e0) {
                                if (code < 0xd6c5) {
                                    // Lo       HANGUL SYLLABLE HU
                                    if (0xd6c4 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE HUG..HANGUL SYLLABLE HUH
                                    if (0xd6c5 <= code && code <= 0xd6df) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            } else {
                                if (code < 0xd6e1) {
                                    // Lo       HANGUL SYLLABLE HWEO
                                    if (0xd6e0 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xd6fc) {
                                    // Lo  [27] HANGUL SYLLABLE HWEOG..HANGUL SYLLABLE HWEOH
                                    if (0xd6e1 <= code && code <= 0xd6fb) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE HWE
                                    if (0xd6fc === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            }
                        } else {
                            if (code < 0xd750) {
                                if (code < 0xd719) {
                                    if (code < 0xd718) {
                                        // Lo  [27] HANGUL SYLLABLE HWEG..HANGUL SYLLABLE HWEH
                                        if (0xd6fd <= code && code <= 0xd717) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else {
                                        // Lo       HANGUL SYLLABLE HWI
                                        if (0xd718 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    }
                                } else {
                                    if (code < 0xd734) {
                                        // Lo  [27] HANGUL SYLLABLE HWIG..HANGUL SYLLABLE HWIH
                                        if (0xd719 <= code && code <= 0xd733) return boundaries_1.CLUSTER_BREAK.LVT;
                                    } else if (code < 0xd735) {
                                        // Lo       HANGUL SYLLABLE HYU
                                        if (0xd734 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                    } else {
                                        // Lo  [27] HANGUL SYLLABLE HYUG..HANGUL SYLLABLE HYUH
                                        if (0xd735 <= code && code <= 0xd74f) return boundaries_1.CLUSTER_BREAK.LVT;
                                    }
                                }
                            } else if (code < 0xd76d) {
                                if (code < 0xd751) {
                                    // Lo       HANGUL SYLLABLE HEU
                                    if (0xd750 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else if (code < 0xd76c) {
                                    // Lo  [27] HANGUL SYLLABLE HEUG..HANGUL SYLLABLE HEUH
                                    if (0xd751 <= code && code <= 0xd76b) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else {
                                    // Lo       HANGUL SYLLABLE HYI
                                    if (0xd76c === code) return boundaries_1.CLUSTER_BREAK.LV;
                                }
                            } else {
                                if (code < 0xd788) {
                                    // Lo  [27] HANGUL SYLLABLE HYIG..HANGUL SYLLABLE HYIH
                                    if (0xd76d <= code && code <= 0xd787) return boundaries_1.CLUSTER_BREAK.LVT;
                                } else if (code < 0xd789) {
                                    // Lo       HANGUL SYLLABLE HI
                                    if (0xd788 === code) return boundaries_1.CLUSTER_BREAK.LV;
                                } else {
                                    // Lo  [27] HANGUL SYLLABLE HIG..HANGUL SYLLABLE HIH
                                    if (0xd789 <= code && code <= 0xd7a3) return boundaries_1.CLUSTER_BREAK.LVT;
                                }
                            }
                        }
                    } else if (code < 0x10a01) {
                        if (code < 0xfeff) {
                            if (code < 0xfb1e) {
                                if (code < 0xd7cb) {
                                    // Lo  [23] HANGUL JUNGSEONG O-YEO..HANGUL JUNGSEONG ARAEA-E
                                    if (0xd7b0 <= code && code <= 0xd7c6) return boundaries_1.CLUSTER_BREAK.V;
                                } else {
                                    // Lo  [49] HANGUL JONGSEONG NIEUN-RIEUL..HANGUL JONGSEONG PHIEUPH-THIEUTH
                                    if (0xd7cb <= code && code <= 0xd7fb) return boundaries_1.CLUSTER_BREAK.T;
                                }
                            } else {
                                if (code < 0xfe00) {
                                    // Mn       HEBREW POINT JUDEO-SPANISH VARIKA
                                    if (0xfb1e === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0xfe20) {
                                    // Mn  [16] VARIATION SELECTOR-1..VARIATION SELECTOR-16
                                    if (0xfe00 <= code && code <= 0xfe0f) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn  [16] COMBINING LIGATURE LEFT HALF..COMBINING CYRILLIC TITLO RIGHT HALF
                                    if (0xfe20 <= code && code <= 0xfe2f) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        } else if (code < 0x101fd) {
                            if (code < 0xff9e) {
                                // Cf       ZERO WIDTH NO-BREAK SPACE
                                if (0xfeff === code) return boundaries_1.CLUSTER_BREAK.CONTROL;
                            } else if (code < 0xfff0) {
                                // Lm   [2] HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK
                                if (0xff9e <= code && code <= 0xff9f) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else {
                                // Cn   [9] <reserved-FFF0>..<reserved-FFF8>
                                // Cf   [3] INTERLINEAR ANNOTATION ANCHOR..INTERLINEAR ANNOTATION TERMINATOR
                                if (0xfff0 <= code && code <= 0xfffb) return boundaries_1.CLUSTER_BREAK.CONTROL;
                            }
                        } else {
                            if (code < 0x102e0) {
                                // Mn       PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE
                                if (0x101fd === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else if (code < 0x10376) {
                                // Mn       COPTIC EPACT THOUSANDS MARK
                                if (0x102e0 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else {
                                // Mn   [5] COMBINING OLD PERMIC LETTER AN..COMBINING OLD PERMIC LETTER SII
                                if (0x10376 <= code && code <= 0x1037a) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                        }
                    } else {
                        if (code < 0x10ae5) {
                            if (code < 0x10a0c) {
                                if (code < 0x10a05) {
                                    // Mn   [3] KHAROSHTHI VOWEL SIGN I..KHAROSHTHI VOWEL SIGN VOCALIC R
                                    if (0x10a01 <= code && code <= 0x10a03) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn   [2] KHAROSHTHI VOWEL SIGN E..KHAROSHTHI VOWEL SIGN O
                                    if (0x10a05 <= code && code <= 0x10a06) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            } else {
                                if (code < 0x10a38) {
                                    // Mn   [4] KHAROSHTHI VOWEL LENGTH MARK..KHAROSHTHI SIGN VISARGA
                                    if (0x10a0c <= code && code <= 0x10a0f) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0x10a3f) {
                                    // Mn   [3] KHAROSHTHI SIGN BAR ABOVE..KHAROSHTHI SIGN DOT BELOW
                                    if (0x10a38 <= code && code <= 0x10a3a) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn       KHAROSHTHI VIRAMA
                                    if (0x10a3f === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        } else if (code < 0x10efd) {
                            if (code < 0x10d24) {
                                // Mn   [2] MANICHAEAN ABBREVIATION MARK ABOVE..MANICHAEAN ABBREVIATION MARK BELOW
                                if (0x10ae5 <= code && code <= 0x10ae6) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else if (code < 0x10eab) {
                                // Mn   [4] HANIFI ROHINGYA SIGN HARBAHAY..HANIFI ROHINGYA SIGN TASSI
                                if (0x10d24 <= code && code <= 0x10d27) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else {
                                // Mn   [2] YEZIDI COMBINING HAMZA MARK..YEZIDI COMBINING MADDA MARK
                                if (0x10eab <= code && code <= 0x10eac) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                        } else {
                            if (code < 0x10f46) {
                                // Mn   [3] ARABIC SMALL LOW WORD SAKTA..ARABIC SMALL LOW WORD MADDA
                                if (0x10efd <= code && code <= 0x10eff) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else if (code < 0x10f82) {
                                // Mn  [11] SOGDIAN COMBINING DOT BELOW..SOGDIAN COMBINING STROKE BELOW
                                if (0x10f46 <= code && code <= 0x10f50) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else {
                                // Mn   [4] OLD UYGHUR COMBINING DOT ABOVE..OLD UYGHUR COMBINING TWO DOTS BELOW
                                if (0x10f82 <= code && code <= 0x10f85) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                        }
                    }
                } else {
                    if (code < 0x11180) {
                        if (code < 0x110b7) {
                            if (code < 0x11073) {
                                if (code < 0x11002) {
                                    // Mc       BRAHMI SIGN CANDRABINDU
                                    if (0x11000 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    // Mn       BRAHMI SIGN ANUSVARA
                                    if (0x11001 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    if (code < 0x11038) {
                                        // Mc       BRAHMI SIGN VISARGA
                                        if (0x11002 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else if (code < 0x11070) {
                                        // Mn  [15] BRAHMI VOWEL SIGN AA..BRAHMI VIRAMA
                                        if (0x11038 <= code && code <= 0x11046) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn       BRAHMI SIGN OLD TAMIL VIRAMA
                                        if (0x11070 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else if (code < 0x11082) {
                                if (code < 0x1107f) {
                                    // Mn   [2] BRAHMI VOWEL SIGN OLD TAMIL SHORT E..BRAHMI VOWEL SIGN OLD TAMIL SHORT O
                                    if (0x11073 <= code && code <= 0x11074) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn   [3] BRAHMI NUMBER JOINER..KAITHI SIGN ANUSVARA
                                    if (0x1107f <= code && code <= 0x11081) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            } else {
                                if (code < 0x110b0) {
                                    // Mc       KAITHI SIGN VISARGA
                                    if (0x11082 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else if (code < 0x110b3) {
                                    // Mc   [3] KAITHI VOWEL SIGN AA..KAITHI VOWEL SIGN II
                                    if (0x110b0 <= code && code <= 0x110b2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else {
                                    // Mn   [4] KAITHI VOWEL SIGN U..KAITHI VOWEL SIGN AI
                                    if (0x110b3 <= code && code <= 0x110b6) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        } else {
                            if (code < 0x11100) {
                                if (code < 0x110bd) {
                                    if (code < 0x110b9) {
                                        // Mc   [2] KAITHI VOWEL SIGN O..KAITHI VOWEL SIGN AU
                                        if (0x110b7 <= code && code <= 0x110b8) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn   [2] KAITHI SIGN VIRAMA..KAITHI SIGN NUKTA
                                        if (0x110b9 <= code && code <= 0x110ba) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else if (code < 0x110c2) {
                                    // Cf       KAITHI NUMBER SIGN
                                    if (0x110bd === code) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                } else {
                                    // Mn       KAITHI VOWEL SIGN VOCALIC R
                                    if (0x110c2 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    // Cf       KAITHI NUMBER SIGN ABOVE
                                    if (0x110cd === code) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                }
                            } else if (code < 0x1112d) {
                                if (code < 0x11127) {
                                    // Mn   [3] CHAKMA SIGN CANDRABINDU..CHAKMA SIGN VISARGA
                                    if (0x11100 <= code && code <= 0x11102) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0x1112c) {
                                    // Mn   [5] CHAKMA VOWEL SIGN A..CHAKMA VOWEL SIGN UU
                                    if (0x11127 <= code && code <= 0x1112b) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mc       CHAKMA VOWEL SIGN E
                                    if (0x1112c === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                            } else {
                                if (code < 0x11145) {
                                    // Mn   [8] CHAKMA VOWEL SIGN AI..CHAKMA MAAYYAA
                                    if (0x1112d <= code && code <= 0x11134) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0x11173) {
                                    // Mc   [2] CHAKMA VOWEL SIGN AA..CHAKMA VOWEL SIGN EI
                                    if (0x11145 <= code && code <= 0x11146) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else {
                                    // Mn       MAHAJANI SIGN NUKTA
                                    if (0x11173 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        }
                    } else if (code < 0x11232) {
                        if (code < 0x111c2) {
                            if (code < 0x111b3) {
                                if (code < 0x11182) {
                                    // Mn   [2] SHARADA SIGN CANDRABINDU..SHARADA SIGN ANUSVARA
                                    if (0x11180 <= code && code <= 0x11181) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mc       SHARADA SIGN VISARGA
                                    if (0x11182 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                            } else {
                                if (code < 0x111b6) {
                                    // Mc   [3] SHARADA VOWEL SIGN AA..SHARADA VOWEL SIGN II
                                    if (0x111b3 <= code && code <= 0x111b5) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else if (code < 0x111bf) {
                                    // Mn   [9] SHARADA VOWEL SIGN U..SHARADA VOWEL SIGN O
                                    if (0x111b6 <= code && code <= 0x111be) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mc   [2] SHARADA VOWEL SIGN AU..SHARADA SIGN VIRAMA
                                    if (0x111bf <= code && code <= 0x111c0) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                            }
                        } else if (code < 0x111cf) {
                            if (code < 0x111c9) {
                                // Lo   [2] SHARADA SIGN JIHVAMULIYA..SHARADA SIGN UPADHMANIYA
                                if (0x111c2 <= code && code <= 0x111c3) return boundaries_1.CLUSTER_BREAK.PREPEND;
                            } else if (code < 0x111ce) {
                                // Mn   [4] SHARADA SANDHI MARK..SHARADA EXTRA SHORT VOWEL MARK
                                if (0x111c9 <= code && code <= 0x111cc) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else {
                                // Mc       SHARADA VOWEL SIGN PRISHTHAMATRA E
                                if (0x111ce === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                        } else {
                            if (code < 0x1122c) {
                                // Mn       SHARADA SIGN INVERTED CANDRABINDU
                                if (0x111cf === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else if (code < 0x1122f) {
                                // Mc   [3] KHOJKI VOWEL SIGN AA..KHOJKI VOWEL SIGN II
                                if (0x1122c <= code && code <= 0x1122e) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            } else {
                                // Mn   [3] KHOJKI VOWEL SIGN U..KHOJKI VOWEL SIGN AI
                                if (0x1122f <= code && code <= 0x11231) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                        }
                    } else {
                        if (code < 0x11241) {
                            if (code < 0x11235) {
                                if (code < 0x11234) {
                                    // Mc   [2] KHOJKI VOWEL SIGN O..KHOJKI VOWEL SIGN AU
                                    if (0x11232 <= code && code <= 0x11233) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else {
                                    // Mn       KHOJKI SIGN ANUSVARA
                                    if (0x11234 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            } else {
                                if (code < 0x11236) {
                                    // Mc       KHOJKI SIGN VIRAMA
                                    if (0x11235 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else if (code < 0x1123e) {
                                    // Mn   [2] KHOJKI SIGN NUKTA..KHOJKI SIGN SHADDA
                                    if (0x11236 <= code && code <= 0x11237) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn       KHOJKI SIGN SUKUN
                                    if (0x1123e === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        } else if (code < 0x112e3) {
                            if (code < 0x112df) {
                                // Mn       KHOJKI VOWEL SIGN VOCALIC R
                                if (0x11241 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else if (code < 0x112e0) {
                                // Mn       KHUDAWADI SIGN ANUSVARA
                                if (0x112df === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else {
                                // Mc   [3] KHUDAWADI VOWEL SIGN AA..KHUDAWADI VOWEL SIGN II
                                if (0x112e0 <= code && code <= 0x112e2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                        } else {
                            if (code < 0x11300) {
                                // Mn   [8] KHUDAWADI VOWEL SIGN U..KHUDAWADI SIGN VIRAMA
                                if (0x112e3 <= code && code <= 0x112ea) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else if (code < 0x11302) {
                                // Mn   [2] GRANTHA SIGN COMBINING ANUSVARA ABOVE..GRANTHA SIGN CANDRABINDU
                                if (0x11300 <= code && code <= 0x11301) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else {
                                // Mc   [2] GRANTHA SIGN ANUSVARA..GRANTHA SIGN VISARGA
                                if (0x11302 <= code && code <= 0x11303) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                        }
                    }
                }
            } else {
                if (code < 0x11a97) {
                    if (code < 0x116ab) {
                        if (code < 0x114b9) {
                            if (code < 0x11370) {
                                if (code < 0x11347) {
                                    if (code < 0x1133f) {
                                        if (code < 0x1133e) {
                                            // Mn   [2] COMBINING BINDU BELOW..GRANTHA SIGN NUKTA
                                            if (0x1133b <= code && code <= 0x1133c) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mc       GRANTHA VOWEL SIGN AA
                                            if (0x1133e === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    } else {
                                        if (code < 0x11340) {
                                            // Mc       GRANTHA VOWEL SIGN I
                                            if (0x1133f === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else if (code < 0x11341) {
                                            // Mn       GRANTHA VOWEL SIGN II
                                            if (0x11340 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mc   [4] GRANTHA VOWEL SIGN U..GRANTHA VOWEL SIGN VOCALIC RR
                                            if (0x11341 <= code && code <= 0x11344) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    }
                                } else if (code < 0x11357) {
                                    if (code < 0x1134b) {
                                        // Mc   [2] GRANTHA VOWEL SIGN EE..GRANTHA VOWEL SIGN AI
                                        if (0x11347 <= code && code <= 0x11348) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mc   [3] GRANTHA VOWEL SIGN OO..GRANTHA SIGN VIRAMA
                                        if (0x1134b <= code && code <= 0x1134d) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                } else {
                                    if (code < 0x11362) {
                                        // Mc       GRANTHA AU LENGTH MARK
                                        if (0x11357 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0x11366) {
                                        // Mc   [2] GRANTHA VOWEL SIGN VOCALIC L..GRANTHA VOWEL SIGN VOCALIC LL
                                        if (0x11362 <= code && code <= 0x11363) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn   [7] COMBINING GRANTHA DIGIT ZERO..COMBINING GRANTHA DIGIT SIX
                                        if (0x11366 <= code && code <= 0x1136c) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else {
                                if (code < 0x11445) {
                                    if (code < 0x11438) {
                                        if (code < 0x11435) {
                                            // Mn   [5] COMBINING GRANTHA LETTER A..COMBINING GRANTHA LETTER PA
                                            if (0x11370 <= code && code <= 0x11374) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else {
                                            // Mc   [3] NEWA VOWEL SIGN AA..NEWA VOWEL SIGN II
                                            if (0x11435 <= code && code <= 0x11437) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        }
                                    } else {
                                        if (code < 0x11440) {
                                            // Mn   [8] NEWA VOWEL SIGN U..NEWA VOWEL SIGN AI
                                            if (0x11438 <= code && code <= 0x1143f) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0x11442) {
                                            // Mc   [2] NEWA VOWEL SIGN O..NEWA VOWEL SIGN AU
                                            if (0x11440 <= code && code <= 0x11441) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            // Mn   [3] NEWA SIGN VIRAMA..NEWA SIGN ANUSVARA
                                            if (0x11442 <= code && code <= 0x11444) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else if (code < 0x114b0) {
                                    if (code < 0x11446) {
                                        // Mc       NEWA SIGN VISARGA
                                        if (0x11445 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn       NEWA SIGN NUKTA
                                        if (0x11446 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        // Mn       NEWA SANDHI MARK
                                        if (0x1145e === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code < 0x114b1) {
                                        // Mc       TIRHUTA VOWEL SIGN AA
                                        if (0x114b0 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0x114b3) {
                                        // Mc   [2] TIRHUTA VOWEL SIGN I..TIRHUTA VOWEL SIGN II
                                        if (0x114b1 <= code && code <= 0x114b2) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn   [6] TIRHUTA VOWEL SIGN U..TIRHUTA VOWEL SIGN VOCALIC LL
                                        if (0x114b3 <= code && code <= 0x114b8) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            }
                        } else if (code < 0x115b8) {
                            if (code < 0x114bf) {
                                if (code < 0x114bb) {
                                    // Mc       TIRHUTA VOWEL SIGN E
                                    if (0x114b9 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    // Mn       TIRHUTA VOWEL SIGN SHORT E
                                    if (0x114ba === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0x114bd) {
                                    // Mc   [2] TIRHUTA VOWEL SIGN AI..TIRHUTA VOWEL SIGN O
                                    if (0x114bb <= code && code <= 0x114bc) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else {
                                    // Mc       TIRHUTA VOWEL SIGN SHORT O
                                    if (0x114bd === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    // Mc       TIRHUTA VOWEL SIGN AU
                                    if (0x114be === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                            } else if (code < 0x115af) {
                                if (code < 0x114c1) {
                                    // Mn   [2] TIRHUTA SIGN CANDRABINDU..TIRHUTA SIGN ANUSVARA
                                    if (0x114bf <= code && code <= 0x114c0) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0x114c2) {
                                    // Mc       TIRHUTA SIGN VISARGA
                                    if (0x114c1 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else {
                                    // Mn   [2] TIRHUTA SIGN VIRAMA..TIRHUTA SIGN NUKTA
                                    if (0x114c2 <= code && code <= 0x114c3) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            } else {
                                if (code < 0x115b0) {
                                    // Mc       SIDDHAM VOWEL SIGN AA
                                    if (0x115af === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0x115b2) {
                                    // Mc   [2] SIDDHAM VOWEL SIGN I..SIDDHAM VOWEL SIGN II
                                    if (0x115b0 <= code && code <= 0x115b1) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else {
                                    // Mn   [4] SIDDHAM VOWEL SIGN U..SIDDHAM VOWEL SIGN VOCALIC RR
                                    if (0x115b2 <= code && code <= 0x115b5) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        } else {
                            if (code < 0x11630) {
                                if (code < 0x115be) {
                                    if (code < 0x115bc) {
                                        // Mc   [4] SIDDHAM VOWEL SIGN E..SIDDHAM VOWEL SIGN AU
                                        if (0x115b8 <= code && code <= 0x115bb) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn   [2] SIDDHAM SIGN CANDRABINDU..SIDDHAM SIGN ANUSVARA
                                        if (0x115bc <= code && code <= 0x115bd) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code < 0x115bf) {
                                        // Mc       SIDDHAM SIGN VISARGA
                                        if (0x115be === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else if (code < 0x115dc) {
                                        // Mn   [2] SIDDHAM SIGN VIRAMA..SIDDHAM SIGN NUKTA
                                        if (0x115bf <= code && code <= 0x115c0) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn   [2] SIDDHAM VOWEL SIGN ALTERNATE U..SIDDHAM VOWEL SIGN ALTERNATE UU
                                        if (0x115dc <= code && code <= 0x115dd) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else if (code < 0x1163d) {
                                if (code < 0x11633) {
                                    // Mc   [3] MODI VOWEL SIGN AA..MODI VOWEL SIGN II
                                    if (0x11630 <= code && code <= 0x11632) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else if (code < 0x1163b) {
                                    // Mn   [8] MODI VOWEL SIGN U..MODI VOWEL SIGN AI
                                    if (0x11633 <= code && code <= 0x1163a) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mc   [2] MODI VOWEL SIGN O..MODI VOWEL SIGN AU
                                    if (0x1163b <= code && code <= 0x1163c) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                            } else {
                                if (code < 0x1163e) {
                                    // Mn       MODI SIGN ANUSVARA
                                    if (0x1163d === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0x1163f) {
                                    // Mc       MODI SIGN VISARGA
                                    if (0x1163e === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else {
                                    // Mn   [2] MODI SIGN VIRAMA..MODI SIGN ARDHACANDRA
                                    if (0x1163f <= code && code <= 0x11640) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        }
                    } else {
                        if (code < 0x1193f) {
                            if (code < 0x11727) {
                                if (code < 0x116b6) {
                                    if (code < 0x116ad) {
                                        // Mn       TAKRI SIGN ANUSVARA
                                        if (0x116ab === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        // Mc       TAKRI SIGN VISARGA
                                        if (0x116ac === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        if (code < 0x116ae) {
                                            // Mn       TAKRI VOWEL SIGN AA
                                            if (0x116ad === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        } else if (code < 0x116b0) {
                                            // Mc   [2] TAKRI VOWEL SIGN I..TAKRI VOWEL SIGN II
                                            if (0x116ae <= code && code <= 0x116af) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                        } else {
                                            // Mn   [6] TAKRI VOWEL SIGN U..TAKRI VOWEL SIGN AU
                                            if (0x116b0 <= code && code <= 0x116b5) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                        }
                                    }
                                } else if (code < 0x1171d) {
                                    // Mc       TAKRI SIGN VIRAMA
                                    if (0x116b6 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    // Mn       TAKRI SIGN NUKTA
                                    if (0x116b7 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    if (code < 0x11722) {
                                        // Mn   [3] AHOM CONSONANT SIGN MEDIAL LA..AHOM CONSONANT SIGN MEDIAL LIGATING RA
                                        if (0x1171d <= code && code <= 0x1171f) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0x11726) {
                                        // Mn   [4] AHOM VOWEL SIGN I..AHOM VOWEL SIGN UU
                                        if (0x11722 <= code && code <= 0x11725) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc       AHOM VOWEL SIGN E
                                        if (0x11726 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                }
                            } else if (code < 0x11930) {
                                if (code < 0x1182f) {
                                    if (code < 0x1182c) {
                                        // Mn   [5] AHOM VOWEL SIGN AW..AHOM SIGN KILLER
                                        if (0x11727 <= code && code <= 0x1172b) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc   [3] DOGRA VOWEL SIGN AA..DOGRA VOWEL SIGN II
                                        if (0x1182c <= code && code <= 0x1182e) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                } else {
                                    if (code < 0x11838) {
                                        // Mn   [9] DOGRA VOWEL SIGN U..DOGRA SIGN ANUSVARA
                                        if (0x1182f <= code && code <= 0x11837) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0x11839) {
                                        // Mc       DOGRA SIGN VISARGA
                                        if (0x11838 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn   [2] DOGRA SIGN VIRAMA..DOGRA SIGN NUKTA
                                        if (0x11839 <= code && code <= 0x1183a) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else {
                                if (code < 0x1193b) {
                                    if (code < 0x11931) {
                                        // Mc       DIVES AKURU VOWEL SIGN AA
                                        if (0x11930 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0x11937) {
                                        // Mc   [5] DIVES AKURU VOWEL SIGN I..DIVES AKURU VOWEL SIGN E
                                        if (0x11931 <= code && code <= 0x11935) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mc   [2] DIVES AKURU VOWEL SIGN AI..DIVES AKURU VOWEL SIGN O
                                        if (0x11937 <= code && code <= 0x11938) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                } else if (code < 0x1193d) {
                                    // Mn   [2] DIVES AKURU SIGN ANUSVARA..DIVES AKURU SIGN CANDRABINDU
                                    if (0x1193b <= code && code <= 0x1193c) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mc       DIVES AKURU SIGN HALANTA
                                    if (0x1193d === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    // Mn       DIVES AKURU VIRAMA
                                    if (0x1193e === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        } else if (code < 0x11a01) {
                            if (code < 0x119d1) {
                                if (code < 0x11941) {
                                    // Lo       DIVES AKURU PREFIXED NASAL SIGN
                                    if (0x1193f === code) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                    // Mc       DIVES AKURU MEDIAL YA
                                    if (0x11940 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else if (code < 0x11942) {
                                    // Lo       DIVES AKURU INITIAL RA
                                    if (0x11941 === code) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                } else {
                                    // Mc       DIVES AKURU MEDIAL RA
                                    if (0x11942 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    // Mn       DIVES AKURU SIGN NUKTA
                                    if (0x11943 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            } else {
                                if (code < 0x119dc) {
                                    if (code < 0x119d4) {
                                        // Mc   [3] NANDINAGARI VOWEL SIGN AA..NANDINAGARI VOWEL SIGN II
                                        if (0x119d1 <= code && code <= 0x119d3) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else if (code < 0x119da) {
                                        // Mn   [4] NANDINAGARI VOWEL SIGN U..NANDINAGARI VOWEL SIGN VOCALIC RR
                                        if (0x119d4 <= code && code <= 0x119d7) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn   [2] NANDINAGARI VOWEL SIGN E..NANDINAGARI VOWEL SIGN AI
                                        if (0x119da <= code && code <= 0x119db) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else if (code < 0x119e0) {
                                    // Mc   [4] NANDINAGARI VOWEL SIGN O..NANDINAGARI SIGN VISARGA
                                    if (0x119dc <= code && code <= 0x119df) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else {
                                    // Mn       NANDINAGARI SIGN VIRAMA
                                    if (0x119e0 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    // Mc       NANDINAGARI VOWEL SIGN PRISHTHAMATRA E
                                    if (0x119e4 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                            }
                        } else {
                            if (code < 0x11a47) {
                                if (code < 0x11a39) {
                                    if (code < 0x11a33) {
                                        // Mn  [10] ZANABAZAR SQUARE VOWEL SIGN I..ZANABAZAR SQUARE VOWEL LENGTH MARK
                                        if (0x11a01 <= code && code <= 0x11a0a) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn   [6] ZANABAZAR SQUARE FINAL CONSONANT MARK..ZANABAZAR SQUARE SIGN ANUSVARA
                                        if (0x11a33 <= code && code <= 0x11a38) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code < 0x11a3a) {
                                        // Mc       ZANABAZAR SQUARE SIGN VISARGA
                                        if (0x11a39 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else if (code < 0x11a3b) {
                                        // Lo       ZANABAZAR SQUARE CLUSTER-INITIAL LETTER RA
                                        if (0x11a3a === code) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                    } else {
                                        // Mn   [4] ZANABAZAR SQUARE CLUSTER-FINAL LETTER YA..ZANABAZAR SQUARE CLUSTER-FINAL LETTER VA
                                        if (0x11a3b <= code && code <= 0x11a3e) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else if (code < 0x11a59) {
                                if (code < 0x11a51) {
                                    // Mn       ZANABAZAR SQUARE SUBJOINER
                                    if (0x11a47 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0x11a57) {
                                    // Mn   [6] SOYOMBO VOWEL SIGN I..SOYOMBO VOWEL SIGN OE
                                    if (0x11a51 <= code && code <= 0x11a56) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mc   [2] SOYOMBO VOWEL SIGN AI..SOYOMBO VOWEL SIGN AU
                                    if (0x11a57 <= code && code <= 0x11a58) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                            } else {
                                if (code < 0x11a84) {
                                    // Mn   [3] SOYOMBO VOWEL SIGN VOCALIC R..SOYOMBO VOWEL LENGTH MARK
                                    if (0x11a59 <= code && code <= 0x11a5b) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0x11a8a) {
                                    // Lo   [6] SOYOMBO SIGN JIHVAMULIYA..SOYOMBO CLUSTER-INITIAL LETTER SA
                                    if (0x11a84 <= code && code <= 0x11a89) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                } else {
                                    // Mn  [13] SOYOMBO FINAL CONSONANT SIGN G..SOYOMBO SIGN ANUSVARA
                                    if (0x11a8a <= code && code <= 0x11a96) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        }
                    }
                } else if (code < 0x16f51) {
                    if (code < 0x11d90) {
                        if (code < 0x11cb1) {
                            if (code < 0x11c3e) {
                                if (code < 0x11c2f) {
                                    if (code < 0x11a98) {
                                        // Mc       SOYOMBO SIGN VISARGA
                                        if (0x11a97 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn   [2] SOYOMBO GEMINATION MARK..SOYOMBO SUBJOINER
                                        if (0x11a98 <= code && code <= 0x11a99) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code < 0x11c30) {
                                        // Mc       BHAIKSUKI VOWEL SIGN AA
                                        if (0x11c2f === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else if (code < 0x11c38) {
                                        // Mn   [7] BHAIKSUKI VOWEL SIGN I..BHAIKSUKI VOWEL SIGN VOCALIC L
                                        if (0x11c30 <= code && code <= 0x11c36) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn   [6] BHAIKSUKI VOWEL SIGN E..BHAIKSUKI SIGN ANUSVARA
                                        if (0x11c38 <= code && code <= 0x11c3d) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else if (code < 0x11c92) {
                                // Mc       BHAIKSUKI SIGN VISARGA
                                if (0x11c3e === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                // Mn       BHAIKSUKI SIGN VIRAMA
                                if (0x11c3f === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else {
                                if (code < 0x11ca9) {
                                    // Mn  [22] MARCHEN SUBJOINED LETTER KA..MARCHEN SUBJOINED LETTER ZA
                                    if (0x11c92 <= code && code <= 0x11ca7) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0x11caa) {
                                    // Mc       MARCHEN SUBJOINED LETTER YA
                                    if (0x11ca9 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                } else {
                                    // Mn   [7] MARCHEN SUBJOINED LETTER RA..MARCHEN VOWEL SIGN AA
                                    if (0x11caa <= code && code <= 0x11cb0) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        } else {
                            if (code < 0x11d3a) {
                                if (code < 0x11cb4) {
                                    if (code < 0x11cb2) {
                                        // Mc       MARCHEN VOWEL SIGN I
                                        if (0x11cb1 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn   [2] MARCHEN VOWEL SIGN U..MARCHEN VOWEL SIGN E
                                        if (0x11cb2 <= code && code <= 0x11cb3) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code < 0x11cb5) {
                                        // Mc       MARCHEN VOWEL SIGN O
                                        if (0x11cb4 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else if (code < 0x11d31) {
                                        // Mn   [2] MARCHEN SIGN ANUSVARA..MARCHEN SIGN CANDRABINDU
                                        if (0x11cb5 <= code && code <= 0x11cb6) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mn   [6] MASARAM GONDI VOWEL SIGN AA..MASARAM GONDI VOWEL SIGN VOCALIC R
                                        if (0x11d31 <= code && code <= 0x11d36) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else if (code < 0x11d46) {
                                if (code < 0x11d3c) {
                                    // Mn       MASARAM GONDI VOWEL SIGN E
                                    if (0x11d3a === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0x11d3f) {
                                    // Mn   [2] MASARAM GONDI VOWEL SIGN AI..MASARAM GONDI VOWEL SIGN O
                                    if (0x11d3c <= code && code <= 0x11d3d) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn   [7] MASARAM GONDI VOWEL SIGN AU..MASARAM GONDI VIRAMA
                                    if (0x11d3f <= code && code <= 0x11d45) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            } else {
                                if (code < 0x11d47) {
                                    // Lo       MASARAM GONDI REPHA
                                    if (0x11d46 === code) return boundaries_1.CLUSTER_BREAK.PREPEND;
                                } else if (code < 0x11d8a) {
                                    // Mn       MASARAM GONDI RA-KARA
                                    if (0x11d47 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mc   [5] GUNJALA GONDI VOWEL SIGN AA..GUNJALA GONDI VOWEL SIGN UU
                                    if (0x11d8a <= code && code <= 0x11d8e) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                            }
                        }
                    } else if (code < 0x11f36) {
                        if (code < 0x11ef3) {
                            if (code < 0x11d95) {
                                if (code < 0x11d93) {
                                    // Mn   [2] GUNJALA GONDI VOWEL SIGN EE..GUNJALA GONDI VOWEL SIGN AI
                                    if (0x11d90 <= code && code <= 0x11d91) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mc   [2] GUNJALA GONDI VOWEL SIGN OO..GUNJALA GONDI VOWEL SIGN AU
                                    if (0x11d93 <= code && code <= 0x11d94) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                            } else if (code < 0x11d96) {
                                // Mn       GUNJALA GONDI SIGN ANUSVARA
                                if (0x11d95 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else {
                                // Mc       GUNJALA GONDI SIGN VISARGA
                                if (0x11d96 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                // Mn       GUNJALA GONDI VIRAMA
                                if (0x11d97 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                        } else if (code < 0x11f02) {
                            if (code < 0x11ef5) {
                                // Mn   [2] MAKASAR VOWEL SIGN I..MAKASAR VOWEL SIGN U
                                if (0x11ef3 <= code && code <= 0x11ef4) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else if (code < 0x11f00) {
                                // Mc   [2] MAKASAR VOWEL SIGN E..MAKASAR VOWEL SIGN O
                                if (0x11ef5 <= code && code <= 0x11ef6) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            } else {
                                // Mn   [2] KAWI SIGN CANDRABINDU..KAWI SIGN ANUSVARA
                                if (0x11f00 <= code && code <= 0x11f01) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                        } else {
                            if (code < 0x11f03) {
                                // Lo       KAWI SIGN REPHA
                                if (0x11f02 === code) return boundaries_1.CLUSTER_BREAK.PREPEND;
                            } else if (code < 0x11f34) {
                                // Mc       KAWI SIGN VISARGA
                                if (0x11f03 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            } else {
                                // Mc   [2] KAWI VOWEL SIGN AA..KAWI VOWEL SIGN ALTERNATE AA
                                if (0x11f34 <= code && code <= 0x11f35) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                        }
                    } else {
                        if (code < 0x13430) {
                            if (code < 0x11f40) {
                                if (code < 0x11f3e) {
                                    // Mn   [5] KAWI VOWEL SIGN I..KAWI VOWEL SIGN VOCALIC R
                                    if (0x11f36 <= code && code <= 0x11f3a) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mc   [2] KAWI VOWEL SIGN E..KAWI VOWEL SIGN AI
                                    if (0x11f3e <= code && code <= 0x11f3f) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                            } else if (code < 0x11f41) {
                                // Mn       KAWI VOWEL SIGN EU
                                if (0x11f40 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else {
                                // Mc       KAWI SIGN KILLER
                                if (0x11f41 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                // Mn       KAWI CONJOINER
                                if (0x11f42 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                        } else if (code < 0x16af0) {
                            if (code < 0x13440) {
                                // Cf  [16] EGYPTIAN HIEROGLYPH VERTICAL JOINER..EGYPTIAN HIEROGLYPH END WALLED ENCLOSURE
                                if (0x13430 <= code && code <= 0x1343f) return boundaries_1.CLUSTER_BREAK.CONTROL;
                            } else if (code < 0x13447) {
                                // Mn       EGYPTIAN HIEROGLYPH MIRROR HORIZONTALLY
                                if (0x13440 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else {
                                // Mn  [15] EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT TOP START..EGYPTIAN HIEROGLYPH MODIFIER DAMAGED
                                if (0x13447 <= code && code <= 0x13455) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                        } else {
                            if (code < 0x16b30) {
                                // Mn   [5] BASSA VAH COMBINING HIGH TONE..BASSA VAH COMBINING HIGH-LOW TONE
                                if (0x16af0 <= code && code <= 0x16af4) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else if (code < 0x16f4f) {
                                // Mn   [7] PAHAWH HMONG MARK CIM TUB..PAHAWH HMONG MARK CIM TAUM
                                if (0x16b30 <= code && code <= 0x16b36) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else {
                                // Mn       MIAO SIGN CONSONANT MODIFIER BAR
                                if (0x16f4f === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                        }
                    }
                } else {
                    if (code < 0x1da84) {
                        if (code < 0x1d167) {
                            if (code < 0x1bca0) {
                                if (code < 0x16fe4) {
                                    if (code < 0x16f8f) {
                                        // Mc  [55] MIAO SIGN ASPIRATION..MIAO VOWEL SIGN UI
                                        if (0x16f51 <= code && code <= 0x16f87) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn   [4] MIAO TONE RIGHT..MIAO TONE BELOW
                                        if (0x16f8f <= code && code <= 0x16f92) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else {
                                    if (code < 0x16ff0) {
                                        // Mn       KHITAN SMALL SCRIPT FILLER
                                        if (0x16fe4 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0x1bc9d) {
                                        // Mc   [2] VIETNAMESE ALTERNATE READING MARK CA..VIETNAMESE ALTERNATE READING MARK NHAY
                                        if (0x16ff0 <= code && code <= 0x16ff1) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    } else {
                                        // Mn   [2] DUPLOYAN THICK LETTER SELECTOR..DUPLOYAN DOUBLE MARK
                                        if (0x1bc9d <= code && code <= 0x1bc9e) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else {
                                if (code < 0x1cf30) {
                                    if (code < 0x1cf00) {
                                        // Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP
                                        if (0x1bca0 <= code && code <= 0x1bca3) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    } else {
                                        // Mn  [46] ZNAMENNY COMBINING MARK GORAZDO NIZKO S KRYZHEM ON LEFT..ZNAMENNY COMBINING MARK KRYZH ON LEFT
                                        if (0x1cf00 <= code && code <= 0x1cf2d) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                } else if (code < 0x1d165) {
                                    // Mn  [23] ZNAMENNY COMBINING TONAL RANGE MARK MRACHNO..ZNAMENNY PRIZNAK MODIFIER ROG
                                    if (0x1cf30 <= code && code <= 0x1cf46) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mc       MUSICAL SYMBOL COMBINING STEM
                                    if (0x1d165 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    // Mc       MUSICAL SYMBOL COMBINING SPRECHGESANG STEM
                                    if (0x1d166 === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                }
                            }
                        } else {
                            if (code < 0x1d185) {
                                if (code < 0x1d16e) {
                                    if (code < 0x1d16d) {
                                        // Mn   [3] MUSICAL SYMBOL COMBINING TREMOLO-1..MUSICAL SYMBOL COMBINING TREMOLO-3
                                        if (0x1d167 <= code && code <= 0x1d169) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else {
                                        // Mc       MUSICAL SYMBOL COMBINING AUGMENTATION DOT
                                        if (0x1d16d === code) return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                                    }
                                } else {
                                    if (code < 0x1d173) {
                                        // Mc   [5] MUSICAL SYMBOL COMBINING FLAG-1..MUSICAL SYMBOL COMBINING FLAG-5
                                        if (0x1d16e <= code && code <= 0x1d172) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    } else if (code < 0x1d17b) {
                                        // Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE
                                        if (0x1d173 <= code && code <= 0x1d17a) return boundaries_1.CLUSTER_BREAK.CONTROL;
                                    } else {
                                        // Mn   [8] MUSICAL SYMBOL COMBINING ACCENT..MUSICAL SYMBOL COMBINING LOURE
                                        if (0x1d17b <= code && code <= 0x1d182) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                    }
                                }
                            } else if (code < 0x1da00) {
                                if (code < 0x1d1aa) {
                                    // Mn   [7] MUSICAL SYMBOL COMBINING DOIT..MUSICAL SYMBOL COMBINING TRIPLE TONGUE
                                    if (0x1d185 <= code && code <= 0x1d18b) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0x1d242) {
                                    // Mn   [4] MUSICAL SYMBOL COMBINING DOWN BOW..MUSICAL SYMBOL COMBINING SNAP PIZZICATO
                                    if (0x1d1aa <= code && code <= 0x1d1ad) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn   [3] COMBINING GREEK MUSICAL TRISEME..COMBINING GREEK MUSICAL PENTASEME
                                    if (0x1d242 <= code && code <= 0x1d244) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            } else {
                                if (code < 0x1da3b) {
                                    // Mn  [55] SIGNWRITING HEAD RIM..SIGNWRITING AIR SUCKING IN
                                    if (0x1da00 <= code && code <= 0x1da36) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0x1da75) {
                                    // Mn  [50] SIGNWRITING MOUTH CLOSED NEUTRAL..SIGNWRITING EXCITEMENT
                                    if (0x1da3b <= code && code <= 0x1da6c) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn       SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS
                                    if (0x1da75 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        }
                    } else if (code < 0x1e2ec) {
                        if (code < 0x1e01b) {
                            if (code < 0x1daa1) {
                                if (code < 0x1da9b) {
                                    // Mn       SIGNWRITING LOCATION HEAD NECK
                                    if (0x1da84 === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn   [5] SIGNWRITING FILL MODIFIER-2..SIGNWRITING FILL MODIFIER-6
                                    if (0x1da9b <= code && code <= 0x1da9f) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            } else {
                                if (code < 0x1e000) {
                                    // Mn  [15] SIGNWRITING ROTATION MODIFIER-2..SIGNWRITING ROTATION MODIFIER-16
                                    if (0x1daa1 <= code && code <= 0x1daaf) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0x1e008) {
                                    // Mn   [7] COMBINING GLAGOLITIC LETTER AZU..COMBINING GLAGOLITIC LETTER ZHIVETE
                                    if (0x1e000 <= code && code <= 0x1e006) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn  [17] COMBINING GLAGOLITIC LETTER ZEMLJA..COMBINING GLAGOLITIC LETTER HERU
                                    if (0x1e008 <= code && code <= 0x1e018) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            }
                        } else if (code < 0x1e08f) {
                            if (code < 0x1e023) {
                                // Mn   [7] COMBINING GLAGOLITIC LETTER SHTA..COMBINING GLAGOLITIC LETTER YATI
                                if (0x1e01b <= code && code <= 0x1e021) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else if (code < 0x1e026) {
                                // Mn   [2] COMBINING GLAGOLITIC LETTER YU..COMBINING GLAGOLITIC LETTER SMALL YUS
                                if (0x1e023 <= code && code <= 0x1e024) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else {
                                // Mn   [5] COMBINING GLAGOLITIC LETTER YO..COMBINING GLAGOLITIC LETTER FITA
                                if (0x1e026 <= code && code <= 0x1e02a) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                        } else {
                            if (code < 0x1e130) {
                                // Mn       COMBINING CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I
                                if (0x1e08f === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else if (code < 0x1e2ae) {
                                // Mn   [7] NYIAKENG PUACHUE HMONG TONE-B..NYIAKENG PUACHUE HMONG TONE-D
                                if (0x1e130 <= code && code <= 0x1e136) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else {
                                // Mn       TOTO SIGN RISING TONE
                                if (0x1e2ae === code) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                        }
                    } else {
                        if (code < 0x1f3fb) {
                            if (code < 0x1e8d0) {
                                if (code < 0x1e4ec) {
                                    // Mn   [4] WANCHO TONE TUP..WANCHO TONE KOINI
                                    if (0x1e2ec <= code && code <= 0x1e2ef) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // Mn   [4] NAG MUNDARI SIGN MUHOR..NAG MUNDARI SIGN SUTUH
                                    if (0x1e4ec <= code && code <= 0x1e4ef) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                }
                            } else {
                                if (code < 0x1e944) {
                                    // Mn   [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS
                                    if (0x1e8d0 <= code && code <= 0x1e8d6) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else if (code < 0x1f1e6) {
                                    // Mn   [7] ADLAM ALIF LENGTHENER..ADLAM NUKTA
                                    if (0x1e944 <= code && code <= 0x1e94a) return boundaries_1.CLUSTER_BREAK.EXTEND;
                                } else {
                                    // So  [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z
                                    if (0x1f1e6 <= code && code <= 0x1f1ff) return boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
                                }
                            }
                        } else if (code < 0xe0080) {
                            if (code < 0xe0000) {
                                // Sk   [5] EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6
                                if (0x1f3fb <= code && code <= 0x1f3ff) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else if (code < 0xe0020) {
                                // Cn       <reserved-E0000>
                                // Cf       LANGUAGE TAG
                                // Cn  [30] <reserved-E0002>..<reserved-E001F>
                                if (0xe0000 <= code && code <= 0xe001f) return boundaries_1.CLUSTER_BREAK.CONTROL;
                            } else {
                                // Cf  [96] TAG SPACE..CANCEL TAG
                                if (0xe0020 <= code && code <= 0xe007f) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                        } else {
                            if (code < 0xe0100) {
                                // Cn [128] <reserved-E0080>..<reserved-E00FF>
                                if (0xe0080 <= code && code <= 0xe00ff) return boundaries_1.CLUSTER_BREAK.CONTROL;
                            } else if (code < 0xe01f0) {
                                // Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256
                                if (0xe0100 <= code && code <= 0xe01ef) return boundaries_1.CLUSTER_BREAK.EXTEND;
                            } else {
                                // Cn [3600] <reserved-E01F0>..<reserved-E0FFF>
                                if (0xe01f0 <= code && code <= 0xe0fff) return boundaries_1.CLUSTER_BREAK.CONTROL;
                            }
                        }
                    }
                }
            }
        }
        // unlisted code points are treated as a break property of "Other"
        return boundaries_1.CLUSTER_BREAK.OTHER;
    }
    /**
     * Given a Unicode code point, returns if symbol is an extended pictographic or some other break
     * @param code {number} Unicode code point
     * @returns {number}
     */ static getEmojiProperty(code) {
        // emoji property taken from:
        // https://www.unicode.org/Public/UCD/latest/ucd/emoji/emoji-data.txt
        // and generated by
        // node ./scripts/generate-emoji-extended-pictographic.js
        if (code < 0x27b0) {
            if (code < 0x2600) {
                if (code < 0x2328) {
                    if (code < 0x2122) {
                        if (code < 0x203c) {
                            // E0.6   [1] (©️)       copyright
                            if (0xa9 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            // E0.6   [1] (®️)       registered
                            if (0xae === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else {
                            // E0.6   [1] (‼️)       double exclamation mark
                            if (0x203c === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            // E0.6   [1] (⁉️)       exclamation question mark
                            if (0x2049 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                    } else if (code < 0x2194) {
                        // E0.6   [1] (™️)       trade mark
                        if (0x2122 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        // E0.6   [1] (ℹ️)       information
                        if (0x2139 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    } else {
                        if (code < 0x21a9) {
                            // E0.6   [6] (↔️..↙️)    left-right arrow..down-left arrow
                            if (0x2194 <= code && code <= 0x2199) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else if (code < 0x231a) {
                            // E0.6   [2] (↩️..↪️)    right arrow curving left..left arrow curving right
                            if (0x21a9 <= code && code <= 0x21aa) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else {
                            // E0.6   [2] (⌚..⌛)    watch..hourglass done
                            if (0x231a <= code && code <= 0x231b) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                    }
                } else {
                    if (code < 0x24c2) {
                        if (code < 0x23cf) {
                            // E1.0   [1] (⌨️)       keyboard
                            if (0x2328 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            // E0.0   [1] (⎈)       HELM SYMBOL
                            if (0x2388 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else {
                            if (code < 0x23e9) {
                                // E1.0   [1] (⏏️)       eject button
                                if (0x23cf === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else if (code < 0x23f8) {
                                // E0.6   [4] (⏩..⏬)    fast-forward button..fast down button
                                // E0.7   [2] (⏭️..⏮️)    next track button..last track button
                                // E1.0   [1] (⏯️)       play or pause button
                                // E0.6   [1] (⏰)       alarm clock
                                // E1.0   [2] (⏱️..⏲️)    stopwatch..timer clock
                                // E0.6   [1] (⏳)       hourglass not done
                                if (0x23e9 <= code && code <= 0x23f3) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else {
                                // E0.7   [3] (⏸️..⏺️)    pause button..record button
                                if (0x23f8 <= code && code <= 0x23fa) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        }
                    } else if (code < 0x25b6) {
                        if (code < 0x25aa) {
                            // E0.6   [1] (Ⓜ️)       circled M
                            if (0x24c2 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else {
                            // E0.6   [2] (▪️..▫️)    black small square..white small square
                            if (0x25aa <= code && code <= 0x25ab) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                    } else {
                        if (code < 0x25c0) {
                            // E0.6   [1] (▶️)       play button
                            if (0x25b6 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else if (code < 0x25fb) {
                            // E0.6   [1] (◀️)       reverse button
                            if (0x25c0 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else {
                            // E0.6   [4] (◻️..◾)    white medium square..black medium-small square
                            if (0x25fb <= code && code <= 0x25fe) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                    }
                }
            } else if (code < 0x2733) {
                if (code < 0x2714) {
                    if (code < 0x2614) {
                        if (code < 0x2607) {
                            // E0.6   [2] (☀️..☁️)    sun..cloud
                            // E0.7   [2] (☂️..☃️)    umbrella..snowman
                            // E1.0   [1] (☄️)       comet
                            // E0.0   [1] (★)       BLACK STAR
                            if (0x2600 <= code && code <= 0x2605) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else {
                            // E0.0   [7] (☇..☍)    LIGHTNING..OPPOSITION
                            // E0.6   [1] (☎️)       telephone
                            // E0.0   [2] (☏..☐)    WHITE TELEPHONE..BALLOT BOX
                            // E0.6   [1] (☑️)       check box with check
                            // E0.0   [1] (☒)       BALLOT BOX WITH X
                            if (0x2607 <= code && code <= 0x2612) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                    } else {
                        if (code < 0x2690) {
                            // E0.6   [2] (☔..☕)    umbrella with rain drops..hot beverage
                            // E0.0   [2] (☖..☗)    WHITE SHOGI PIECE..BLACK SHOGI PIECE
                            // E1.0   [1] (☘️)       shamrock
                            // E0.0   [4] (☙..☜)    REVERSED ROTATED FLORAL HEART BULLET..WHITE LEFT POINTING INDEX
                            // E0.6   [1] (☝️)       index pointing up
                            // E0.0   [2] (☞..☟)    WHITE RIGHT POINTING INDEX..WHITE DOWN POINTING INDEX
                            // E1.0   [1] (☠️)       skull and crossbones
                            // E0.0   [1] (☡)       CAUTION SIGN
                            // E1.0   [2] (☢️..☣️)    radioactive..biohazard
                            // E0.0   [2] (☤..☥)    CADUCEUS..ANKH
                            // E1.0   [1] (☦️)       orthodox cross
                            // E0.0   [3] (☧..☩)    CHI RHO..CROSS OF JERUSALEM
                            // E0.7   [1] (☪️)       star and crescent
                            // E0.0   [3] (☫..☭)    FARSI SYMBOL..HAMMER AND SICKLE
                            // E1.0   [1] (☮️)       peace symbol
                            // E0.7   [1] (☯️)       yin yang
                            // E0.0   [8] (☰..☷)    TRIGRAM FOR HEAVEN..TRIGRAM FOR EARTH
                            // E0.7   [2] (☸️..☹️)    wheel of dharma..frowning face
                            // E0.6   [1] (☺️)       smiling face
                            // E0.0   [5] (☻..☿)    BLACK SMILING FACE..MERCURY
                            // E4.0   [1] (♀️)       female sign
                            // E0.0   [1] (♁)       EARTH
                            // E4.0   [1] (♂️)       male sign
                            // E0.0   [5] (♃..♇)    JUPITER..PLUTO
                            // E0.6  [12] (♈..♓)    Aries..Pisces
                            // E0.0  [11] (♔..♞)    WHITE CHESS KING..BLACK CHESS KNIGHT
                            // E11.0  [1] (♟️)       chess pawn
                            // E0.6   [1] (♠️)       spade suit
                            // E0.0   [2] (♡..♢)    WHITE HEART SUIT..WHITE DIAMOND SUIT
                            // E0.6   [1] (♣️)       club suit
                            // E0.0   [1] (♤)       WHITE SPADE SUIT
                            // E0.6   [2] (♥️..♦️)    heart suit..diamond suit
                            // E0.0   [1] (♧)       WHITE CLUB SUIT
                            // E0.6   [1] (♨️)       hot springs
                            // E0.0  [18] (♩..♺)    QUARTER NOTE..RECYCLING SYMBOL FOR GENERIC MATERIALS
                            // E0.6   [1] (♻️)       recycling symbol
                            // E0.0   [2] (♼..♽)    RECYCLED PAPER SYMBOL..PARTIALLY-RECYCLED PAPER SYMBOL
                            // E11.0  [1] (♾️)       infinity
                            // E0.6   [1] (♿)       wheelchair symbol
                            // E0.0   [6] (⚀..⚅)    DIE FACE-1..DIE FACE-6
                            if (0x2614 <= code && code <= 0x2685) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else if (code < 0x2708) {
                            // E0.0   [2] (⚐..⚑)    WHITE FLAG..BLACK FLAG
                            // E1.0   [1] (⚒️)       hammer and pick
                            // E0.6   [1] (⚓)       anchor
                            // E1.0   [1] (⚔️)       crossed swords
                            // E4.0   [1] (⚕️)       medical symbol
                            // E1.0   [2] (⚖️..⚗️)    balance scale..alembic
                            // E0.0   [1] (⚘)       FLOWER
                            // E1.0   [1] (⚙️)       gear
                            // E0.0   [1] (⚚)       STAFF OF HERMES
                            // E1.0   [2] (⚛️..⚜️)    atom symbol..fleur-de-lis
                            // E0.0   [3] (⚝..⚟)    OUTLINED WHITE STAR..THREE LINES CONVERGING LEFT
                            // E0.6   [2] (⚠️..⚡)    warning..high voltage
                            // E0.0   [5] (⚢..⚦)    DOUBLED FEMALE SIGN..MALE WITH STROKE SIGN
                            // E13.0  [1] (⚧️)       transgender symbol
                            // E0.0   [2] (⚨..⚩)    VERTICAL MALE WITH STROKE SIGN..HORIZONTAL MALE WITH STROKE SIGN
                            // E0.6   [2] (⚪..⚫)    white circle..black circle
                            // E0.0   [4] (⚬..⚯)    MEDIUM SMALL WHITE CIRCLE..UNMARRIED PARTNERSHIP SYMBOL
                            // E1.0   [2] (⚰️..⚱️)    coffin..funeral urn
                            // E0.0  [11] (⚲..⚼)    NEUTER..SESQUIQUADRATE
                            // E0.6   [2] (⚽..⚾)    soccer ball..baseball
                            // E0.0   [5] (⚿..⛃)    SQUARED KEY..BLACK DRAUGHTS KING
                            // E0.6   [2] (⛄..⛅)    snowman without snow..sun behind cloud
                            // E0.0   [2] (⛆..⛇)    RAIN..BLACK SNOWMAN
                            // E0.7   [1] (⛈️)       cloud with lightning and rain
                            // E0.0   [5] (⛉..⛍)    TURNED WHITE SHOGI PIECE..DISABLED CAR
                            // E0.6   [1] (⛎)       Ophiuchus
                            // E0.7   [1] (⛏️)       pick
                            // E0.0   [1] (⛐)       CAR SLIDING
                            // E0.7   [1] (⛑️)       rescue worker’s helmet
                            // E0.0   [1] (⛒)       CIRCLED CROSSING LANES
                            // E0.7   [1] (⛓️)       chains
                            // E0.6   [1] (⛔)       no entry
                            // E0.0  [20] (⛕..⛨)    ALTERNATE ONE-WAY LEFT WAY TRAFFIC..BLACK CROSS ON SHIELD
                            // E0.7   [1] (⛩️)       shinto shrine
                            // E0.6   [1] (⛪)       church
                            // E0.0   [5] (⛫..⛯)    CASTLE..MAP SYMBOL FOR LIGHTHOUSE
                            // E0.7   [2] (⛰️..⛱️)    mountain..umbrella on ground
                            // E0.6   [2] (⛲..⛳)    fountain..flag in hole
                            // E0.7   [1] (⛴️)       ferry
                            // E0.6   [1] (⛵)       sailboat
                            // E0.0   [1] (⛶)       SQUARE FOUR CORNERS
                            // E0.7   [3] (⛷️..⛹️)    skier..person bouncing ball
                            // E0.6   [1] (⛺)       tent
                            // E0.0   [2] (⛻..⛼)    JAPANESE BANK SYMBOL..HEADSTONE GRAVEYARD SYMBOL
                            // E0.6   [1] (⛽)       fuel pump
                            // E0.0   [4] (⛾..✁)    CUP ON BLACK SQUARE..UPPER BLADE SCISSORS
                            // E0.6   [1] (✂️)       scissors
                            // E0.0   [2] (✃..✄)    LOWER BLADE SCISSORS..WHITE SCISSORS
                            // E0.6   [1] (✅)       check mark button
                            if (0x2690 <= code && code <= 0x2705) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else {
                            // E0.6   [5] (✈️..✌️)    airplane..victory hand
                            // E0.7   [1] (✍️)       writing hand
                            // E0.0   [1] (✎)       LOWER RIGHT PENCIL
                            // E0.6   [1] (✏️)       pencil
                            // E0.0   [2] (✐..✑)    UPPER RIGHT PENCIL..WHITE NIB
                            // E0.6   [1] (✒️)       black nib
                            if (0x2708 <= code && code <= 0x2712) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                    }
                } else {
                    if (code < 0x271d) {
                        // E0.6   [1] (✔️)       check mark
                        if (0x2714 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        // E0.6   [1] (✖️)       multiply
                        if (0x2716 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    } else if (code < 0x2721) {
                        // E0.7   [1] (✝️)       latin cross
                        if (0x271d === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    } else {
                        // E0.7   [1] (✡️)       star of David
                        if (0x2721 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        // E0.6   [1] (✨)       sparkles
                        if (0x2728 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                }
            } else {
                if (code < 0x2753) {
                    if (code < 0x2747) {
                        if (code < 0x2744) {
                            // E0.6   [2] (✳️..✴️)    eight-spoked asterisk..eight-pointed star
                            if (0x2733 <= code && code <= 0x2734) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else {
                            // E0.6   [1] (❄️)       snowflake
                            if (0x2744 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                    } else if (code < 0x274c) {
                        // E0.6   [1] (❇️)       sparkle
                        if (0x2747 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    } else {
                        // E0.6   [1] (❌)       cross mark
                        if (0x274c === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        // E0.6   [1] (❎)       cross mark button
                        if (0x274e === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                } else if (code < 0x2763) {
                    if (code < 0x2757) {
                        // E0.6   [3] (❓..❕)    red question mark..white exclamation mark
                        if (0x2753 <= code && code <= 0x2755) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    } else {
                        // E0.6   [1] (❗)       red exclamation mark
                        if (0x2757 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                } else {
                    if (code < 0x2795) {
                        // E1.0   [1] (❣️)       heart exclamation
                        // E0.6   [1] (❤️)       red heart
                        // E0.0   [3] (❥..❧)    ROTATED HEAVY BLACK HEART BULLET..ROTATED FLORAL HEART BULLET
                        if (0x2763 <= code && code <= 0x2767) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    } else if (code < 0x27a1) {
                        // E0.6   [3] (➕..➗)    plus..divide
                        if (0x2795 <= code && code <= 0x2797) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    } else {
                        // E0.6   [1] (➡️)       right arrow
                        if (0x27a1 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                }
            }
        } else {
            if (code < 0x1f201) {
                if (code < 0x3297) {
                    if (code < 0x2b1b) {
                        if (code < 0x2934) {
                            // E0.6   [1] (➰)       curly loop
                            if (0x27b0 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            // E1.0   [1] (➿)       double curly loop
                            if (0x27bf === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else if (code < 0x2b05) {
                            // E0.6   [2] (⤴️..⤵️)    right arrow curving up..right arrow curving down
                            if (0x2934 <= code && code <= 0x2935) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else {
                            // E0.6   [3] (⬅️..⬇️)    left arrow..down arrow
                            if (0x2b05 <= code && code <= 0x2b07) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                    } else {
                        if (code < 0x2b55) {
                            if (code < 0x2b50) {
                                // E0.6   [2] (⬛..⬜)    black large square..white large square
                                if (0x2b1b <= code && code <= 0x2b1c) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else {
                                // E0.6   [1] (⭐)       star
                                if (0x2b50 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        } else if (code < 0x3030) {
                            // E0.6   [1] (⭕)       hollow red circle
                            if (0x2b55 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else {
                            // E0.6   [1] (〰️)       wavy dash
                            if (0x3030 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            // E0.6   [1] (〽️)       part alternation mark
                            if (0x303d === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                    }
                } else {
                    if (code < 0x1f16c) {
                        if (code < 0x1f000) {
                            // E0.6   [1] (㊗️)       Japanese “congratulations” button
                            if (0x3297 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            // E0.6   [1] (㊙️)       Japanese “secret” button
                            if (0x3299 === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else {
                            if (code < 0x1f10d) {
                                // E0.0   [4] (🀀..🀃)    MAHJONG TILE EAST WIND..MAHJONG TILE NORTH WIND
                                // E0.6   [1] (🀄)       mahjong red dragon
                                // E0.0 [202] (🀅..🃎)    MAHJONG TILE GREEN DRAGON..PLAYING CARD KING OF DIAMONDS
                                // E0.6   [1] (🃏)       joker
                                // E0.0  [48] (🃐..🃿)    <reserved-1F0D0>..<reserved-1F0FF>
                                if (0x1f000 <= code && code <= 0x1f0ff) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else if (code < 0x1f12f) {
                                // E0.0   [3] (🄍..🄏)    CIRCLED ZERO WITH SLASH..CIRCLED DOLLAR SIGN WITH OVERLAID BACKSLASH
                                if (0x1f10d <= code && code <= 0x1f10f) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            } else {
                                // E0.0   [1] (🄯)       COPYLEFT SYMBOL
                                if (0x1f12f === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                            }
                        }
                    } else if (code < 0x1f18e) {
                        if (code < 0x1f17e) {
                            // E0.0   [4] (🅬..🅯)    RAISED MR SIGN..CIRCLED HUMAN FIGURE
                            // E0.6   [2] (🅰️..🅱️)    A button (blood type)..B button (blood type)
                            if (0x1f16c <= code && code <= 0x1f171) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else {
                            // E0.6   [2] (🅾️..🅿️)    O button (blood type)..P button
                            if (0x1f17e <= code && code <= 0x1f17f) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                    } else {
                        if (code < 0x1f191) {
                            // E0.6   [1] (🆎)       AB button (blood type)
                            if (0x1f18e === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else if (code < 0x1f1ad) {
                            // E0.6  [10] (🆑..🆚)    CL button..VS button
                            if (0x1f191 <= code && code <= 0x1f19a) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else {
                            // E0.0  [57] (🆭..🇥)    MASK WORK SYMBOL..<reserved-1F1E5>
                            if (0x1f1ad <= code && code <= 0x1f1e5) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                    }
                }
            } else if (code < 0x1f7d5) {
                if (code < 0x1f249) {
                    if (code < 0x1f22f) {
                        if (code < 0x1f21a) {
                            // E0.6   [2] (🈁..🈂️)    Japanese “here” button..Japanese “service charge” button
                            // E0.0  [13] (🈃..🈏)    <reserved-1F203>..<reserved-1F20F>
                            if (0x1f201 <= code && code <= 0x1f20f) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else {
                            // E0.6   [1] (🈚)       Japanese “free of charge” button
                            if (0x1f21a === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                    } else {
                        if (code < 0x1f232) {
                            // E0.6   [1] (🈯)       Japanese “reserved” button
                            if (0x1f22f === code) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else if (code < 0x1f23c) {
                            // E0.6   [9] (🈲..🈺)    Japanese “prohibited” button..Japanese “open for business” button
                            if (0x1f232 <= code && code <= 0x1f23a) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else {
                            // E0.0   [4] (🈼..🈿)    <reserved-1F23C>..<reserved-1F23F>
                            if (0x1f23c <= code && code <= 0x1f23f) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                    }
                } else if (code < 0x1f546) {
                    if (code < 0x1f400) {
                        // E0.0   [7] (🉉..🉏)    <reserved-1F249>..<reserved-1F24F>
                        // E0.6   [2] (🉐..🉑)    Japanese “bargain” button..Japanese “acceptable” button
                        // E0.0 [174] (🉒..🋿)    <reserved-1F252>..<reserved-1F2FF>
                        // E0.6  [13] (🌀..🌌)    cyclone..milky way
                        // E0.7   [2] (🌍..🌎)    globe showing Europe-Africa..globe showing Americas
                        // E0.6   [1] (🌏)       globe showing Asia-Australia
                        // E1.0   [1] (🌐)       globe with meridians
                        // E0.6   [1] (🌑)       new moon
                        // E1.0   [1] (🌒)       waxing crescent moon
                        // E0.6   [3] (🌓..🌕)    first quarter moon..full moon
                        // E1.0   [3] (🌖..🌘)    waning gibbous moon..waning crescent moon
                        // E0.6   [1] (🌙)       crescent moon
                        // E1.0   [1] (🌚)       new moon face
                        // E0.6   [1] (🌛)       first quarter moon face
                        // E0.7   [1] (🌜)       last quarter moon face
                        // E1.0   [2] (🌝..🌞)    full moon face..sun with face
                        // E0.6   [2] (🌟..🌠)    glowing star..shooting star
                        // E0.7   [1] (🌡️)       thermometer
                        // E0.0   [2] (🌢..🌣)    BLACK DROPLET..WHITE SUN
                        // E0.7   [9] (🌤️..🌬️)    sun behind small cloud..wind face
                        // E1.0   [3] (🌭..🌯)    hot dog..burrito
                        // E0.6   [2] (🌰..🌱)    chestnut..seedling
                        // E1.0   [2] (🌲..🌳)    evergreen tree..deciduous tree
                        // E0.6   [2] (🌴..🌵)    palm tree..cactus
                        // E0.7   [1] (🌶️)       hot pepper
                        // E0.6  [20] (🌷..🍊)    tulip..tangerine
                        // E1.0   [1] (🍋)       lemon
                        // E0.6   [4] (🍌..🍏)    banana..green apple
                        // E1.0   [1] (🍐)       pear
                        // E0.6  [43] (🍑..🍻)    peach..clinking beer mugs
                        // E1.0   [1] (🍼)       baby bottle
                        // E0.7   [1] (🍽️)       fork and knife with plate
                        // E1.0   [2] (🍾..🍿)    bottle with popping cork..popcorn
                        // E0.6  [20] (🎀..🎓)    ribbon..graduation cap
                        // E0.0   [2] (🎔..🎕)    HEART WITH TIP ON THE LEFT..BOUQUET OF FLOWERS
                        // E0.7   [2] (🎖️..🎗️)    military medal..reminder ribbon
                        // E0.0   [1] (🎘)       MUSICAL KEYBOARD WITH JACKS
                        // E0.7   [3] (🎙️..🎛️)    studio microphone..control knobs
                        // E0.0   [2] (🎜..🎝)    BEAMED ASCENDING MUSICAL NOTES..BEAMED DESCENDING MUSICAL NOTES
                        // E0.7   [2] (🎞️..🎟️)    film frames..admission tickets
                        // E0.6  [37] (🎠..🏄)    carousel horse..person surfing
                        // E1.0   [1] (🏅)       sports medal
                        // E0.6   [1] (🏆)       trophy
                        // E1.0   [1] (🏇)       horse racing
                        // E0.6   [1] (🏈)       american football
                        // E1.0   [1] (🏉)       rugby football
                        // E0.6   [1] (🏊)       person swimming
                        // E0.7   [4] (🏋️..🏎️)    person lifting weights..racing car
                        // E1.0   [5] (🏏..🏓)    cricket game..ping pong
                        // E0.7  [12] (🏔️..🏟️)    snow-capped mountain..stadium
                        // E0.6   [4] (🏠..🏣)    house..Japanese post office
                        // E1.0   [1] (🏤)       post office
                        // E0.6  [12] (🏥..🏰)    hospital..castle
                        // E0.0   [2] (🏱..🏲)    WHITE PENNANT..BLACK PENNANT
                        // E0.7   [1] (🏳️)       white flag
                        // E1.0   [1] (🏴)       black flag
                        // E0.7   [1] (🏵️)       rosette
                        // E0.0   [1] (🏶)       BLACK ROSETTE
                        // E0.7   [1] (🏷️)       label
                        // E1.0   [3] (🏸..🏺)    badminton..amphora
                        if (0x1f249 <= code && code <= 0x1f3fa) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    } else {
                        // E1.0   [8] (🐀..🐇)    rat..rabbit
                        // E0.7   [1] (🐈)       cat
                        // E1.0   [3] (🐉..🐋)    dragon..whale
                        // E0.6   [3] (🐌..🐎)    snail..horse
                        // E1.0   [2] (🐏..🐐)    ram..goat
                        // E0.6   [2] (🐑..🐒)    ewe..monkey
                        // E1.0   [1] (🐓)       rooster
                        // E0.6   [1] (🐔)       chicken
                        // E0.7   [1] (🐕)       dog
                        // E1.0   [1] (🐖)       pig
                        // E0.6  [19] (🐗..🐩)    boar..poodle
                        // E1.0   [1] (🐪)       camel
                        // E0.6  [20] (🐫..🐾)    two-hump camel..paw prints
                        // E0.7   [1] (🐿️)       chipmunk
                        // E0.6   [1] (👀)       eyes
                        // E0.7   [1] (👁️)       eye
                        // E0.6  [35] (👂..👤)    ear..bust in silhouette
                        // E1.0   [1] (👥)       busts in silhouette
                        // E0.6   [6] (👦..👫)    boy..woman and man holding hands
                        // E1.0   [2] (👬..👭)    men holding hands..women holding hands
                        // E0.6  [63] (👮..💬)    police officer..speech balloon
                        // E1.0   [1] (💭)       thought balloon
                        // E0.6   [8] (💮..💵)    white flower..dollar banknote
                        // E1.0   [2] (💶..💷)    euro banknote..pound banknote
                        // E0.6  [52] (💸..📫)    money with wings..closed mailbox with raised flag
                        // E0.7   [2] (📬..📭)    open mailbox with raised flag..open mailbox with lowered flag
                        // E0.6   [1] (📮)       postbox
                        // E1.0   [1] (📯)       postal horn
                        // E0.6   [5] (📰..📴)    newspaper..mobile phone off
                        // E1.0   [1] (📵)       no mobile phones
                        // E0.6   [2] (📶..📷)    antenna bars..camera
                        // E1.0   [1] (📸)       camera with flash
                        // E0.6   [4] (📹..📼)    video camera..videocassette
                        // E0.7   [1] (📽️)       film projector
                        // E0.0   [1] (📾)       PORTABLE STEREO
                        // E1.0   [4] (📿..🔂)    prayer beads..repeat single button
                        // E0.6   [1] (🔃)       clockwise vertical arrows
                        // E1.0   [4] (🔄..🔇)    counterclockwise arrows button..muted speaker
                        // E0.7   [1] (🔈)       speaker low volume
                        // E1.0   [1] (🔉)       speaker medium volume
                        // E0.6  [11] (🔊..🔔)    speaker high volume..bell
                        // E1.0   [1] (🔕)       bell with slash
                        // E0.6  [22] (🔖..🔫)    bookmark..water pistol
                        // E1.0   [2] (🔬..🔭)    microscope..telescope
                        // E0.6  [16] (🔮..🔽)    crystal ball..downwards button
                        if (0x1f400 <= code && code <= 0x1f53d) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                } else {
                    if (code < 0x1f680) {
                        // E0.0   [3] (🕆..🕈)    WHITE LATIN CROSS..CELTIC CROSS
                        // E0.7   [2] (🕉️..🕊️)    om..dove
                        // E1.0   [4] (🕋..🕎)    kaaba..menorah
                        // E0.0   [1] (🕏)       BOWL OF HYGIEIA
                        // E0.6  [12] (🕐..🕛)    one o’clock..twelve o’clock
                        // E0.7  [12] (🕜..🕧)    one-thirty..twelve-thirty
                        // E0.0   [7] (🕨..🕮)    RIGHT SPEAKER..BOOK
                        // E0.7   [2] (🕯️..🕰️)    candle..mantelpiece clock
                        // E0.0   [2] (🕱..🕲)    BLACK SKULL AND CROSSBONES..NO PIRACY
                        // E0.7   [7] (🕳️..🕹️)    hole..joystick
                        // E3.0   [1] (🕺)       man dancing
                        // E0.0  [12] (🕻..🖆)    LEFT HAND TELEPHONE RECEIVER..PEN OVER STAMPED ENVELOPE
                        // E0.7   [1] (🖇️)       linked paperclips
                        // E0.0   [2] (🖈..🖉)    BLACK PUSHPIN..LOWER LEFT PENCIL
                        // E0.7   [4] (🖊️..🖍️)    pen..crayon
                        // E0.0   [2] (🖎..🖏)    LEFT WRITING HAND..TURNED OK HAND SIGN
                        // E0.7   [1] (🖐️)       hand with fingers splayed
                        // E0.0   [4] (🖑..🖔)    REVERSED RAISED HAND WITH FINGERS SPLAYED..REVERSED VICTORY HAND
                        // E1.0   [2] (🖕..🖖)    middle finger..vulcan salute
                        // E0.0  [13] (🖗..🖣)    WHITE DOWN POINTING LEFT HAND INDEX..BLACK DOWN POINTING BACKHAND INDEX
                        // E3.0   [1] (🖤)       black heart
                        // E0.7   [1] (🖥️)       desktop computer
                        // E0.0   [2] (🖦..🖧)    KEYBOARD AND MOUSE..THREE NETWORKED COMPUTERS
                        // E0.7   [1] (🖨️)       printer
                        // E0.0   [8] (🖩..🖰)    POCKET CALCULATOR..TWO BUTTON MOUSE
                        // E0.7   [2] (🖱️..🖲️)    computer mouse..trackball
                        // E0.0   [9] (🖳..🖻)    OLD PERSONAL COMPUTER..DOCUMENT WITH PICTURE
                        // E0.7   [1] (🖼️)       framed picture
                        // E0.0   [5] (🖽..🗁)    FRAME WITH TILES..OPEN FOLDER
                        // E0.7   [3] (🗂️..🗄️)    card index dividers..file cabinet
                        // E0.0  [12] (🗅..🗐)    EMPTY NOTE..PAGES
                        // E0.7   [3] (🗑️..🗓️)    wastebasket..spiral calendar
                        // E0.0   [8] (🗔..🗛)    DESKTOP WINDOW..DECREASE FONT SIZE SYMBOL
                        // E0.7   [3] (🗜️..🗞️)    clamp..rolled-up newspaper
                        // E0.0   [2] (🗟..🗠)    PAGE WITH CIRCLED TEXT..STOCK CHART
                        // E0.7   [1] (🗡️)       dagger
                        // E0.0   [1] (🗢)       LIPS
                        // E0.7   [1] (🗣️)       speaking head
                        // E0.0   [4] (🗤..🗧)    THREE RAYS ABOVE..THREE RAYS RIGHT
                        // E2.0   [1] (🗨️)       left speech bubble
                        // E0.0   [6] (🗩..🗮)    RIGHT SPEECH BUBBLE..LEFT ANGER BUBBLE
                        // E0.7   [1] (🗯️)       right anger bubble
                        // E0.0   [3] (🗰..🗲)    MOOD BUBBLE..LIGHTNING MOOD
                        // E0.7   [1] (🗳️)       ballot box with ballot
                        // E0.0   [6] (🗴..🗹)    BALLOT SCRIPT X..BALLOT BOX WITH BOLD CHECK
                        // E0.7   [1] (🗺️)       world map
                        // E0.6   [5] (🗻..🗿)    mount fuji..moai
                        // E1.0   [1] (😀)       grinning face
                        // E0.6   [6] (😁..😆)    beaming face with smiling eyes..grinning squinting face
                        // E1.0   [2] (😇..😈)    smiling face with halo..smiling face with horns
                        // E0.6   [5] (😉..😍)    winking face..smiling face with heart-eyes
                        // E1.0   [1] (😎)       smiling face with sunglasses
                        // E0.6   [1] (😏)       smirking face
                        // E0.7   [1] (😐)       neutral face
                        // E1.0   [1] (😑)       expressionless face
                        // E0.6   [3] (😒..😔)    unamused face..pensive face
                        // E1.0   [1] (😕)       confused face
                        // E0.6   [1] (😖)       confounded face
                        // E1.0   [1] (😗)       kissing face
                        // E0.6   [1] (😘)       face blowing a kiss
                        // E1.0   [1] (😙)       kissing face with smiling eyes
                        // E0.6   [1] (😚)       kissing face with closed eyes
                        // E1.0   [1] (😛)       face with tongue
                        // E0.6   [3] (😜..😞)    winking face with tongue..disappointed face
                        // E1.0   [1] (😟)       worried face
                        // E0.6   [6] (😠..😥)    angry face..sad but relieved face
                        // E1.0   [2] (😦..😧)    frowning face with open mouth..anguished face
                        // E0.6   [4] (😨..😫)    fearful face..tired face
                        // E1.0   [1] (😬)       grimacing face
                        // E0.6   [1] (😭)       loudly crying face
                        // E1.0   [2] (😮..😯)    face with open mouth..hushed face
                        // E0.6   [4] (😰..😳)    anxious face with sweat..flushed face
                        // E1.0   [1] (😴)       sleeping face
                        // E0.6   [1] (😵)       face with crossed-out eyes
                        // E1.0   [1] (😶)       face without mouth
                        // E0.6  [10] (😷..🙀)    face with medical mask..weary cat
                        // E1.0   [4] (🙁..🙄)    slightly frowning face..face with rolling eyes
                        // E0.6  [11] (🙅..🙏)    person gesturing NO..folded hands
                        if (0x1f546 <= code && code <= 0x1f64f) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    } else if (code < 0x1f774) {
                        // E0.6   [1] (🚀)       rocket
                        // E1.0   [2] (🚁..🚂)    helicopter..locomotive
                        // E0.6   [3] (🚃..🚅)    railway car..bullet train
                        // E1.0   [1] (🚆)       train
                        // E0.6   [1] (🚇)       metro
                        // E1.0   [1] (🚈)       light rail
                        // E0.6   [1] (🚉)       station
                        // E1.0   [2] (🚊..🚋)    tram..tram car
                        // E0.6   [1] (🚌)       bus
                        // E0.7   [1] (🚍)       oncoming bus
                        // E1.0   [1] (🚎)       trolleybus
                        // E0.6   [1] (🚏)       bus stop
                        // E1.0   [1] (🚐)       minibus
                        // E0.6   [3] (🚑..🚓)    ambulance..police car
                        // E0.7   [1] (🚔)       oncoming police car
                        // E0.6   [1] (🚕)       taxi
                        // E1.0   [1] (🚖)       oncoming taxi
                        // E0.6   [1] (🚗)       automobile
                        // E0.7   [1] (🚘)       oncoming automobile
                        // E0.6   [2] (🚙..🚚)    sport utility vehicle..delivery truck
                        // E1.0   [7] (🚛..🚡)    articulated lorry..aerial tramway
                        // E0.6   [1] (🚢)       ship
                        // E1.0   [1] (🚣)       person rowing boat
                        // E0.6   [2] (🚤..🚥)    speedboat..horizontal traffic light
                        // E1.0   [1] (🚦)       vertical traffic light
                        // E0.6   [7] (🚧..🚭)    construction..no smoking
                        // E1.0   [4] (🚮..🚱)    litter in bin sign..non-potable water
                        // E0.6   [1] (🚲)       bicycle
                        // E1.0   [3] (🚳..🚵)    no bicycles..person mountain biking
                        // E0.6   [1] (🚶)       person walking
                        // E1.0   [2] (🚷..🚸)    no pedestrians..children crossing
                        // E0.6   [6] (🚹..🚾)    men’s room..water closet
                        // E1.0   [1] (🚿)       shower
                        // E0.6   [1] (🛀)       person taking bath
                        // E1.0   [5] (🛁..🛅)    bathtub..left luggage
                        // E0.0   [5] (🛆..🛊)    TRIANGLE WITH ROUNDED CORNERS..GIRLS SYMBOL
                        // E0.7   [1] (🛋️)       couch and lamp
                        // E1.0   [1] (🛌)       person in bed
                        // E0.7   [3] (🛍️..🛏️)    shopping bags..bed
                        // E1.0   [1] (🛐)       place of worship
                        // E3.0   [2] (🛑..🛒)    stop sign..shopping cart
                        // E0.0   [2] (🛓..🛔)    STUPA..PAGODA
                        // E12.0  [1] (🛕)       hindu temple
                        // E13.0  [2] (🛖..🛗)    hut..elevator
                        // E0.0   [4] (🛘..🛛)    <reserved-1F6D8>..<reserved-1F6DB>
                        // E15.0  [1] (🛜)       wireless
                        // E14.0  [3] (🛝..🛟)    playground slide..ring buoy
                        // E0.7   [6] (🛠️..🛥️)    hammer and wrench..motor boat
                        // E0.0   [3] (🛦..🛨)    UP-POINTING MILITARY AIRPLANE..UP-POINTING SMALL AIRPLANE
                        // E0.7   [1] (🛩️)       small airplane
                        // E0.0   [1] (🛪)       NORTHEAST-POINTING AIRPLANE
                        // E1.0   [2] (🛫..🛬)    airplane departure..airplane arrival
                        // E0.0   [3] (🛭..🛯)    <reserved-1F6ED>..<reserved-1F6EF>
                        // E0.7   [1] (🛰️)       satellite
                        // E0.0   [2] (🛱..🛲)    ONCOMING FIRE ENGINE..DIESEL LOCOMOTIVE
                        // E0.7   [1] (🛳️)       passenger ship
                        // E3.0   [3] (🛴..🛶)    kick scooter..canoe
                        // E5.0   [2] (🛷..🛸)    sled..flying saucer
                        // E11.0  [1] (🛹)       skateboard
                        // E12.0  [1] (🛺)       auto rickshaw
                        // E13.0  [2] (🛻..🛼)    pickup truck..roller skate
                        // E0.0   [3] (🛽..🛿)    <reserved-1F6FD>..<reserved-1F6FF>
                        if (0x1f680 <= code && code <= 0x1f6ff) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    } else {
                        // E0.0  [12] (🝴..🝿)    LOT OF FORTUNE..ORCUS
                        if (0x1f774 <= code && code <= 0x1f77f) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                }
            } else {
                if (code < 0x1f8ae) {
                    if (code < 0x1f848) {
                        if (code < 0x1f80c) {
                            // E0.0  [11] (🟕..🟟)    CIRCLED TRIANGLE..<reserved-1F7DF>
                            // E12.0 [12] (🟠..🟫)    orange circle..brown square
                            // E0.0   [4] (🟬..🟯)    <reserved-1F7EC>..<reserved-1F7EF>
                            // E14.0  [1] (🟰)       heavy equals sign
                            // E0.0  [15] (🟱..🟿)    <reserved-1F7F1>..<reserved-1F7FF>
                            if (0x1f7d5 <= code && code <= 0x1f7ff) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else {
                            // E0.0   [4] (🠌..🠏)    <reserved-1F80C>..<reserved-1F80F>
                            if (0x1f80c <= code && code <= 0x1f80f) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                    } else {
                        if (code < 0x1f85a) {
                            // E0.0   [8] (🡈..🡏)    <reserved-1F848>..<reserved-1F84F>
                            if (0x1f848 <= code && code <= 0x1f84f) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else if (code < 0x1f888) {
                            // E0.0   [6] (🡚..🡟)    <reserved-1F85A>..<reserved-1F85F>
                            if (0x1f85a <= code && code <= 0x1f85f) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        } else {
                            // E0.0   [8] (🢈..🢏)    <reserved-1F888>..<reserved-1F88F>
                            if (0x1f888 <= code && code <= 0x1f88f) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                        }
                    }
                } else if (code < 0x1f93c) {
                    if (code < 0x1f90c) {
                        // E0.0  [82] (🢮..🣿)    <reserved-1F8AE>..<reserved-1F8FF>
                        if (0x1f8ae <= code && code <= 0x1f8ff) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    } else {
                        // E13.0  [1] (🤌)       pinched fingers
                        // E12.0  [3] (🤍..🤏)    white heart..pinching hand
                        // E1.0   [9] (🤐..🤘)    zipper-mouth face..sign of the horns
                        // E3.0   [6] (🤙..🤞)    call me hand..crossed fingers
                        // E5.0   [1] (🤟)       love-you gesture
                        // E3.0   [8] (🤠..🤧)    cowboy hat face..sneezing face
                        // E5.0   [8] (🤨..🤯)    face with raised eyebrow..exploding head
                        // E3.0   [1] (🤰)       pregnant woman
                        // E5.0   [2] (🤱..🤲)    breast-feeding..palms up together
                        // E3.0   [8] (🤳..🤺)    selfie..person fencing
                        if (0x1f90c <= code && code <= 0x1f93a) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                } else {
                    if (code < 0x1f947) {
                        // E3.0   [3] (🤼..🤾)    people wrestling..person playing handball
                        // E12.0  [1] (🤿)       diving mask
                        // E3.0   [6] (🥀..🥅)    wilted flower..goal net
                        if (0x1f93c <= code && code <= 0x1f945) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    } else if (code < 0x1fc00) {
                        // E3.0   [5] (🥇..🥋)    1st place medal..martial arts uniform
                        // E5.0   [1] (🥌)       curling stone
                        // E11.0  [3] (🥍..🥏)    lacrosse..flying disc
                        // E3.0  [15] (🥐..🥞)    croissant..pancakes
                        // E5.0  [13] (🥟..🥫)    dumpling..canned food
                        // E11.0  [5] (🥬..🥰)    leafy green..smiling face with hearts
                        // E12.0  [1] (🥱)       yawning face
                        // E13.0  [1] (🥲)       smiling face with tear
                        // E11.0  [4] (🥳..🥶)    partying face..cold face
                        // E13.0  [2] (🥷..🥸)    ninja..disguised face
                        // E14.0  [1] (🥹)       face holding back tears
                        // E11.0  [1] (🥺)       pleading face
                        // E12.0  [1] (🥻)       sari
                        // E11.0  [4] (🥼..🥿)    lab coat..flat shoe
                        // E1.0   [5] (🦀..🦄)    crab..unicorn
                        // E3.0  [13] (🦅..🦑)    eagle..squid
                        // E5.0   [6] (🦒..🦗)    giraffe..cricket
                        // E11.0 [11] (🦘..🦢)    kangaroo..swan
                        // E13.0  [2] (🦣..🦤)    mammoth..dodo
                        // E12.0  [6] (🦥..🦪)    sloth..oyster
                        // E13.0  [3] (🦫..🦭)    beaver..seal
                        // E12.0  [2] (🦮..🦯)    guide dog..white cane
                        // E11.0 [10] (🦰..🦹)    red hair..supervillain
                        // E12.0  [6] (🦺..🦿)    safety vest..mechanical leg
                        // E1.0   [1] (🧀)       cheese wedge
                        // E11.0  [2] (🧁..🧂)    cupcake..salt
                        // E12.0  [8] (🧃..🧊)    beverage box..ice
                        // E13.0  [1] (🧋)       bubble tea
                        // E14.0  [1] (🧌)       troll
                        // E12.0  [3] (🧍..🧏)    person standing..deaf person
                        // E5.0  [23] (🧐..🧦)    face with monocle..socks
                        // E11.0 [25] (🧧..🧿)    red envelope..nazar amulet
                        // E0.0 [112] (🨀..🩯)    NEUTRAL CHESS KING..<reserved-1FA6F>
                        // E12.0  [4] (🩰..🩳)    ballet shoes..shorts
                        // E13.0  [1] (🩴)       thong sandal
                        // E15.0  [3] (🩵..🩷)    light blue heart..pink heart
                        // E12.0  [3] (🩸..🩺)    drop of blood..stethoscope
                        // E14.0  [2] (🩻..🩼)    x-ray..crutch
                        // E0.0   [3] (🩽..🩿)    <reserved-1FA7D>..<reserved-1FA7F>
                        // E12.0  [3] (🪀..🪂)    yo-yo..parachute
                        // E13.0  [4] (🪃..🪆)    boomerang..nesting dolls
                        // E15.0  [2] (🪇..🪈)    maracas..flute
                        // E0.0   [7] (🪉..🪏)    <reserved-1FA89>..<reserved-1FA8F>
                        // E12.0  [6] (🪐..🪕)    ringed planet..banjo
                        // E13.0 [19] (🪖..🪨)    military helmet..rock
                        // E14.0  [4] (🪩..🪬)    mirror ball..hamsa
                        // E15.0  [3] (🪭..🪯)    folding hand fan..khanda
                        // E13.0  [7] (🪰..🪶)    fly..feather
                        // E14.0  [4] (🪷..🪺)    lotus..nest with eggs
                        // E15.0  [3] (🪻..🪽)    hyacinth..wing
                        // E0.0   [1] (🪾)       <reserved-1FABE>
                        // E15.0  [1] (🪿)       goose
                        // E13.0  [3] (🫀..🫂)    anatomical heart..people hugging
                        // E14.0  [3] (🫃..🫅)    pregnant man..person with crown
                        // E0.0   [8] (🫆..🫍)    <reserved-1FAC6>..<reserved-1FACD>
                        // E15.0  [2] (🫎..🫏)    moose..donkey
                        // E13.0  [7] (🫐..🫖)    blueberries..teapot
                        // E14.0  [3] (🫗..🫙)    pouring liquid..jar
                        // E15.0  [2] (🫚..🫛)    ginger root..pea pod
                        // E0.0   [4] (🫜..🫟)    <reserved-1FADC>..<reserved-1FADF>
                        // E14.0  [8] (🫠..🫧)    melting face..bubbles
                        // E15.0  [1] (🫨)       shaking face
                        // E0.0   [7] (🫩..🫯)    <reserved-1FAE9>..<reserved-1FAEF>
                        // E14.0  [7] (🫰..🫶)    hand with index finger and thumb crossed..heart hands
                        // E15.0  [2] (🫷..🫸)    leftwards pushing hand..rightwards pushing hand
                        // E0.0   [7] (🫹..🫿)    <reserved-1FAF9>..<reserved-1FAFF>
                        if (0x1f947 <= code && code <= 0x1faff) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    } else {
                        // E0.0[1022] (🰀..🿽)    <reserved-1FC00>..<reserved-1FFFD>
                        if (0x1fc00 <= code && code <= 0x1fffd) return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                }
            }
        }
        // unlisted code points are treated as a break property of "Other"
        return boundaries_1.CLUSTER_BREAK.OTHER;
    }
}
exports.default = Graphemer;

},{"c66f707714d0a681":"d794D","cf456655d60f0dc1":"1npqL","4da0ff3200da4614":"9NWTp"}],"d794D":[function(require,module,exports,__globalThis) {
"use strict";
/**
 * The Grapheme_Cluster_Break property value
 * @see https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EXTENDED_PICTOGRAPHIC = exports.CLUSTER_BREAK = void 0;
var CLUSTER_BREAK;
(function(CLUSTER_BREAK) {
    CLUSTER_BREAK[CLUSTER_BREAK["CR"] = 0] = "CR";
    CLUSTER_BREAK[CLUSTER_BREAK["LF"] = 1] = "LF";
    CLUSTER_BREAK[CLUSTER_BREAK["CONTROL"] = 2] = "CONTROL";
    CLUSTER_BREAK[CLUSTER_BREAK["EXTEND"] = 3] = "EXTEND";
    CLUSTER_BREAK[CLUSTER_BREAK["REGIONAL_INDICATOR"] = 4] = "REGIONAL_INDICATOR";
    CLUSTER_BREAK[CLUSTER_BREAK["SPACINGMARK"] = 5] = "SPACINGMARK";
    CLUSTER_BREAK[CLUSTER_BREAK["L"] = 6] = "L";
    CLUSTER_BREAK[CLUSTER_BREAK["V"] = 7] = "V";
    CLUSTER_BREAK[CLUSTER_BREAK["T"] = 8] = "T";
    CLUSTER_BREAK[CLUSTER_BREAK["LV"] = 9] = "LV";
    CLUSTER_BREAK[CLUSTER_BREAK["LVT"] = 10] = "LVT";
    CLUSTER_BREAK[CLUSTER_BREAK["OTHER"] = 11] = "OTHER";
    CLUSTER_BREAK[CLUSTER_BREAK["PREPEND"] = 12] = "PREPEND";
    CLUSTER_BREAK[CLUSTER_BREAK["E_BASE"] = 13] = "E_BASE";
    CLUSTER_BREAK[CLUSTER_BREAK["E_MODIFIER"] = 14] = "E_MODIFIER";
    CLUSTER_BREAK[CLUSTER_BREAK["ZWJ"] = 15] = "ZWJ";
    CLUSTER_BREAK[CLUSTER_BREAK["GLUE_AFTER_ZWJ"] = 16] = "GLUE_AFTER_ZWJ";
    CLUSTER_BREAK[CLUSTER_BREAK["E_BASE_GAZ"] = 17] = "E_BASE_GAZ";
})(CLUSTER_BREAK = exports.CLUSTER_BREAK || (exports.CLUSTER_BREAK = {}));
/**
 * The Emoji character property is an extension of UCD but shares the same namespace and structure
 * @see http://www.unicode.org/reports/tr51/tr51-14.html#Emoji_Properties_and_Data_Files
 *
 * Here we model Extended_Pictograhpic only to implement UAX #29 GB11
 * \p{Extended_Pictographic} Extend* ZWJ	×	\p{Extended_Pictographic}
 *
 * The Emoji character property should not be mixed with Grapheme_Cluster_Break since they are not exclusive
 */ exports.EXTENDED_PICTOGRAPHIC = 101;

},{}],"1npqL":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const boundaries_1 = require("97baa04773ad09d4");
// BreakTypes
// @type {BreakType}
const NotBreak = 0;
const BreakStart = 1;
const Break = 2;
const BreakLastRegional = 3;
const BreakPenultimateRegional = 4;
class GraphemerHelper {
    /**
     * Check if the the character at the position {pos} of the string is surrogate
     * @param str {string}
     * @param pos {number}
     * @returns {boolean}
     */ static isSurrogate(str, pos) {
        return 0xd800 <= str.charCodeAt(pos) && str.charCodeAt(pos) <= 0xdbff && 0xdc00 <= str.charCodeAt(pos + 1) && str.charCodeAt(pos + 1) <= 0xdfff;
    }
    /**
     * The String.prototype.codePointAt polyfill
     * Private function, gets a Unicode code point from a JavaScript UTF-16 string
     * handling surrogate pairs appropriately
     * @param str {string}
     * @param idx {number}
     * @returns {number}
     */ static codePointAt(str, idx) {
        if (idx === undefined) idx = 0;
        const code = str.charCodeAt(idx);
        // if a high surrogate
        if (0xd800 <= code && code <= 0xdbff && idx < str.length - 1) {
            const hi = code;
            const low = str.charCodeAt(idx + 1);
            if (0xdc00 <= low && low <= 0xdfff) return (hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000;
            return hi;
        }
        // if a low surrogate
        if (0xdc00 <= code && code <= 0xdfff && idx >= 1) {
            const hi = str.charCodeAt(idx - 1);
            const low = code;
            if (0xd800 <= hi && hi <= 0xdbff) return (hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000;
            return low;
        }
        // just return the char if an unmatched surrogate half or a
        // single-char codepoint
        return code;
    }
    //
    /**
     * Private function, returns whether a break is allowed between the two given grapheme breaking classes
     * Implemented the UAX #29 3.1.1 Grapheme Cluster Boundary Rules on extended grapheme clusters
     * @param start {number}
     * @param mid {Array<number>}
     * @param end {number}
     * @param startEmoji {number}
     * @param midEmoji {Array<number>}
     * @param endEmoji {number}
     * @returns {number}
     */ static shouldBreak(start, mid, end, startEmoji, midEmoji, endEmoji) {
        const all = [
            start
        ].concat(mid).concat([
            end
        ]);
        const allEmoji = [
            startEmoji
        ].concat(midEmoji).concat([
            endEmoji
        ]);
        const previous = all[all.length - 2];
        const next = end;
        const nextEmoji = endEmoji;
        // Lookahead terminator for:
        // GB12. ^ (RI RI)* RI ? RI
        // GB13. [^RI] (RI RI)* RI ? RI
        const rIIndex = all.lastIndexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR);
        if (rIIndex > 0 && all.slice(1, rIIndex).every(function(c) {
            return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
        }) && [
            boundaries_1.CLUSTER_BREAK.PREPEND,
            boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR
        ].indexOf(previous) === -1) {
            if (all.filter(function(c) {
                return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
            }).length % 2 === 1) return BreakLastRegional;
            else return BreakPenultimateRegional;
        }
        // GB3. CR × LF
        if (previous === boundaries_1.CLUSTER_BREAK.CR && next === boundaries_1.CLUSTER_BREAK.LF) return NotBreak;
        else if (previous === boundaries_1.CLUSTER_BREAK.CONTROL || previous === boundaries_1.CLUSTER_BREAK.CR || previous === boundaries_1.CLUSTER_BREAK.LF) return BreakStart;
        else if (next === boundaries_1.CLUSTER_BREAK.CONTROL || next === boundaries_1.CLUSTER_BREAK.CR || next === boundaries_1.CLUSTER_BREAK.LF) return BreakStart;
        else if (previous === boundaries_1.CLUSTER_BREAK.L && (next === boundaries_1.CLUSTER_BREAK.L || next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.LV || next === boundaries_1.CLUSTER_BREAK.LVT)) return NotBreak;
        else if ((previous === boundaries_1.CLUSTER_BREAK.LV || previous === boundaries_1.CLUSTER_BREAK.V) && (next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.T)) return NotBreak;
        else if ((previous === boundaries_1.CLUSTER_BREAK.LVT || previous === boundaries_1.CLUSTER_BREAK.T) && next === boundaries_1.CLUSTER_BREAK.T) return NotBreak;
        else if (next === boundaries_1.CLUSTER_BREAK.EXTEND || next === boundaries_1.CLUSTER_BREAK.ZWJ) return NotBreak;
        else if (next === boundaries_1.CLUSTER_BREAK.SPACINGMARK) return NotBreak;
        else if (previous === boundaries_1.CLUSTER_BREAK.PREPEND) return NotBreak;
        // GB11. \p{Extended_Pictographic} Extend* ZWJ × \p{Extended_Pictographic}
        const previousNonExtendIndex = allEmoji.slice(0, -1).lastIndexOf(boundaries_1.EXTENDED_PICTOGRAPHIC);
        if (previousNonExtendIndex !== -1 && allEmoji[previousNonExtendIndex] === boundaries_1.EXTENDED_PICTOGRAPHIC && all.slice(previousNonExtendIndex + 1, -2).every(function(c) {
            return c === boundaries_1.CLUSTER_BREAK.EXTEND;
        }) && previous === boundaries_1.CLUSTER_BREAK.ZWJ && nextEmoji === boundaries_1.EXTENDED_PICTOGRAPHIC) return NotBreak;
        // GB12. ^ (RI RI)* RI × RI
        // GB13. [^RI] (RI RI)* RI × RI
        if (mid.indexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) !== -1) return Break;
        if (previous === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR && next === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) return NotBreak;
        // GB999. Any ? Any
        return BreakStart;
    }
}
exports.default = GraphemerHelper;

},{"97baa04773ad09d4":"d794D"}],"9NWTp":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * GraphemerIterator
 *
 * Takes a string and a "BreakHandler" method during initialisation
 * and creates an iterable object that returns individual graphemes.
 *
 * @param str {string}
 * @return GraphemerIterator
 */ class GraphemerIterator {
    constructor(str, nextBreak){
        this._index = 0;
        this._str = str;
        this._nextBreak = nextBreak;
    }
    [Symbol.iterator]() {
        return this;
    }
    next() {
        let brk;
        if ((brk = this._nextBreak(this._str, this._index)) < this._str.length) {
            const value = this._str.slice(this._index, brk);
            this._index = brk;
            return {
                value: value,
                done: false
            };
        }
        if (this._index < this._str.length) {
            const value = this._str.slice(this._index);
            this._index = this._str.length;
            return {
                value: value,
                done: false
            };
        }
        return {
            value: undefined,
            done: true
        };
    }
}
exports.default = GraphemerIterator;

},{}],"tQ7sG":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.didDocument = exports.getServiceEndpoint = exports.getNotifEndpoint = exports.getFeedGenEndpoint = exports.getPdsEndpoint = exports.getSigningDidKey = exports.getVerificationMaterial = exports.getSigningKey = exports.getHandle = exports.getDid = exports.isValidDidDoc = void 0;
const zod_1 = require("32c9563ee2a78e6a");
// Parsing atproto data
// --------
const isValidDidDoc = (doc)=>{
    return exports.didDocument.safeParse(doc).success;
};
exports.isValidDidDoc = isValidDidDoc;
const getDid = (doc)=>{
    const id = doc.id;
    if (typeof id !== 'string') throw new Error('No `id` on document');
    return id;
};
exports.getDid = getDid;
const getHandle = (doc)=>{
    const aka = doc.alsoKnownAs;
    if (aka) for(let i = 0; i < aka.length; i++){
        const alias = aka[i];
        if (alias.startsWith('at://')) // strip off "at://" prefix
        return alias.slice(5);
    }
    return undefined;
};
exports.getHandle = getHandle;
// @NOTE we parse to type/publicKeyMultibase to avoid the dependency on @atproto/crypto
const getSigningKey = (doc)=>{
    return (0, exports.getVerificationMaterial)(doc, 'atproto');
};
exports.getSigningKey = getSigningKey;
const getVerificationMaterial = (doc, keyId)=>{
    // /!\ Hot path
    const key = findItemById(doc, 'verificationMethod', `#${keyId}`);
    if (!key) return undefined;
    if (!key.publicKeyMultibase) return undefined;
    return {
        type: key.type,
        publicKeyMultibase: key.publicKeyMultibase
    };
};
exports.getVerificationMaterial = getVerificationMaterial;
const getSigningDidKey = (doc)=>{
    const parsed = (0, exports.getSigningKey)(doc);
    if (!parsed) return;
    return `did:key:${parsed.publicKeyMultibase}`;
};
exports.getSigningDidKey = getSigningDidKey;
const getPdsEndpoint = (doc)=>{
    return (0, exports.getServiceEndpoint)(doc, {
        id: '#atproto_pds',
        type: 'AtprotoPersonalDataServer'
    });
};
exports.getPdsEndpoint = getPdsEndpoint;
const getFeedGenEndpoint = (doc)=>{
    return (0, exports.getServiceEndpoint)(doc, {
        id: '#bsky_fg',
        type: 'BskyFeedGenerator'
    });
};
exports.getFeedGenEndpoint = getFeedGenEndpoint;
const getNotifEndpoint = (doc)=>{
    return (0, exports.getServiceEndpoint)(doc, {
        id: '#bsky_notif',
        type: 'BskyNotificationService'
    });
};
exports.getNotifEndpoint = getNotifEndpoint;
const getServiceEndpoint = (doc, opts)=>{
    // /!\ Hot path
    const service = findItemById(doc, 'service', opts.id);
    if (!service) return undefined;
    if (opts.type && service.type !== opts.type) return undefined;
    if (typeof service.serviceEndpoint !== 'string') return undefined;
    return validateUrl(service.serviceEndpoint);
};
exports.getServiceEndpoint = getServiceEndpoint;
function findItemById(doc, type, id) {
    // /!\ Hot path
    const items = doc[type];
    if (items) for(let i = 0; i < items.length; i++){
        const item = items[i];
        const itemId = item.id;
        if (itemId[0] === '#' ? itemId === id : itemId.length === doc.id.length + id.length && itemId[doc.id.length] === '#' && itemId.endsWith(id) && itemId.startsWith(doc.id) // <== We could probably skip this check
        ) return item;
    }
    return undefined;
}
// Check protocol and hostname to prevent potential SSRF
const validateUrl = (urlStr)=>{
    if (!urlStr.startsWith('http://') && !urlStr.startsWith('https://')) return undefined;
    if (!canParseUrl(urlStr)) return undefined;
    return urlStr;
};
const canParseUrl = URL.canParse ?? // URL.canParse is not available in Node.js < 18.17.0
((urlStr)=>{
    try {
        new URL(urlStr);
        return true;
    } catch  {
        return false;
    }
});
// Types
// --------
const verificationMethod = zod_1.z.object({
    id: zod_1.z.string(),
    type: zod_1.z.string(),
    controller: zod_1.z.string(),
    publicKeyMultibase: zod_1.z.string().optional()
});
const service = zod_1.z.object({
    id: zod_1.z.string(),
    type: zod_1.z.string(),
    serviceEndpoint: zod_1.z.union([
        zod_1.z.string(),
        zod_1.z.record(zod_1.z.unknown())
    ])
});
exports.didDocument = zod_1.z.object({
    id: zod_1.z.string(),
    alsoKnownAs: zod_1.z.array(zod_1.z.string()).optional(),
    verificationMethod: zod_1.z.array(verificationMethod).optional(),
    service: zod_1.z.array(service).optional()
});

},{"32c9563ee2a78e6a":"gcE23"}],"30rmL":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function() {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o) {
            var ar = [];
            for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
            for(var k = ownKeys(mod), i = 0; i < k.length; i++)if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validate = validate;
const cid_1 = require("8c864103eb4f3f43");
const common_web_1 = require("e0f2abf958444998");
const types_1 = require("e88255c23c42881b");
const formats = __importStar(require("59f38039bc8d4b7e"));
function validate(lexicons, path, def, value) {
    switch(def.type){
        case 'boolean':
            return boolean(lexicons, path, def, value);
        case 'integer':
            return integer(lexicons, path, def, value);
        case 'string':
            return string(lexicons, path, def, value);
        case 'bytes':
            return bytes(lexicons, path, def, value);
        case 'cid-link':
            return cidLink(lexicons, path, def, value);
        case 'unknown':
            return unknown(lexicons, path, def, value);
        default:
            return {
                success: false,
                error: new types_1.ValidationError(`Unexpected lexicon type: ${def.type}`)
            };
    }
}
function boolean(lexicons, path, def, value) {
    def;
    // type
    const type = typeof value;
    if (type === 'undefined') {
        if (typeof def.default === 'boolean') return {
            success: true,
            value: def.default
        };
        return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a boolean`)
        };
    } else if (type !== 'boolean') return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a boolean`)
    };
    // const
    if (typeof def.const === 'boolean') {
        if (value !== def.const) return {
            success: false,
            error: new types_1.ValidationError(`${path} must be ${def.const}`)
        };
    }
    return {
        success: true,
        value
    };
}
function integer(lexicons, path, def, value) {
    def;
    // type
    const type = typeof value;
    if (type === 'undefined') {
        if (typeof def.default === 'number') return {
            success: true,
            value: def.default
        };
        return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an integer`)
        };
    } else if (!Number.isInteger(value)) return {
        success: false,
        error: new types_1.ValidationError(`${path} must be an integer`)
    };
    // const
    if (typeof def.const === 'number') {
        if (value !== def.const) return {
            success: false,
            error: new types_1.ValidationError(`${path} must be ${def.const}`)
        };
    }
    // enum
    if (Array.isArray(def.enum)) {
        if (!def.enum.includes(value)) return {
            success: false,
            error: new types_1.ValidationError(`${path} must be one of (${def.enum.join('|')})`)
        };
    }
    // maximum
    if (typeof def.maximum === 'number') {
        if (value > def.maximum) return {
            success: false,
            error: new types_1.ValidationError(`${path} can not be greater than ${def.maximum}`)
        };
    }
    // minimum
    if (typeof def.minimum === 'number') {
        if (value < def.minimum) return {
            success: false,
            error: new types_1.ValidationError(`${path} can not be less than ${def.minimum}`)
        };
    }
    return {
        success: true,
        value
    };
}
function string(lexicons, path, def, value) {
    def;
    // type
    if (typeof value === 'undefined') {
        if (typeof def.default === 'string') return {
            success: true,
            value: def.default
        };
        return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a string`)
        };
    } else if (typeof value !== 'string') return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a string`)
    };
    // const
    if (typeof def.const === 'string') {
        if (value !== def.const) return {
            success: false,
            error: new types_1.ValidationError(`${path} must be ${def.const}`)
        };
    }
    // enum
    if (Array.isArray(def.enum)) {
        if (!def.enum.includes(value)) return {
            success: false,
            error: new types_1.ValidationError(`${path} must be one of (${def.enum.join('|')})`)
        };
    }
    // maxLength and minLength
    if (typeof def.minLength === 'number' || typeof def.maxLength === 'number') {
        // If the JavaScript string length * 3 is below the maximum limit,
        // its UTF8 length (which <= .length * 3) will also be below.
        if (typeof def.minLength === 'number' && value.length * 3 < def.minLength) return {
            success: false,
            error: new types_1.ValidationError(`${path} must not be shorter than ${def.minLength} characters`)
        };
        // If the JavaScript string length * 3 is within the maximum limit,
        // its UTF8 length (which <= .length * 3) will also be within.
        // When there's no minimal length, this lets us skip the UTF8 length check.
        let canSkipUtf8LenChecks = false;
        if (typeof def.minLength === 'undefined' && typeof def.maxLength === 'number' && value.length * 3 <= def.maxLength) canSkipUtf8LenChecks = true;
        if (!canSkipUtf8LenChecks) {
            const len = (0, common_web_1.utf8Len)(value);
            if (typeof def.maxLength === 'number') {
                if (len > def.maxLength) return {
                    success: false,
                    error: new types_1.ValidationError(`${path} must not be longer than ${def.maxLength} characters`)
                };
            }
            if (typeof def.minLength === 'number') {
                if (len < def.minLength) return {
                    success: false,
                    error: new types_1.ValidationError(`${path} must not be shorter than ${def.minLength} characters`)
                };
            }
        }
    }
    // maxGraphemes and minGraphemes
    if (typeof def.maxGraphemes === 'number' || typeof def.minGraphemes === 'number') {
        let needsMaxGraphemesCheck = false;
        let needsMinGraphemesCheck = false;
        if (typeof def.maxGraphemes === 'number') {
            if (value.length <= def.maxGraphemes) // If the JavaScript string length (UTF-16) is within the maximum limit,
            // its grapheme length (which <= .length) will also be within.
            needsMaxGraphemesCheck = false;
            else needsMaxGraphemesCheck = true;
        }
        if (typeof def.minGraphemes === 'number') {
            if (value.length < def.minGraphemes) // If the JavaScript string length (UTF-16) is below the minimal limit,
            // its grapheme length (which <= .length) will also be below.
            // Fail early.
            return {
                success: false,
                error: new types_1.ValidationError(`${path} must not be shorter than ${def.minGraphemes} graphemes`)
            };
            else needsMinGraphemesCheck = true;
        }
        if (needsMaxGraphemesCheck || needsMinGraphemesCheck) {
            const len = (0, common_web_1.graphemeLen)(value);
            if (typeof def.maxGraphemes === 'number') {
                if (len > def.maxGraphemes) return {
                    success: false,
                    error: new types_1.ValidationError(`${path} must not be longer than ${def.maxGraphemes} graphemes`)
                };
            }
            if (typeof def.minGraphemes === 'number') {
                if (len < def.minGraphemes) return {
                    success: false,
                    error: new types_1.ValidationError(`${path} must not be shorter than ${def.minGraphemes} graphemes`)
                };
            }
        }
    }
    if (typeof def.format === 'string') switch(def.format){
        case 'datetime':
            return formats.datetime(path, value);
        case 'uri':
            return formats.uri(path, value);
        case 'at-uri':
            return formats.atUri(path, value);
        case 'did':
            return formats.did(path, value);
        case 'handle':
            return formats.handle(path, value);
        case 'at-identifier':
            return formats.atIdentifier(path, value);
        case 'nsid':
            return formats.nsid(path, value);
        case 'cid':
            return formats.cid(path, value);
        case 'language':
            return formats.language(path, value);
        case 'tid':
            return formats.tid(path, value);
        case 'record-key':
            return formats.recordKey(path, value);
    }
    return {
        success: true,
        value
    };
}
function bytes(lexicons, path, def, value) {
    def;
    if (!value || !(value instanceof Uint8Array)) return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a byte array`)
    };
    // maxLength
    if (typeof def.maxLength === 'number') {
        if (value.byteLength > def.maxLength) return {
            success: false,
            error: new types_1.ValidationError(`${path} must not be larger than ${def.maxLength} bytes`)
        };
    }
    // minLength
    if (typeof def.minLength === 'number') {
        if (value.byteLength < def.minLength) return {
            success: false,
            error: new types_1.ValidationError(`${path} must not be smaller than ${def.minLength} bytes`)
        };
    }
    return {
        success: true,
        value
    };
}
function cidLink(lexicons, path, def, value) {
    if (cid_1.CID.asCID(value) === null) return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a CID`)
    };
    return {
        success: true,
        value
    };
}
function unknown(lexicons, path, def, value) {
    // type
    if (!value || typeof value !== 'object') return {
        success: false,
        error: new types_1.ValidationError(`${path} must be an object`)
    };
    return {
        success: true,
        value
    };
}

},{"8c864103eb4f3f43":"g3FxW","e0f2abf958444998":"2onrJ","e88255c23c42881b":"eGc9I","59f38039bc8d4b7e":"3eev3"}],"3eev3":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.datetime = datetime;
exports.uri = uri;
exports.atUri = atUri;
exports.did = did;
exports.handle = handle;
exports.atIdentifier = atIdentifier;
exports.nsid = nsid;
exports.cid = cid;
exports.language = language;
exports.tid = tid;
exports.recordKey = recordKey;
const iso_datestring_validator_1 = require("2a8293c4a9fbf0b4");
const cid_1 = require("6f930cfce0f92713");
const common_web_1 = require("ad05d53382c3de34");
const syntax_1 = require("1d43894ce3ea7b37");
const types_1 = require("ab3f4f6bba000233");
function datetime(path, value) {
    try {
        if (!(0, iso_datestring_validator_1.isValidISODateString)(value)) throw new Error();
    } catch  {
        return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an valid atproto datetime (both RFC-3339 and ISO-8601)`)
        };
    }
    return {
        success: true,
        value
    };
}
function uri(path, value) {
    const isUri = value.match(/^\w+:(?:\/\/)?[^\s/][^\s]*$/) !== null;
    if (!isUri) return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a uri`)
    };
    return {
        success: true,
        value
    };
}
function atUri(path, value) {
    try {
        (0, syntax_1.ensureValidAtUri)(value);
    } catch  {
        return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid at-uri`)
        };
    }
    return {
        success: true,
        value
    };
}
function did(path, value) {
    try {
        (0, syntax_1.ensureValidDid)(value);
    } catch  {
        return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid did`)
        };
    }
    return {
        success: true,
        value
    };
}
function handle(path, value) {
    try {
        (0, syntax_1.ensureValidHandle)(value);
    } catch  {
        return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid handle`)
        };
    }
    return {
        success: true,
        value
    };
}
function atIdentifier(path, value) {
    // We can discriminate based on the "did:" prefix
    if (value.startsWith('did:')) {
        const didResult = did(path, value);
        if (didResult.success) return didResult;
    } else {
        const handleResult = handle(path, value);
        if (handleResult.success) return handleResult;
    }
    return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a valid did or a handle`)
    };
}
function nsid(path, value) {
    try {
        (0, syntax_1.ensureValidNsid)(value);
    } catch  {
        return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid nsid`)
        };
    }
    return {
        success: true,
        value
    };
}
function cid(path, value) {
    try {
        cid_1.CID.parse(value);
    } catch  {
        return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a cid string`)
        };
    }
    return {
        success: true,
        value
    };
}
// The language format validates well-formed BCP 47 language tags: https://www.rfc-editor.org/info/bcp47
function language(path, value) {
    if ((0, common_web_1.validateLanguage)(value)) return {
        success: true,
        value
    };
    return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a well-formed BCP 47 language tag`)
    };
}
function tid(path, value) {
    if ((0, syntax_1.isValidTid)(value)) return {
        success: true,
        value
    };
    return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a valid TID`)
    };
}
function recordKey(path, value) {
    try {
        (0, syntax_1.ensureValidRecordKey)(value);
    } catch  {
        return {
            success: false,
            error: new types_1.ValidationError(`${path} must be a valid Record Key`)
        };
    }
    return {
        success: true,
        value
    };
}

},{"2a8293c4a9fbf0b4":"iUYOE","6f930cfce0f92713":"g3FxW","ad05d53382c3de34":"2onrJ","1d43894ce3ea7b37":"gN2Ao","ab3f4f6bba000233":"eGc9I"}],"iUYOE":[function(require,module,exports,__globalThis) {
(()=>{
    "use strict";
    var e = {
        d: (t, r)=>{
            for(var n in r)e.o(r, n) && !e.o(t, n) && Object.defineProperty(t, n, {
                enumerable: !0,
                get: r[n]
            });
        },
        o: (e, t)=>Object.prototype.hasOwnProperty.call(e, t),
        r: (e)=>{
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
                value: "Module"
            }), Object.defineProperty(e, "__esModule", {
                value: !0
            });
        }
    }, t = {};
    function r(e, t) {
        return void 0 === t && (t = "-"), new RegExp("^(?!0{4}" + t + "0{2}" + t + "0{2})((?=[0-9]{4}" + t + "(((0[^2])|1[0-2])|02(?=" + t + "(([0-1][0-9])|2[0-8])))" + t + "[0-9]{2})|(?=((([13579][26])|([2468][048])|(0[48]))0{2})|([0-9]{2}((((0|[2468])[48])|[2468][048])|([13579][26])))" + t + "02" + t + "29))([0-9]{4})" + t + "(?!((0[469])|11)" + t + "31)((0[1,3-9]|1[0-2])|(02(?!" + t + "3)))" + t + "(0[1-9]|[1-2][0-9]|3[0-1])$").test(e);
    }
    function n(e) {
        var t = /\D/.exec(e);
        return t ? t[0] : "";
    }
    function i(e, t, r) {
        void 0 === t && (t = ":"), void 0 === r && (r = !1);
        var i = new RegExp("^([0-1]|2(?=([0-3])|4" + t + "00))[0-9]" + t + "[0-5][0-9](" + t + "([0-5]|6(?=0))[0-9])?(.[0-9]{1,9})?$");
        if (!r || !/[Z+\-]/.test(e)) return i.test(e);
        if (/Z$/.test(e)) return i.test(e.replace("Z", ""));
        var o = e.includes("+"), a = e.split(/[+-]/), u = a[0], d = a[1];
        return i.test(u) && function(e, t, r) {
            return void 0 === r && (r = ":"), new RegExp(t ? "^(0(?!(2" + r + "4)|0" + r + "3)|1(?=([0-1]|2(?=" + r + "[04])|[34](?=" + r + "0))))([03469](?=" + r + "[03])|[17](?=" + r + "0)|2(?=" + r + "[04])|5(?=" + r + "[034])|8(?=" + r + "[04]))" + r + "([03](?=0)|4(?=5))[05]$" : "^(0(?=[^0])|1(?=[0-2]))([39](?=" + r + "[03])|[0-24-8](?=" + r + "00))" + r + "[03]0$").test(e);
        }(d, o, n(d));
    }
    function o(e) {
        var t = e.split("T"), o = t[0], a = t[1], u = r(o, n(o));
        if (!a) return !1;
        var d, s = (d = a.match(/([^Z+\-\d])(?=\d+\1)/), Array.isArray(d) ? d[0] : "");
        return u && i(a, s, !0);
    }
    function a(e, t) {
        return void 0 === t && (t = "-"), new RegExp("^[0-9]{4}" + t + "(0(?=[^0])|1(?=[0-2]))[0-9]$").test(e);
    }
    e.r(t), e.d(t, {
        isValidDate: ()=>r,
        isValidISODateString: ()=>o,
        isValidTime: ()=>i,
        isValidYearMonth: ()=>a
    });
    var u = exports;
    for(var d in t)u[d] = t[d];
    t.__esModule && Object.defineProperty(u, "__esModule", {
        value: !0
    });
})();

},{}],"hEfun":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function() {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o) {
            var ar = [];
            for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
            for(var k = ownKeys(mod), i = 0; i < k.length; i++)if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.params = params;
const types_1 = require("d16a403636c95f8e");
const complex_1 = require("a15245929bb00bb1");
const PrimitiveValidators = __importStar(require("75b09b1b10c2cf17"));
function params(lexicons, path, def, val) {
    // type
    const value = val && typeof val === 'object' ? val : {};
    const requiredProps = new Set(def.required ?? []);
    // properties
    let resultValue = value;
    if (typeof def.properties === 'object') for(const key in def.properties){
        const propDef = def.properties[key];
        const validated = propDef.type === 'array' ? (0, complex_1.array)(lexicons, key, propDef, value[key]) : PrimitiveValidators.validate(lexicons, key, propDef, value[key]);
        const propValue = validated.success ? validated.value : value[key];
        const propIsUndefined = typeof propValue === 'undefined';
        // Return error for bad validation, giving required rule precedence
        if (propIsUndefined && requiredProps.has(key)) return {
            success: false,
            error: new types_1.ValidationError(`${path} must have the property "${key}"`)
        };
        else if (!propIsUndefined && !validated.success) return validated;
        // Adjust value based on e.g. applied defaults, cloning shallowly if there was a changed value
        if (propValue !== value[key]) {
            if (resultValue === value) // Lazy shallow clone
            resultValue = {
                ...value
            };
            resultValue[key] = propValue;
        }
    }
    return {
        success: true,
        value: resultValue
    };
}

},{"d16a403636c95f8e":"eGc9I","a15245929bb00bb1":"gANHY","75b09b1b10c2cf17":"30rmL"}],"f2RgF":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.jsonStringToLex = exports.jsonToLex = exports.stringifyLex = exports.lexToJson = exports.ipldToLex = exports.lexToIpld = void 0;
const cid_1 = require("bfc39befb881f48d");
const common_web_1 = require("d5f0a93972cdd0e5");
const blob_refs_1 = require("4ea392b942b218ba");
// @NOTE avoiding use of check.is() here only because it makes
// these implementations slow, and they often live in hot paths.
const lexToIpld = (val)=>{
    // walk arrays
    if (Array.isArray(val)) return val.map((item)=>(0, exports.lexToIpld)(item));
    // objects
    if (val && typeof val === 'object') {
        // convert blobs, leaving the original encoding so that we don't change CIDs on re-encode
        if (val instanceof blob_refs_1.BlobRef) return val.original;
        // retain cids & bytes
        if (cid_1.CID.asCID(val) || val instanceof Uint8Array) return val;
        // walk plain objects
        const toReturn = {};
        for (const key of Object.keys(val))toReturn[key] = (0, exports.lexToIpld)(val[key]);
        return toReturn;
    }
    // pass through
    return val;
};
exports.lexToIpld = lexToIpld;
const ipldToLex = (val)=>{
    // map arrays
    if (Array.isArray(val)) return val.map((item)=>(0, exports.ipldToLex)(item));
    // objects
    if (val && typeof val === 'object') {
        // convert blobs, using hints to avoid expensive is() check
        if ((val['$type'] === 'blob' || typeof val['cid'] === 'string' && typeof val['mimeType'] === 'string') && common_web_1.check.is(val, blob_refs_1.jsonBlobRef)) return blob_refs_1.BlobRef.fromJsonRef(val);
        // retain cids, bytes
        if (cid_1.CID.asCID(val) || val instanceof Uint8Array) return val;
        // map plain objects
        const toReturn = {};
        for (const key of Object.keys(val))toReturn[key] = (0, exports.ipldToLex)(val[key]);
        return toReturn;
    }
    // pass through
    return val;
};
exports.ipldToLex = ipldToLex;
const lexToJson = (val)=>{
    return (0, common_web_1.ipldToJson)((0, exports.lexToIpld)(val));
};
exports.lexToJson = lexToJson;
const stringifyLex = (val)=>{
    return JSON.stringify((0, exports.lexToJson)(val));
};
exports.stringifyLex = stringifyLex;
const jsonToLex = (val)=>{
    return (0, exports.ipldToLex)((0, common_web_1.jsonToIpld)(val));
};
exports.jsonToLex = jsonToLex;
const jsonStringToLex = (val)=>{
    return (0, exports.jsonToLex)(JSON.parse(val));
};
exports.jsonStringToLex = jsonStringToLex;

},{"bfc39befb881f48d":"g3FxW","d5f0a93972cdd0e5":"2onrJ","4ea392b942b218ba":"1vvpZ"}],"b1XzS":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ids = exports.lexicons = exports.schemas = exports.schemaDict = void 0;
exports.validate = validate;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const lexicon_1 = require("ff9c5300bb49accc");
const util_js_1 = require("f3d2814a0b4c0033");
exports.schemaDict = {
    ComAtprotoAdminDefs: {
        lexicon: 1,
        id: 'com.atproto.admin.defs',
        defs: {
            statusAttr: {
                type: 'object',
                required: [
                    'applied'
                ],
                properties: {
                    applied: {
                        type: 'boolean'
                    },
                    ref: {
                        type: 'string'
                    }
                }
            },
            accountView: {
                type: 'object',
                required: [
                    'did',
                    'handle',
                    'indexedAt'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    },
                    email: {
                        type: 'string'
                    },
                    relatedRecords: {
                        type: 'array',
                        items: {
                            type: 'unknown'
                        }
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    invitedBy: {
                        type: 'ref',
                        ref: 'lex:com.atproto.server.defs#inviteCode'
                    },
                    invites: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.server.defs#inviteCode'
                        }
                    },
                    invitesDisabled: {
                        type: 'boolean'
                    },
                    emailConfirmedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    inviteNote: {
                        type: 'string'
                    },
                    deactivatedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    threatSignatures: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.admin.defs#threatSignature'
                        }
                    }
                }
            },
            repoRef: {
                type: 'object',
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    }
                }
            },
            repoBlobRef: {
                type: 'object',
                required: [
                    'did',
                    'cid'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    recordUri: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            threatSignature: {
                type: 'object',
                required: [
                    'property',
                    'value'
                ],
                properties: {
                    property: {
                        type: 'string'
                    },
                    value: {
                        type: 'string'
                    }
                }
            }
        }
    },
    ComAtprotoAdminDeleteAccount: {
        lexicon: 1,
        id: 'com.atproto.admin.deleteAccount',
        defs: {
            main: {
                type: 'procedure',
                description: 'Delete a user account as an administrator.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminDisableAccountInvites: {
        lexicon: 1,
        id: 'com.atproto.admin.disableAccountInvites',
        defs: {
            main: {
                type: 'procedure',
                description: 'Disable an account from receiving new invite codes, but does not invalidate existing codes.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'account'
                        ],
                        properties: {
                            account: {
                                type: 'string',
                                format: 'did'
                            },
                            note: {
                                type: 'string',
                                description: 'Optional reason for disabled invites.'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminDisableInviteCodes: {
        lexicon: 1,
        id: 'com.atproto.admin.disableInviteCodes',
        defs: {
            main: {
                type: 'procedure',
                description: 'Disable some set of codes and/or all codes associated with a set of users.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {
                            codes: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                }
                            },
                            accounts: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminEnableAccountInvites: {
        lexicon: 1,
        id: 'com.atproto.admin.enableAccountInvites',
        defs: {
            main: {
                type: 'procedure',
                description: "Re-enable an account's ability to receive invite codes.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'account'
                        ],
                        properties: {
                            account: {
                                type: 'string',
                                format: 'did'
                            },
                            note: {
                                type: 'string',
                                description: 'Optional reason for enabled invites.'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminGetAccountInfo: {
        lexicon: 1,
        id: 'com.atproto.admin.getAccountInfo',
        defs: {
            main: {
                type: 'query',
                description: 'Get details about an account.',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:com.atproto.admin.defs#accountView'
                    }
                }
            }
        }
    },
    ComAtprotoAdminGetAccountInfos: {
        lexicon: 1,
        id: 'com.atproto.admin.getAccountInfos',
        defs: {
            main: {
                type: 'query',
                description: 'Get details about some accounts.',
                parameters: {
                    type: 'params',
                    required: [
                        'dids'
                    ],
                    properties: {
                        dids: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'infos'
                        ],
                        properties: {
                            infos: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.admin.defs#accountView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminGetInviteCodes: {
        lexicon: 1,
        id: 'com.atproto.admin.getInviteCodes',
        defs: {
            main: {
                type: 'query',
                description: 'Get an admin view of invite codes.',
                parameters: {
                    type: 'params',
                    properties: {
                        sort: {
                            type: 'string',
                            knownValues: [
                                'recent',
                                'usage'
                            ],
                            default: 'recent'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 500,
                            default: 100
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'codes'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            codes: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.server.defs#inviteCode'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminGetSubjectStatus: {
        lexicon: 1,
        id: 'com.atproto.admin.getSubjectStatus',
        defs: {
            main: {
                type: 'query',
                description: 'Get the service-specific admin status of a subject (account, record, or blob).',
                parameters: {
                    type: 'params',
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did'
                        },
                        uri: {
                            type: 'string',
                            format: 'at-uri'
                        },
                        blob: {
                            type: 'string',
                            format: 'cid'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'subject'
                        ],
                        properties: {
                            subject: {
                                type: 'union',
                                refs: [
                                    'lex:com.atproto.admin.defs#repoRef',
                                    'lex:com.atproto.repo.strongRef',
                                    'lex:com.atproto.admin.defs#repoBlobRef'
                                ]
                            },
                            takedown: {
                                type: 'ref',
                                ref: 'lex:com.atproto.admin.defs#statusAttr'
                            },
                            deactivated: {
                                type: 'ref',
                                ref: 'lex:com.atproto.admin.defs#statusAttr'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminSearchAccounts: {
        lexicon: 1,
        id: 'com.atproto.admin.searchAccounts',
        defs: {
            main: {
                type: 'query',
                description: 'Get list of accounts that matches your search query.',
                parameters: {
                    type: 'params',
                    properties: {
                        email: {
                            type: 'string'
                        },
                        cursor: {
                            type: 'string'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'accounts'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            accounts: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.admin.defs#accountView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminSendEmail: {
        lexicon: 1,
        id: 'com.atproto.admin.sendEmail',
        defs: {
            main: {
                type: 'procedure',
                description: "Send email to a user's account email address.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'recipientDid',
                            'content',
                            'senderDid'
                        ],
                        properties: {
                            recipientDid: {
                                type: 'string',
                                format: 'did'
                            },
                            content: {
                                type: 'string'
                            },
                            subject: {
                                type: 'string'
                            },
                            senderDid: {
                                type: 'string',
                                format: 'did'
                            },
                            comment: {
                                type: 'string',
                                description: "Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers"
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'sent'
                        ],
                        properties: {
                            sent: {
                                type: 'boolean'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminUpdateAccountEmail: {
        lexicon: 1,
        id: 'com.atproto.admin.updateAccountEmail',
        defs: {
            main: {
                type: 'procedure',
                description: "Administrative action to update an account's email.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'account',
                            'email'
                        ],
                        properties: {
                            account: {
                                type: 'string',
                                format: 'at-identifier',
                                description: 'The handle or DID of the repo.'
                            },
                            email: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminUpdateAccountHandle: {
        lexicon: 1,
        id: 'com.atproto.admin.updateAccountHandle',
        defs: {
            main: {
                type: 'procedure',
                description: "Administrative action to update an account's handle.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did',
                            'handle'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            handle: {
                                type: 'string',
                                format: 'handle'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminUpdateAccountPassword: {
        lexicon: 1,
        id: 'com.atproto.admin.updateAccountPassword',
        defs: {
            main: {
                type: 'procedure',
                description: 'Update the password for a user account as an administrator.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did',
                            'password'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            password: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminUpdateAccountSigningKey: {
        lexicon: 1,
        id: 'com.atproto.admin.updateAccountSigningKey',
        defs: {
            main: {
                type: 'procedure',
                description: "Administrative action to update an account's signing key in their Did document.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did',
                            'signingKey'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            signingKey: {
                                type: 'string',
                                format: 'did',
                                description: 'Did-key formatted public key'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoAdminUpdateSubjectStatus: {
        lexicon: 1,
        id: 'com.atproto.admin.updateSubjectStatus',
        defs: {
            main: {
                type: 'procedure',
                description: 'Update the service-specific admin status of a subject (account, record, or blob).',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'subject'
                        ],
                        properties: {
                            subject: {
                                type: 'union',
                                refs: [
                                    'lex:com.atproto.admin.defs#repoRef',
                                    'lex:com.atproto.repo.strongRef',
                                    'lex:com.atproto.admin.defs#repoBlobRef'
                                ]
                            },
                            takedown: {
                                type: 'ref',
                                ref: 'lex:com.atproto.admin.defs#statusAttr'
                            },
                            deactivated: {
                                type: 'ref',
                                ref: 'lex:com.atproto.admin.defs#statusAttr'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'subject'
                        ],
                        properties: {
                            subject: {
                                type: 'union',
                                refs: [
                                    'lex:com.atproto.admin.defs#repoRef',
                                    'lex:com.atproto.repo.strongRef',
                                    'lex:com.atproto.admin.defs#repoBlobRef'
                                ]
                            },
                            takedown: {
                                type: 'ref',
                                ref: 'lex:com.atproto.admin.defs#statusAttr'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoIdentityDefs: {
        lexicon: 1,
        id: 'com.atproto.identity.defs',
        defs: {
            identityInfo: {
                type: 'object',
                required: [
                    'did',
                    'handle',
                    'didDoc'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle',
                        description: "The validated handle of the account; or 'handle.invalid' if the handle did not bi-directionally match the DID document."
                    },
                    didDoc: {
                        type: 'unknown',
                        description: 'The complete DID document for the identity.'
                    }
                }
            }
        }
    },
    ComAtprotoIdentityGetRecommendedDidCredentials: {
        lexicon: 1,
        id: 'com.atproto.identity.getRecommendedDidCredentials',
        defs: {
            main: {
                type: 'query',
                description: 'Describe the credentials that should be included in the DID doc of an account that is migrating to this service.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {
                            rotationKeys: {
                                description: 'Recommended rotation keys for PLC dids. Should be undefined (or ignored) for did:webs.',
                                type: 'array',
                                items: {
                                    type: 'string'
                                }
                            },
                            alsoKnownAs: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                }
                            },
                            verificationMethods: {
                                type: 'unknown'
                            },
                            services: {
                                type: 'unknown'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoIdentityRefreshIdentity: {
        lexicon: 1,
        id: 'com.atproto.identity.refreshIdentity',
        defs: {
            main: {
                type: 'procedure',
                description: 'Request that the server re-resolve an identity (DID and handle). The server may ignore this request, or require authentication, depending on the role, implementation, and policy of the server.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'identifier'
                        ],
                        properties: {
                            identifier: {
                                type: 'string',
                                format: 'at-identifier'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:com.atproto.identity.defs#identityInfo'
                    }
                },
                errors: [
                    {
                        name: 'HandleNotFound',
                        description: 'The resolution process confirmed that the handle does not resolve to any DID.'
                    },
                    {
                        name: 'DidNotFound',
                        description: 'The DID resolution process confirmed that there is no current DID.'
                    },
                    {
                        name: 'DidDeactivated',
                        description: 'The DID previously existed, but has been deactivated.'
                    }
                ]
            }
        }
    },
    ComAtprotoIdentityRequestPlcOperationSignature: {
        lexicon: 1,
        id: 'com.atproto.identity.requestPlcOperationSignature',
        defs: {
            main: {
                type: 'procedure',
                description: 'Request an email with a code to in order to request a signed PLC operation. Requires Auth.'
            }
        }
    },
    ComAtprotoIdentityResolveDid: {
        lexicon: 1,
        id: 'com.atproto.identity.resolveDid',
        defs: {
            main: {
                type: 'query',
                description: 'Resolves DID to DID document. Does not bi-directionally verify handle.',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'DID to resolve.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'didDoc'
                        ],
                        properties: {
                            didDoc: {
                                type: 'unknown',
                                description: 'The complete DID document for the identity.'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'DidNotFound',
                        description: 'The DID resolution process confirmed that there is no current DID.'
                    },
                    {
                        name: 'DidDeactivated',
                        description: 'The DID previously existed, but has been deactivated.'
                    }
                ]
            }
        }
    },
    ComAtprotoIdentityResolveHandle: {
        lexicon: 1,
        id: 'com.atproto.identity.resolveHandle',
        defs: {
            main: {
                type: 'query',
                description: 'Resolves an atproto handle (hostname) to a DID. Does not necessarily bi-directionally verify against the the DID document.',
                parameters: {
                    type: 'params',
                    required: [
                        'handle'
                    ],
                    properties: {
                        handle: {
                            type: 'string',
                            format: 'handle',
                            description: 'The handle to resolve.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'HandleNotFound',
                        description: 'The resolution process confirmed that the handle does not resolve to any DID.'
                    }
                ]
            }
        }
    },
    ComAtprotoIdentityResolveIdentity: {
        lexicon: 1,
        id: 'com.atproto.identity.resolveIdentity',
        defs: {
            main: {
                type: 'query',
                description: 'Resolves an identity (DID or Handle) to a full identity (DID document and verified handle).',
                parameters: {
                    type: 'params',
                    required: [
                        'identifier'
                    ],
                    properties: {
                        identifier: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'Handle or DID to resolve.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:com.atproto.identity.defs#identityInfo'
                    }
                },
                errors: [
                    {
                        name: 'HandleNotFound',
                        description: 'The resolution process confirmed that the handle does not resolve to any DID.'
                    },
                    {
                        name: 'DidNotFound',
                        description: 'The DID resolution process confirmed that there is no current DID.'
                    },
                    {
                        name: 'DidDeactivated',
                        description: 'The DID previously existed, but has been deactivated.'
                    }
                ]
            }
        }
    },
    ComAtprotoIdentitySignPlcOperation: {
        lexicon: 1,
        id: 'com.atproto.identity.signPlcOperation',
        defs: {
            main: {
                type: 'procedure',
                description: "Signs a PLC operation to update some value(s) in the requesting DID's document.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {
                            token: {
                                description: 'A token received through com.atproto.identity.requestPlcOperationSignature',
                                type: 'string'
                            },
                            rotationKeys: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                }
                            },
                            alsoKnownAs: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                }
                            },
                            verificationMethods: {
                                type: 'unknown'
                            },
                            services: {
                                type: 'unknown'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'operation'
                        ],
                        properties: {
                            operation: {
                                type: 'unknown',
                                description: 'A signed DID PLC operation.'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoIdentitySubmitPlcOperation: {
        lexicon: 1,
        id: 'com.atproto.identity.submitPlcOperation',
        defs: {
            main: {
                type: 'procedure',
                description: "Validates a PLC operation to ensure that it doesn't violate a service's constraints or get the identity into a bad state, then submits it to the PLC registry",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'operation'
                        ],
                        properties: {
                            operation: {
                                type: 'unknown'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoIdentityUpdateHandle: {
        lexicon: 1,
        id: 'com.atproto.identity.updateHandle',
        defs: {
            main: {
                type: 'procedure',
                description: "Updates the current account's handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'handle'
                        ],
                        properties: {
                            handle: {
                                type: 'string',
                                format: 'handle',
                                description: 'The new handle.'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoLabelDefs: {
        lexicon: 1,
        id: 'com.atproto.label.defs',
        defs: {
            label: {
                type: 'object',
                description: 'Metadata tag on an atproto resource (eg, repo or record).',
                required: [
                    'src',
                    'uri',
                    'val',
                    'cts'
                ],
                properties: {
                    ver: {
                        type: 'integer',
                        description: 'The AT Protocol version of the label object.'
                    },
                    src: {
                        type: 'string',
                        format: 'did',
                        description: 'DID of the actor who created this label.'
                    },
                    uri: {
                        type: 'string',
                        format: 'uri',
                        description: 'AT URI of the record, repository (account), or other resource that this label applies to.'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid',
                        description: "Optionally, CID specifying the specific version of 'uri' resource this label applies to."
                    },
                    val: {
                        type: 'string',
                        maxLength: 128,
                        description: 'The short string name of the value or type of this label.'
                    },
                    neg: {
                        type: 'boolean',
                        description: 'If true, this is a negation label, overwriting a previous label.'
                    },
                    cts: {
                        type: 'string',
                        format: 'datetime',
                        description: 'Timestamp when this label was created.'
                    },
                    exp: {
                        type: 'string',
                        format: 'datetime',
                        description: 'Timestamp at which this label expires (no longer applies).'
                    },
                    sig: {
                        type: 'bytes',
                        description: 'Signature of dag-cbor encoded label.'
                    }
                }
            },
            selfLabels: {
                type: 'object',
                description: 'Metadata tags on an atproto record, published by the author within the record.',
                required: [
                    'values'
                ],
                properties: {
                    values: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#selfLabel'
                        },
                        maxLength: 10
                    }
                }
            },
            selfLabel: {
                type: 'object',
                description: 'Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel.',
                required: [
                    'val'
                ],
                properties: {
                    val: {
                        type: 'string',
                        maxLength: 128,
                        description: 'The short string name of the value or type of this label.'
                    }
                }
            },
            labelValueDefinition: {
                type: 'object',
                description: 'Declares a label value and its expected interpretations and behaviors.',
                required: [
                    'identifier',
                    'severity',
                    'blurs',
                    'locales'
                ],
                properties: {
                    identifier: {
                        type: 'string',
                        description: "The value of the label being defined. Must only include lowercase ascii and the '-' character ([a-z-]+).",
                        maxLength: 100,
                        maxGraphemes: 100
                    },
                    severity: {
                        type: 'string',
                        description: "How should a client visually convey this label? 'inform' means neutral and informational; 'alert' means negative and warning; 'none' means show nothing.",
                        knownValues: [
                            'inform',
                            'alert',
                            'none'
                        ]
                    },
                    blurs: {
                        type: 'string',
                        description: "What should this label hide in the UI, if applied? 'content' hides all of the target; 'media' hides the images/video/audio; 'none' hides nothing.",
                        knownValues: [
                            'content',
                            'media',
                            'none'
                        ]
                    },
                    defaultSetting: {
                        type: 'string',
                        description: 'The default setting for this label.',
                        knownValues: [
                            'ignore',
                            'warn',
                            'hide'
                        ],
                        default: 'warn'
                    },
                    adultOnly: {
                        type: 'boolean',
                        description: 'Does the user need to have adult content enabled in order to configure this label?'
                    },
                    locales: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#labelValueDefinitionStrings'
                        }
                    }
                }
            },
            labelValueDefinitionStrings: {
                type: 'object',
                description: 'Strings which describe the label in the UI, localized into a specific language.',
                required: [
                    'lang',
                    'name',
                    'description'
                ],
                properties: {
                    lang: {
                        type: 'string',
                        description: 'The code of the language these strings are written in.',
                        format: 'language'
                    },
                    name: {
                        type: 'string',
                        description: 'A short human-readable name for the label.',
                        maxGraphemes: 64,
                        maxLength: 640
                    },
                    description: {
                        type: 'string',
                        description: 'A longer description of what the label means and why it might be applied.',
                        maxGraphemes: 10000,
                        maxLength: 100000
                    }
                }
            },
            labelValue: {
                type: 'string',
                knownValues: [
                    '!hide',
                    '!no-promote',
                    '!warn',
                    '!no-unauthenticated',
                    'dmca-violation',
                    'doxxing',
                    'porn',
                    'sexual',
                    'nudity',
                    'nsfl',
                    'gore'
                ]
            }
        }
    },
    ComAtprotoLabelQueryLabels: {
        lexicon: 1,
        id: 'com.atproto.label.queryLabels',
        defs: {
            main: {
                type: 'query',
                description: 'Find labels relevant to the provided AT-URI patterns. Public endpoint for moderation services, though may return different or additional results with auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'uriPatterns'
                    ],
                    properties: {
                        uriPatterns: {
                            type: 'array',
                            items: {
                                type: 'string'
                            },
                            description: "List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI."
                        },
                        sources: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'did'
                            },
                            description: 'Optional list of label sources (DIDs) to filter on.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 250,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'labels'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            labels: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.label.defs#label'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoLabelSubscribeLabels: {
        lexicon: 1,
        id: 'com.atproto.label.subscribeLabels',
        defs: {
            main: {
                type: 'subscription',
                description: 'Subscribe to stream of labels (and negations). Public endpoint implemented by mod services. Uses same sequencing scheme as repo event stream.',
                parameters: {
                    type: 'params',
                    properties: {
                        cursor: {
                            type: 'integer',
                            description: 'The last known event seq number to backfill from.'
                        }
                    }
                },
                message: {
                    schema: {
                        type: 'union',
                        refs: [
                            'lex:com.atproto.label.subscribeLabels#labels',
                            'lex:com.atproto.label.subscribeLabels#info'
                        ]
                    }
                },
                errors: [
                    {
                        name: 'FutureCursor'
                    }
                ]
            },
            labels: {
                type: 'object',
                required: [
                    'seq',
                    'labels'
                ],
                properties: {
                    seq: {
                        type: 'integer'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    }
                }
            },
            info: {
                type: 'object',
                required: [
                    'name'
                ],
                properties: {
                    name: {
                        type: 'string',
                        knownValues: [
                            'OutdatedCursor'
                        ]
                    },
                    message: {
                        type: 'string'
                    }
                }
            }
        }
    },
    ComAtprotoLexiconSchema: {
        lexicon: 1,
        id: 'com.atproto.lexicon.schema',
        defs: {
            main: {
                type: 'record',
                description: "Representation of Lexicon schemas themselves, when published as atproto records. Note that the schema language is not defined in Lexicon; this meta schema currently only includes a single version field ('lexicon'). See the atproto specifications for description of the other expected top-level fields ('id', 'defs', etc).",
                key: 'nsid',
                record: {
                    type: 'object',
                    required: [
                        'lexicon'
                    ],
                    properties: {
                        lexicon: {
                            type: 'integer',
                            description: "Indicates the 'version' of the Lexicon language. Must be '1' for the current atproto/Lexicon schema system."
                        }
                    }
                }
            }
        }
    },
    ComAtprotoModerationCreateReport: {
        lexicon: 1,
        id: 'com.atproto.moderation.createReport',
        defs: {
            main: {
                type: 'procedure',
                description: 'Submit a moderation report regarding an atproto account or record. Implemented by moderation services (with PDS proxying), and requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'reasonType',
                            'subject'
                        ],
                        properties: {
                            reasonType: {
                                type: 'ref',
                                description: 'Indicates the broad category of violation the report is for.',
                                ref: 'lex:com.atproto.moderation.defs#reasonType'
                            },
                            reason: {
                                type: 'string',
                                maxGraphemes: 2000,
                                maxLength: 20000,
                                description: 'Additional context about the content and violation.'
                            },
                            subject: {
                                type: 'union',
                                refs: [
                                    'lex:com.atproto.admin.defs#repoRef',
                                    'lex:com.atproto.repo.strongRef'
                                ]
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'id',
                            'reasonType',
                            'subject',
                            'reportedBy',
                            'createdAt'
                        ],
                        properties: {
                            id: {
                                type: 'integer'
                            },
                            reasonType: {
                                type: 'ref',
                                ref: 'lex:com.atproto.moderation.defs#reasonType'
                            },
                            reason: {
                                type: 'string',
                                maxGraphemes: 2000,
                                maxLength: 20000
                            },
                            subject: {
                                type: 'union',
                                refs: [
                                    'lex:com.atproto.admin.defs#repoRef',
                                    'lex:com.atproto.repo.strongRef'
                                ]
                            },
                            reportedBy: {
                                type: 'string',
                                format: 'did'
                            },
                            createdAt: {
                                type: 'string',
                                format: 'datetime'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoModerationDefs: {
        lexicon: 1,
        id: 'com.atproto.moderation.defs',
        defs: {
            reasonType: {
                type: 'string',
                knownValues: [
                    'com.atproto.moderation.defs#reasonSpam',
                    'com.atproto.moderation.defs#reasonViolation',
                    'com.atproto.moderation.defs#reasonMisleading',
                    'com.atproto.moderation.defs#reasonSexual',
                    'com.atproto.moderation.defs#reasonRude',
                    'com.atproto.moderation.defs#reasonOther',
                    'com.atproto.moderation.defs#reasonAppeal'
                ]
            },
            reasonSpam: {
                type: 'token',
                description: 'Spam: frequent unwanted promotion, replies, mentions'
            },
            reasonViolation: {
                type: 'token',
                description: 'Direct violation of server rules, laws, terms of service'
            },
            reasonMisleading: {
                type: 'token',
                description: 'Misleading identity, affiliation, or content'
            },
            reasonSexual: {
                type: 'token',
                description: 'Unwanted or mislabeled sexual content'
            },
            reasonRude: {
                type: 'token',
                description: 'Rude, harassing, explicit, or otherwise unwelcoming behavior'
            },
            reasonOther: {
                type: 'token',
                description: 'Other: reports not falling under another report category'
            },
            reasonAppeal: {
                type: 'token',
                description: 'Appeal: appeal a previously taken moderation action'
            },
            subjectType: {
                type: 'string',
                description: 'Tag describing a type of subject that might be reported.',
                knownValues: [
                    'account',
                    'record',
                    'chat'
                ]
            }
        }
    },
    ComAtprotoRepoApplyWrites: {
        lexicon: 1,
        id: 'com.atproto.repo.applyWrites',
        defs: {
            main: {
                type: 'procedure',
                description: 'Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'repo',
                            'writes'
                        ],
                        properties: {
                            repo: {
                                type: 'string',
                                format: 'at-identifier',
                                description: 'The handle or DID of the repo (aka, current account).'
                            },
                            validate: {
                                type: 'boolean',
                                description: "Can be set to 'false' to skip Lexicon schema validation of record data across all operations, 'true' to require it, or leave unset to validate only for known Lexicons."
                            },
                            writes: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:com.atproto.repo.applyWrites#create',
                                        'lex:com.atproto.repo.applyWrites#update',
                                        'lex:com.atproto.repo.applyWrites#delete'
                                    ],
                                    closed: true
                                }
                            },
                            swapCommit: {
                                type: 'string',
                                description: 'If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.',
                                format: 'cid'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [],
                        properties: {
                            commit: {
                                type: 'ref',
                                ref: 'lex:com.atproto.repo.defs#commitMeta'
                            },
                            results: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:com.atproto.repo.applyWrites#createResult',
                                        'lex:com.atproto.repo.applyWrites#updateResult',
                                        'lex:com.atproto.repo.applyWrites#deleteResult'
                                    ],
                                    closed: true
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'InvalidSwap',
                        description: "Indicates that the 'swapCommit' parameter did not match current commit."
                    }
                ]
            },
            create: {
                type: 'object',
                description: 'Operation which creates a new record.',
                required: [
                    'collection',
                    'value'
                ],
                properties: {
                    collection: {
                        type: 'string',
                        format: 'nsid'
                    },
                    rkey: {
                        type: 'string',
                        maxLength: 512,
                        format: 'record-key',
                        description: 'NOTE: maxLength is redundant with record-key format. Keeping it temporarily to ensure backwards compatibility.'
                    },
                    value: {
                        type: 'unknown'
                    }
                }
            },
            update: {
                type: 'object',
                description: 'Operation which updates an existing record.',
                required: [
                    'collection',
                    'rkey',
                    'value'
                ],
                properties: {
                    collection: {
                        type: 'string',
                        format: 'nsid'
                    },
                    rkey: {
                        type: 'string',
                        format: 'record-key'
                    },
                    value: {
                        type: 'unknown'
                    }
                }
            },
            delete: {
                type: 'object',
                description: 'Operation which deletes an existing record.',
                required: [
                    'collection',
                    'rkey'
                ],
                properties: {
                    collection: {
                        type: 'string',
                        format: 'nsid'
                    },
                    rkey: {
                        type: 'string',
                        format: 'record-key'
                    }
                }
            },
            createResult: {
                type: 'object',
                required: [
                    'uri',
                    'cid'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    validationStatus: {
                        type: 'string',
                        knownValues: [
                            'valid',
                            'unknown'
                        ]
                    }
                }
            },
            updateResult: {
                type: 'object',
                required: [
                    'uri',
                    'cid'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    validationStatus: {
                        type: 'string',
                        knownValues: [
                            'valid',
                            'unknown'
                        ]
                    }
                }
            },
            deleteResult: {
                type: 'object',
                required: [],
                properties: {}
            }
        }
    },
    ComAtprotoRepoCreateRecord: {
        lexicon: 1,
        id: 'com.atproto.repo.createRecord',
        defs: {
            main: {
                type: 'procedure',
                description: 'Create a single new repository record. Requires auth, implemented by PDS.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'repo',
                            'collection',
                            'record'
                        ],
                        properties: {
                            repo: {
                                type: 'string',
                                format: 'at-identifier',
                                description: 'The handle or DID of the repo (aka, current account).'
                            },
                            collection: {
                                type: 'string',
                                format: 'nsid',
                                description: 'The NSID of the record collection.'
                            },
                            rkey: {
                                type: 'string',
                                format: 'record-key',
                                description: 'The Record Key.',
                                maxLength: 512
                            },
                            validate: {
                                type: 'boolean',
                                description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons."
                            },
                            record: {
                                type: 'unknown',
                                description: 'The record itself. Must contain a $type field.'
                            },
                            swapCommit: {
                                type: 'string',
                                format: 'cid',
                                description: 'Compare and swap with the previous commit by CID.'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'uri',
                            'cid'
                        ],
                        properties: {
                            uri: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            cid: {
                                type: 'string',
                                format: 'cid'
                            },
                            commit: {
                                type: 'ref',
                                ref: 'lex:com.atproto.repo.defs#commitMeta'
                            },
                            validationStatus: {
                                type: 'string',
                                knownValues: [
                                    'valid',
                                    'unknown'
                                ]
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'InvalidSwap',
                        description: "Indicates that 'swapCommit' didn't match current repo commit."
                    }
                ]
            }
        }
    },
    ComAtprotoRepoDefs: {
        lexicon: 1,
        id: 'com.atproto.repo.defs',
        defs: {
            commitMeta: {
                type: 'object',
                required: [
                    'cid',
                    'rev'
                ],
                properties: {
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    rev: {
                        type: 'string',
                        format: 'tid'
                    }
                }
            }
        }
    },
    ComAtprotoRepoDeleteRecord: {
        lexicon: 1,
        id: 'com.atproto.repo.deleteRecord',
        defs: {
            main: {
                type: 'procedure',
                description: "Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'repo',
                            'collection',
                            'rkey'
                        ],
                        properties: {
                            repo: {
                                type: 'string',
                                format: 'at-identifier',
                                description: 'The handle or DID of the repo (aka, current account).'
                            },
                            collection: {
                                type: 'string',
                                format: 'nsid',
                                description: 'The NSID of the record collection.'
                            },
                            rkey: {
                                type: 'string',
                                format: 'record-key',
                                description: 'The Record Key.'
                            },
                            swapRecord: {
                                type: 'string',
                                format: 'cid',
                                description: 'Compare and swap with the previous record by CID.'
                            },
                            swapCommit: {
                                type: 'string',
                                format: 'cid',
                                description: 'Compare and swap with the previous commit by CID.'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {
                            commit: {
                                type: 'ref',
                                ref: 'lex:com.atproto.repo.defs#commitMeta'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'InvalidSwap'
                    }
                ]
            }
        }
    },
    ComAtprotoRepoDescribeRepo: {
        lexicon: 1,
        id: 'com.atproto.repo.describeRepo',
        defs: {
            main: {
                type: 'query',
                description: 'Get information about an account and repository, including the list of collections. Does not require auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'repo'
                    ],
                    properties: {
                        repo: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'The handle or DID of the repo.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'handle',
                            'did',
                            'didDoc',
                            'collections',
                            'handleIsCorrect'
                        ],
                        properties: {
                            handle: {
                                type: 'string',
                                format: 'handle'
                            },
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            didDoc: {
                                type: 'unknown',
                                description: 'The complete DID document for this account.'
                            },
                            collections: {
                                type: 'array',
                                description: 'List of all the collections (NSIDs) for which this repo contains at least one record.',
                                items: {
                                    type: 'string',
                                    format: 'nsid'
                                }
                            },
                            handleIsCorrect: {
                                type: 'boolean',
                                description: 'Indicates if handle is currently valid (resolves bi-directionally)'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoRepoGetRecord: {
        lexicon: 1,
        id: 'com.atproto.repo.getRecord',
        defs: {
            main: {
                type: 'query',
                description: 'Get a single record from a repository. Does not require auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'repo',
                        'collection',
                        'rkey'
                    ],
                    properties: {
                        repo: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'The handle or DID of the repo.'
                        },
                        collection: {
                            type: 'string',
                            format: 'nsid',
                            description: 'The NSID of the record collection.'
                        },
                        rkey: {
                            type: 'string',
                            description: 'The Record Key.',
                            format: 'record-key'
                        },
                        cid: {
                            type: 'string',
                            format: 'cid',
                            description: 'The CID of the version of the record. If not specified, then return the most recent version.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'uri',
                            'value'
                        ],
                        properties: {
                            uri: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            cid: {
                                type: 'string',
                                format: 'cid'
                            },
                            value: {
                                type: 'unknown'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'RecordNotFound'
                    }
                ]
            }
        }
    },
    ComAtprotoRepoImportRepo: {
        lexicon: 1,
        id: 'com.atproto.repo.importRepo',
        defs: {
            main: {
                type: 'procedure',
                description: 'Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.',
                input: {
                    encoding: 'application/vnd.ipld.car'
                }
            }
        }
    },
    ComAtprotoRepoListMissingBlobs: {
        lexicon: 1,
        id: 'com.atproto.repo.listMissingBlobs',
        defs: {
            main: {
                type: 'query',
                description: 'Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 1000,
                            default: 500
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'blobs'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            blobs: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.repo.listMissingBlobs#recordBlob'
                                }
                            }
                        }
                    }
                }
            },
            recordBlob: {
                type: 'object',
                required: [
                    'cid',
                    'recordUri'
                ],
                properties: {
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    recordUri: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            }
        }
    },
    ComAtprotoRepoListRecords: {
        lexicon: 1,
        id: 'com.atproto.repo.listRecords',
        defs: {
            main: {
                type: 'query',
                description: 'List a range of records in a repository, matching a specific collection. Does not require auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'repo',
                        'collection'
                    ],
                    properties: {
                        repo: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'The handle or DID of the repo.'
                        },
                        collection: {
                            type: 'string',
                            format: 'nsid',
                            description: 'The NSID of the record type.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50,
                            description: 'The number of records to return.'
                        },
                        cursor: {
                            type: 'string'
                        },
                        reverse: {
                            type: 'boolean',
                            description: 'Flag to reverse the order of the returned records.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'records'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            records: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.repo.listRecords#record'
                                }
                            }
                        }
                    }
                }
            },
            record: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'value'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    value: {
                        type: 'unknown'
                    }
                }
            }
        }
    },
    ComAtprotoRepoPutRecord: {
        lexicon: 1,
        id: 'com.atproto.repo.putRecord',
        defs: {
            main: {
                type: 'procedure',
                description: 'Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'repo',
                            'collection',
                            'rkey',
                            'record'
                        ],
                        nullable: [
                            'swapRecord'
                        ],
                        properties: {
                            repo: {
                                type: 'string',
                                format: 'at-identifier',
                                description: 'The handle or DID of the repo (aka, current account).'
                            },
                            collection: {
                                type: 'string',
                                format: 'nsid',
                                description: 'The NSID of the record collection.'
                            },
                            rkey: {
                                type: 'string',
                                format: 'record-key',
                                description: 'The Record Key.',
                                maxLength: 512
                            },
                            validate: {
                                type: 'boolean',
                                description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons."
                            },
                            record: {
                                type: 'unknown',
                                description: 'The record to write.'
                            },
                            swapRecord: {
                                type: 'string',
                                format: 'cid',
                                description: 'Compare and swap with the previous record by CID. WARNING: nullable and optional field; may cause problems with golang implementation'
                            },
                            swapCommit: {
                                type: 'string',
                                format: 'cid',
                                description: 'Compare and swap with the previous commit by CID.'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'uri',
                            'cid'
                        ],
                        properties: {
                            uri: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            cid: {
                                type: 'string',
                                format: 'cid'
                            },
                            commit: {
                                type: 'ref',
                                ref: 'lex:com.atproto.repo.defs#commitMeta'
                            },
                            validationStatus: {
                                type: 'string',
                                knownValues: [
                                    'valid',
                                    'unknown'
                                ]
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'InvalidSwap'
                    }
                ]
            }
        }
    },
    ComAtprotoRepoStrongRef: {
        lexicon: 1,
        id: 'com.atproto.repo.strongRef',
        description: 'A URI with a content-hash fingerprint.',
        defs: {
            main: {
                type: 'object',
                required: [
                    'uri',
                    'cid'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    }
                }
            }
        }
    },
    ComAtprotoRepoUploadBlob: {
        lexicon: 1,
        id: 'com.atproto.repo.uploadBlob',
        defs: {
            main: {
                type: 'procedure',
                description: 'Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.',
                input: {
                    encoding: '*/*'
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'blob'
                        ],
                        properties: {
                            blob: {
                                type: 'blob'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerActivateAccount: {
        lexicon: 1,
        id: 'com.atproto.server.activateAccount',
        defs: {
            main: {
                type: 'procedure',
                description: "Activates a currently deactivated account. Used to finalize account migration after the account's repo is imported and identity is setup."
            }
        }
    },
    ComAtprotoServerCheckAccountStatus: {
        lexicon: 1,
        id: 'com.atproto.server.checkAccountStatus',
        defs: {
            main: {
                type: 'query',
                description: 'Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'activated',
                            'validDid',
                            'repoCommit',
                            'repoRev',
                            'repoBlocks',
                            'indexedRecords',
                            'privateStateValues',
                            'expectedBlobs',
                            'importedBlobs'
                        ],
                        properties: {
                            activated: {
                                type: 'boolean'
                            },
                            validDid: {
                                type: 'boolean'
                            },
                            repoCommit: {
                                type: 'string',
                                format: 'cid'
                            },
                            repoRev: {
                                type: 'string'
                            },
                            repoBlocks: {
                                type: 'integer'
                            },
                            indexedRecords: {
                                type: 'integer'
                            },
                            privateStateValues: {
                                type: 'integer'
                            },
                            expectedBlobs: {
                                type: 'integer'
                            },
                            importedBlobs: {
                                type: 'integer'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerConfirmEmail: {
        lexicon: 1,
        id: 'com.atproto.server.confirmEmail',
        defs: {
            main: {
                type: 'procedure',
                description: 'Confirm an email using a token from com.atproto.server.requestEmailConfirmation.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'email',
                            'token'
                        ],
                        properties: {
                            email: {
                                type: 'string'
                            },
                            token: {
                                type: 'string'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'AccountNotFound'
                    },
                    {
                        name: 'ExpiredToken'
                    },
                    {
                        name: 'InvalidToken'
                    },
                    {
                        name: 'InvalidEmail'
                    }
                ]
            }
        }
    },
    ComAtprotoServerCreateAccount: {
        lexicon: 1,
        id: 'com.atproto.server.createAccount',
        defs: {
            main: {
                type: 'procedure',
                description: 'Create an account. Implemented by PDS.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'handle'
                        ],
                        properties: {
                            email: {
                                type: 'string'
                            },
                            handle: {
                                type: 'string',
                                format: 'handle',
                                description: 'Requested handle for the account.'
                            },
                            did: {
                                type: 'string',
                                format: 'did',
                                description: 'Pre-existing atproto DID, being imported to a new account.'
                            },
                            inviteCode: {
                                type: 'string'
                            },
                            verificationCode: {
                                type: 'string'
                            },
                            verificationPhone: {
                                type: 'string'
                            },
                            password: {
                                type: 'string',
                                description: 'Initial account password. May need to meet instance-specific password strength requirements.'
                            },
                            recoveryKey: {
                                type: 'string',
                                description: 'DID PLC rotation key (aka, recovery key) to be included in PLC creation operation.'
                            },
                            plcOp: {
                                type: 'unknown',
                                description: 'A signed DID PLC operation to be submitted as part of importing an existing account to this instance. NOTE: this optional field may be updated when full account migration is implemented.'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        description: 'Account login session returned on successful account creation.',
                        required: [
                            'accessJwt',
                            'refreshJwt',
                            'handle',
                            'did'
                        ],
                        properties: {
                            accessJwt: {
                                type: 'string'
                            },
                            refreshJwt: {
                                type: 'string'
                            },
                            handle: {
                                type: 'string',
                                format: 'handle'
                            },
                            did: {
                                type: 'string',
                                format: 'did',
                                description: 'The DID of the new account.'
                            },
                            didDoc: {
                                type: 'unknown',
                                description: 'Complete DID document.'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'InvalidHandle'
                    },
                    {
                        name: 'InvalidPassword'
                    },
                    {
                        name: 'InvalidInviteCode'
                    },
                    {
                        name: 'HandleNotAvailable'
                    },
                    {
                        name: 'UnsupportedDomain'
                    },
                    {
                        name: 'UnresolvableDid'
                    },
                    {
                        name: 'IncompatibleDidDoc'
                    }
                ]
            }
        }
    },
    ComAtprotoServerCreateAppPassword: {
        lexicon: 1,
        id: 'com.atproto.server.createAppPassword',
        defs: {
            main: {
                type: 'procedure',
                description: 'Create an App Password.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'name'
                        ],
                        properties: {
                            name: {
                                type: 'string',
                                description: 'A short name for the App Password, to help distinguish them.'
                            },
                            privileged: {
                                type: 'boolean',
                                description: "If an app password has 'privileged' access to possibly sensitive account state. Meant for use with trusted clients."
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:com.atproto.server.createAppPassword#appPassword'
                    }
                },
                errors: [
                    {
                        name: 'AccountTakedown'
                    }
                ]
            },
            appPassword: {
                type: 'object',
                required: [
                    'name',
                    'password',
                    'createdAt'
                ],
                properties: {
                    name: {
                        type: 'string'
                    },
                    password: {
                        type: 'string'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    privileged: {
                        type: 'boolean'
                    }
                }
            }
        }
    },
    ComAtprotoServerCreateInviteCode: {
        lexicon: 1,
        id: 'com.atproto.server.createInviteCode',
        defs: {
            main: {
                type: 'procedure',
                description: 'Create an invite code.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'useCount'
                        ],
                        properties: {
                            useCount: {
                                type: 'integer'
                            },
                            forAccount: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'code'
                        ],
                        properties: {
                            code: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerCreateInviteCodes: {
        lexicon: 1,
        id: 'com.atproto.server.createInviteCodes',
        defs: {
            main: {
                type: 'procedure',
                description: 'Create invite codes.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'codeCount',
                            'useCount'
                        ],
                        properties: {
                            codeCount: {
                                type: 'integer',
                                default: 1
                            },
                            useCount: {
                                type: 'integer'
                            },
                            forAccounts: {
                                type: 'array',
                                items: {
                                    type: 'string',
                                    format: 'did'
                                }
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'codes'
                        ],
                        properties: {
                            codes: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.server.createInviteCodes#accountCodes'
                                }
                            }
                        }
                    }
                }
            },
            accountCodes: {
                type: 'object',
                required: [
                    'account',
                    'codes'
                ],
                properties: {
                    account: {
                        type: 'string'
                    },
                    codes: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerCreateSession: {
        lexicon: 1,
        id: 'com.atproto.server.createSession',
        defs: {
            main: {
                type: 'procedure',
                description: 'Create an authentication session.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'identifier',
                            'password'
                        ],
                        properties: {
                            identifier: {
                                type: 'string',
                                description: 'Handle or other identifier supported by the server for the authenticating user.'
                            },
                            password: {
                                type: 'string'
                            },
                            authFactorToken: {
                                type: 'string'
                            },
                            allowTakendown: {
                                type: 'boolean',
                                description: 'When true, instead of throwing error for takendown accounts, a valid response with a narrow scoped token will be returned'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'accessJwt',
                            'refreshJwt',
                            'handle',
                            'did'
                        ],
                        properties: {
                            accessJwt: {
                                type: 'string'
                            },
                            refreshJwt: {
                                type: 'string'
                            },
                            handle: {
                                type: 'string',
                                format: 'handle'
                            },
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            didDoc: {
                                type: 'unknown'
                            },
                            email: {
                                type: 'string'
                            },
                            emailConfirmed: {
                                type: 'boolean'
                            },
                            emailAuthFactor: {
                                type: 'boolean'
                            },
                            active: {
                                type: 'boolean'
                            },
                            status: {
                                type: 'string',
                                description: 'If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.',
                                knownValues: [
                                    'takendown',
                                    'suspended',
                                    'deactivated'
                                ]
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'AccountTakedown'
                    },
                    {
                        name: 'AuthFactorTokenRequired'
                    }
                ]
            }
        }
    },
    ComAtprotoServerDeactivateAccount: {
        lexicon: 1,
        id: 'com.atproto.server.deactivateAccount',
        defs: {
            main: {
                type: 'procedure',
                description: 'Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {
                            deleteAfter: {
                                type: 'string',
                                format: 'datetime',
                                description: 'A recommendation to server as to how long they should hold onto the deactivated account before deleting.'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerDefs: {
        lexicon: 1,
        id: 'com.atproto.server.defs',
        defs: {
            inviteCode: {
                type: 'object',
                required: [
                    'code',
                    'available',
                    'disabled',
                    'forAccount',
                    'createdBy',
                    'createdAt',
                    'uses'
                ],
                properties: {
                    code: {
                        type: 'string'
                    },
                    available: {
                        type: 'integer'
                    },
                    disabled: {
                        type: 'boolean'
                    },
                    forAccount: {
                        type: 'string'
                    },
                    createdBy: {
                        type: 'string'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    uses: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.server.defs#inviteCodeUse'
                        }
                    }
                }
            },
            inviteCodeUse: {
                type: 'object',
                required: [
                    'usedBy',
                    'usedAt'
                ],
                properties: {
                    usedBy: {
                        type: 'string',
                        format: 'did'
                    },
                    usedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            }
        }
    },
    ComAtprotoServerDeleteAccount: {
        lexicon: 1,
        id: 'com.atproto.server.deleteAccount',
        defs: {
            main: {
                type: 'procedure',
                description: "Delete an actor's account with a token and password. Can only be called after requesting a deletion token. Requires auth.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did',
                            'password',
                            'token'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            password: {
                                type: 'string'
                            },
                            token: {
                                type: 'string'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'ExpiredToken'
                    },
                    {
                        name: 'InvalidToken'
                    }
                ]
            }
        }
    },
    ComAtprotoServerDeleteSession: {
        lexicon: 1,
        id: 'com.atproto.server.deleteSession',
        defs: {
            main: {
                type: 'procedure',
                description: 'Delete the current session. Requires auth.'
            }
        }
    },
    ComAtprotoServerDescribeServer: {
        lexicon: 1,
        id: 'com.atproto.server.describeServer',
        defs: {
            main: {
                type: 'query',
                description: "Describes the server's account creation requirements and capabilities. Implemented by PDS.",
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did',
                            'availableUserDomains'
                        ],
                        properties: {
                            inviteCodeRequired: {
                                type: 'boolean',
                                description: 'If true, an invite code must be supplied to create an account on this instance.'
                            },
                            phoneVerificationRequired: {
                                type: 'boolean',
                                description: 'If true, a phone verification token must be supplied to create an account on this instance.'
                            },
                            availableUserDomains: {
                                type: 'array',
                                description: 'List of domain suffixes that can be used in account handles.',
                                items: {
                                    type: 'string'
                                }
                            },
                            links: {
                                type: 'ref',
                                description: 'URLs of service policy documents.',
                                ref: 'lex:com.atproto.server.describeServer#links'
                            },
                            contact: {
                                type: 'ref',
                                description: 'Contact information',
                                ref: 'lex:com.atproto.server.describeServer#contact'
                            },
                            did: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                }
            },
            links: {
                type: 'object',
                properties: {
                    privacyPolicy: {
                        type: 'string',
                        format: 'uri'
                    },
                    termsOfService: {
                        type: 'string',
                        format: 'uri'
                    }
                }
            },
            contact: {
                type: 'object',
                properties: {
                    email: {
                        type: 'string'
                    }
                }
            }
        }
    },
    ComAtprotoServerGetAccountInviteCodes: {
        lexicon: 1,
        id: 'com.atproto.server.getAccountInviteCodes',
        defs: {
            main: {
                type: 'query',
                description: 'Get all invite codes for the current account. Requires auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        includeUsed: {
                            type: 'boolean',
                            default: true
                        },
                        createAvailable: {
                            type: 'boolean',
                            default: true,
                            description: "Controls whether any new 'earned' but not 'created' invites should be created."
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'codes'
                        ],
                        properties: {
                            codes: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.server.defs#inviteCode'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'DuplicateCreate'
                    }
                ]
            }
        }
    },
    ComAtprotoServerGetServiceAuth: {
        lexicon: 1,
        id: 'com.atproto.server.getServiceAuth',
        defs: {
            main: {
                type: 'query',
                description: 'Get a signed token on behalf of the requesting DID for the requested service.',
                parameters: {
                    type: 'params',
                    required: [
                        'aud'
                    ],
                    properties: {
                        aud: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the service that the token will be used to authenticate with'
                        },
                        exp: {
                            type: 'integer',
                            description: 'The time in Unix Epoch seconds that the JWT expires. Defaults to 60 seconds in the future. The service may enforce certain time bounds on tokens depending on the requested scope.'
                        },
                        lxm: {
                            type: 'string',
                            format: 'nsid',
                            description: 'Lexicon (XRPC) method to bind the requested token to'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'token'
                        ],
                        properties: {
                            token: {
                                type: 'string'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'BadExpiration',
                        description: 'Indicates that the requested expiration date is not a valid. May be in the past or may be reliant on the requested scopes.'
                    }
                ]
            }
        }
    },
    ComAtprotoServerGetSession: {
        lexicon: 1,
        id: 'com.atproto.server.getSession',
        defs: {
            main: {
                type: 'query',
                description: 'Get information about the current auth session. Requires auth.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'handle',
                            'did'
                        ],
                        properties: {
                            handle: {
                                type: 'string',
                                format: 'handle'
                            },
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            email: {
                                type: 'string'
                            },
                            emailConfirmed: {
                                type: 'boolean'
                            },
                            emailAuthFactor: {
                                type: 'boolean'
                            },
                            didDoc: {
                                type: 'unknown'
                            },
                            active: {
                                type: 'boolean'
                            },
                            status: {
                                type: 'string',
                                description: 'If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.',
                                knownValues: [
                                    'takendown',
                                    'suspended',
                                    'deactivated'
                                ]
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerListAppPasswords: {
        lexicon: 1,
        id: 'com.atproto.server.listAppPasswords',
        defs: {
            main: {
                type: 'query',
                description: 'List all App Passwords.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'passwords'
                        ],
                        properties: {
                            passwords: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.server.listAppPasswords#appPassword'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'AccountTakedown'
                    }
                ]
            },
            appPassword: {
                type: 'object',
                required: [
                    'name',
                    'createdAt'
                ],
                properties: {
                    name: {
                        type: 'string'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    privileged: {
                        type: 'boolean'
                    }
                }
            }
        }
    },
    ComAtprotoServerRefreshSession: {
        lexicon: 1,
        id: 'com.atproto.server.refreshSession',
        defs: {
            main: {
                type: 'procedure',
                description: "Refresh an authentication session. Requires auth using the 'refreshJwt' (not the 'accessJwt').",
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'accessJwt',
                            'refreshJwt',
                            'handle',
                            'did'
                        ],
                        properties: {
                            accessJwt: {
                                type: 'string'
                            },
                            refreshJwt: {
                                type: 'string'
                            },
                            handle: {
                                type: 'string',
                                format: 'handle'
                            },
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            didDoc: {
                                type: 'unknown'
                            },
                            active: {
                                type: 'boolean'
                            },
                            status: {
                                type: 'string',
                                description: "Hosting status of the account. If not specified, then assume 'active'.",
                                knownValues: [
                                    'takendown',
                                    'suspended',
                                    'deactivated'
                                ]
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'AccountTakedown'
                    }
                ]
            }
        }
    },
    ComAtprotoServerRequestAccountDelete: {
        lexicon: 1,
        id: 'com.atproto.server.requestAccountDelete',
        defs: {
            main: {
                type: 'procedure',
                description: 'Initiate a user account deletion via email.'
            }
        }
    },
    ComAtprotoServerRequestEmailConfirmation: {
        lexicon: 1,
        id: 'com.atproto.server.requestEmailConfirmation',
        defs: {
            main: {
                type: 'procedure',
                description: 'Request an email with a code to confirm ownership of email.'
            }
        }
    },
    ComAtprotoServerRequestEmailUpdate: {
        lexicon: 1,
        id: 'com.atproto.server.requestEmailUpdate',
        defs: {
            main: {
                type: 'procedure',
                description: 'Request a token in order to update email.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'tokenRequired'
                        ],
                        properties: {
                            tokenRequired: {
                                type: 'boolean'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerRequestPasswordReset: {
        lexicon: 1,
        id: 'com.atproto.server.requestPasswordReset',
        defs: {
            main: {
                type: 'procedure',
                description: 'Initiate a user account password reset via email.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'email'
                        ],
                        properties: {
                            email: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerReserveSigningKey: {
        lexicon: 1,
        id: 'com.atproto.server.reserveSigningKey',
        defs: {
            main: {
                type: 'procedure',
                description: 'Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did',
                                description: 'The DID to reserve a key for.'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'signingKey'
                        ],
                        properties: {
                            signingKey: {
                                type: 'string',
                                description: 'The public key for the reserved signing key, in did:key serialization.'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerResetPassword: {
        lexicon: 1,
        id: 'com.atproto.server.resetPassword',
        defs: {
            main: {
                type: 'procedure',
                description: 'Reset a user account password using a token.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'token',
                            'password'
                        ],
                        properties: {
                            token: {
                                type: 'string'
                            },
                            password: {
                                type: 'string'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'ExpiredToken'
                    },
                    {
                        name: 'InvalidToken'
                    }
                ]
            }
        }
    },
    ComAtprotoServerRevokeAppPassword: {
        lexicon: 1,
        id: 'com.atproto.server.revokeAppPassword',
        defs: {
            main: {
                type: 'procedure',
                description: 'Revoke an App Password by name.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'name'
                        ],
                        properties: {
                            name: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoServerUpdateEmail: {
        lexicon: 1,
        id: 'com.atproto.server.updateEmail',
        defs: {
            main: {
                type: 'procedure',
                description: "Update an account's email.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'email'
                        ],
                        properties: {
                            email: {
                                type: 'string'
                            },
                            emailAuthFactor: {
                                type: 'boolean'
                            },
                            token: {
                                type: 'string',
                                description: "Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed."
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'ExpiredToken'
                    },
                    {
                        name: 'InvalidToken'
                    },
                    {
                        name: 'TokenRequired'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncDefs: {
        lexicon: 1,
        id: 'com.atproto.sync.defs',
        defs: {
            hostStatus: {
                type: 'string',
                knownValues: [
                    'active',
                    'idle',
                    'offline',
                    'throttled',
                    'banned'
                ]
            }
        }
    },
    ComAtprotoSyncGetBlob: {
        lexicon: 1,
        id: 'com.atproto.sync.getBlob',
        defs: {
            main: {
                type: 'query',
                description: 'Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.',
                parameters: {
                    type: 'params',
                    required: [
                        'did',
                        'cid'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the account.'
                        },
                        cid: {
                            type: 'string',
                            format: 'cid',
                            description: 'The CID of the blob to fetch'
                        }
                    }
                },
                output: {
                    encoding: '*/*'
                },
                errors: [
                    {
                        name: 'BlobNotFound'
                    },
                    {
                        name: 'RepoNotFound'
                    },
                    {
                        name: 'RepoTakendown'
                    },
                    {
                        name: 'RepoSuspended'
                    },
                    {
                        name: 'RepoDeactivated'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncGetBlocks: {
        lexicon: 1,
        id: 'com.atproto.sync.getBlocks',
        defs: {
            main: {
                type: 'query',
                description: 'Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.',
                parameters: {
                    type: 'params',
                    required: [
                        'did',
                        'cids'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the repo.'
                        },
                        cids: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'cid'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/vnd.ipld.car'
                },
                errors: [
                    {
                        name: 'BlockNotFound'
                    },
                    {
                        name: 'RepoNotFound'
                    },
                    {
                        name: 'RepoTakendown'
                    },
                    {
                        name: 'RepoSuspended'
                    },
                    {
                        name: 'RepoDeactivated'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncGetCheckout: {
        lexicon: 1,
        id: 'com.atproto.sync.getCheckout',
        defs: {
            main: {
                type: 'query',
                description: 'DEPRECATED - please use com.atproto.sync.getRepo instead',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the repo.'
                        }
                    }
                },
                output: {
                    encoding: 'application/vnd.ipld.car'
                }
            }
        }
    },
    ComAtprotoSyncGetHead: {
        lexicon: 1,
        id: 'com.atproto.sync.getHead',
        defs: {
            main: {
                type: 'query',
                description: 'DEPRECATED - please use com.atproto.sync.getLatestCommit instead',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the repo.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'root'
                        ],
                        properties: {
                            root: {
                                type: 'string',
                                format: 'cid'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'HeadNotFound'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncGetHostStatus: {
        lexicon: 1,
        id: 'com.atproto.sync.getHostStatus',
        defs: {
            main: {
                type: 'query',
                description: 'Returns information about a specified upstream host, as consumed by the server. Implemented by relays.',
                parameters: {
                    type: 'params',
                    required: [
                        'hostname'
                    ],
                    properties: {
                        hostname: {
                            type: 'string',
                            description: 'Hostname of the host (eg, PDS or relay) being queried.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'hostname'
                        ],
                        properties: {
                            hostname: {
                                type: 'string'
                            },
                            seq: {
                                type: 'integer',
                                description: 'Recent repo stream event sequence number. May be delayed from actual stream processing (eg, persisted cursor not in-memory cursor).'
                            },
                            accountCount: {
                                type: 'integer',
                                description: 'Number of accounts on the server which are associated with the upstream host. Note that the upstream may actually have more accounts.'
                            },
                            status: {
                                type: 'ref',
                                ref: 'lex:com.atproto.sync.defs#hostStatus'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'HostNotFound'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncGetLatestCommit: {
        lexicon: 1,
        id: 'com.atproto.sync.getLatestCommit',
        defs: {
            main: {
                type: 'query',
                description: 'Get the current commit CID & revision of the specified repo. Does not require auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the repo.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'cid',
                            'rev'
                        ],
                        properties: {
                            cid: {
                                type: 'string',
                                format: 'cid'
                            },
                            rev: {
                                type: 'string',
                                format: 'tid'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'RepoNotFound'
                    },
                    {
                        name: 'RepoTakendown'
                    },
                    {
                        name: 'RepoSuspended'
                    },
                    {
                        name: 'RepoDeactivated'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncGetRecord: {
        lexicon: 1,
        id: 'com.atproto.sync.getRecord',
        defs: {
            main: {
                type: 'query',
                description: 'Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'did',
                        'collection',
                        'rkey'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the repo.'
                        },
                        collection: {
                            type: 'string',
                            format: 'nsid'
                        },
                        rkey: {
                            type: 'string',
                            description: 'Record Key',
                            format: 'record-key'
                        }
                    }
                },
                output: {
                    encoding: 'application/vnd.ipld.car'
                },
                errors: [
                    {
                        name: 'RecordNotFound'
                    },
                    {
                        name: 'RepoNotFound'
                    },
                    {
                        name: 'RepoTakendown'
                    },
                    {
                        name: 'RepoSuspended'
                    },
                    {
                        name: 'RepoDeactivated'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncGetRepo: {
        lexicon: 1,
        id: 'com.atproto.sync.getRepo',
        defs: {
            main: {
                type: 'query',
                description: "Download a repository export as CAR file. Optionally only a 'diff' since a previous revision. Does not require auth; implemented by PDS.",
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the repo.'
                        },
                        since: {
                            type: 'string',
                            format: 'tid',
                            description: "The revision ('rev') of the repo to create a diff from."
                        }
                    }
                },
                output: {
                    encoding: 'application/vnd.ipld.car'
                },
                errors: [
                    {
                        name: 'RepoNotFound'
                    },
                    {
                        name: 'RepoTakendown'
                    },
                    {
                        name: 'RepoSuspended'
                    },
                    {
                        name: 'RepoDeactivated'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncGetRepoStatus: {
        lexicon: 1,
        id: 'com.atproto.sync.getRepoStatus',
        defs: {
            main: {
                type: 'query',
                description: 'Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the repo.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did',
                            'active'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            active: {
                                type: 'boolean'
                            },
                            status: {
                                type: 'string',
                                description: 'If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.',
                                knownValues: [
                                    'takendown',
                                    'suspended',
                                    'deleted',
                                    'deactivated',
                                    'desynchronized',
                                    'throttled'
                                ]
                            },
                            rev: {
                                type: 'string',
                                format: 'tid',
                                description: 'Optional field, the current rev of the repo, if active=true'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'RepoNotFound'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncListBlobs: {
        lexicon: 1,
        id: 'com.atproto.sync.listBlobs',
        defs: {
            main: {
                type: 'query',
                description: 'List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did',
                            description: 'The DID of the repo.'
                        },
                        since: {
                            type: 'string',
                            format: 'tid',
                            description: 'Optional revision of the repo to list blobs since.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 1000,
                            default: 500
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'cids'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            cids: {
                                type: 'array',
                                items: {
                                    type: 'string',
                                    format: 'cid'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'RepoNotFound'
                    },
                    {
                        name: 'RepoTakendown'
                    },
                    {
                        name: 'RepoSuspended'
                    },
                    {
                        name: 'RepoDeactivated'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncListHosts: {
        lexicon: 1,
        id: 'com.atproto.sync.listHosts',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates upstream hosts (eg, PDS or relay instances) that this service consumes from. Implemented by relays.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 1000,
                            default: 200
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'hosts'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            hosts: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.sync.listHosts#host'
                                },
                                description: 'Sort order is not formally specified. Recommended order is by time host was first seen by the server, with oldest first.'
                            }
                        }
                    }
                }
            },
            host: {
                type: 'object',
                required: [
                    'hostname'
                ],
                properties: {
                    hostname: {
                        type: 'string',
                        description: 'hostname of server; not a URL (no scheme)'
                    },
                    seq: {
                        type: 'integer',
                        description: 'Recent repo stream event sequence number. May be delayed from actual stream processing (eg, persisted cursor not in-memory cursor).'
                    },
                    accountCount: {
                        type: 'integer'
                    },
                    status: {
                        type: 'ref',
                        ref: 'lex:com.atproto.sync.defs#hostStatus'
                    }
                }
            }
        }
    },
    ComAtprotoSyncListRepos: {
        lexicon: 1,
        id: 'com.atproto.sync.listRepos',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 1000,
                            default: 500
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'repos'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            repos: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.sync.listRepos#repo'
                                }
                            }
                        }
                    }
                }
            },
            repo: {
                type: 'object',
                required: [
                    'did',
                    'head',
                    'rev'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    head: {
                        type: 'string',
                        format: 'cid',
                        description: 'Current repo commit CID'
                    },
                    rev: {
                        type: 'string',
                        format: 'tid'
                    },
                    active: {
                        type: 'boolean'
                    },
                    status: {
                        type: 'string',
                        description: 'If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.',
                        knownValues: [
                            'takendown',
                            'suspended',
                            'deleted',
                            'deactivated',
                            'desynchronized',
                            'throttled'
                        ]
                    }
                }
            }
        }
    },
    ComAtprotoSyncListReposByCollection: {
        lexicon: 1,
        id: 'com.atproto.sync.listReposByCollection',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates all the DIDs which have records with the given collection NSID.',
                parameters: {
                    type: 'params',
                    required: [
                        'collection'
                    ],
                    properties: {
                        collection: {
                            type: 'string',
                            format: 'nsid'
                        },
                        limit: {
                            type: 'integer',
                            description: 'Maximum size of response set. Recommend setting a large maximum (1000+) when enumerating large DID lists.',
                            minimum: 1,
                            maximum: 2000,
                            default: 500
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'repos'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            repos: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.sync.listReposByCollection#repo'
                                }
                            }
                        }
                    }
                }
            },
            repo: {
                type: 'object',
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    }
                }
            }
        }
    },
    ComAtprotoSyncNotifyOfUpdate: {
        lexicon: 1,
        id: 'com.atproto.sync.notifyOfUpdate',
        defs: {
            main: {
                type: 'procedure',
                description: 'Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay. DEPRECATED: just use com.atproto.sync.requestCrawl',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'hostname'
                        ],
                        properties: {
                            hostname: {
                                type: 'string',
                                description: 'Hostname of the current service (usually a PDS) that is notifying of update.'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoSyncRequestCrawl: {
        lexicon: 1,
        id: 'com.atproto.sync.requestCrawl',
        defs: {
            main: {
                type: 'procedure',
                description: 'Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'hostname'
                        ],
                        properties: {
                            hostname: {
                                type: 'string',
                                description: 'Hostname of the current service (eg, PDS) that is requesting to be crawled.'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'HostBanned'
                    }
                ]
            }
        }
    },
    ComAtprotoSyncSubscribeRepos: {
        lexicon: 1,
        id: 'com.atproto.sync.subscribeRepos',
        defs: {
            main: {
                type: 'subscription',
                description: 'Repository event stream, aka Firehose endpoint. Outputs repo commits with diff data, and identity update events, for all repositories on the current server. See the atproto specifications for details around stream sequencing, repo versioning, CAR diff format, and more. Public and does not require auth; implemented by PDS and Relay.',
                parameters: {
                    type: 'params',
                    properties: {
                        cursor: {
                            type: 'integer',
                            description: 'The last known event seq number to backfill from.'
                        }
                    }
                },
                message: {
                    schema: {
                        type: 'union',
                        refs: [
                            'lex:com.atproto.sync.subscribeRepos#commit',
                            'lex:com.atproto.sync.subscribeRepos#sync',
                            'lex:com.atproto.sync.subscribeRepos#identity',
                            'lex:com.atproto.sync.subscribeRepos#account',
                            'lex:com.atproto.sync.subscribeRepos#info'
                        ]
                    }
                },
                errors: [
                    {
                        name: 'FutureCursor'
                    },
                    {
                        name: 'ConsumerTooSlow',
                        description: 'If the consumer of the stream can not keep up with events, and a backlog gets too large, the server will drop the connection.'
                    }
                ]
            },
            commit: {
                type: 'object',
                description: 'Represents an update of repository state. Note that empty commits are allowed, which include no repo data changes, but an update to rev and signature.',
                required: [
                    'seq',
                    'rebase',
                    'tooBig',
                    'repo',
                    'commit',
                    'rev',
                    'since',
                    'blocks',
                    'ops',
                    'blobs',
                    'time'
                ],
                nullable: [
                    'since'
                ],
                properties: {
                    seq: {
                        type: 'integer',
                        description: 'The stream sequence number of this message.'
                    },
                    rebase: {
                        type: 'boolean',
                        description: 'DEPRECATED -- unused'
                    },
                    tooBig: {
                        type: 'boolean',
                        description: 'DEPRECATED -- replaced by #sync event and data limits. Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data.'
                    },
                    repo: {
                        type: 'string',
                        format: 'did',
                        description: "The repo this event comes from. Note that all other message types name this field 'did'."
                    },
                    commit: {
                        type: 'cid-link',
                        description: 'Repo commit object CID.'
                    },
                    rev: {
                        type: 'string',
                        format: 'tid',
                        description: 'The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event.'
                    },
                    since: {
                        type: 'string',
                        format: 'tid',
                        description: 'The rev of the last emitted commit from this repo (if any).'
                    },
                    blocks: {
                        type: 'bytes',
                        description: "CAR file containing relevant blocks, as a diff since the previous repo state. The commit must be included as a block, and the commit block CID must be the first entry in the CAR header 'roots' list.",
                        maxLength: 2000000
                    },
                    ops: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.sync.subscribeRepos#repoOp',
                            description: 'List of repo mutation operations in this commit (eg, records created, updated, or deleted).'
                        },
                        maxLength: 200
                    },
                    blobs: {
                        type: 'array',
                        items: {
                            type: 'cid-link',
                            description: 'DEPRECATED -- will soon always be empty. List of new blobs (by CID) referenced by records in this commit.'
                        }
                    },
                    prevData: {
                        type: 'cid-link',
                        description: "The root CID of the MST tree for the previous commit from this repo (indicated by the 'since' revision field in this message). Corresponds to the 'data' field in the repo commit object. NOTE: this field is effectively required for the 'inductive' version of firehose."
                    },
                    time: {
                        type: 'string',
                        format: 'datetime',
                        description: 'Timestamp of when this message was originally broadcast.'
                    }
                }
            },
            sync: {
                type: 'object',
                description: 'Updates the repo to a new state, without necessarily including that state on the firehose. Used to recover from broken commit streams, data loss incidents, or in situations where upstream host does not know recent state of the repository.',
                required: [
                    'seq',
                    'did',
                    'blocks',
                    'rev',
                    'time'
                ],
                properties: {
                    seq: {
                        type: 'integer',
                        description: 'The stream sequence number of this message.'
                    },
                    did: {
                        type: 'string',
                        format: 'did',
                        description: 'The account this repo event corresponds to. Must match that in the commit object.'
                    },
                    blocks: {
                        type: 'bytes',
                        description: "CAR file containing the commit, as a block. The CAR header must include the commit block CID as the first 'root'.",
                        maxLength: 10000
                    },
                    rev: {
                        type: 'string',
                        description: 'The rev of the commit. This value must match that in the commit object.'
                    },
                    time: {
                        type: 'string',
                        format: 'datetime',
                        description: 'Timestamp of when this message was originally broadcast.'
                    }
                }
            },
            identity: {
                type: 'object',
                description: "Represents a change to an account's identity. Could be an updated handle, signing key, or pds hosting endpoint. Serves as a prod to all downstream services to refresh their identity cache.",
                required: [
                    'seq',
                    'did',
                    'time'
                ],
                properties: {
                    seq: {
                        type: 'integer'
                    },
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    time: {
                        type: 'string',
                        format: 'datetime'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle',
                        description: "The current handle for the account, or 'handle.invalid' if validation fails. This field is optional, might have been validated or passed-through from an upstream source. Semantics and behaviors for PDS vs Relay may evolve in the future; see atproto specs for more details."
                    }
                }
            },
            account: {
                type: 'object',
                description: "Represents a change to an account's status on a host (eg, PDS or Relay). The semantics of this event are that the status is at the host which emitted the event, not necessarily that at the currently active PDS. Eg, a Relay takedown would emit a takedown with active=false, even if the PDS is still active.",
                required: [
                    'seq',
                    'did',
                    'time',
                    'active'
                ],
                properties: {
                    seq: {
                        type: 'integer'
                    },
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    time: {
                        type: 'string',
                        format: 'datetime'
                    },
                    active: {
                        type: 'boolean',
                        description: 'Indicates that the account has a repository which can be fetched from the host that emitted this event.'
                    },
                    status: {
                        type: 'string',
                        description: 'If active=false, this optional field indicates a reason for why the account is not active.',
                        knownValues: [
                            'takendown',
                            'suspended',
                            'deleted',
                            'deactivated',
                            'desynchronized',
                            'throttled'
                        ]
                    }
                }
            },
            info: {
                type: 'object',
                required: [
                    'name'
                ],
                properties: {
                    name: {
                        type: 'string',
                        knownValues: [
                            'OutdatedCursor'
                        ]
                    },
                    message: {
                        type: 'string'
                    }
                }
            },
            repoOp: {
                type: 'object',
                description: 'A repo operation, ie a mutation of a single record.',
                required: [
                    'action',
                    'path',
                    'cid'
                ],
                nullable: [
                    'cid'
                ],
                properties: {
                    action: {
                        type: 'string',
                        knownValues: [
                            'create',
                            'update',
                            'delete'
                        ]
                    },
                    path: {
                        type: 'string'
                    },
                    cid: {
                        type: 'cid-link',
                        description: 'For creates and updates, the new record CID. For deletions, null.'
                    },
                    prev: {
                        type: 'cid-link',
                        description: 'For updates and deletes, the previous record CID (required for inductive firehose). For creations, field should not be defined.'
                    }
                }
            }
        }
    },
    ComAtprotoTempAddReservedHandle: {
        lexicon: 1,
        id: 'com.atproto.temp.addReservedHandle',
        defs: {
            main: {
                type: 'procedure',
                description: 'Add a handle to the set of reserved handles.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'handle'
                        ],
                        properties: {
                            handle: {
                                type: 'string'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {}
                    }
                }
            }
        }
    },
    ComAtprotoTempCheckSignupQueue: {
        lexicon: 1,
        id: 'com.atproto.temp.checkSignupQueue',
        defs: {
            main: {
                type: 'query',
                description: 'Check accounts location in signup queue.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'activated'
                        ],
                        properties: {
                            activated: {
                                type: 'boolean'
                            },
                            placeInQueue: {
                                type: 'integer'
                            },
                            estimatedTimeMs: {
                                type: 'integer'
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoTempFetchLabels: {
        lexicon: 1,
        id: 'com.atproto.temp.fetchLabels',
        defs: {
            main: {
                type: 'query',
                description: 'DEPRECATED: use queryLabels or subscribeLabels instead -- Fetch all labels from a labeler created after a certain date.',
                parameters: {
                    type: 'params',
                    properties: {
                        since: {
                            type: 'integer'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 250,
                            default: 50
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'labels'
                        ],
                        properties: {
                            labels: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.label.defs#label'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ComAtprotoTempRequestPhoneVerification: {
        lexicon: 1,
        id: 'com.atproto.temp.requestPhoneVerification',
        defs: {
            main: {
                type: 'procedure',
                description: 'Request a verification code to be sent to the supplied phone number',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'phoneNumber'
                        ],
                        properties: {
                            phoneNumber: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorDefs: {
        lexicon: 1,
        id: 'app.bsky.actor.defs',
        defs: {
            profileViewBasic: {
                type: 'object',
                required: [
                    'did',
                    'handle'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    },
                    displayName: {
                        type: 'string',
                        maxGraphemes: 64,
                        maxLength: 640
                    },
                    avatar: {
                        type: 'string',
                        format: 'uri'
                    },
                    associated: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileAssociated'
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#viewerState'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    verification: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#verificationState'
                    },
                    status: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#statusView'
                    }
                }
            },
            profileView: {
                type: 'object',
                required: [
                    'did',
                    'handle'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    },
                    displayName: {
                        type: 'string',
                        maxGraphemes: 64,
                        maxLength: 640
                    },
                    description: {
                        type: 'string',
                        maxGraphemes: 256,
                        maxLength: 2560
                    },
                    avatar: {
                        type: 'string',
                        format: 'uri'
                    },
                    associated: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileAssociated'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#viewerState'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    verification: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#verificationState'
                    },
                    status: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#statusView'
                    }
                }
            },
            profileViewDetailed: {
                type: 'object',
                required: [
                    'did',
                    'handle'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    },
                    displayName: {
                        type: 'string',
                        maxGraphemes: 64,
                        maxLength: 640
                    },
                    description: {
                        type: 'string',
                        maxGraphemes: 256,
                        maxLength: 2560
                    },
                    avatar: {
                        type: 'string',
                        format: 'uri'
                    },
                    banner: {
                        type: 'string',
                        format: 'uri'
                    },
                    followersCount: {
                        type: 'integer'
                    },
                    followsCount: {
                        type: 'integer'
                    },
                    postsCount: {
                        type: 'integer'
                    },
                    associated: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileAssociated'
                    },
                    joinedViaStarterPack: {
                        type: 'ref',
                        ref: 'lex:app.bsky.graph.defs#starterPackViewBasic'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#viewerState'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    pinnedPost: {
                        type: 'ref',
                        ref: 'lex:com.atproto.repo.strongRef'
                    },
                    verification: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#verificationState'
                    },
                    status: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#statusView'
                    }
                }
            },
            profileAssociated: {
                type: 'object',
                properties: {
                    lists: {
                        type: 'integer'
                    },
                    feedgens: {
                        type: 'integer'
                    },
                    starterPacks: {
                        type: 'integer'
                    },
                    labeler: {
                        type: 'boolean'
                    },
                    chat: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileAssociatedChat'
                    }
                }
            },
            profileAssociatedChat: {
                type: 'object',
                required: [
                    'allowIncoming'
                ],
                properties: {
                    allowIncoming: {
                        type: 'string',
                        knownValues: [
                            'all',
                            'none',
                            'following'
                        ]
                    }
                }
            },
            viewerState: {
                type: 'object',
                description: "Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.",
                properties: {
                    muted: {
                        type: 'boolean'
                    },
                    mutedByList: {
                        type: 'ref',
                        ref: 'lex:app.bsky.graph.defs#listViewBasic'
                    },
                    blockedBy: {
                        type: 'boolean'
                    },
                    blocking: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    blockingByList: {
                        type: 'ref',
                        ref: 'lex:app.bsky.graph.defs#listViewBasic'
                    },
                    following: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    followedBy: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    knownFollowers: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#knownFollowers'
                    }
                }
            },
            knownFollowers: {
                type: 'object',
                description: "The subject's followers whom you also follow",
                required: [
                    'count',
                    'followers'
                ],
                properties: {
                    count: {
                        type: 'integer'
                    },
                    followers: {
                        type: 'array',
                        minLength: 0,
                        maxLength: 5,
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.actor.defs#profileViewBasic'
                        }
                    }
                }
            },
            verificationState: {
                type: 'object',
                description: 'Represents the verification information about the user this object is attached to.',
                required: [
                    'verifications',
                    'verifiedStatus',
                    'trustedVerifierStatus'
                ],
                properties: {
                    verifications: {
                        type: 'array',
                        description: 'All verifications issued by trusted verifiers on behalf of this user. Verifications by untrusted verifiers are not included.',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.actor.defs#verificationView'
                        }
                    },
                    verifiedStatus: {
                        type: 'string',
                        description: "The user's status as a verified account.",
                        knownValues: [
                            'valid',
                            'invalid',
                            'none'
                        ]
                    },
                    trustedVerifierStatus: {
                        type: 'string',
                        description: "The user's status as a trusted verifier.",
                        knownValues: [
                            'valid',
                            'invalid',
                            'none'
                        ]
                    }
                }
            },
            verificationView: {
                type: 'object',
                description: 'An individual verification for an associated subject.',
                required: [
                    'issuer',
                    'uri',
                    'isValid',
                    'createdAt'
                ],
                properties: {
                    issuer: {
                        type: 'string',
                        description: 'The user who issued this verification.',
                        format: 'did'
                    },
                    uri: {
                        type: 'string',
                        description: 'The AT-URI of the verification record.',
                        format: 'at-uri'
                    },
                    isValid: {
                        type: 'boolean',
                        description: 'True if the verification passes validation, otherwise false.'
                    },
                    createdAt: {
                        type: 'string',
                        description: 'Timestamp when the verification was created.',
                        format: 'datetime'
                    }
                }
            },
            preferences: {
                type: 'array',
                items: {
                    type: 'union',
                    refs: [
                        'lex:app.bsky.actor.defs#adultContentPref',
                        'lex:app.bsky.actor.defs#contentLabelPref',
                        'lex:app.bsky.actor.defs#savedFeedsPref',
                        'lex:app.bsky.actor.defs#savedFeedsPrefV2',
                        'lex:app.bsky.actor.defs#personalDetailsPref',
                        'lex:app.bsky.actor.defs#feedViewPref',
                        'lex:app.bsky.actor.defs#threadViewPref',
                        'lex:app.bsky.actor.defs#interestsPref',
                        'lex:app.bsky.actor.defs#mutedWordsPref',
                        'lex:app.bsky.actor.defs#hiddenPostsPref',
                        'lex:app.bsky.actor.defs#bskyAppStatePref',
                        'lex:app.bsky.actor.defs#labelersPref',
                        'lex:app.bsky.actor.defs#postInteractionSettingsPref',
                        'lex:app.bsky.actor.defs#verificationPrefs'
                    ]
                }
            },
            adultContentPref: {
                type: 'object',
                required: [
                    'enabled'
                ],
                properties: {
                    enabled: {
                        type: 'boolean',
                        default: false
                    }
                }
            },
            contentLabelPref: {
                type: 'object',
                required: [
                    'label',
                    'visibility'
                ],
                properties: {
                    labelerDid: {
                        type: 'string',
                        description: 'Which labeler does this preference apply to? If undefined, applies globally.',
                        format: 'did'
                    },
                    label: {
                        type: 'string'
                    },
                    visibility: {
                        type: 'string',
                        knownValues: [
                            'ignore',
                            'show',
                            'warn',
                            'hide'
                        ]
                    }
                }
            },
            savedFeed: {
                type: 'object',
                required: [
                    'id',
                    'type',
                    'value',
                    'pinned'
                ],
                properties: {
                    id: {
                        type: 'string'
                    },
                    type: {
                        type: 'string',
                        knownValues: [
                            'feed',
                            'list',
                            'timeline'
                        ]
                    },
                    value: {
                        type: 'string'
                    },
                    pinned: {
                        type: 'boolean'
                    }
                }
            },
            savedFeedsPrefV2: {
                type: 'object',
                required: [
                    'items'
                ],
                properties: {
                    items: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.actor.defs#savedFeed'
                        }
                    }
                }
            },
            savedFeedsPref: {
                type: 'object',
                required: [
                    'pinned',
                    'saved'
                ],
                properties: {
                    pinned: {
                        type: 'array',
                        items: {
                            type: 'string',
                            format: 'at-uri'
                        }
                    },
                    saved: {
                        type: 'array',
                        items: {
                            type: 'string',
                            format: 'at-uri'
                        }
                    },
                    timelineIndex: {
                        type: 'integer'
                    }
                }
            },
            personalDetailsPref: {
                type: 'object',
                properties: {
                    birthDate: {
                        type: 'string',
                        format: 'datetime',
                        description: 'The birth date of account owner.'
                    }
                }
            },
            feedViewPref: {
                type: 'object',
                required: [
                    'feed'
                ],
                properties: {
                    feed: {
                        type: 'string',
                        description: 'The URI of the feed, or an identifier which describes the feed.'
                    },
                    hideReplies: {
                        type: 'boolean',
                        description: 'Hide replies in the feed.'
                    },
                    hideRepliesByUnfollowed: {
                        type: 'boolean',
                        description: 'Hide replies in the feed if they are not by followed users.',
                        default: true
                    },
                    hideRepliesByLikeCount: {
                        type: 'integer',
                        description: 'Hide replies in the feed if they do not have this number of likes.'
                    },
                    hideReposts: {
                        type: 'boolean',
                        description: 'Hide reposts in the feed.'
                    },
                    hideQuotePosts: {
                        type: 'boolean',
                        description: 'Hide quote posts in the feed.'
                    }
                }
            },
            threadViewPref: {
                type: 'object',
                properties: {
                    sort: {
                        type: 'string',
                        description: 'Sorting mode for threads.',
                        knownValues: [
                            'oldest',
                            'newest',
                            'most-likes',
                            'random',
                            'hotness'
                        ]
                    },
                    prioritizeFollowedUsers: {
                        type: 'boolean',
                        description: 'Show followed users at the top of all replies.'
                    }
                }
            },
            interestsPref: {
                type: 'object',
                required: [
                    'tags'
                ],
                properties: {
                    tags: {
                        type: 'array',
                        maxLength: 100,
                        items: {
                            type: 'string',
                            maxLength: 640,
                            maxGraphemes: 64
                        },
                        description: "A list of tags which describe the account owner's interests gathered during onboarding."
                    }
                }
            },
            mutedWordTarget: {
                type: 'string',
                knownValues: [
                    'content',
                    'tag'
                ],
                maxLength: 640,
                maxGraphemes: 64
            },
            mutedWord: {
                type: 'object',
                description: 'A word that the account owner has muted.',
                required: [
                    'value',
                    'targets'
                ],
                properties: {
                    id: {
                        type: 'string'
                    },
                    value: {
                        type: 'string',
                        description: 'The muted word itself.',
                        maxLength: 10000,
                        maxGraphemes: 1000
                    },
                    targets: {
                        type: 'array',
                        description: 'The intended targets of the muted word.',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.actor.defs#mutedWordTarget'
                        }
                    },
                    actorTarget: {
                        type: 'string',
                        description: 'Groups of users to apply the muted word to. If undefined, applies to all users.',
                        knownValues: [
                            'all',
                            'exclude-following'
                        ],
                        default: 'all'
                    },
                    expiresAt: {
                        type: 'string',
                        format: 'datetime',
                        description: 'The date and time at which the muted word will expire and no longer be applied.'
                    }
                }
            },
            mutedWordsPref: {
                type: 'object',
                required: [
                    'items'
                ],
                properties: {
                    items: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.actor.defs#mutedWord'
                        },
                        description: 'A list of words the account owner has muted.'
                    }
                }
            },
            hiddenPostsPref: {
                type: 'object',
                required: [
                    'items'
                ],
                properties: {
                    items: {
                        type: 'array',
                        items: {
                            type: 'string',
                            format: 'at-uri'
                        },
                        description: 'A list of URIs of posts the account owner has hidden.'
                    }
                }
            },
            labelersPref: {
                type: 'object',
                required: [
                    'labelers'
                ],
                properties: {
                    labelers: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.actor.defs#labelerPrefItem'
                        }
                    }
                }
            },
            labelerPrefItem: {
                type: 'object',
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    }
                }
            },
            bskyAppStatePref: {
                description: "A grab bag of state that's specific to the bsky.app program. Third-party apps shouldn't use this.",
                type: 'object',
                properties: {
                    activeProgressGuide: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#bskyAppProgressGuide'
                    },
                    queuedNudges: {
                        description: 'An array of tokens which identify nudges (modals, popups, tours, highlight dots) that should be shown to the user.',
                        type: 'array',
                        maxLength: 1000,
                        items: {
                            type: 'string',
                            maxLength: 100
                        }
                    },
                    nuxs: {
                        description: 'Storage for NUXs the user has encountered.',
                        type: 'array',
                        maxLength: 100,
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.actor.defs#nux'
                        }
                    }
                }
            },
            bskyAppProgressGuide: {
                description: 'If set, an active progress guide. Once completed, can be set to undefined. Should have unspecced fields tracking progress.',
                type: 'object',
                required: [
                    'guide'
                ],
                properties: {
                    guide: {
                        type: 'string',
                        maxLength: 100
                    }
                }
            },
            nux: {
                type: 'object',
                description: 'A new user experiences (NUX) storage object',
                required: [
                    'id',
                    'completed'
                ],
                properties: {
                    id: {
                        type: 'string',
                        maxLength: 100
                    },
                    completed: {
                        type: 'boolean',
                        default: false
                    },
                    data: {
                        description: 'Arbitrary data for the NUX. The structure is defined by the NUX itself. Limited to 300 characters.',
                        type: 'string',
                        maxLength: 3000,
                        maxGraphemes: 300
                    },
                    expiresAt: {
                        type: 'string',
                        format: 'datetime',
                        description: 'The date and time at which the NUX will expire and should be considered completed.'
                    }
                }
            },
            verificationPrefs: {
                type: 'object',
                description: 'Preferences for how verified accounts appear in the app.',
                required: [],
                properties: {
                    hideBadges: {
                        description: 'Hide the blue check badges for verified accounts and trusted verifiers.',
                        type: 'boolean',
                        default: false
                    }
                }
            },
            postInteractionSettingsPref: {
                type: 'object',
                description: 'Default post interaction settings for the account. These values should be applied as default values when creating new posts. These refs should mirror the threadgate and postgate records exactly.',
                required: [],
                properties: {
                    threadgateAllowRules: {
                        description: 'Matches threadgate record. List of rules defining who can reply to this users posts. If value is an empty array, no one can reply. If value is undefined, anyone can reply.',
                        type: 'array',
                        maxLength: 5,
                        items: {
                            type: 'union',
                            refs: [
                                'lex:app.bsky.feed.threadgate#mentionRule',
                                'lex:app.bsky.feed.threadgate#followerRule',
                                'lex:app.bsky.feed.threadgate#followingRule',
                                'lex:app.bsky.feed.threadgate#listRule'
                            ]
                        }
                    },
                    postgateEmbeddingRules: {
                        description: 'Matches postgate record. List of rules defining who can embed this users posts. If value is an empty array or is undefined, no particular rules apply and anyone can embed.',
                        type: 'array',
                        maxLength: 5,
                        items: {
                            type: 'union',
                            refs: [
                                'lex:app.bsky.feed.postgate#disableRule'
                            ]
                        }
                    }
                }
            },
            statusView: {
                type: 'object',
                required: [
                    'status',
                    'record'
                ],
                properties: {
                    status: {
                        type: 'string',
                        description: 'The status for the account.',
                        knownValues: [
                            'app.bsky.actor.status#live'
                        ]
                    },
                    record: {
                        type: 'unknown'
                    },
                    embed: {
                        type: 'union',
                        description: 'An optional embed associated with the status.',
                        refs: [
                            'lex:app.bsky.embed.external#view'
                        ]
                    },
                    expiresAt: {
                        type: 'string',
                        description: 'The date when this status will expire. The application might choose to no longer return the status after expiration.',
                        format: 'datetime'
                    },
                    isActive: {
                        type: 'boolean',
                        description: 'True if the status is not expired, false if it is expired. Only present if expiration was set.'
                    }
                }
            }
        }
    },
    AppBskyActorGetPreferences: {
        lexicon: 1,
        id: 'app.bsky.actor.getPreferences',
        defs: {
            main: {
                type: 'query',
                description: 'Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.',
                parameters: {
                    type: 'params',
                    properties: {}
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'preferences'
                        ],
                        properties: {
                            preferences: {
                                type: 'ref',
                                ref: 'lex:app.bsky.actor.defs#preferences'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorGetProfile: {
        lexicon: 1,
        id: 'app.bsky.actor.getProfile',
        defs: {
            main: {
                type: 'query',
                description: 'Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'Handle or DID of account to fetch profile of.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileViewDetailed'
                    }
                }
            }
        }
    },
    AppBskyActorGetProfiles: {
        lexicon: 1,
        id: 'app.bsky.actor.getProfiles',
        defs: {
            main: {
                type: 'query',
                description: 'Get detailed profile views of multiple actors.',
                parameters: {
                    type: 'params',
                    required: [
                        'actors'
                    ],
                    properties: {
                        actors: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'at-identifier'
                            },
                            maxLength: 25
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'profiles'
                        ],
                        properties: {
                            profiles: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileViewDetailed'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorGetSuggestions: {
        lexicon: 1,
        id: 'app.bsky.actor.getSuggestions',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'actors'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            actors: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            },
                            recId: {
                                type: 'integer',
                                description: 'Snowflake for this recommendation, use when submitting recommendation events.'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorProfile: {
        lexicon: 1,
        id: 'app.bsky.actor.profile',
        defs: {
            main: {
                type: 'record',
                description: 'A declaration of a Bluesky account profile.',
                key: 'literal:self',
                record: {
                    type: 'object',
                    properties: {
                        displayName: {
                            type: 'string',
                            maxGraphemes: 64,
                            maxLength: 640
                        },
                        description: {
                            type: 'string',
                            description: 'Free-form profile description text.',
                            maxGraphemes: 256,
                            maxLength: 2560
                        },
                        avatar: {
                            type: 'blob',
                            description: "Small image to be displayed next to posts from account. AKA, 'profile picture'",
                            accept: [
                                'image/png',
                                'image/jpeg'
                            ],
                            maxSize: 1000000
                        },
                        banner: {
                            type: 'blob',
                            description: 'Larger horizontal image to display behind profile view.',
                            accept: [
                                'image/png',
                                'image/jpeg'
                            ],
                            maxSize: 1000000
                        },
                        labels: {
                            type: 'union',
                            description: 'Self-label values, specific to the Bluesky application, on the overall account.',
                            refs: [
                                'lex:com.atproto.label.defs#selfLabels'
                            ]
                        },
                        joinedViaStarterPack: {
                            type: 'ref',
                            ref: 'lex:com.atproto.repo.strongRef'
                        },
                        pinnedPost: {
                            type: 'ref',
                            ref: 'lex:com.atproto.repo.strongRef'
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyActorPutPreferences: {
        lexicon: 1,
        id: 'app.bsky.actor.putPreferences',
        defs: {
            main: {
                type: 'procedure',
                description: 'Set the private preferences attached to the account.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'preferences'
                        ],
                        properties: {
                            preferences: {
                                type: 'ref',
                                ref: 'lex:app.bsky.actor.defs#preferences'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorSearchActors: {
        lexicon: 1,
        id: 'app.bsky.actor.searchActors',
        defs: {
            main: {
                type: 'query',
                description: 'Find actors (profiles) matching search criteria. Does not require auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        term: {
                            type: 'string',
                            description: "DEPRECATED: use 'q' instead."
                        },
                        q: {
                            type: 'string',
                            description: 'Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 25
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'actors'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            actors: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorSearchActorsTypeahead: {
        lexicon: 1,
        id: 'app.bsky.actor.searchActorsTypeahead',
        defs: {
            main: {
                type: 'query',
                description: 'Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        term: {
                            type: 'string',
                            description: "DEPRECATED: use 'q' instead."
                        },
                        q: {
                            type: 'string',
                            description: 'Search query prefix; not a full query string.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 10
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'actors'
                        ],
                        properties: {
                            actors: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileViewBasic'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyActorStatus: {
        lexicon: 1,
        id: 'app.bsky.actor.status',
        defs: {
            main: {
                type: 'record',
                description: 'A declaration of a Bluesky account status.',
                key: 'literal:self',
                record: {
                    type: 'object',
                    required: [
                        'status',
                        'createdAt'
                    ],
                    properties: {
                        status: {
                            type: 'string',
                            description: 'The status for the account.',
                            knownValues: [
                                'app.bsky.actor.status#live'
                            ]
                        },
                        embed: {
                            type: 'union',
                            description: 'An optional embed associated with the status.',
                            refs: [
                                'lex:app.bsky.embed.external'
                            ]
                        },
                        durationMinutes: {
                            type: 'integer',
                            description: 'The duration of the status in minutes. Applications can choose to impose minimum and maximum limits.',
                            minimum: 1
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            },
            live: {
                type: 'token',
                description: 'Advertises an account as currently offering live content.'
            }
        }
    },
    AppBskyEmbedDefs: {
        lexicon: 1,
        id: 'app.bsky.embed.defs',
        defs: {
            aspectRatio: {
                type: 'object',
                description: 'width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit.',
                required: [
                    'width',
                    'height'
                ],
                properties: {
                    width: {
                        type: 'integer',
                        minimum: 1
                    },
                    height: {
                        type: 'integer',
                        minimum: 1
                    }
                }
            }
        }
    },
    AppBskyEmbedExternal: {
        lexicon: 1,
        id: 'app.bsky.embed.external',
        defs: {
            main: {
                type: 'object',
                description: "A representation of some externally linked content (eg, a URL and 'card'), embedded in a Bluesky record (eg, a post).",
                required: [
                    'external'
                ],
                properties: {
                    external: {
                        type: 'ref',
                        ref: 'lex:app.bsky.embed.external#external'
                    }
                }
            },
            external: {
                type: 'object',
                required: [
                    'uri',
                    'title',
                    'description'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'uri'
                    },
                    title: {
                        type: 'string'
                    },
                    description: {
                        type: 'string'
                    },
                    thumb: {
                        type: 'blob',
                        accept: [
                            'image/*'
                        ],
                        maxSize: 1000000
                    }
                }
            },
            view: {
                type: 'object',
                required: [
                    'external'
                ],
                properties: {
                    external: {
                        type: 'ref',
                        ref: 'lex:app.bsky.embed.external#viewExternal'
                    }
                }
            },
            viewExternal: {
                type: 'object',
                required: [
                    'uri',
                    'title',
                    'description'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'uri'
                    },
                    title: {
                        type: 'string'
                    },
                    description: {
                        type: 'string'
                    },
                    thumb: {
                        type: 'string',
                        format: 'uri'
                    }
                }
            }
        }
    },
    AppBskyEmbedImages: {
        lexicon: 1,
        id: 'app.bsky.embed.images',
        description: 'A set of images embedded in a Bluesky record (eg, a post).',
        defs: {
            main: {
                type: 'object',
                required: [
                    'images'
                ],
                properties: {
                    images: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.embed.images#image'
                        },
                        maxLength: 4
                    }
                }
            },
            image: {
                type: 'object',
                required: [
                    'image',
                    'alt'
                ],
                properties: {
                    image: {
                        type: 'blob',
                        accept: [
                            'image/*'
                        ],
                        maxSize: 1000000
                    },
                    alt: {
                        type: 'string',
                        description: 'Alt text description of the image, for accessibility.'
                    },
                    aspectRatio: {
                        type: 'ref',
                        ref: 'lex:app.bsky.embed.defs#aspectRatio'
                    }
                }
            },
            view: {
                type: 'object',
                required: [
                    'images'
                ],
                properties: {
                    images: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.embed.images#viewImage'
                        },
                        maxLength: 4
                    }
                }
            },
            viewImage: {
                type: 'object',
                required: [
                    'thumb',
                    'fullsize',
                    'alt'
                ],
                properties: {
                    thumb: {
                        type: 'string',
                        format: 'uri',
                        description: 'Fully-qualified URL where a thumbnail of the image can be fetched. For example, CDN location provided by the App View.'
                    },
                    fullsize: {
                        type: 'string',
                        format: 'uri',
                        description: 'Fully-qualified URL where a large version of the image can be fetched. May or may not be the exact original blob. For example, CDN location provided by the App View.'
                    },
                    alt: {
                        type: 'string',
                        description: 'Alt text description of the image, for accessibility.'
                    },
                    aspectRatio: {
                        type: 'ref',
                        ref: 'lex:app.bsky.embed.defs#aspectRatio'
                    }
                }
            }
        }
    },
    AppBskyEmbedRecord: {
        lexicon: 1,
        id: 'app.bsky.embed.record',
        description: 'A representation of a record embedded in a Bluesky record (eg, a post). For example, a quote-post, or sharing a feed generator record.',
        defs: {
            main: {
                type: 'object',
                required: [
                    'record'
                ],
                properties: {
                    record: {
                        type: 'ref',
                        ref: 'lex:com.atproto.repo.strongRef'
                    }
                }
            },
            view: {
                type: 'object',
                required: [
                    'record'
                ],
                properties: {
                    record: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.embed.record#viewRecord',
                            'lex:app.bsky.embed.record#viewNotFound',
                            'lex:app.bsky.embed.record#viewBlocked',
                            'lex:app.bsky.embed.record#viewDetached',
                            'lex:app.bsky.feed.defs#generatorView',
                            'lex:app.bsky.graph.defs#listView',
                            'lex:app.bsky.labeler.defs#labelerView',
                            'lex:app.bsky.graph.defs#starterPackViewBasic'
                        ]
                    }
                }
            },
            viewRecord: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'author',
                    'value',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    author: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileViewBasic'
                    },
                    value: {
                        type: 'unknown',
                        description: 'The record data itself.'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    replyCount: {
                        type: 'integer'
                    },
                    repostCount: {
                        type: 'integer'
                    },
                    likeCount: {
                        type: 'integer'
                    },
                    quoteCount: {
                        type: 'integer'
                    },
                    embeds: {
                        type: 'array',
                        items: {
                            type: 'union',
                            refs: [
                                'lex:app.bsky.embed.images#view',
                                'lex:app.bsky.embed.video#view',
                                'lex:app.bsky.embed.external#view',
                                'lex:app.bsky.embed.record#view',
                                'lex:app.bsky.embed.recordWithMedia#view'
                            ]
                        }
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            viewNotFound: {
                type: 'object',
                required: [
                    'uri',
                    'notFound'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    notFound: {
                        type: 'boolean',
                        const: true
                    }
                }
            },
            viewBlocked: {
                type: 'object',
                required: [
                    'uri',
                    'blocked',
                    'author'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    blocked: {
                        type: 'boolean',
                        const: true
                    },
                    author: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.defs#blockedAuthor'
                    }
                }
            },
            viewDetached: {
                type: 'object',
                required: [
                    'uri',
                    'detached'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    detached: {
                        type: 'boolean',
                        const: true
                    }
                }
            }
        }
    },
    AppBskyEmbedRecordWithMedia: {
        lexicon: 1,
        id: 'app.bsky.embed.recordWithMedia',
        description: 'A representation of a record embedded in a Bluesky record (eg, a post), alongside other compatible embeds. For example, a quote post and image, or a quote post and external URL card.',
        defs: {
            main: {
                type: 'object',
                required: [
                    'record',
                    'media'
                ],
                properties: {
                    record: {
                        type: 'ref',
                        ref: 'lex:app.bsky.embed.record'
                    },
                    media: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.embed.images',
                            'lex:app.bsky.embed.video',
                            'lex:app.bsky.embed.external'
                        ]
                    }
                }
            },
            view: {
                type: 'object',
                required: [
                    'record',
                    'media'
                ],
                properties: {
                    record: {
                        type: 'ref',
                        ref: 'lex:app.bsky.embed.record#view'
                    },
                    media: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.embed.images#view',
                            'lex:app.bsky.embed.video#view',
                            'lex:app.bsky.embed.external#view'
                        ]
                    }
                }
            }
        }
    },
    AppBskyEmbedVideo: {
        lexicon: 1,
        id: 'app.bsky.embed.video',
        description: 'A video embedded in a Bluesky record (eg, a post).',
        defs: {
            main: {
                type: 'object',
                required: [
                    'video'
                ],
                properties: {
                    video: {
                        type: 'blob',
                        description: 'The mp4 video file. May be up to 100mb, formerly limited to 50mb.',
                        accept: [
                            'video/mp4'
                        ],
                        maxSize: 100000000
                    },
                    captions: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.embed.video#caption'
                        },
                        maxLength: 20
                    },
                    alt: {
                        type: 'string',
                        description: 'Alt text description of the video, for accessibility.',
                        maxGraphemes: 1000,
                        maxLength: 10000
                    },
                    aspectRatio: {
                        type: 'ref',
                        ref: 'lex:app.bsky.embed.defs#aspectRatio'
                    }
                }
            },
            caption: {
                type: 'object',
                required: [
                    'lang',
                    'file'
                ],
                properties: {
                    lang: {
                        type: 'string',
                        format: 'language'
                    },
                    file: {
                        type: 'blob',
                        accept: [
                            'text/vtt'
                        ],
                        maxSize: 20000
                    }
                }
            },
            view: {
                type: 'object',
                required: [
                    'cid',
                    'playlist'
                ],
                properties: {
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    playlist: {
                        type: 'string',
                        format: 'uri'
                    },
                    thumbnail: {
                        type: 'string',
                        format: 'uri'
                    },
                    alt: {
                        type: 'string',
                        maxGraphemes: 1000,
                        maxLength: 10000
                    },
                    aspectRatio: {
                        type: 'ref',
                        ref: 'lex:app.bsky.embed.defs#aspectRatio'
                    }
                }
            }
        }
    },
    AppBskyFeedDefs: {
        lexicon: 1,
        id: 'app.bsky.feed.defs',
        defs: {
            postView: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'author',
                    'record',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    author: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileViewBasic'
                    },
                    record: {
                        type: 'unknown'
                    },
                    embed: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.embed.images#view',
                            'lex:app.bsky.embed.video#view',
                            'lex:app.bsky.embed.external#view',
                            'lex:app.bsky.embed.record#view',
                            'lex:app.bsky.embed.recordWithMedia#view'
                        ]
                    },
                    replyCount: {
                        type: 'integer'
                    },
                    repostCount: {
                        type: 'integer'
                    },
                    likeCount: {
                        type: 'integer'
                    },
                    quoteCount: {
                        type: 'integer'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.defs#viewerState'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    threadgate: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.defs#threadgateView'
                    }
                }
            },
            viewerState: {
                type: 'object',
                description: "Metadata about the requesting account's relationship with the subject content. Only has meaningful content for authed requests.",
                properties: {
                    repost: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    like: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    threadMuted: {
                        type: 'boolean'
                    },
                    replyDisabled: {
                        type: 'boolean'
                    },
                    embeddingDisabled: {
                        type: 'boolean'
                    },
                    pinned: {
                        type: 'boolean'
                    }
                }
            },
            threadContext: {
                type: 'object',
                description: 'Metadata about this post within the context of the thread it is in.',
                properties: {
                    rootAuthorLike: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            feedViewPost: {
                type: 'object',
                required: [
                    'post'
                ],
                properties: {
                    post: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.defs#postView'
                    },
                    reply: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.defs#replyRef'
                    },
                    reason: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.feed.defs#reasonRepost',
                            'lex:app.bsky.feed.defs#reasonPin'
                        ]
                    },
                    feedContext: {
                        type: 'string',
                        description: 'Context provided by feed generator that may be passed back alongside interactions.',
                        maxLength: 2000
                    }
                }
            },
            replyRef: {
                type: 'object',
                required: [
                    'root',
                    'parent'
                ],
                properties: {
                    root: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.feed.defs#postView',
                            'lex:app.bsky.feed.defs#notFoundPost',
                            'lex:app.bsky.feed.defs#blockedPost'
                        ]
                    },
                    parent: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.feed.defs#postView',
                            'lex:app.bsky.feed.defs#notFoundPost',
                            'lex:app.bsky.feed.defs#blockedPost'
                        ]
                    },
                    grandparentAuthor: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileViewBasic',
                        description: 'When parent is a reply to another post, this is the author of that post.'
                    }
                }
            },
            reasonRepost: {
                type: 'object',
                required: [
                    'by',
                    'indexedAt'
                ],
                properties: {
                    by: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileViewBasic'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            reasonPin: {
                type: 'object',
                properties: {}
            },
            threadViewPost: {
                type: 'object',
                required: [
                    'post'
                ],
                properties: {
                    post: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.defs#postView'
                    },
                    parent: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.feed.defs#threadViewPost',
                            'lex:app.bsky.feed.defs#notFoundPost',
                            'lex:app.bsky.feed.defs#blockedPost'
                        ]
                    },
                    replies: {
                        type: 'array',
                        items: {
                            type: 'union',
                            refs: [
                                'lex:app.bsky.feed.defs#threadViewPost',
                                'lex:app.bsky.feed.defs#notFoundPost',
                                'lex:app.bsky.feed.defs#blockedPost'
                            ]
                        }
                    },
                    threadContext: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.defs#threadContext'
                    }
                }
            },
            notFoundPost: {
                type: 'object',
                required: [
                    'uri',
                    'notFound'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    notFound: {
                        type: 'boolean',
                        const: true
                    }
                }
            },
            blockedPost: {
                type: 'object',
                required: [
                    'uri',
                    'blocked',
                    'author'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    blocked: {
                        type: 'boolean',
                        const: true
                    },
                    author: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.defs#blockedAuthor'
                    }
                }
            },
            blockedAuthor: {
                type: 'object',
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#viewerState'
                    }
                }
            },
            generatorView: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'did',
                    'creator',
                    'displayName',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    creator: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileView'
                    },
                    displayName: {
                        type: 'string'
                    },
                    description: {
                        type: 'string',
                        maxGraphemes: 300,
                        maxLength: 3000
                    },
                    descriptionFacets: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.richtext.facet'
                        }
                    },
                    avatar: {
                        type: 'string',
                        format: 'uri'
                    },
                    likeCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    acceptsInteractions: {
                        type: 'boolean'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.defs#generatorViewerState'
                    },
                    contentMode: {
                        type: 'string',
                        knownValues: [
                            'app.bsky.feed.defs#contentModeUnspecified',
                            'app.bsky.feed.defs#contentModeVideo'
                        ]
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            generatorViewerState: {
                type: 'object',
                properties: {
                    like: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            skeletonFeedPost: {
                type: 'object',
                required: [
                    'post'
                ],
                properties: {
                    post: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    reason: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.feed.defs#skeletonReasonRepost',
                            'lex:app.bsky.feed.defs#skeletonReasonPin'
                        ]
                    },
                    feedContext: {
                        type: 'string',
                        description: 'Context that will be passed through to client and may be passed to feed generator back alongside interactions.',
                        maxLength: 2000
                    }
                }
            },
            skeletonReasonRepost: {
                type: 'object',
                required: [
                    'repost'
                ],
                properties: {
                    repost: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            skeletonReasonPin: {
                type: 'object',
                properties: {}
            },
            threadgateView: {
                type: 'object',
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    record: {
                        type: 'unknown'
                    },
                    lists: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.graph.defs#listViewBasic'
                        }
                    }
                }
            },
            interaction: {
                type: 'object',
                properties: {
                    item: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    event: {
                        type: 'string',
                        knownValues: [
                            'app.bsky.feed.defs#requestLess',
                            'app.bsky.feed.defs#requestMore',
                            'app.bsky.feed.defs#clickthroughItem',
                            'app.bsky.feed.defs#clickthroughAuthor',
                            'app.bsky.feed.defs#clickthroughReposter',
                            'app.bsky.feed.defs#clickthroughEmbed',
                            'app.bsky.feed.defs#interactionSeen',
                            'app.bsky.feed.defs#interactionLike',
                            'app.bsky.feed.defs#interactionRepost',
                            'app.bsky.feed.defs#interactionReply',
                            'app.bsky.feed.defs#interactionQuote',
                            'app.bsky.feed.defs#interactionShare'
                        ]
                    },
                    feedContext: {
                        type: 'string',
                        description: 'Context on a feed item that was originally supplied by the feed generator on getFeedSkeleton.',
                        maxLength: 2000
                    }
                }
            },
            requestLess: {
                type: 'token',
                description: 'Request that less content like the given feed item be shown in the feed'
            },
            requestMore: {
                type: 'token',
                description: 'Request that more content like the given feed item be shown in the feed'
            },
            clickthroughItem: {
                type: 'token',
                description: 'User clicked through to the feed item'
            },
            clickthroughAuthor: {
                type: 'token',
                description: 'User clicked through to the author of the feed item'
            },
            clickthroughReposter: {
                type: 'token',
                description: 'User clicked through to the reposter of the feed item'
            },
            clickthroughEmbed: {
                type: 'token',
                description: 'User clicked through to the embedded content of the feed item'
            },
            contentModeUnspecified: {
                type: 'token',
                description: 'Declares the feed generator returns any types of posts.'
            },
            contentModeVideo: {
                type: 'token',
                description: 'Declares the feed generator returns posts containing app.bsky.embed.video embeds.'
            },
            interactionSeen: {
                type: 'token',
                description: 'Feed item was seen by user'
            },
            interactionLike: {
                type: 'token',
                description: 'User liked the feed item'
            },
            interactionRepost: {
                type: 'token',
                description: 'User reposted the feed item'
            },
            interactionReply: {
                type: 'token',
                description: 'User replied to the feed item'
            },
            interactionQuote: {
                type: 'token',
                description: 'User quoted the feed item'
            },
            interactionShare: {
                type: 'token',
                description: 'User shared the feed item'
            }
        }
    },
    AppBskyFeedDescribeFeedGenerator: {
        lexicon: 1,
        id: 'app.bsky.feed.describeFeedGenerator',
        defs: {
            main: {
                type: 'query',
                description: 'Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did',
                            'feeds'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            feeds: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.describeFeedGenerator#feed'
                                }
                            },
                            links: {
                                type: 'ref',
                                ref: 'lex:app.bsky.feed.describeFeedGenerator#links'
                            }
                        }
                    }
                }
            },
            feed: {
                type: 'object',
                required: [
                    'uri'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            links: {
                type: 'object',
                properties: {
                    privacyPolicy: {
                        type: 'string'
                    },
                    termsOfService: {
                        type: 'string'
                    }
                }
            }
        }
    },
    AppBskyFeedGenerator: {
        lexicon: 1,
        id: 'app.bsky.feed.generator',
        defs: {
            main: {
                type: 'record',
                description: 'Record declaring of the existence of a feed generator, and containing metadata about it. The record can exist in any repository.',
                key: 'any',
                record: {
                    type: 'object',
                    required: [
                        'did',
                        'displayName',
                        'createdAt'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did'
                        },
                        displayName: {
                            type: 'string',
                            maxGraphemes: 24,
                            maxLength: 240
                        },
                        description: {
                            type: 'string',
                            maxGraphemes: 300,
                            maxLength: 3000
                        },
                        descriptionFacets: {
                            type: 'array',
                            items: {
                                type: 'ref',
                                ref: 'lex:app.bsky.richtext.facet'
                            }
                        },
                        avatar: {
                            type: 'blob',
                            accept: [
                                'image/png',
                                'image/jpeg'
                            ],
                            maxSize: 1000000
                        },
                        acceptsInteractions: {
                            type: 'boolean',
                            description: 'Declaration that a feed accepts feedback interactions from a client through app.bsky.feed.sendInteractions'
                        },
                        labels: {
                            type: 'union',
                            description: 'Self-label values',
                            refs: [
                                'lex:com.atproto.label.defs#selfLabels'
                            ]
                        },
                        contentMode: {
                            type: 'string',
                            knownValues: [
                                'app.bsky.feed.defs#contentModeUnspecified',
                                'app.bsky.feed.defs#contentModeVideo'
                            ]
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetActorFeeds: {
        lexicon: 1,
        id: 'app.bsky.feed.getActorFeeds',
        defs: {
            main: {
                type: 'query',
                description: "Get a list of feeds (feed generator records) created by the actor (in the actor's repo).",
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feeds'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feeds: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#generatorView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetActorLikes: {
        lexicon: 1,
        id: 'app.bsky.feed.getActorLikes',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feed'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feed: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#feedViewPost'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'BlockedActor'
                    },
                    {
                        name: 'BlockedByActor'
                    }
                ]
            }
        }
    },
    AppBskyFeedGetAuthorFeed: {
        lexicon: 1,
        id: 'app.bsky.feed.getAuthorFeed',
        defs: {
            main: {
                type: 'query',
                description: "Get a view of an actor's 'author feed' (post and reposts by the author). Does not require auth.",
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        },
                        filter: {
                            type: 'string',
                            description: 'Combinations of post/repost types to include in response.',
                            knownValues: [
                                'posts_with_replies',
                                'posts_no_replies',
                                'posts_with_media',
                                'posts_and_author_threads',
                                'posts_with_video'
                            ],
                            default: 'posts_with_replies'
                        },
                        includePins: {
                            type: 'boolean',
                            default: false
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feed'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feed: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#feedViewPost'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'BlockedActor'
                    },
                    {
                        name: 'BlockedByActor'
                    }
                ]
            }
        }
    },
    AppBskyFeedGetFeed: {
        lexicon: 1,
        id: 'app.bsky.feed.getFeed',
        defs: {
            main: {
                type: 'query',
                description: "Get a hydrated feed from an actor's selected feed generator. Implemented by App View.",
                parameters: {
                    type: 'params',
                    required: [
                        'feed'
                    ],
                    properties: {
                        feed: {
                            type: 'string',
                            format: 'at-uri'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feed'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feed: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#feedViewPost'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'UnknownFeed'
                    }
                ]
            }
        }
    },
    AppBskyFeedGetFeedGenerator: {
        lexicon: 1,
        id: 'app.bsky.feed.getFeedGenerator',
        defs: {
            main: {
                type: 'query',
                description: 'Get information about a feed generator. Implemented by AppView.',
                parameters: {
                    type: 'params',
                    required: [
                        'feed'
                    ],
                    properties: {
                        feed: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'AT-URI of the feed generator record.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'view',
                            'isOnline',
                            'isValid'
                        ],
                        properties: {
                            view: {
                                type: 'ref',
                                ref: 'lex:app.bsky.feed.defs#generatorView'
                            },
                            isOnline: {
                                type: 'boolean',
                                description: 'Indicates whether the feed generator service has been online recently, or else seems to be inactive.'
                            },
                            isValid: {
                                type: 'boolean',
                                description: 'Indicates whether the feed generator service is compatible with the record declaration.'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetFeedGenerators: {
        lexicon: 1,
        id: 'app.bsky.feed.getFeedGenerators',
        defs: {
            main: {
                type: 'query',
                description: 'Get information about a list of feed generators.',
                parameters: {
                    type: 'params',
                    required: [
                        'feeds'
                    ],
                    properties: {
                        feeds: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'at-uri'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feeds'
                        ],
                        properties: {
                            feeds: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#generatorView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetFeedSkeleton: {
        lexicon: 1,
        id: 'app.bsky.feed.getFeedSkeleton',
        defs: {
            main: {
                type: 'query',
                description: 'Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.',
                parameters: {
                    type: 'params',
                    required: [
                        'feed'
                    ],
                    properties: {
                        feed: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference to feed generator record describing the specific feed being requested.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feed'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feed: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#skeletonFeedPost'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'UnknownFeed'
                    }
                ]
            }
        }
    },
    AppBskyFeedGetLikes: {
        lexicon: 1,
        id: 'app.bsky.feed.getLikes',
        defs: {
            main: {
                type: 'query',
                description: 'Get like records which reference a subject (by AT-URI and CID).',
                parameters: {
                    type: 'params',
                    required: [
                        'uri'
                    ],
                    properties: {
                        uri: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'AT-URI of the subject (eg, a post record).'
                        },
                        cid: {
                            type: 'string',
                            format: 'cid',
                            description: 'CID of the subject record (aka, specific version of record), to filter likes.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'uri',
                            'likes'
                        ],
                        properties: {
                            uri: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            cid: {
                                type: 'string',
                                format: 'cid'
                            },
                            cursor: {
                                type: 'string'
                            },
                            likes: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.getLikes#like'
                                }
                            }
                        }
                    }
                }
            },
            like: {
                type: 'object',
                required: [
                    'indexedAt',
                    'createdAt',
                    'actor'
                ],
                properties: {
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    actor: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileView'
                    }
                }
            }
        }
    },
    AppBskyFeedGetListFeed: {
        lexicon: 1,
        id: 'app.bsky.feed.getListFeed',
        defs: {
            main: {
                type: 'query',
                description: 'Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'list'
                    ],
                    properties: {
                        list: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) to the list record.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feed'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feed: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#feedViewPost'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'UnknownList'
                    }
                ]
            }
        }
    },
    AppBskyFeedGetPosts: {
        lexicon: 1,
        id: 'app.bsky.feed.getPosts',
        defs: {
            main: {
                type: 'query',
                description: "Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as 'hydrating' a 'feed skeleton'.",
                parameters: {
                    type: 'params',
                    required: [
                        'uris'
                    ],
                    properties: {
                        uris: {
                            type: 'array',
                            description: 'List of post AT-URIs to return hydrated views for.',
                            items: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            maxLength: 25
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'posts'
                        ],
                        properties: {
                            posts: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#postView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetPostThread: {
        lexicon: 1,
        id: 'app.bsky.feed.getPostThread',
        defs: {
            main: {
                type: 'query',
                description: 'Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.',
                parameters: {
                    type: 'params',
                    required: [
                        'uri'
                    ],
                    properties: {
                        uri: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) to post record.'
                        },
                        depth: {
                            type: 'integer',
                            description: 'How many levels of reply depth should be included in response.',
                            default: 6,
                            minimum: 0,
                            maximum: 1000
                        },
                        parentHeight: {
                            type: 'integer',
                            description: 'How many levels of parent (and grandparent, etc) post to include.',
                            default: 80,
                            minimum: 0,
                            maximum: 1000
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'thread'
                        ],
                        properties: {
                            thread: {
                                type: 'union',
                                refs: [
                                    'lex:app.bsky.feed.defs#threadViewPost',
                                    'lex:app.bsky.feed.defs#notFoundPost',
                                    'lex:app.bsky.feed.defs#blockedPost'
                                ]
                            },
                            threadgate: {
                                type: 'ref',
                                ref: 'lex:app.bsky.feed.defs#threadgateView'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'NotFound'
                    }
                ]
            }
        }
    },
    AppBskyFeedGetQuotes: {
        lexicon: 1,
        id: 'app.bsky.feed.getQuotes',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of quotes for a given post.',
                parameters: {
                    type: 'params',
                    required: [
                        'uri'
                    ],
                    properties: {
                        uri: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) of post record'
                        },
                        cid: {
                            type: 'string',
                            format: 'cid',
                            description: 'If supplied, filters to quotes of specific version (by CID) of the post record.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'uri',
                            'posts'
                        ],
                        properties: {
                            uri: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            cid: {
                                type: 'string',
                                format: 'cid'
                            },
                            cursor: {
                                type: 'string'
                            },
                            posts: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#postView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetRepostedBy: {
        lexicon: 1,
        id: 'app.bsky.feed.getRepostedBy',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of reposts for a given post.',
                parameters: {
                    type: 'params',
                    required: [
                        'uri'
                    ],
                    properties: {
                        uri: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) of post record'
                        },
                        cid: {
                            type: 'string',
                            format: 'cid',
                            description: 'If supplied, filters to reposts of specific version (by CID) of the post record.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'uri',
                            'repostedBy'
                        ],
                        properties: {
                            uri: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            cid: {
                                type: 'string',
                                format: 'cid'
                            },
                            cursor: {
                                type: 'string'
                            },
                            repostedBy: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetSuggestedFeeds: {
        lexicon: 1,
        id: 'app.bsky.feed.getSuggestedFeeds',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of suggested feeds (feed generators) for the requesting account.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feeds'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feeds: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#generatorView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedGetTimeline: {
        lexicon: 1,
        id: 'app.bsky.feed.getTimeline',
        defs: {
            main: {
                type: 'query',
                description: "Get a view of the requesting account's home timeline. This is expected to be some form of reverse-chronological feed.",
                parameters: {
                    type: 'params',
                    properties: {
                        algorithm: {
                            type: 'string',
                            description: "Variant 'algorithm' for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism."
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feed'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feed: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#feedViewPost'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedLike: {
        lexicon: 1,
        id: 'app.bsky.feed.like',
        defs: {
            main: {
                type: 'record',
                description: "Record declaring a 'like' of a piece of subject content.",
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'subject',
                        'createdAt'
                    ],
                    properties: {
                        subject: {
                            type: 'ref',
                            ref: 'lex:com.atproto.repo.strongRef'
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedPost: {
        lexicon: 1,
        id: 'app.bsky.feed.post',
        defs: {
            main: {
                type: 'record',
                description: 'Record containing a Bluesky post.',
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'text',
                        'createdAt'
                    ],
                    properties: {
                        text: {
                            type: 'string',
                            maxLength: 3000,
                            maxGraphemes: 300,
                            description: 'The primary post content. May be an empty string, if there are embeds.'
                        },
                        entities: {
                            type: 'array',
                            description: 'DEPRECATED: replaced by app.bsky.richtext.facet.',
                            items: {
                                type: 'ref',
                                ref: 'lex:app.bsky.feed.post#entity'
                            }
                        },
                        facets: {
                            type: 'array',
                            description: 'Annotations of text (mentions, URLs, hashtags, etc)',
                            items: {
                                type: 'ref',
                                ref: 'lex:app.bsky.richtext.facet'
                            }
                        },
                        reply: {
                            type: 'ref',
                            ref: 'lex:app.bsky.feed.post#replyRef'
                        },
                        embed: {
                            type: 'union',
                            refs: [
                                'lex:app.bsky.embed.images',
                                'lex:app.bsky.embed.video',
                                'lex:app.bsky.embed.external',
                                'lex:app.bsky.embed.record',
                                'lex:app.bsky.embed.recordWithMedia'
                            ]
                        },
                        langs: {
                            type: 'array',
                            description: 'Indicates human language of post primary text content.',
                            maxLength: 3,
                            items: {
                                type: 'string',
                                format: 'language'
                            }
                        },
                        labels: {
                            type: 'union',
                            description: 'Self-label values for this post. Effectively content warnings.',
                            refs: [
                                'lex:com.atproto.label.defs#selfLabels'
                            ]
                        },
                        tags: {
                            type: 'array',
                            description: 'Additional hashtags, in addition to any included in post text and facets.',
                            maxLength: 8,
                            items: {
                                type: 'string',
                                maxLength: 640,
                                maxGraphemes: 64
                            }
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Client-declared timestamp when this post was originally created.'
                        }
                    }
                }
            },
            replyRef: {
                type: 'object',
                required: [
                    'root',
                    'parent'
                ],
                properties: {
                    root: {
                        type: 'ref',
                        ref: 'lex:com.atproto.repo.strongRef'
                    },
                    parent: {
                        type: 'ref',
                        ref: 'lex:com.atproto.repo.strongRef'
                    }
                }
            },
            entity: {
                type: 'object',
                description: 'Deprecated: use facets instead.',
                required: [
                    'index',
                    'type',
                    'value'
                ],
                properties: {
                    index: {
                        type: 'ref',
                        ref: 'lex:app.bsky.feed.post#textSlice'
                    },
                    type: {
                        type: 'string',
                        description: "Expected values are 'mention' and 'link'."
                    },
                    value: {
                        type: 'string'
                    }
                }
            },
            textSlice: {
                type: 'object',
                description: 'Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.',
                required: [
                    'start',
                    'end'
                ],
                properties: {
                    start: {
                        type: 'integer',
                        minimum: 0
                    },
                    end: {
                        type: 'integer',
                        minimum: 0
                    }
                }
            }
        }
    },
    AppBskyFeedPostgate: {
        lexicon: 1,
        id: 'app.bsky.feed.postgate',
        defs: {
            main: {
                type: 'record',
                key: 'tid',
                description: 'Record defining interaction rules for a post. The record key (rkey) of the postgate record must match the record key of the post, and that record must be in the same repository.',
                record: {
                    type: 'object',
                    required: [
                        'post',
                        'createdAt'
                    ],
                    properties: {
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        },
                        post: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) to the post record.'
                        },
                        detachedEmbeddingUris: {
                            type: 'array',
                            maxLength: 50,
                            items: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            description: 'List of AT-URIs embedding this post that the author has detached from.'
                        },
                        embeddingRules: {
                            description: 'List of rules defining who can embed this post. If value is an empty array or is undefined, no particular rules apply and anyone can embed.',
                            type: 'array',
                            maxLength: 5,
                            items: {
                                type: 'union',
                                refs: [
                                    'lex:app.bsky.feed.postgate#disableRule'
                                ]
                            }
                        }
                    }
                }
            },
            disableRule: {
                type: 'object',
                description: 'Disables embedding of this post.',
                properties: {}
            }
        }
    },
    AppBskyFeedRepost: {
        lexicon: 1,
        id: 'app.bsky.feed.repost',
        defs: {
            main: {
                description: "Record representing a 'repost' of an existing Bluesky post.",
                type: 'record',
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'subject',
                        'createdAt'
                    ],
                    properties: {
                        subject: {
                            type: 'ref',
                            ref: 'lex:com.atproto.repo.strongRef'
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyFeedSearchPosts: {
        lexicon: 1,
        id: 'app.bsky.feed.searchPosts',
        defs: {
            main: {
                type: 'query',
                description: 'Find posts matching search criteria, returning views of those posts.',
                parameters: {
                    type: 'params',
                    required: [
                        'q'
                    ],
                    properties: {
                        q: {
                            type: 'string',
                            description: 'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'
                        },
                        sort: {
                            type: 'string',
                            knownValues: [
                                'top',
                                'latest'
                            ],
                            default: 'latest',
                            description: 'Specifies the ranking order of results.'
                        },
                        since: {
                            type: 'string',
                            description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD)."
                        },
                        until: {
                            type: 'string',
                            description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD)."
                        },
                        mentions: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions.'
                        },
                        author: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'Filter to posts by the given account. Handles are resolved to DID before query-time.'
                        },
                        lang: {
                            type: 'string',
                            format: 'language',
                            description: 'Filter to posts in the given language. Expected to be based on post language field, though server may override language detection.'
                        },
                        domain: {
                            type: 'string',
                            description: 'Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization.'
                        },
                        url: {
                            type: 'string',
                            format: 'uri',
                            description: 'Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching.'
                        },
                        tag: {
                            type: 'array',
                            items: {
                                type: 'string',
                                maxLength: 640,
                                maxGraphemes: 64
                            },
                            description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching."
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 25
                        },
                        cursor: {
                            type: 'string',
                            description: 'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'posts'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            hitsTotal: {
                                type: 'integer',
                                description: 'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'
                            },
                            posts: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#postView'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'BadQueryString'
                    }
                ]
            }
        }
    },
    AppBskyFeedSendInteractions: {
        lexicon: 1,
        id: 'app.bsky.feed.sendInteractions',
        defs: {
            main: {
                type: 'procedure',
                description: 'Send information about interactions with feed items back to the feed generator that served them.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'interactions'
                        ],
                        properties: {
                            interactions: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#interaction'
                                }
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {}
                    }
                }
            }
        }
    },
    AppBskyFeedThreadgate: {
        lexicon: 1,
        id: 'app.bsky.feed.threadgate',
        defs: {
            main: {
                type: 'record',
                key: 'tid',
                description: "Record defining interaction gating rules for a thread (aka, reply controls). The record key (rkey) of the threadgate record must match the record key of the thread's root post, and that record must be in the same repository.",
                record: {
                    type: 'object',
                    required: [
                        'post',
                        'createdAt'
                    ],
                    properties: {
                        post: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) to the post record.'
                        },
                        allow: {
                            description: 'List of rules defining who can reply to this post. If value is an empty array, no one can reply. If value is undefined, anyone can reply.',
                            type: 'array',
                            maxLength: 5,
                            items: {
                                type: 'union',
                                refs: [
                                    'lex:app.bsky.feed.threadgate#mentionRule',
                                    'lex:app.bsky.feed.threadgate#followerRule',
                                    'lex:app.bsky.feed.threadgate#followingRule',
                                    'lex:app.bsky.feed.threadgate#listRule'
                                ]
                            }
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        },
                        hiddenReplies: {
                            type: 'array',
                            maxLength: 50,
                            items: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            description: 'List of hidden reply URIs.'
                        }
                    }
                }
            },
            mentionRule: {
                type: 'object',
                description: 'Allow replies from actors mentioned in your post.',
                properties: {}
            },
            followerRule: {
                type: 'object',
                description: 'Allow replies from actors who follow you.',
                properties: {}
            },
            followingRule: {
                type: 'object',
                description: 'Allow replies from actors you follow.',
                properties: {}
            },
            listRule: {
                type: 'object',
                description: 'Allow replies from actors on a list.',
                required: [
                    'list'
                ],
                properties: {
                    list: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            }
        }
    },
    AppBskyGraphBlock: {
        lexicon: 1,
        id: 'app.bsky.graph.block',
        defs: {
            main: {
                type: 'record',
                description: "Record declaring a 'block' relationship against another account. NOTE: blocks are public in Bluesky; see blog posts for details.",
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'subject',
                        'createdAt'
                    ],
                    properties: {
                        subject: {
                            type: 'string',
                            format: 'did',
                            description: 'DID of the account to be blocked.'
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphDefs: {
        lexicon: 1,
        id: 'app.bsky.graph.defs',
        defs: {
            listViewBasic: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'name',
                    'purpose'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    name: {
                        type: 'string',
                        maxLength: 64,
                        minLength: 1
                    },
                    purpose: {
                        type: 'ref',
                        ref: 'lex:app.bsky.graph.defs#listPurpose'
                    },
                    avatar: {
                        type: 'string',
                        format: 'uri'
                    },
                    listItemCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.graph.defs#listViewerState'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            listView: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'creator',
                    'name',
                    'purpose',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    creator: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileView'
                    },
                    name: {
                        type: 'string',
                        maxLength: 64,
                        minLength: 1
                    },
                    purpose: {
                        type: 'ref',
                        ref: 'lex:app.bsky.graph.defs#listPurpose'
                    },
                    description: {
                        type: 'string',
                        maxGraphemes: 300,
                        maxLength: 3000
                    },
                    descriptionFacets: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.richtext.facet'
                        }
                    },
                    avatar: {
                        type: 'string',
                        format: 'uri'
                    },
                    listItemCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.graph.defs#listViewerState'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            listItemView: {
                type: 'object',
                required: [
                    'uri',
                    'subject'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    subject: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileView'
                    }
                }
            },
            starterPackView: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'record',
                    'creator',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    record: {
                        type: 'unknown'
                    },
                    creator: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileViewBasic'
                    },
                    list: {
                        type: 'ref',
                        ref: 'lex:app.bsky.graph.defs#listViewBasic'
                    },
                    listItemsSample: {
                        type: 'array',
                        maxLength: 12,
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.graph.defs#listItemView'
                        }
                    },
                    feeds: {
                        type: 'array',
                        maxLength: 3,
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.feed.defs#generatorView'
                        }
                    },
                    joinedWeekCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    joinedAllTimeCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            starterPackViewBasic: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'record',
                    'creator',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    record: {
                        type: 'unknown'
                    },
                    creator: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileViewBasic'
                    },
                    listItemCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    joinedWeekCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    joinedAllTimeCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            listPurpose: {
                type: 'string',
                knownValues: [
                    'app.bsky.graph.defs#modlist',
                    'app.bsky.graph.defs#curatelist',
                    'app.bsky.graph.defs#referencelist'
                ]
            },
            modlist: {
                type: 'token',
                description: 'A list of actors to apply an aggregate moderation action (mute/block) on.'
            },
            curatelist: {
                type: 'token',
                description: 'A list of actors used for curation purposes such as list feeds or interaction gating.'
            },
            referencelist: {
                type: 'token',
                description: 'A list of actors used for only for reference purposes such as within a starter pack.'
            },
            listViewerState: {
                type: 'object',
                properties: {
                    muted: {
                        type: 'boolean'
                    },
                    blocked: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            notFoundActor: {
                type: 'object',
                description: 'indicates that a handle or DID could not be resolved',
                required: [
                    'actor',
                    'notFound'
                ],
                properties: {
                    actor: {
                        type: 'string',
                        format: 'at-identifier'
                    },
                    notFound: {
                        type: 'boolean',
                        const: true
                    }
                }
            },
            relationship: {
                type: 'object',
                description: 'lists the bi-directional graph relationships between one actor (not indicated in the object), and the target actors (the DID included in the object)',
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    following: {
                        type: 'string',
                        format: 'at-uri',
                        description: 'if the actor follows this DID, this is the AT-URI of the follow record'
                    },
                    followedBy: {
                        type: 'string',
                        format: 'at-uri',
                        description: 'if the actor is followed by this DID, contains the AT-URI of the follow record'
                    }
                }
            }
        }
    },
    AppBskyGraphFollow: {
        lexicon: 1,
        id: 'app.bsky.graph.follow',
        defs: {
            main: {
                type: 'record',
                description: "Record declaring a social 'follow' relationship of another account. Duplicate follows will be ignored by the AppView.",
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'subject',
                        'createdAt'
                    ],
                    properties: {
                        subject: {
                            type: 'string',
                            format: 'did'
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetActorStarterPacks: {
        lexicon: 1,
        id: 'app.bsky.graph.getActorStarterPacks',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of starter packs created by the actor.',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'starterPacks'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            starterPacks: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.graph.defs#starterPackViewBasic'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetBlocks: {
        lexicon: 1,
        id: 'app.bsky.graph.getBlocks',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates which accounts the requesting account is currently blocking. Requires auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'blocks'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            blocks: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetFollowers: {
        lexicon: 1,
        id: 'app.bsky.graph.getFollowers',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates accounts which follow a specified account (actor).',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'subject',
                            'followers'
                        ],
                        properties: {
                            subject: {
                                type: 'ref',
                                ref: 'lex:app.bsky.actor.defs#profileView'
                            },
                            cursor: {
                                type: 'string'
                            },
                            followers: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetFollows: {
        lexicon: 1,
        id: 'app.bsky.graph.getFollows',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates accounts which a specified account (actor) follows.',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'subject',
                            'follows'
                        ],
                        properties: {
                            subject: {
                                type: 'ref',
                                ref: 'lex:app.bsky.actor.defs#profileView'
                            },
                            cursor: {
                                type: 'string'
                            },
                            follows: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetKnownFollowers: {
        lexicon: 1,
        id: 'app.bsky.graph.getKnownFollowers',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates accounts which follow a specified account (actor) and are followed by the viewer.',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'subject',
                            'followers'
                        ],
                        properties: {
                            subject: {
                                type: 'ref',
                                ref: 'lex:app.bsky.actor.defs#profileView'
                            },
                            cursor: {
                                type: 'string'
                            },
                            followers: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetList: {
        lexicon: 1,
        id: 'app.bsky.graph.getList',
        defs: {
            main: {
                type: 'query',
                description: "Gets a 'view' (with additional context) of a specified list.",
                parameters: {
                    type: 'params',
                    required: [
                        'list'
                    ],
                    properties: {
                        list: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) of the list record to hydrate.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'list',
                            'items'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            list: {
                                type: 'ref',
                                ref: 'lex:app.bsky.graph.defs#listView'
                            },
                            items: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.graph.defs#listItemView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetListBlocks: {
        lexicon: 1,
        id: 'app.bsky.graph.getListBlocks',
        defs: {
            main: {
                type: 'query',
                description: 'Get mod lists that the requesting account (actor) is blocking. Requires auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'lists'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            lists: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.graph.defs#listView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetListMutes: {
        lexicon: 1,
        id: 'app.bsky.graph.getListMutes',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates mod lists that the requesting account (actor) currently has muted. Requires auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'lists'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            lists: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.graph.defs#listView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetLists: {
        lexicon: 1,
        id: 'app.bsky.graph.getLists',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates the lists created by a specified account (actor).',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'The account (actor) to enumerate lists from.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'lists'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            lists: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.graph.defs#listView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetMutes: {
        lexicon: 1,
        id: 'app.bsky.graph.getMutes',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates accounts that the requesting account (actor) currently has muted. Requires auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'mutes'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            mutes: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetRelationships: {
        lexicon: 1,
        id: 'app.bsky.graph.getRelationships',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates public relationships between one account, and a list of other accounts. Does not require auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'Primary account requesting relationships for.'
                        },
                        others: {
                            type: 'array',
                            description: "List of 'other' accounts to be related back to the primary.",
                            maxLength: 30,
                            items: {
                                type: 'string',
                                format: 'at-identifier'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'relationships'
                        ],
                        properties: {
                            actor: {
                                type: 'string',
                                format: 'did'
                            },
                            relationships: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:app.bsky.graph.defs#relationship',
                                        'lex:app.bsky.graph.defs#notFoundActor'
                                    ]
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'ActorNotFound',
                        description: 'the primary actor at-identifier could not be resolved'
                    }
                ]
            }
        }
    },
    AppBskyGraphGetStarterPack: {
        lexicon: 1,
        id: 'app.bsky.graph.getStarterPack',
        defs: {
            main: {
                type: 'query',
                description: 'Gets a view of a starter pack.',
                parameters: {
                    type: 'params',
                    required: [
                        'starterPack'
                    ],
                    properties: {
                        starterPack: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) of the starter pack record.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'starterPack'
                        ],
                        properties: {
                            starterPack: {
                                type: 'ref',
                                ref: 'lex:app.bsky.graph.defs#starterPackView'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetStarterPacks: {
        lexicon: 1,
        id: 'app.bsky.graph.getStarterPacks',
        defs: {
            main: {
                type: 'query',
                description: 'Get views for a list of starter packs.',
                parameters: {
                    type: 'params',
                    required: [
                        'uris'
                    ],
                    properties: {
                        uris: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'at-uri'
                            },
                            maxLength: 25
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'starterPacks'
                        ],
                        properties: {
                            starterPacks: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.graph.defs#starterPackViewBasic'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphGetSuggestedFollowsByActor: {
        lexicon: 1,
        id: 'app.bsky.graph.getSuggestedFollowsByActor',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerates follows similar to a given account (actor). Expected use is to recommend additional accounts immediately after following one account.',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'at-identifier'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'suggestions'
                        ],
                        properties: {
                            suggestions: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            },
                            isFallback: {
                                type: 'boolean',
                                description: 'If true, response has fallen-back to generic results, and is not scoped using relativeToDid',
                                default: false
                            },
                            recId: {
                                type: 'integer',
                                description: 'Snowflake for this recommendation, use when submitting recommendation events.'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphList: {
        lexicon: 1,
        id: 'app.bsky.graph.list',
        defs: {
            main: {
                type: 'record',
                description: 'Record representing a list of accounts (actors). Scope includes both moderation-oriented lists and curration-oriented lists.',
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'name',
                        'purpose',
                        'createdAt'
                    ],
                    properties: {
                        purpose: {
                            type: 'ref',
                            description: 'Defines the purpose of the list (aka, moderation-oriented or curration-oriented)',
                            ref: 'lex:app.bsky.graph.defs#listPurpose'
                        },
                        name: {
                            type: 'string',
                            maxLength: 64,
                            minLength: 1,
                            description: 'Display name for list; can not be empty.'
                        },
                        description: {
                            type: 'string',
                            maxGraphemes: 300,
                            maxLength: 3000
                        },
                        descriptionFacets: {
                            type: 'array',
                            items: {
                                type: 'ref',
                                ref: 'lex:app.bsky.richtext.facet'
                            }
                        },
                        avatar: {
                            type: 'blob',
                            accept: [
                                'image/png',
                                'image/jpeg'
                            ],
                            maxSize: 1000000
                        },
                        labels: {
                            type: 'union',
                            refs: [
                                'lex:com.atproto.label.defs#selfLabels'
                            ]
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphListblock: {
        lexicon: 1,
        id: 'app.bsky.graph.listblock',
        defs: {
            main: {
                type: 'record',
                description: 'Record representing a block relationship against an entire an entire list of accounts (actors).',
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'subject',
                        'createdAt'
                    ],
                    properties: {
                        subject: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) to the mod list record.'
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphListitem: {
        lexicon: 1,
        id: 'app.bsky.graph.listitem',
        defs: {
            main: {
                type: 'record',
                description: "Record representing an account's inclusion on a specific list. The AppView will ignore duplicate listitem records.",
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'subject',
                        'list',
                        'createdAt'
                    ],
                    properties: {
                        subject: {
                            type: 'string',
                            format: 'did',
                            description: 'The account which is included on the list.'
                        },
                        list: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) to the list record (app.bsky.graph.list).'
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphMuteActor: {
        lexicon: 1,
        id: 'app.bsky.graph.muteActor',
        defs: {
            main: {
                type: 'procedure',
                description: 'Creates a mute relationship for the specified account. Mutes are private in Bluesky. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'actor'
                        ],
                        properties: {
                            actor: {
                                type: 'string',
                                format: 'at-identifier'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphMuteActorList: {
        lexicon: 1,
        id: 'app.bsky.graph.muteActorList',
        defs: {
            main: {
                type: 'procedure',
                description: 'Creates a mute relationship for the specified list of accounts. Mutes are private in Bluesky. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'list'
                        ],
                        properties: {
                            list: {
                                type: 'string',
                                format: 'at-uri'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphMuteThread: {
        lexicon: 1,
        id: 'app.bsky.graph.muteThread',
        defs: {
            main: {
                type: 'procedure',
                description: 'Mutes a thread preventing notifications from the thread and any of its children. Mutes are private in Bluesky. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'root'
                        ],
                        properties: {
                            root: {
                                type: 'string',
                                format: 'at-uri'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphSearchStarterPacks: {
        lexicon: 1,
        id: 'app.bsky.graph.searchStarterPacks',
        defs: {
            main: {
                type: 'query',
                description: 'Find starter packs matching search criteria. Does not require auth.',
                parameters: {
                    type: 'params',
                    required: [
                        'q'
                    ],
                    properties: {
                        q: {
                            type: 'string',
                            description: 'Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 25
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'starterPacks'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            starterPacks: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.graph.defs#starterPackViewBasic'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphStarterpack: {
        lexicon: 1,
        id: 'app.bsky.graph.starterpack',
        defs: {
            main: {
                type: 'record',
                description: 'Record defining a starter pack of actors and feeds for new users.',
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'name',
                        'list',
                        'createdAt'
                    ],
                    properties: {
                        name: {
                            type: 'string',
                            maxGraphemes: 50,
                            maxLength: 500,
                            minLength: 1,
                            description: 'Display name for starter pack; can not be empty.'
                        },
                        description: {
                            type: 'string',
                            maxGraphemes: 300,
                            maxLength: 3000
                        },
                        descriptionFacets: {
                            type: 'array',
                            items: {
                                type: 'ref',
                                ref: 'lex:app.bsky.richtext.facet'
                            }
                        },
                        list: {
                            type: 'string',
                            format: 'at-uri',
                            description: 'Reference (AT-URI) to the list record.'
                        },
                        feeds: {
                            type: 'array',
                            maxLength: 3,
                            items: {
                                type: 'ref',
                                ref: 'lex:app.bsky.graph.starterpack#feedItem'
                            }
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            },
            feedItem: {
                type: 'object',
                required: [
                    'uri'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            }
        }
    },
    AppBskyGraphUnmuteActor: {
        lexicon: 1,
        id: 'app.bsky.graph.unmuteActor',
        defs: {
            main: {
                type: 'procedure',
                description: 'Unmutes the specified account. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'actor'
                        ],
                        properties: {
                            actor: {
                                type: 'string',
                                format: 'at-identifier'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphUnmuteActorList: {
        lexicon: 1,
        id: 'app.bsky.graph.unmuteActorList',
        defs: {
            main: {
                type: 'procedure',
                description: 'Unmutes the specified list of accounts. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'list'
                        ],
                        properties: {
                            list: {
                                type: 'string',
                                format: 'at-uri'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphUnmuteThread: {
        lexicon: 1,
        id: 'app.bsky.graph.unmuteThread',
        defs: {
            main: {
                type: 'procedure',
                description: 'Unmutes the specified thread. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'root'
                        ],
                        properties: {
                            root: {
                                type: 'string',
                                format: 'at-uri'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyGraphVerification: {
        lexicon: 1,
        id: 'app.bsky.graph.verification',
        defs: {
            main: {
                type: 'record',
                description: 'Record declaring a verification relationship between two accounts. Verifications are only considered valid by an app if issued by an account the app considers trusted.',
                key: 'tid',
                record: {
                    type: 'object',
                    required: [
                        'subject',
                        'handle',
                        'displayName',
                        'createdAt'
                    ],
                    properties: {
                        subject: {
                            description: 'DID of the subject the verification applies to.',
                            type: 'string',
                            format: 'did'
                        },
                        handle: {
                            description: 'Handle of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current handle matches the one at the time of verifying.',
                            type: 'string',
                            format: 'handle'
                        },
                        displayName: {
                            description: 'Display name of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current displayName matches the one at the time of verifying.',
                            type: 'string'
                        },
                        createdAt: {
                            description: 'Date of when the verification was created.',
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                }
            }
        }
    },
    AppBskyLabelerDefs: {
        lexicon: 1,
        id: 'app.bsky.labeler.defs',
        defs: {
            labelerView: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'creator',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    creator: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileView'
                    },
                    likeCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.labeler.defs#labelerViewerState'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    }
                }
            },
            labelerViewDetailed: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'creator',
                    'policies',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    creator: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileView'
                    },
                    policies: {
                        type: 'ref',
                        ref: 'lex:app.bsky.labeler.defs#labelerPolicies'
                    },
                    likeCount: {
                        type: 'integer',
                        minimum: 0
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.labeler.defs#labelerViewerState'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    reasonTypes: {
                        description: "The set of report reason 'codes' which are in-scope for this service to review and action. These usually align to policy categories. If not defined (distinct from empty array), all reason types are allowed.",
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.moderation.defs#reasonType'
                        }
                    },
                    subjectTypes: {
                        description: 'The set of subject types (account, record, etc) this service accepts reports on.',
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.moderation.defs#subjectType'
                        }
                    },
                    subjectCollections: {
                        type: 'array',
                        description: 'Set of record types (collection NSIDs) which can be reported to this service. If not defined (distinct from empty array), default is any record type.',
                        items: {
                            type: 'string',
                            format: 'nsid'
                        }
                    }
                }
            },
            labelerViewerState: {
                type: 'object',
                properties: {
                    like: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            labelerPolicies: {
                type: 'object',
                required: [
                    'labelValues'
                ],
                properties: {
                    labelValues: {
                        type: 'array',
                        description: 'The label values which this labeler publishes. May include global or custom labels.',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#labelValue'
                        }
                    },
                    labelValueDefinitions: {
                        type: 'array',
                        description: 'Label values created by this labeler and scoped exclusively to it. Labels defined here will override global label definitions for this labeler.',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#labelValueDefinition'
                        }
                    }
                }
            }
        }
    },
    AppBskyLabelerGetServices: {
        lexicon: 1,
        id: 'app.bsky.labeler.getServices',
        defs: {
            main: {
                type: 'query',
                description: 'Get information about a list of labeler services.',
                parameters: {
                    type: 'params',
                    required: [
                        'dids'
                    ],
                    properties: {
                        dids: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'did'
                            }
                        },
                        detailed: {
                            type: 'boolean',
                            default: false
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'views'
                        ],
                        properties: {
                            views: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:app.bsky.labeler.defs#labelerView',
                                        'lex:app.bsky.labeler.defs#labelerViewDetailed'
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyLabelerService: {
        lexicon: 1,
        id: 'app.bsky.labeler.service',
        defs: {
            main: {
                type: 'record',
                description: 'A declaration of the existence of labeler service.',
                key: 'literal:self',
                record: {
                    type: 'object',
                    required: [
                        'policies',
                        'createdAt'
                    ],
                    properties: {
                        policies: {
                            type: 'ref',
                            ref: 'lex:app.bsky.labeler.defs#labelerPolicies'
                        },
                        labels: {
                            type: 'union',
                            refs: [
                                'lex:com.atproto.label.defs#selfLabels'
                            ]
                        },
                        createdAt: {
                            type: 'string',
                            format: 'datetime'
                        },
                        reasonTypes: {
                            description: "The set of report reason 'codes' which are in-scope for this service to review and action. These usually align to policy categories. If not defined (distinct from empty array), all reason types are allowed.",
                            type: 'array',
                            items: {
                                type: 'ref',
                                ref: 'lex:com.atproto.moderation.defs#reasonType'
                            }
                        },
                        subjectTypes: {
                            description: 'The set of subject types (account, record, etc) this service accepts reports on.',
                            type: 'array',
                            items: {
                                type: 'ref',
                                ref: 'lex:com.atproto.moderation.defs#subjectType'
                            }
                        },
                        subjectCollections: {
                            type: 'array',
                            description: 'Set of record types (collection NSIDs) which can be reported to this service. If not defined (distinct from empty array), default is any record type.',
                            items: {
                                type: 'string',
                                format: 'nsid'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyNotificationDefs: {
        lexicon: 1,
        id: 'app.bsky.notification.defs',
        defs: {
            recordDeleted: {
                type: 'object',
                properties: {}
            }
        }
    },
    AppBskyNotificationGetUnreadCount: {
        lexicon: 1,
        id: 'app.bsky.notification.getUnreadCount',
        defs: {
            main: {
                type: 'query',
                description: 'Count the number of unread notifications for the requesting account. Requires auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        priority: {
                            type: 'boolean'
                        },
                        seenAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'count'
                        ],
                        properties: {
                            count: {
                                type: 'integer'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyNotificationListNotifications: {
        lexicon: 1,
        id: 'app.bsky.notification.listNotifications',
        defs: {
            main: {
                type: 'query',
                description: 'Enumerate notifications for the requesting account. Requires auth.',
                parameters: {
                    type: 'params',
                    properties: {
                        reasons: {
                            description: 'Notification reasons to include in response.',
                            type: 'array',
                            items: {
                                type: 'string',
                                description: 'A reason that matches the reason property of #notification.'
                            }
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        priority: {
                            type: 'boolean'
                        },
                        cursor: {
                            type: 'string'
                        },
                        seenAt: {
                            type: 'string',
                            format: 'datetime'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'notifications'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            notifications: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.notification.listNotifications#notification'
                                }
                            },
                            priority: {
                                type: 'boolean'
                            },
                            seenAt: {
                                type: 'string',
                                format: 'datetime'
                            }
                        }
                    }
                }
            },
            notification: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'author',
                    'reason',
                    'record',
                    'isRead',
                    'indexedAt'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    author: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileView'
                    },
                    reason: {
                        type: 'string',
                        description: "Expected values are 'like', 'repost', 'follow', 'mention', 'reply', 'quote', 'starterpack-joined', 'verified', and 'unverified'.",
                        knownValues: [
                            'like',
                            'repost',
                            'follow',
                            'mention',
                            'reply',
                            'quote',
                            'starterpack-joined',
                            'verified',
                            'unverified'
                        ]
                    },
                    reasonSubject: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    record: {
                        type: 'unknown'
                    },
                    isRead: {
                        type: 'boolean'
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    }
                }
            }
        }
    },
    AppBskyNotificationPutPreferences: {
        lexicon: 1,
        id: 'app.bsky.notification.putPreferences',
        defs: {
            main: {
                type: 'procedure',
                description: 'Set notification-related preferences for an account. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'priority'
                        ],
                        properties: {
                            priority: {
                                type: 'boolean'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyNotificationRegisterPush: {
        lexicon: 1,
        id: 'app.bsky.notification.registerPush',
        defs: {
            main: {
                type: 'procedure',
                description: 'Register to receive push notifications, via a specified service, for the requesting account. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'serviceDid',
                            'token',
                            'platform',
                            'appId'
                        ],
                        properties: {
                            serviceDid: {
                                type: 'string',
                                format: 'did'
                            },
                            token: {
                                type: 'string'
                            },
                            platform: {
                                type: 'string',
                                knownValues: [
                                    'ios',
                                    'android',
                                    'web'
                                ]
                            },
                            appId: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyNotificationUpdateSeen: {
        lexicon: 1,
        id: 'app.bsky.notification.updateSeen',
        defs: {
            main: {
                type: 'procedure',
                description: 'Notify server that the requesting account has seen notifications. Requires auth.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'seenAt'
                        ],
                        properties: {
                            seenAt: {
                                type: 'string',
                                format: 'datetime'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyRichtextFacet: {
        lexicon: 1,
        id: 'app.bsky.richtext.facet',
        defs: {
            main: {
                type: 'object',
                description: 'Annotation of a sub-string within rich text.',
                required: [
                    'index',
                    'features'
                ],
                properties: {
                    index: {
                        type: 'ref',
                        ref: 'lex:app.bsky.richtext.facet#byteSlice'
                    },
                    features: {
                        type: 'array',
                        items: {
                            type: 'union',
                            refs: [
                                'lex:app.bsky.richtext.facet#mention',
                                'lex:app.bsky.richtext.facet#link',
                                'lex:app.bsky.richtext.facet#tag'
                            ]
                        }
                    }
                }
            },
            mention: {
                type: 'object',
                description: "Facet feature for mention of another account. The text is usually a handle, including a '@' prefix, but the facet reference is a DID.",
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    }
                }
            },
            link: {
                type: 'object',
                description: 'Facet feature for a URL. The text URL may have been simplified or truncated, but the facet reference should be a complete URL.',
                required: [
                    'uri'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'uri'
                    }
                }
            },
            tag: {
                type: 'object',
                description: "Facet feature for a hashtag. The text usually includes a '#' prefix, but the facet reference should not (except in the case of 'double hash tags').",
                required: [
                    'tag'
                ],
                properties: {
                    tag: {
                        type: 'string',
                        maxLength: 640,
                        maxGraphemes: 64
                    }
                }
            },
            byteSlice: {
                type: 'object',
                description: 'Specifies the sub-string range a facet feature applies to. Start index is inclusive, end index is exclusive. Indices are zero-indexed, counting bytes of the UTF-8 encoded text. NOTE: some languages, like Javascript, use UTF-16 or Unicode codepoints for string slice indexing; in these languages, convert to byte arrays before working with facets.',
                required: [
                    'byteStart',
                    'byteEnd'
                ],
                properties: {
                    byteStart: {
                        type: 'integer',
                        minimum: 0
                    },
                    byteEnd: {
                        type: 'integer',
                        minimum: 0
                    }
                }
            }
        }
    },
    AppBskyUnspeccedDefs: {
        lexicon: 1,
        id: 'app.bsky.unspecced.defs',
        defs: {
            skeletonSearchPost: {
                type: 'object',
                required: [
                    'uri'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            skeletonSearchActor: {
                type: 'object',
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    }
                }
            },
            skeletonSearchStarterPack: {
                type: 'object',
                required: [
                    'uri'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            trendingTopic: {
                type: 'object',
                required: [
                    'topic',
                    'link'
                ],
                properties: {
                    topic: {
                        type: 'string'
                    },
                    displayName: {
                        type: 'string'
                    },
                    description: {
                        type: 'string'
                    },
                    link: {
                        type: 'string'
                    }
                }
            },
            skeletonTrend: {
                type: 'object',
                required: [
                    'topic',
                    'displayName',
                    'link',
                    'startedAt',
                    'postCount',
                    'dids'
                ],
                properties: {
                    topic: {
                        type: 'string'
                    },
                    displayName: {
                        type: 'string'
                    },
                    link: {
                        type: 'string'
                    },
                    startedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    postCount: {
                        type: 'integer'
                    },
                    status: {
                        type: 'string',
                        knownValues: [
                            'hot'
                        ]
                    },
                    category: {
                        type: 'string'
                    },
                    dids: {
                        type: 'array',
                        items: {
                            type: 'string',
                            format: 'did'
                        }
                    }
                }
            },
            trendView: {
                type: 'object',
                required: [
                    'topic',
                    'displayName',
                    'link',
                    'startedAt',
                    'postCount',
                    'actors'
                ],
                properties: {
                    topic: {
                        type: 'string'
                    },
                    displayName: {
                        type: 'string'
                    },
                    link: {
                        type: 'string'
                    },
                    startedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    postCount: {
                        type: 'integer'
                    },
                    status: {
                        type: 'string',
                        knownValues: [
                            'hot'
                        ]
                    },
                    category: {
                        type: 'string'
                    },
                    actors: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.actor.defs#profileViewBasic'
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetConfig: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getConfig',
        defs: {
            main: {
                type: 'query',
                description: 'Get miscellaneous runtime configuration.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [],
                        properties: {
                            checkEmailConfirmed: {
                                type: 'boolean'
                            },
                            liveNow: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.unspecced.getConfig#liveNowConfig'
                                }
                            }
                        }
                    }
                }
            },
            liveNowConfig: {
                type: 'object',
                required: [
                    'did',
                    'domains'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    domains: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetPopularFeedGenerators: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getPopularFeedGenerators',
        defs: {
            main: {
                type: 'query',
                description: 'An unspecced view of globally popular feed generators.',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        },
                        query: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feeds'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            feeds: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#generatorView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetSuggestedFeeds: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getSuggestedFeeds',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of suggested feeds',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 25,
                            default: 10
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feeds'
                        ],
                        properties: {
                            feeds: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.feed.defs#generatorView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetSuggestedFeedsSkeleton: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getSuggestedFeedsSkeleton',
        defs: {
            main: {
                type: 'query',
                description: 'Get a skeleton of suggested feeds. Intended to be called and hydrated by app.bsky.unspecced.getSuggestedFeeds',
                parameters: {
                    type: 'params',
                    properties: {
                        viewer: {
                            type: 'string',
                            format: 'did',
                            description: 'DID of the account making the request (not included for public/unauthenticated queries).'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 25,
                            default: 10
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'feeds'
                        ],
                        properties: {
                            feeds: {
                                type: 'array',
                                items: {
                                    type: 'string',
                                    format: 'at-uri'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetSuggestedStarterPacks: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getSuggestedStarterPacks',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of suggested starterpacks',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 25,
                            default: 10
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'starterPacks'
                        ],
                        properties: {
                            starterPacks: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.graph.defs#starterPackView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetSuggestedStarterPacksSkeleton: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getSuggestedStarterPacksSkeleton',
        defs: {
            main: {
                type: 'query',
                description: 'Get a skeleton of suggested starterpacks. Intended to be called and hydrated by app.bsky.unspecced.getSuggestedStarterpacks',
                parameters: {
                    type: 'params',
                    properties: {
                        viewer: {
                            type: 'string',
                            format: 'did',
                            description: 'DID of the account making the request (not included for public/unauthenticated queries).'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 25,
                            default: 10
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'starterPacks'
                        ],
                        properties: {
                            starterPacks: {
                                type: 'array',
                                items: {
                                    type: 'string',
                                    format: 'at-uri'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetSuggestedUsers: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getSuggestedUsers',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of suggested users',
                parameters: {
                    type: 'params',
                    properties: {
                        category: {
                            type: 'string',
                            description: 'Category of users to get suggestions for.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 50,
                            default: 25
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'actors'
                        ],
                        properties: {
                            actors: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.actor.defs#profileView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetSuggestedUsersSkeleton: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getSuggestedUsersSkeleton',
        defs: {
            main: {
                type: 'query',
                description: 'Get a skeleton of suggested users. Intended to be called and hydrated by app.bsky.unspecced.getSuggestedUsers',
                parameters: {
                    type: 'params',
                    properties: {
                        viewer: {
                            type: 'string',
                            format: 'did',
                            description: 'DID of the account making the request (not included for public/unauthenticated queries).'
                        },
                        category: {
                            type: 'string',
                            description: 'Category of users to get suggestions for.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 50,
                            default: 25
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'dids'
                        ],
                        properties: {
                            dids: {
                                type: 'array',
                                items: {
                                    type: 'string',
                                    format: 'did'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetSuggestionsSkeleton: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getSuggestionsSkeleton',
        defs: {
            main: {
                type: 'query',
                description: 'Get a skeleton of suggested actors. Intended to be called and then hydrated through app.bsky.actor.getSuggestions',
                parameters: {
                    type: 'params',
                    properties: {
                        viewer: {
                            type: 'string',
                            format: 'did',
                            description: 'DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        },
                        relativeToDid: {
                            type: 'string',
                            format: 'did',
                            description: 'DID of the account to get suggestions relative to. If not provided, suggestions will be based on the viewer.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'actors'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            actors: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.unspecced.defs#skeletonSearchActor'
                                }
                            },
                            relativeToDid: {
                                type: 'string',
                                format: 'did',
                                description: 'DID of the account these suggestions are relative to. If this is returned undefined, suggestions are based on the viewer.'
                            },
                            recId: {
                                type: 'integer',
                                description: 'Snowflake for this recommendation, use when submitting recommendation events.'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetTaggedSuggestions: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getTaggedSuggestions',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of suggestions (feeds and users) tagged with categories',
                parameters: {
                    type: 'params',
                    properties: {}
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'suggestions'
                        ],
                        properties: {
                            suggestions: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.unspecced.getTaggedSuggestions#suggestion'
                                }
                            }
                        }
                    }
                }
            },
            suggestion: {
                type: 'object',
                required: [
                    'tag',
                    'subjectType',
                    'subject'
                ],
                properties: {
                    tag: {
                        type: 'string'
                    },
                    subjectType: {
                        type: 'string',
                        knownValues: [
                            'actor',
                            'feed'
                        ]
                    },
                    subject: {
                        type: 'string',
                        format: 'uri'
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetTrendingTopics: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getTrendingTopics',
        defs: {
            main: {
                type: 'query',
                description: 'Get a list of trending topics',
                parameters: {
                    type: 'params',
                    properties: {
                        viewer: {
                            type: 'string',
                            format: 'did',
                            description: 'DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 25,
                            default: 10
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'topics',
                            'suggested'
                        ],
                        properties: {
                            topics: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.unspecced.defs#trendingTopic'
                                }
                            },
                            suggested: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.unspecced.defs#trendingTopic'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetTrends: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getTrends',
        defs: {
            main: {
                type: 'query',
                description: 'Get the current trends on the network',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 25,
                            default: 10
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'trends'
                        ],
                        properties: {
                            trends: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.unspecced.defs#trendView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedGetTrendsSkeleton: {
        lexicon: 1,
        id: 'app.bsky.unspecced.getTrendsSkeleton',
        defs: {
            main: {
                type: 'query',
                description: 'Get the skeleton of trends on the network. Intended to be called and then hydrated through app.bsky.unspecced.getTrends',
                parameters: {
                    type: 'params',
                    properties: {
                        viewer: {
                            type: 'string',
                            format: 'did',
                            description: 'DID of the account making the request (not included for public/unauthenticated queries).'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 25,
                            default: 10
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'trends'
                        ],
                        properties: {
                            trends: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.unspecced.defs#skeletonTrend'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyUnspeccedSearchActorsSkeleton: {
        lexicon: 1,
        id: 'app.bsky.unspecced.searchActorsSkeleton',
        defs: {
            main: {
                type: 'query',
                description: 'Backend Actors (profile) search, returns only skeleton.',
                parameters: {
                    type: 'params',
                    required: [
                        'q'
                    ],
                    properties: {
                        q: {
                            type: 'string',
                            description: 'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax.'
                        },
                        viewer: {
                            type: 'string',
                            format: 'did',
                            description: 'DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.'
                        },
                        typeahead: {
                            type: 'boolean',
                            description: "If true, acts as fast/simple 'typeahead' query."
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 25
                        },
                        cursor: {
                            type: 'string',
                            description: 'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'actors'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            hitsTotal: {
                                type: 'integer',
                                description: 'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'
                            },
                            actors: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.unspecced.defs#skeletonSearchActor'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'BadQueryString'
                    }
                ]
            }
        }
    },
    AppBskyUnspeccedSearchPostsSkeleton: {
        lexicon: 1,
        id: 'app.bsky.unspecced.searchPostsSkeleton',
        defs: {
            main: {
                type: 'query',
                description: 'Backend Posts search, returns only skeleton',
                parameters: {
                    type: 'params',
                    required: [
                        'q'
                    ],
                    properties: {
                        q: {
                            type: 'string',
                            description: 'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'
                        },
                        sort: {
                            type: 'string',
                            knownValues: [
                                'top',
                                'latest'
                            ],
                            default: 'latest',
                            description: 'Specifies the ranking order of results.'
                        },
                        since: {
                            type: 'string',
                            description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD)."
                        },
                        until: {
                            type: 'string',
                            description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD)."
                        },
                        mentions: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions.'
                        },
                        author: {
                            type: 'string',
                            format: 'at-identifier',
                            description: 'Filter to posts by the given account. Handles are resolved to DID before query-time.'
                        },
                        lang: {
                            type: 'string',
                            format: 'language',
                            description: 'Filter to posts in the given language. Expected to be based on post language field, though server may override language detection.'
                        },
                        domain: {
                            type: 'string',
                            description: 'Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization.'
                        },
                        url: {
                            type: 'string',
                            format: 'uri',
                            description: 'Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching.'
                        },
                        tag: {
                            type: 'array',
                            items: {
                                type: 'string',
                                maxLength: 640,
                                maxGraphemes: 64
                            },
                            description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching."
                        },
                        viewer: {
                            type: 'string',
                            format: 'did',
                            description: "DID of the account making the request (not included for public/unauthenticated queries). Used for 'from:me' queries."
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 25
                        },
                        cursor: {
                            type: 'string',
                            description: 'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'posts'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            hitsTotal: {
                                type: 'integer',
                                description: 'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'
                            },
                            posts: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.unspecced.defs#skeletonSearchPost'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'BadQueryString'
                    }
                ]
            }
        }
    },
    AppBskyUnspeccedSearchStarterPacksSkeleton: {
        lexicon: 1,
        id: 'app.bsky.unspecced.searchStarterPacksSkeleton',
        defs: {
            main: {
                type: 'query',
                description: 'Backend Starter Pack search, returns only skeleton.',
                parameters: {
                    type: 'params',
                    required: [
                        'q'
                    ],
                    properties: {
                        q: {
                            type: 'string',
                            description: 'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.'
                        },
                        viewer: {
                            type: 'string',
                            format: 'did',
                            description: 'DID of the account making the request (not included for public/unauthenticated queries).'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 25
                        },
                        cursor: {
                            type: 'string',
                            description: 'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'starterPacks'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            hitsTotal: {
                                type: 'integer',
                                description: 'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.'
                            },
                            starterPacks: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:app.bsky.unspecced.defs#skeletonSearchStarterPack'
                                }
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'BadQueryString'
                    }
                ]
            }
        }
    },
    AppBskyVideoDefs: {
        lexicon: 1,
        id: 'app.bsky.video.defs',
        defs: {
            jobStatus: {
                type: 'object',
                required: [
                    'jobId',
                    'did',
                    'state'
                ],
                properties: {
                    jobId: {
                        type: 'string'
                    },
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    state: {
                        type: 'string',
                        description: 'The state of the video processing job. All values not listed as a known value indicate that the job is in process.',
                        knownValues: [
                            'JOB_STATE_COMPLETED',
                            'JOB_STATE_FAILED'
                        ]
                    },
                    progress: {
                        type: 'integer',
                        minimum: 0,
                        maximum: 100,
                        description: 'Progress within the current processing state.'
                    },
                    blob: {
                        type: 'blob'
                    },
                    error: {
                        type: 'string'
                    },
                    message: {
                        type: 'string'
                    }
                }
            }
        }
    },
    AppBskyVideoGetJobStatus: {
        lexicon: 1,
        id: 'app.bsky.video.getJobStatus',
        defs: {
            main: {
                type: 'query',
                description: 'Get status details for a video processing job.',
                parameters: {
                    type: 'params',
                    required: [
                        'jobId'
                    ],
                    properties: {
                        jobId: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'jobStatus'
                        ],
                        properties: {
                            jobStatus: {
                                type: 'ref',
                                ref: 'lex:app.bsky.video.defs#jobStatus'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyVideoGetUploadLimits: {
        lexicon: 1,
        id: 'app.bsky.video.getUploadLimits',
        defs: {
            main: {
                type: 'query',
                description: 'Get video upload limits for the authenticated user.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'canUpload'
                        ],
                        properties: {
                            canUpload: {
                                type: 'boolean'
                            },
                            remainingDailyVideos: {
                                type: 'integer'
                            },
                            remainingDailyBytes: {
                                type: 'integer'
                            },
                            message: {
                                type: 'string'
                            },
                            error: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    AppBskyVideoUploadVideo: {
        lexicon: 1,
        id: 'app.bsky.video.uploadVideo',
        defs: {
            main: {
                type: 'procedure',
                description: 'Upload a video to be processed then stored on the PDS.',
                input: {
                    encoding: 'video/mp4'
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'jobStatus'
                        ],
                        properties: {
                            jobStatus: {
                                type: 'ref',
                                ref: 'lex:app.bsky.video.defs#jobStatus'
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyActorDeclaration: {
        lexicon: 1,
        id: 'chat.bsky.actor.declaration',
        defs: {
            main: {
                type: 'record',
                description: 'A declaration of a Bluesky chat account.',
                key: 'literal:self',
                record: {
                    type: 'object',
                    required: [
                        'allowIncoming'
                    ],
                    properties: {
                        allowIncoming: {
                            type: 'string',
                            knownValues: [
                                'all',
                                'none',
                                'following'
                            ]
                        }
                    }
                }
            }
        }
    },
    ChatBskyActorDefs: {
        lexicon: 1,
        id: 'chat.bsky.actor.defs',
        defs: {
            profileViewBasic: {
                type: 'object',
                required: [
                    'did',
                    'handle'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    },
                    displayName: {
                        type: 'string',
                        maxGraphemes: 64,
                        maxLength: 640
                    },
                    avatar: {
                        type: 'string',
                        format: 'uri'
                    },
                    associated: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileAssociated'
                    },
                    viewer: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#viewerState'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    chatDisabled: {
                        type: 'boolean',
                        description: 'Set to true when the actor cannot actively participate in conversations'
                    },
                    verification: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#verificationState'
                    }
                }
            }
        }
    },
    ChatBskyActorDeleteAccount: {
        lexicon: 1,
        id: 'chat.bsky.actor.deleteAccount',
        defs: {
            main: {
                type: 'procedure',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {}
                    }
                }
            }
        }
    },
    ChatBskyActorExportAccountData: {
        lexicon: 1,
        id: 'chat.bsky.actor.exportAccountData',
        defs: {
            main: {
                type: 'query',
                output: {
                    encoding: 'application/jsonl'
                }
            }
        }
    },
    ChatBskyConvoAcceptConvo: {
        lexicon: 1,
        id: 'chat.bsky.convo.acceptConvo',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convoId'
                        ],
                        properties: {
                            convoId: {
                                type: 'string'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {
                            rev: {
                                description: 'Rev when the convo was accepted. If not present, the convo was already accepted.',
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoAddReaction: {
        lexicon: 1,
        id: 'chat.bsky.convo.addReaction',
        defs: {
            main: {
                type: 'procedure',
                description: 'Adds an emoji reaction to a message. Requires authentication. It is idempotent, so multiple calls from the same user with the same emoji result in a single reaction.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convoId',
                            'messageId',
                            'value'
                        ],
                        properties: {
                            convoId: {
                                type: 'string'
                            },
                            messageId: {
                                type: 'string'
                            },
                            value: {
                                type: 'string',
                                minLength: 1,
                                maxLength: 64,
                                minGraphemes: 1,
                                maxGraphemes: 1
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'message'
                        ],
                        properties: {
                            message: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.convo.defs#messageView'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'ReactionMessageDeleted',
                        description: 'Indicates that the message has been deleted and reactions can no longer be added/removed.'
                    },
                    {
                        name: 'ReactionLimitReached',
                        description: "Indicates that the message has the maximum number of reactions allowed for a single user, and the requested reaction wasn't yet present. If it was already present, the request will not fail since it is idempotent."
                    },
                    {
                        name: 'ReactionInvalidValue',
                        description: 'Indicates the value for the reaction is not acceptable. In general, this means it is not an emoji.'
                    }
                ]
            }
        }
    },
    ChatBskyConvoDefs: {
        lexicon: 1,
        id: 'chat.bsky.convo.defs',
        defs: {
            messageRef: {
                type: 'object',
                required: [
                    'did',
                    'messageId',
                    'convoId'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    convoId: {
                        type: 'string'
                    },
                    messageId: {
                        type: 'string'
                    }
                }
            },
            messageInput: {
                type: 'object',
                required: [
                    'text'
                ],
                properties: {
                    text: {
                        type: 'string',
                        maxLength: 10000,
                        maxGraphemes: 1000
                    },
                    facets: {
                        type: 'array',
                        description: 'Annotations of text (mentions, URLs, hashtags, etc)',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.richtext.facet'
                        }
                    },
                    embed: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.embed.record'
                        ]
                    }
                }
            },
            messageView: {
                type: 'object',
                required: [
                    'id',
                    'rev',
                    'text',
                    'sender',
                    'sentAt'
                ],
                properties: {
                    id: {
                        type: 'string'
                    },
                    rev: {
                        type: 'string'
                    },
                    text: {
                        type: 'string',
                        maxLength: 10000,
                        maxGraphemes: 1000
                    },
                    facets: {
                        type: 'array',
                        description: 'Annotations of text (mentions, URLs, hashtags, etc)',
                        items: {
                            type: 'ref',
                            ref: 'lex:app.bsky.richtext.facet'
                        }
                    },
                    embed: {
                        type: 'union',
                        refs: [
                            'lex:app.bsky.embed.record#view'
                        ]
                    },
                    reactions: {
                        type: 'array',
                        description: 'Reactions to this message, in ascending order of creation time.',
                        items: {
                            type: 'ref',
                            ref: 'lex:chat.bsky.convo.defs#reactionView'
                        }
                    },
                    sender: {
                        type: 'ref',
                        ref: 'lex:chat.bsky.convo.defs#messageViewSender'
                    },
                    sentAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            deletedMessageView: {
                type: 'object',
                required: [
                    'id',
                    'rev',
                    'sender',
                    'sentAt'
                ],
                properties: {
                    id: {
                        type: 'string'
                    },
                    rev: {
                        type: 'string'
                    },
                    sender: {
                        type: 'ref',
                        ref: 'lex:chat.bsky.convo.defs#messageViewSender'
                    },
                    sentAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            messageViewSender: {
                type: 'object',
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    }
                }
            },
            reactionView: {
                type: 'object',
                required: [
                    'value',
                    'sender',
                    'createdAt'
                ],
                properties: {
                    value: {
                        type: 'string'
                    },
                    sender: {
                        type: 'ref',
                        ref: 'lex:chat.bsky.convo.defs#reactionViewSender'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            reactionViewSender: {
                type: 'object',
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    }
                }
            },
            messageAndReactionView: {
                type: 'object',
                required: [
                    'message',
                    'reaction'
                ],
                properties: {
                    message: {
                        type: 'ref',
                        ref: 'lex:chat.bsky.convo.defs#messageView'
                    },
                    reaction: {
                        type: 'ref',
                        ref: 'lex:chat.bsky.convo.defs#reactionView'
                    }
                }
            },
            convoView: {
                type: 'object',
                required: [
                    'id',
                    'rev',
                    'members',
                    'muted',
                    'unreadCount'
                ],
                properties: {
                    id: {
                        type: 'string'
                    },
                    rev: {
                        type: 'string'
                    },
                    members: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:chat.bsky.actor.defs#profileViewBasic'
                        }
                    },
                    lastMessage: {
                        type: 'union',
                        refs: [
                            'lex:chat.bsky.convo.defs#messageView',
                            'lex:chat.bsky.convo.defs#deletedMessageView'
                        ]
                    },
                    lastReaction: {
                        type: 'union',
                        refs: [
                            'lex:chat.bsky.convo.defs#messageAndReactionView'
                        ]
                    },
                    muted: {
                        type: 'boolean'
                    },
                    status: {
                        type: 'string',
                        knownValues: [
                            'request',
                            'accepted'
                        ]
                    },
                    unreadCount: {
                        type: 'integer'
                    }
                }
            },
            logBeginConvo: {
                type: 'object',
                required: [
                    'rev',
                    'convoId'
                ],
                properties: {
                    rev: {
                        type: 'string'
                    },
                    convoId: {
                        type: 'string'
                    }
                }
            },
            logAcceptConvo: {
                type: 'object',
                required: [
                    'rev',
                    'convoId'
                ],
                properties: {
                    rev: {
                        type: 'string'
                    },
                    convoId: {
                        type: 'string'
                    }
                }
            },
            logLeaveConvo: {
                type: 'object',
                required: [
                    'rev',
                    'convoId'
                ],
                properties: {
                    rev: {
                        type: 'string'
                    },
                    convoId: {
                        type: 'string'
                    }
                }
            },
            logMuteConvo: {
                type: 'object',
                required: [
                    'rev',
                    'convoId'
                ],
                properties: {
                    rev: {
                        type: 'string'
                    },
                    convoId: {
                        type: 'string'
                    }
                }
            },
            logUnmuteConvo: {
                type: 'object',
                required: [
                    'rev',
                    'convoId'
                ],
                properties: {
                    rev: {
                        type: 'string'
                    },
                    convoId: {
                        type: 'string'
                    }
                }
            },
            logCreateMessage: {
                type: 'object',
                required: [
                    'rev',
                    'convoId',
                    'message'
                ],
                properties: {
                    rev: {
                        type: 'string'
                    },
                    convoId: {
                        type: 'string'
                    },
                    message: {
                        type: 'union',
                        refs: [
                            'lex:chat.bsky.convo.defs#messageView',
                            'lex:chat.bsky.convo.defs#deletedMessageView'
                        ]
                    }
                }
            },
            logDeleteMessage: {
                type: 'object',
                required: [
                    'rev',
                    'convoId',
                    'message'
                ],
                properties: {
                    rev: {
                        type: 'string'
                    },
                    convoId: {
                        type: 'string'
                    },
                    message: {
                        type: 'union',
                        refs: [
                            'lex:chat.bsky.convo.defs#messageView',
                            'lex:chat.bsky.convo.defs#deletedMessageView'
                        ]
                    }
                }
            },
            logReadMessage: {
                type: 'object',
                required: [
                    'rev',
                    'convoId',
                    'message'
                ],
                properties: {
                    rev: {
                        type: 'string'
                    },
                    convoId: {
                        type: 'string'
                    },
                    message: {
                        type: 'union',
                        refs: [
                            'lex:chat.bsky.convo.defs#messageView',
                            'lex:chat.bsky.convo.defs#deletedMessageView'
                        ]
                    }
                }
            },
            logAddReaction: {
                type: 'object',
                required: [
                    'rev',
                    'convoId',
                    'message',
                    'reaction'
                ],
                properties: {
                    rev: {
                        type: 'string'
                    },
                    convoId: {
                        type: 'string'
                    },
                    message: {
                        type: 'union',
                        refs: [
                            'lex:chat.bsky.convo.defs#messageView',
                            'lex:chat.bsky.convo.defs#deletedMessageView'
                        ]
                    },
                    reaction: {
                        type: 'ref',
                        ref: 'lex:chat.bsky.convo.defs#reactionView'
                    }
                }
            },
            logRemoveReaction: {
                type: 'object',
                required: [
                    'rev',
                    'convoId',
                    'message',
                    'reaction'
                ],
                properties: {
                    rev: {
                        type: 'string'
                    },
                    convoId: {
                        type: 'string'
                    },
                    message: {
                        type: 'union',
                        refs: [
                            'lex:chat.bsky.convo.defs#messageView',
                            'lex:chat.bsky.convo.defs#deletedMessageView'
                        ]
                    },
                    reaction: {
                        type: 'ref',
                        ref: 'lex:chat.bsky.convo.defs#reactionView'
                    }
                }
            }
        }
    },
    ChatBskyConvoDeleteMessageForSelf: {
        lexicon: 1,
        id: 'chat.bsky.convo.deleteMessageForSelf',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convoId',
                            'messageId'
                        ],
                        properties: {
                            convoId: {
                                type: 'string'
                            },
                            messageId: {
                                type: 'string'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:chat.bsky.convo.defs#deletedMessageView'
                    }
                }
            }
        }
    },
    ChatBskyConvoGetConvo: {
        lexicon: 1,
        id: 'chat.bsky.convo.getConvo',
        defs: {
            main: {
                type: 'query',
                parameters: {
                    type: 'params',
                    required: [
                        'convoId'
                    ],
                    properties: {
                        convoId: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convo'
                        ],
                        properties: {
                            convo: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.convo.defs#convoView'
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoGetConvoAvailability: {
        lexicon: 1,
        id: 'chat.bsky.convo.getConvoAvailability',
        defs: {
            main: {
                type: 'query',
                description: 'Get whether the requester and the other members can chat. If an existing convo is found for these members, it is returned.',
                parameters: {
                    type: 'params',
                    required: [
                        'members'
                    ],
                    properties: {
                        members: {
                            type: 'array',
                            minLength: 1,
                            maxLength: 10,
                            items: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'canChat'
                        ],
                        properties: {
                            canChat: {
                                type: 'boolean'
                            },
                            convo: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.convo.defs#convoView'
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoGetConvoForMembers: {
        lexicon: 1,
        id: 'chat.bsky.convo.getConvoForMembers',
        defs: {
            main: {
                type: 'query',
                parameters: {
                    type: 'params',
                    required: [
                        'members'
                    ],
                    properties: {
                        members: {
                            type: 'array',
                            minLength: 1,
                            maxLength: 10,
                            items: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convo'
                        ],
                        properties: {
                            convo: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.convo.defs#convoView'
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoGetLog: {
        lexicon: 1,
        id: 'chat.bsky.convo.getLog',
        defs: {
            main: {
                type: 'query',
                parameters: {
                    type: 'params',
                    required: [],
                    properties: {
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'logs'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            logs: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:chat.bsky.convo.defs#logBeginConvo',
                                        'lex:chat.bsky.convo.defs#logAcceptConvo',
                                        'lex:chat.bsky.convo.defs#logLeaveConvo',
                                        'lex:chat.bsky.convo.defs#logMuteConvo',
                                        'lex:chat.bsky.convo.defs#logUnmuteConvo',
                                        'lex:chat.bsky.convo.defs#logCreateMessage',
                                        'lex:chat.bsky.convo.defs#logDeleteMessage',
                                        'lex:chat.bsky.convo.defs#logReadMessage',
                                        'lex:chat.bsky.convo.defs#logAddReaction',
                                        'lex:chat.bsky.convo.defs#logRemoveReaction'
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoGetMessages: {
        lexicon: 1,
        id: 'chat.bsky.convo.getMessages',
        defs: {
            main: {
                type: 'query',
                parameters: {
                    type: 'params',
                    required: [
                        'convoId'
                    ],
                    properties: {
                        convoId: {
                            type: 'string'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'messages'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            messages: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:chat.bsky.convo.defs#messageView',
                                        'lex:chat.bsky.convo.defs#deletedMessageView'
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoLeaveConvo: {
        lexicon: 1,
        id: 'chat.bsky.convo.leaveConvo',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convoId'
                        ],
                        properties: {
                            convoId: {
                                type: 'string'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convoId',
                            'rev'
                        ],
                        properties: {
                            convoId: {
                                type: 'string'
                            },
                            rev: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoListConvos: {
        lexicon: 1,
        id: 'chat.bsky.convo.listConvos',
        defs: {
            main: {
                type: 'query',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        },
                        readState: {
                            type: 'string',
                            knownValues: [
                                'unread'
                            ]
                        },
                        status: {
                            type: 'string',
                            knownValues: [
                                'request',
                                'accepted'
                            ]
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convos'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            convos: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:chat.bsky.convo.defs#convoView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoMuteConvo: {
        lexicon: 1,
        id: 'chat.bsky.convo.muteConvo',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convoId'
                        ],
                        properties: {
                            convoId: {
                                type: 'string'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convo'
                        ],
                        properties: {
                            convo: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.convo.defs#convoView'
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoRemoveReaction: {
        lexicon: 1,
        id: 'chat.bsky.convo.removeReaction',
        defs: {
            main: {
                type: 'procedure',
                description: "Removes an emoji reaction from a message. Requires authentication. It is idempotent, so multiple calls from the same user with the same emoji result in that reaction not being present, even if it already wasn't.",
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convoId',
                            'messageId',
                            'value'
                        ],
                        properties: {
                            convoId: {
                                type: 'string'
                            },
                            messageId: {
                                type: 'string'
                            },
                            value: {
                                type: 'string',
                                minLength: 1,
                                maxLength: 64,
                                minGraphemes: 1,
                                maxGraphemes: 1
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'message'
                        ],
                        properties: {
                            message: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.convo.defs#messageView'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'ReactionMessageDeleted',
                        description: 'Indicates that the message has been deleted and reactions can no longer be added/removed.'
                    },
                    {
                        name: 'ReactionInvalidValue',
                        description: 'Indicates the value for the reaction is not acceptable. In general, this means it is not an emoji.'
                    }
                ]
            }
        }
    },
    ChatBskyConvoSendMessage: {
        lexicon: 1,
        id: 'chat.bsky.convo.sendMessage',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convoId',
                            'message'
                        ],
                        properties: {
                            convoId: {
                                type: 'string'
                            },
                            message: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.convo.defs#messageInput'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:chat.bsky.convo.defs#messageView'
                    }
                }
            }
        }
    },
    ChatBskyConvoSendMessageBatch: {
        lexicon: 1,
        id: 'chat.bsky.convo.sendMessageBatch',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'items'
                        ],
                        properties: {
                            items: {
                                type: 'array',
                                maxLength: 100,
                                items: {
                                    type: 'ref',
                                    ref: 'lex:chat.bsky.convo.sendMessageBatch#batchItem'
                                }
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'items'
                        ],
                        properties: {
                            items: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:chat.bsky.convo.defs#messageView'
                                }
                            }
                        }
                    }
                }
            },
            batchItem: {
                type: 'object',
                required: [
                    'convoId',
                    'message'
                ],
                properties: {
                    convoId: {
                        type: 'string'
                    },
                    message: {
                        type: 'ref',
                        ref: 'lex:chat.bsky.convo.defs#messageInput'
                    }
                }
            }
        }
    },
    ChatBskyConvoUnmuteConvo: {
        lexicon: 1,
        id: 'chat.bsky.convo.unmuteConvo',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convoId'
                        ],
                        properties: {
                            convoId: {
                                type: 'string'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convo'
                        ],
                        properties: {
                            convo: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.convo.defs#convoView'
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoUpdateAllRead: {
        lexicon: 1,
        id: 'chat.bsky.convo.updateAllRead',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {
                            status: {
                                type: 'string',
                                knownValues: [
                                    'request',
                                    'accepted'
                                ]
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'updatedCount'
                        ],
                        properties: {
                            updatedCount: {
                                description: 'The count of updated convos.',
                                type: 'integer'
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyConvoUpdateRead: {
        lexicon: 1,
        id: 'chat.bsky.convo.updateRead',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convoId'
                        ],
                        properties: {
                            convoId: {
                                type: 'string'
                            },
                            messageId: {
                                type: 'string'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'convo'
                        ],
                        properties: {
                            convo: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.convo.defs#convoView'
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyModerationGetActorMetadata: {
        lexicon: 1,
        id: 'chat.bsky.moderation.getActorMetadata',
        defs: {
            main: {
                type: 'query',
                parameters: {
                    type: 'params',
                    required: [
                        'actor'
                    ],
                    properties: {
                        actor: {
                            type: 'string',
                            format: 'did'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'day',
                            'month',
                            'all'
                        ],
                        properties: {
                            day: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.moderation.getActorMetadata#metadata'
                            },
                            month: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.moderation.getActorMetadata#metadata'
                            },
                            all: {
                                type: 'ref',
                                ref: 'lex:chat.bsky.moderation.getActorMetadata#metadata'
                            }
                        }
                    }
                }
            },
            metadata: {
                type: 'object',
                required: [
                    'messagesSent',
                    'messagesReceived',
                    'convos',
                    'convosStarted'
                ],
                properties: {
                    messagesSent: {
                        type: 'integer'
                    },
                    messagesReceived: {
                        type: 'integer'
                    },
                    convos: {
                        type: 'integer'
                    },
                    convosStarted: {
                        type: 'integer'
                    }
                }
            }
        }
    },
    ChatBskyModerationGetMessageContext: {
        lexicon: 1,
        id: 'chat.bsky.moderation.getMessageContext',
        defs: {
            main: {
                type: 'query',
                parameters: {
                    type: 'params',
                    required: [
                        'messageId'
                    ],
                    properties: {
                        convoId: {
                            type: 'string',
                            description: 'Conversation that the message is from. NOTE: this field will eventually be required.'
                        },
                        messageId: {
                            type: 'string'
                        },
                        before: {
                            type: 'integer',
                            default: 5
                        },
                        after: {
                            type: 'integer',
                            default: 5
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'messages'
                        ],
                        properties: {
                            messages: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:chat.bsky.convo.defs#messageView',
                                        'lex:chat.bsky.convo.defs#deletedMessageView'
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ChatBskyModerationUpdateActorAccess: {
        lexicon: 1,
        id: 'chat.bsky.moderation.updateActorAccess',
        defs: {
            main: {
                type: 'procedure',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'actor',
                            'allowAccess'
                        ],
                        properties: {
                            actor: {
                                type: 'string',
                                format: 'did'
                            },
                            allowAccess: {
                                type: 'boolean'
                            },
                            ref: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneCommunicationCreateTemplate: {
        lexicon: 1,
        id: 'tools.ozone.communication.createTemplate',
        defs: {
            main: {
                type: 'procedure',
                description: 'Administrative action to create a new, re-usable communication (email for now) template.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'subject',
                            'contentMarkdown',
                            'name'
                        ],
                        properties: {
                            name: {
                                type: 'string',
                                description: 'Name of the template.'
                            },
                            contentMarkdown: {
                                type: 'string',
                                description: 'Content of the template, markdown supported, can contain variable placeholders.'
                            },
                            subject: {
                                type: 'string',
                                description: 'Subject of the message, used in emails.'
                            },
                            lang: {
                                type: 'string',
                                format: 'language',
                                description: 'Message language.'
                            },
                            createdBy: {
                                type: 'string',
                                format: 'did',
                                description: 'DID of the user who is creating the template.'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.communication.defs#templateView'
                    }
                },
                errors: [
                    {
                        name: 'DuplicateTemplateName'
                    }
                ]
            }
        }
    },
    ToolsOzoneCommunicationDefs: {
        lexicon: 1,
        id: 'tools.ozone.communication.defs',
        defs: {
            templateView: {
                type: 'object',
                required: [
                    'id',
                    'name',
                    'contentMarkdown',
                    'disabled',
                    'lastUpdatedBy',
                    'createdAt',
                    'updatedAt'
                ],
                properties: {
                    id: {
                        type: 'string'
                    },
                    name: {
                        type: 'string',
                        description: 'Name of the template.'
                    },
                    subject: {
                        type: 'string',
                        description: 'Content of the template, can contain markdown and variable placeholders.'
                    },
                    contentMarkdown: {
                        type: 'string',
                        description: 'Subject of the message, used in emails.'
                    },
                    disabled: {
                        type: 'boolean'
                    },
                    lang: {
                        type: 'string',
                        format: 'language',
                        description: 'Message language.'
                    },
                    lastUpdatedBy: {
                        type: 'string',
                        format: 'did',
                        description: 'DID of the user who last updated the template.'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    updatedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            }
        }
    },
    ToolsOzoneCommunicationDeleteTemplate: {
        lexicon: 1,
        id: 'tools.ozone.communication.deleteTemplate',
        defs: {
            main: {
                type: 'procedure',
                description: 'Delete a communication template.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'id'
                        ],
                        properties: {
                            id: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneCommunicationListTemplates: {
        lexicon: 1,
        id: 'tools.ozone.communication.listTemplates',
        defs: {
            main: {
                type: 'query',
                description: 'Get list of all communication templates.',
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'communicationTemplates'
                        ],
                        properties: {
                            communicationTemplates: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.communication.defs#templateView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneCommunicationUpdateTemplate: {
        lexicon: 1,
        id: 'tools.ozone.communication.updateTemplate',
        defs: {
            main: {
                type: 'procedure',
                description: 'Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'id'
                        ],
                        properties: {
                            id: {
                                type: 'string',
                                description: 'ID of the template to be updated.'
                            },
                            name: {
                                type: 'string',
                                description: 'Name of the template.'
                            },
                            lang: {
                                type: 'string',
                                format: 'language',
                                description: 'Message language.'
                            },
                            contentMarkdown: {
                                type: 'string',
                                description: 'Content of the template, markdown supported, can contain variable placeholders.'
                            },
                            subject: {
                                type: 'string',
                                description: 'Subject of the message, used in emails.'
                            },
                            updatedBy: {
                                type: 'string',
                                format: 'did',
                                description: 'DID of the user who is updating the template.'
                            },
                            disabled: {
                                type: 'boolean'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.communication.defs#templateView'
                    }
                },
                errors: [
                    {
                        name: 'DuplicateTemplateName'
                    }
                ]
            }
        }
    },
    ToolsOzoneHostingGetAccountHistory: {
        lexicon: 1,
        id: 'tools.ozone.hosting.getAccountHistory',
        defs: {
            main: {
                type: 'query',
                description: 'Get account history, e.g. log of updated email addresses or other identity information.',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did'
                        },
                        events: {
                            type: 'array',
                            items: {
                                type: 'string',
                                knownValues: [
                                    'accountCreated',
                                    'emailUpdated',
                                    'emailConfirmed',
                                    'passwordUpdated',
                                    'handleUpdated'
                                ]
                            }
                        },
                        cursor: {
                            type: 'string'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'events'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            events: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.hosting.getAccountHistory#event'
                                }
                            }
                        }
                    }
                }
            },
            event: {
                type: 'object',
                required: [
                    'details',
                    'createdBy',
                    'createdAt'
                ],
                properties: {
                    details: {
                        type: 'union',
                        refs: [
                            'lex:tools.ozone.hosting.getAccountHistory#accountCreated',
                            'lex:tools.ozone.hosting.getAccountHistory#emailUpdated',
                            'lex:tools.ozone.hosting.getAccountHistory#emailConfirmed',
                            'lex:tools.ozone.hosting.getAccountHistory#passwordUpdated',
                            'lex:tools.ozone.hosting.getAccountHistory#handleUpdated'
                        ]
                    },
                    createdBy: {
                        type: 'string'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            accountCreated: {
                type: 'object',
                required: [],
                properties: {
                    email: {
                        type: 'string'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    }
                }
            },
            emailUpdated: {
                type: 'object',
                required: [
                    'email'
                ],
                properties: {
                    email: {
                        type: 'string'
                    }
                }
            },
            emailConfirmed: {
                type: 'object',
                required: [
                    'email'
                ],
                properties: {
                    email: {
                        type: 'string'
                    }
                }
            },
            passwordUpdated: {
                type: 'object',
                required: [],
                properties: {}
            },
            handleUpdated: {
                type: 'object',
                required: [
                    'handle'
                ],
                properties: {
                    handle: {
                        type: 'string',
                        format: 'handle'
                    }
                }
            }
        }
    },
    ToolsOzoneModerationDefs: {
        lexicon: 1,
        id: 'tools.ozone.moderation.defs',
        defs: {
            modEventView: {
                type: 'object',
                required: [
                    'id',
                    'event',
                    'subject',
                    'subjectBlobCids',
                    'createdBy',
                    'createdAt'
                ],
                properties: {
                    id: {
                        type: 'integer'
                    },
                    event: {
                        type: 'union',
                        refs: [
                            'lex:tools.ozone.moderation.defs#modEventTakedown',
                            'lex:tools.ozone.moderation.defs#modEventReverseTakedown',
                            'lex:tools.ozone.moderation.defs#modEventComment',
                            'lex:tools.ozone.moderation.defs#modEventReport',
                            'lex:tools.ozone.moderation.defs#modEventLabel',
                            'lex:tools.ozone.moderation.defs#modEventAcknowledge',
                            'lex:tools.ozone.moderation.defs#modEventEscalate',
                            'lex:tools.ozone.moderation.defs#modEventMute',
                            'lex:tools.ozone.moderation.defs#modEventUnmute',
                            'lex:tools.ozone.moderation.defs#modEventMuteReporter',
                            'lex:tools.ozone.moderation.defs#modEventUnmuteReporter',
                            'lex:tools.ozone.moderation.defs#modEventEmail',
                            'lex:tools.ozone.moderation.defs#modEventResolveAppeal',
                            'lex:tools.ozone.moderation.defs#modEventDivert',
                            'lex:tools.ozone.moderation.defs#modEventTag',
                            'lex:tools.ozone.moderation.defs#accountEvent',
                            'lex:tools.ozone.moderation.defs#identityEvent',
                            'lex:tools.ozone.moderation.defs#recordEvent',
                            'lex:tools.ozone.moderation.defs#modEventPriorityScore'
                        ]
                    },
                    subject: {
                        type: 'union',
                        refs: [
                            'lex:com.atproto.admin.defs#repoRef',
                            'lex:com.atproto.repo.strongRef',
                            'lex:chat.bsky.convo.defs#messageRef'
                        ]
                    },
                    subjectBlobCids: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    },
                    createdBy: {
                        type: 'string',
                        format: 'did'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    creatorHandle: {
                        type: 'string'
                    },
                    subjectHandle: {
                        type: 'string'
                    }
                }
            },
            modEventViewDetail: {
                type: 'object',
                required: [
                    'id',
                    'event',
                    'subject',
                    'subjectBlobs',
                    'createdBy',
                    'createdAt'
                ],
                properties: {
                    id: {
                        type: 'integer'
                    },
                    event: {
                        type: 'union',
                        refs: [
                            'lex:tools.ozone.moderation.defs#modEventTakedown',
                            'lex:tools.ozone.moderation.defs#modEventReverseTakedown',
                            'lex:tools.ozone.moderation.defs#modEventComment',
                            'lex:tools.ozone.moderation.defs#modEventReport',
                            'lex:tools.ozone.moderation.defs#modEventLabel',
                            'lex:tools.ozone.moderation.defs#modEventAcknowledge',
                            'lex:tools.ozone.moderation.defs#modEventEscalate',
                            'lex:tools.ozone.moderation.defs#modEventMute',
                            'lex:tools.ozone.moderation.defs#modEventUnmute',
                            'lex:tools.ozone.moderation.defs#modEventMuteReporter',
                            'lex:tools.ozone.moderation.defs#modEventUnmuteReporter',
                            'lex:tools.ozone.moderation.defs#modEventEmail',
                            'lex:tools.ozone.moderation.defs#modEventResolveAppeal',
                            'lex:tools.ozone.moderation.defs#modEventDivert',
                            'lex:tools.ozone.moderation.defs#modEventTag',
                            'lex:tools.ozone.moderation.defs#accountEvent',
                            'lex:tools.ozone.moderation.defs#identityEvent',
                            'lex:tools.ozone.moderation.defs#recordEvent',
                            'lex:tools.ozone.moderation.defs#modEventPriorityScore'
                        ]
                    },
                    subject: {
                        type: 'union',
                        refs: [
                            'lex:tools.ozone.moderation.defs#repoView',
                            'lex:tools.ozone.moderation.defs#repoViewNotFound',
                            'lex:tools.ozone.moderation.defs#recordView',
                            'lex:tools.ozone.moderation.defs#recordViewNotFound'
                        ]
                    },
                    subjectBlobs: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:tools.ozone.moderation.defs#blobView'
                        }
                    },
                    createdBy: {
                        type: 'string',
                        format: 'did'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            subjectStatusView: {
                type: 'object',
                required: [
                    'id',
                    'subject',
                    'createdAt',
                    'updatedAt',
                    'reviewState'
                ],
                properties: {
                    id: {
                        type: 'integer'
                    },
                    subject: {
                        type: 'union',
                        refs: [
                            'lex:com.atproto.admin.defs#repoRef',
                            'lex:com.atproto.repo.strongRef'
                        ]
                    },
                    hosting: {
                        type: 'union',
                        refs: [
                            'lex:tools.ozone.moderation.defs#accountHosting',
                            'lex:tools.ozone.moderation.defs#recordHosting'
                        ]
                    },
                    subjectBlobCids: {
                        type: 'array',
                        items: {
                            type: 'string',
                            format: 'cid'
                        }
                    },
                    subjectRepoHandle: {
                        type: 'string'
                    },
                    updatedAt: {
                        type: 'string',
                        format: 'datetime',
                        description: 'Timestamp referencing when the last update was made to the moderation status of the subject'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime',
                        description: 'Timestamp referencing the first moderation status impacting event was emitted on the subject'
                    },
                    reviewState: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#subjectReviewState'
                    },
                    comment: {
                        type: 'string',
                        description: 'Sticky comment on the subject.'
                    },
                    priorityScore: {
                        type: 'integer',
                        description: 'Numeric value representing the level of priority. Higher score means higher priority.',
                        minimum: 0,
                        maximum: 100
                    },
                    muteUntil: {
                        type: 'string',
                        format: 'datetime'
                    },
                    muteReportingUntil: {
                        type: 'string',
                        format: 'datetime'
                    },
                    lastReviewedBy: {
                        type: 'string',
                        format: 'did'
                    },
                    lastReviewedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    lastReportedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    lastAppealedAt: {
                        type: 'string',
                        format: 'datetime',
                        description: 'Timestamp referencing when the author of the subject appealed a moderation action'
                    },
                    takendown: {
                        type: 'boolean'
                    },
                    appealed: {
                        type: 'boolean',
                        description: 'True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators.'
                    },
                    suspendUntil: {
                        type: 'string',
                        format: 'datetime'
                    },
                    tags: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    },
                    accountStats: {
                        description: 'Statistics related to the account subject',
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#accountStats'
                    },
                    recordsStats: {
                        description: "Statistics related to the record subjects authored by the subject's account",
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#recordsStats'
                    }
                }
            },
            subjectView: {
                description: "Detailed view of a subject. For record subjects, the author's repo and profile will be returned.",
                type: 'object',
                required: [
                    'type',
                    'subject'
                ],
                properties: {
                    type: {
                        type: 'ref',
                        ref: 'lex:com.atproto.moderation.defs#subjectType'
                    },
                    subject: {
                        type: 'string'
                    },
                    status: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#subjectStatusView'
                    },
                    repo: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#repoViewDetail'
                    },
                    profile: {
                        type: 'union',
                        refs: []
                    },
                    record: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#recordViewDetail'
                    }
                }
            },
            accountStats: {
                description: 'Statistics about a particular account subject',
                type: 'object',
                properties: {
                    reportCount: {
                        description: 'Total number of reports on the account',
                        type: 'integer'
                    },
                    appealCount: {
                        description: 'Total number of appeals against a moderation action on the account',
                        type: 'integer'
                    },
                    suspendCount: {
                        description: 'Number of times the account was suspended',
                        type: 'integer'
                    },
                    escalateCount: {
                        description: 'Number of times the account was escalated',
                        type: 'integer'
                    },
                    takedownCount: {
                        description: 'Number of times the account was taken down',
                        type: 'integer'
                    }
                }
            },
            recordsStats: {
                description: 'Statistics about a set of record subject items',
                type: 'object',
                properties: {
                    totalReports: {
                        description: 'Cumulative sum of the number of reports on the items in the set',
                        type: 'integer'
                    },
                    reportedCount: {
                        description: 'Number of items that were reported at least once',
                        type: 'integer'
                    },
                    escalatedCount: {
                        description: 'Number of items that were escalated at least once',
                        type: 'integer'
                    },
                    appealedCount: {
                        description: 'Number of items that were appealed at least once',
                        type: 'integer'
                    },
                    subjectCount: {
                        description: 'Total number of item in the set',
                        type: 'integer'
                    },
                    pendingCount: {
                        description: 'Number of item currently in "reviewOpen" or "reviewEscalated" state',
                        type: 'integer'
                    },
                    processedCount: {
                        description: 'Number of item currently in "reviewNone" or "reviewClosed" state',
                        type: 'integer'
                    },
                    takendownCount: {
                        description: 'Number of item currently taken down',
                        type: 'integer'
                    }
                }
            },
            subjectReviewState: {
                type: 'string',
                knownValues: [
                    'lex:tools.ozone.moderation.defs#reviewOpen',
                    'lex:tools.ozone.moderation.defs#reviewEscalated',
                    'lex:tools.ozone.moderation.defs#reviewClosed',
                    'lex:tools.ozone.moderation.defs#reviewNone'
                ]
            },
            reviewOpen: {
                type: 'token',
                description: 'Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator'
            },
            reviewEscalated: {
                type: 'token',
                description: 'Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator'
            },
            reviewClosed: {
                type: 'token',
                description: 'Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator'
            },
            reviewNone: {
                type: 'token',
                description: 'Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it'
            },
            modEventTakedown: {
                type: 'object',
                description: 'Take down a subject permanently or temporarily',
                properties: {
                    comment: {
                        type: 'string'
                    },
                    durationInHours: {
                        type: 'integer',
                        description: 'Indicates how long the takedown should be in effect before automatically expiring.'
                    },
                    acknowledgeAccountSubjects: {
                        type: 'boolean',
                        description: 'If true, all other reports on content authored by this account will be resolved (acknowledged).'
                    },
                    policies: {
                        type: 'array',
                        maxLength: 5,
                        items: {
                            type: 'string'
                        },
                        description: 'Names/Keywords of the policies that drove the decision.'
                    }
                }
            },
            modEventReverseTakedown: {
                type: 'object',
                description: 'Revert take down action on a subject',
                properties: {
                    comment: {
                        type: 'string',
                        description: 'Describe reasoning behind the reversal.'
                    }
                }
            },
            modEventResolveAppeal: {
                type: 'object',
                description: 'Resolve appeal on a subject',
                properties: {
                    comment: {
                        type: 'string',
                        description: 'Describe resolution.'
                    }
                }
            },
            modEventComment: {
                type: 'object',
                description: 'Add a comment to a subject. An empty comment will clear any previously set sticky comment.',
                properties: {
                    comment: {
                        type: 'string'
                    },
                    sticky: {
                        type: 'boolean',
                        description: 'Make the comment persistent on the subject'
                    }
                }
            },
            modEventReport: {
                type: 'object',
                description: 'Report a subject',
                required: [
                    'reportType'
                ],
                properties: {
                    comment: {
                        type: 'string'
                    },
                    isReporterMuted: {
                        type: 'boolean',
                        description: "Set to true if the reporter was muted from reporting at the time of the event. These reports won't impact the reviewState of the subject."
                    },
                    reportType: {
                        type: 'ref',
                        ref: 'lex:com.atproto.moderation.defs#reasonType'
                    }
                }
            },
            modEventLabel: {
                type: 'object',
                description: 'Apply/Negate labels on a subject',
                required: [
                    'createLabelVals',
                    'negateLabelVals'
                ],
                properties: {
                    comment: {
                        type: 'string'
                    },
                    createLabelVals: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    },
                    negateLabelVals: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    },
                    durationInHours: {
                        type: 'integer',
                        description: 'Indicates how long the label will remain on the subject. Only applies on labels that are being added.'
                    }
                }
            },
            modEventPriorityScore: {
                type: 'object',
                description: 'Set priority score of the subject. Higher score means higher priority.',
                required: [
                    'score'
                ],
                properties: {
                    comment: {
                        type: 'string'
                    },
                    score: {
                        type: 'integer',
                        minimum: 0,
                        maximum: 100
                    }
                }
            },
            modEventAcknowledge: {
                type: 'object',
                properties: {
                    comment: {
                        type: 'string'
                    },
                    acknowledgeAccountSubjects: {
                        type: 'boolean',
                        description: 'If true, all other reports on content authored by this account will be resolved (acknowledged).'
                    }
                }
            },
            modEventEscalate: {
                type: 'object',
                properties: {
                    comment: {
                        type: 'string'
                    }
                }
            },
            modEventMute: {
                type: 'object',
                description: 'Mute incoming reports on a subject',
                required: [
                    'durationInHours'
                ],
                properties: {
                    comment: {
                        type: 'string'
                    },
                    durationInHours: {
                        type: 'integer',
                        description: 'Indicates how long the subject should remain muted.'
                    }
                }
            },
            modEventUnmute: {
                type: 'object',
                description: 'Unmute action on a subject',
                properties: {
                    comment: {
                        type: 'string',
                        description: 'Describe reasoning behind the reversal.'
                    }
                }
            },
            modEventMuteReporter: {
                type: 'object',
                description: 'Mute incoming reports from an account',
                properties: {
                    comment: {
                        type: 'string'
                    },
                    durationInHours: {
                        type: 'integer',
                        description: 'Indicates how long the account should remain muted. Falsy value here means a permanent mute.'
                    }
                }
            },
            modEventUnmuteReporter: {
                type: 'object',
                description: 'Unmute incoming reports from an account',
                properties: {
                    comment: {
                        type: 'string',
                        description: 'Describe reasoning behind the reversal.'
                    }
                }
            },
            modEventEmail: {
                type: 'object',
                description: 'Keep a log of outgoing email to a user',
                required: [
                    'subjectLine'
                ],
                properties: {
                    subjectLine: {
                        type: 'string',
                        description: 'The subject line of the email sent to the user.'
                    },
                    content: {
                        type: 'string',
                        description: 'The content of the email sent to the user.'
                    },
                    comment: {
                        type: 'string',
                        description: 'Additional comment about the outgoing comm.'
                    }
                }
            },
            modEventDivert: {
                type: 'object',
                description: "Divert a record's blobs to a 3rd party service for further scanning/tagging",
                properties: {
                    comment: {
                        type: 'string'
                    }
                }
            },
            modEventTag: {
                type: 'object',
                description: 'Add/Remove a tag on a subject',
                required: [
                    'add',
                    'remove'
                ],
                properties: {
                    add: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        description: "Tags to be added to the subject. If already exists, won't be duplicated."
                    },
                    remove: {
                        type: 'array',
                        items: {
                            type: 'string'
                        },
                        description: "Tags to be removed to the subject. Ignores a tag If it doesn't exist, won't be duplicated."
                    },
                    comment: {
                        type: 'string',
                        description: 'Additional comment about added/removed tags.'
                    }
                }
            },
            accountEvent: {
                type: 'object',
                description: 'Logs account status related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.',
                required: [
                    'timestamp',
                    'active'
                ],
                properties: {
                    comment: {
                        type: 'string'
                    },
                    active: {
                        type: 'boolean',
                        description: 'Indicates that the account has a repository which can be fetched from the host that emitted this event.'
                    },
                    status: {
                        type: 'string',
                        knownValues: [
                            'unknown',
                            'deactivated',
                            'deleted',
                            'takendown',
                            'suspended',
                            'tombstoned'
                        ]
                    },
                    timestamp: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            identityEvent: {
                type: 'object',
                description: 'Logs identity related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.',
                required: [
                    'timestamp'
                ],
                properties: {
                    comment: {
                        type: 'string'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    },
                    pdsHost: {
                        type: 'string',
                        format: 'uri'
                    },
                    tombstone: {
                        type: 'boolean'
                    },
                    timestamp: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            recordEvent: {
                type: 'object',
                description: 'Logs lifecycle event on a record subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.',
                required: [
                    'timestamp',
                    'op'
                ],
                properties: {
                    comment: {
                        type: 'string'
                    },
                    op: {
                        type: 'string',
                        knownValues: [
                            'create',
                            'update',
                            'delete'
                        ]
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    timestamp: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            repoView: {
                type: 'object',
                required: [
                    'did',
                    'handle',
                    'relatedRecords',
                    'indexedAt',
                    'moderation'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    },
                    email: {
                        type: 'string'
                    },
                    relatedRecords: {
                        type: 'array',
                        items: {
                            type: 'unknown'
                        }
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    moderation: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#moderation'
                    },
                    invitedBy: {
                        type: 'ref',
                        ref: 'lex:com.atproto.server.defs#inviteCode'
                    },
                    invitesDisabled: {
                        type: 'boolean'
                    },
                    inviteNote: {
                        type: 'string'
                    },
                    deactivatedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    threatSignatures: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.admin.defs#threatSignature'
                        }
                    }
                }
            },
            repoViewDetail: {
                type: 'object',
                required: [
                    'did',
                    'handle',
                    'relatedRecords',
                    'indexedAt',
                    'moderation'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    handle: {
                        type: 'string',
                        format: 'handle'
                    },
                    email: {
                        type: 'string'
                    },
                    relatedRecords: {
                        type: 'array',
                        items: {
                            type: 'unknown'
                        }
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    moderation: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#moderationDetail'
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    invitedBy: {
                        type: 'ref',
                        ref: 'lex:com.atproto.server.defs#inviteCode'
                    },
                    invites: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.server.defs#inviteCode'
                        }
                    },
                    invitesDisabled: {
                        type: 'boolean'
                    },
                    inviteNote: {
                        type: 'string'
                    },
                    emailConfirmedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    deactivatedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    threatSignatures: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.admin.defs#threatSignature'
                        }
                    }
                }
            },
            repoViewNotFound: {
                type: 'object',
                required: [
                    'did'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    }
                }
            },
            recordView: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'value',
                    'blobCids',
                    'indexedAt',
                    'moderation',
                    'repo'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    value: {
                        type: 'unknown'
                    },
                    blobCids: {
                        type: 'array',
                        items: {
                            type: 'string',
                            format: 'cid'
                        }
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    moderation: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#moderation'
                    },
                    repo: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#repoView'
                    }
                }
            },
            recordViewDetail: {
                type: 'object',
                required: [
                    'uri',
                    'cid',
                    'value',
                    'blobs',
                    'indexedAt',
                    'moderation',
                    'repo'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    },
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    value: {
                        type: 'unknown'
                    },
                    blobs: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:tools.ozone.moderation.defs#blobView'
                        }
                    },
                    labels: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:com.atproto.label.defs#label'
                        }
                    },
                    indexedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    moderation: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#moderationDetail'
                    },
                    repo: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#repoView'
                    }
                }
            },
            recordViewNotFound: {
                type: 'object',
                required: [
                    'uri'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        format: 'at-uri'
                    }
                }
            },
            moderation: {
                type: 'object',
                properties: {
                    subjectStatus: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#subjectStatusView'
                    }
                }
            },
            moderationDetail: {
                type: 'object',
                properties: {
                    subjectStatus: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#subjectStatusView'
                    }
                }
            },
            blobView: {
                type: 'object',
                required: [
                    'cid',
                    'mimeType',
                    'size',
                    'createdAt'
                ],
                properties: {
                    cid: {
                        type: 'string',
                        format: 'cid'
                    },
                    mimeType: {
                        type: 'string'
                    },
                    size: {
                        type: 'integer'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    details: {
                        type: 'union',
                        refs: [
                            'lex:tools.ozone.moderation.defs#imageDetails',
                            'lex:tools.ozone.moderation.defs#videoDetails'
                        ]
                    },
                    moderation: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#moderation'
                    }
                }
            },
            imageDetails: {
                type: 'object',
                required: [
                    'width',
                    'height'
                ],
                properties: {
                    width: {
                        type: 'integer'
                    },
                    height: {
                        type: 'integer'
                    }
                }
            },
            videoDetails: {
                type: 'object',
                required: [
                    'width',
                    'height',
                    'length'
                ],
                properties: {
                    width: {
                        type: 'integer'
                    },
                    height: {
                        type: 'integer'
                    },
                    length: {
                        type: 'integer'
                    }
                }
            },
            accountHosting: {
                type: 'object',
                required: [
                    'status'
                ],
                properties: {
                    status: {
                        type: 'string',
                        knownValues: [
                            'takendown',
                            'suspended',
                            'deleted',
                            'deactivated',
                            'unknown'
                        ]
                    },
                    updatedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    deletedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    deactivatedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    reactivatedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            recordHosting: {
                type: 'object',
                required: [
                    'status'
                ],
                properties: {
                    status: {
                        type: 'string',
                        knownValues: [
                            'deleted',
                            'unknown'
                        ]
                    },
                    updatedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    deletedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            },
            reporterStats: {
                type: 'object',
                required: [
                    'did',
                    'accountReportCount',
                    'recordReportCount',
                    'reportedAccountCount',
                    'reportedRecordCount',
                    'takendownAccountCount',
                    'takendownRecordCount',
                    'labeledAccountCount',
                    'labeledRecordCount'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    accountReportCount: {
                        type: 'integer',
                        description: 'The total number of reports made by the user on accounts.'
                    },
                    recordReportCount: {
                        type: 'integer',
                        description: 'The total number of reports made by the user on records.'
                    },
                    reportedAccountCount: {
                        type: 'integer',
                        description: 'The total number of accounts reported by the user.'
                    },
                    reportedRecordCount: {
                        type: 'integer',
                        description: 'The total number of records reported by the user.'
                    },
                    takendownAccountCount: {
                        type: 'integer',
                        description: "The total number of accounts taken down as a result of the user's reports."
                    },
                    takendownRecordCount: {
                        type: 'integer',
                        description: "The total number of records taken down as a result of the user's reports."
                    },
                    labeledAccountCount: {
                        type: 'integer',
                        description: "The total number of accounts labeled as a result of the user's reports."
                    },
                    labeledRecordCount: {
                        type: 'integer',
                        description: "The total number of records labeled as a result of the user's reports."
                    }
                }
            }
        }
    },
    ToolsOzoneModerationEmitEvent: {
        lexicon: 1,
        id: 'tools.ozone.moderation.emitEvent',
        defs: {
            main: {
                type: 'procedure',
                description: 'Take a moderation action on an actor.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'event',
                            'subject',
                            'createdBy'
                        ],
                        properties: {
                            event: {
                                type: 'union',
                                refs: [
                                    'lex:tools.ozone.moderation.defs#modEventTakedown',
                                    'lex:tools.ozone.moderation.defs#modEventAcknowledge',
                                    'lex:tools.ozone.moderation.defs#modEventEscalate',
                                    'lex:tools.ozone.moderation.defs#modEventComment',
                                    'lex:tools.ozone.moderation.defs#modEventLabel',
                                    'lex:tools.ozone.moderation.defs#modEventReport',
                                    'lex:tools.ozone.moderation.defs#modEventMute',
                                    'lex:tools.ozone.moderation.defs#modEventUnmute',
                                    'lex:tools.ozone.moderation.defs#modEventMuteReporter',
                                    'lex:tools.ozone.moderation.defs#modEventUnmuteReporter',
                                    'lex:tools.ozone.moderation.defs#modEventReverseTakedown',
                                    'lex:tools.ozone.moderation.defs#modEventResolveAppeal',
                                    'lex:tools.ozone.moderation.defs#modEventEmail',
                                    'lex:tools.ozone.moderation.defs#modEventDivert',
                                    'lex:tools.ozone.moderation.defs#modEventTag',
                                    'lex:tools.ozone.moderation.defs#accountEvent',
                                    'lex:tools.ozone.moderation.defs#identityEvent',
                                    'lex:tools.ozone.moderation.defs#recordEvent',
                                    'lex:tools.ozone.moderation.defs#modEventPriorityScore'
                                ]
                            },
                            subject: {
                                type: 'union',
                                refs: [
                                    'lex:com.atproto.admin.defs#repoRef',
                                    'lex:com.atproto.repo.strongRef'
                                ]
                            },
                            subjectBlobCids: {
                                type: 'array',
                                items: {
                                    type: 'string',
                                    format: 'cid'
                                }
                            },
                            createdBy: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#modEventView'
                    }
                },
                errors: [
                    {
                        name: 'SubjectHasAction'
                    }
                ]
            }
        }
    },
    ToolsOzoneModerationGetEvent: {
        lexicon: 1,
        id: 'tools.ozone.moderation.getEvent',
        defs: {
            main: {
                type: 'query',
                description: 'Get details about a moderation event.',
                parameters: {
                    type: 'params',
                    required: [
                        'id'
                    ],
                    properties: {
                        id: {
                            type: 'integer'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#modEventViewDetail'
                    }
                }
            }
        }
    },
    ToolsOzoneModerationGetRecord: {
        lexicon: 1,
        id: 'tools.ozone.moderation.getRecord',
        defs: {
            main: {
                type: 'query',
                description: 'Get details about a record.',
                parameters: {
                    type: 'params',
                    required: [
                        'uri'
                    ],
                    properties: {
                        uri: {
                            type: 'string',
                            format: 'at-uri'
                        },
                        cid: {
                            type: 'string',
                            format: 'cid'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#recordViewDetail'
                    }
                },
                errors: [
                    {
                        name: 'RecordNotFound'
                    }
                ]
            }
        }
    },
    ToolsOzoneModerationGetRecords: {
        lexicon: 1,
        id: 'tools.ozone.moderation.getRecords',
        defs: {
            main: {
                type: 'query',
                description: 'Get details about some records.',
                parameters: {
                    type: 'params',
                    required: [
                        'uris'
                    ],
                    properties: {
                        uris: {
                            type: 'array',
                            maxLength: 100,
                            items: {
                                type: 'string',
                                format: 'at-uri'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'records'
                        ],
                        properties: {
                            records: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:tools.ozone.moderation.defs#recordViewDetail',
                                        'lex:tools.ozone.moderation.defs#recordViewNotFound'
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneModerationGetRepo: {
        lexicon: 1,
        id: 'tools.ozone.moderation.getRepo',
        defs: {
            main: {
                type: 'query',
                description: 'Get details about a repository.',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.moderation.defs#repoViewDetail'
                    }
                },
                errors: [
                    {
                        name: 'RepoNotFound'
                    }
                ]
            }
        }
    },
    ToolsOzoneModerationGetReporterStats: {
        lexicon: 1,
        id: 'tools.ozone.moderation.getReporterStats',
        defs: {
            main: {
                type: 'query',
                description: 'Get reporter stats for a list of users.',
                parameters: {
                    type: 'params',
                    required: [
                        'dids'
                    ],
                    properties: {
                        dids: {
                            type: 'array',
                            maxLength: 100,
                            items: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'stats'
                        ],
                        properties: {
                            stats: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.moderation.defs#reporterStats'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneModerationGetRepos: {
        lexicon: 1,
        id: 'tools.ozone.moderation.getRepos',
        defs: {
            main: {
                type: 'query',
                description: 'Get details about some repositories.',
                parameters: {
                    type: 'params',
                    required: [
                        'dids'
                    ],
                    properties: {
                        dids: {
                            type: 'array',
                            maxLength: 100,
                            items: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'repos'
                        ],
                        properties: {
                            repos: {
                                type: 'array',
                                items: {
                                    type: 'union',
                                    refs: [
                                        'lex:tools.ozone.moderation.defs#repoViewDetail',
                                        'lex:tools.ozone.moderation.defs#repoViewNotFound'
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneModerationGetSubjects: {
        lexicon: 1,
        id: 'tools.ozone.moderation.getSubjects',
        defs: {
            main: {
                type: 'query',
                description: 'Get details about subjects.',
                parameters: {
                    type: 'params',
                    required: [
                        'subjects'
                    ],
                    properties: {
                        subjects: {
                            type: 'array',
                            maxLength: 100,
                            minLength: 1,
                            items: {
                                type: 'string'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'subjects'
                        ],
                        properties: {
                            subjects: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.moderation.defs#subjectView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneModerationQueryEvents: {
        lexicon: 1,
        id: 'tools.ozone.moderation.queryEvents',
        defs: {
            main: {
                type: 'query',
                description: 'List moderation events related to a subject.',
                parameters: {
                    type: 'params',
                    properties: {
                        types: {
                            type: 'array',
                            items: {
                                type: 'string'
                            },
                            description: 'The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent<name>) to filter by. If not specified, all events are returned.'
                        },
                        createdBy: {
                            type: 'string',
                            format: 'did'
                        },
                        sortDirection: {
                            type: 'string',
                            default: 'desc',
                            enum: [
                                'asc',
                                'desc'
                            ],
                            description: 'Sort direction for the events. Defaults to descending order of created at timestamp.'
                        },
                        createdAfter: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Retrieve events created after a given timestamp'
                        },
                        createdBefore: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Retrieve events created before a given timestamp'
                        },
                        subject: {
                            type: 'string',
                            format: 'uri'
                        },
                        collections: {
                            type: 'array',
                            maxLength: 20,
                            description: "If specified, only events where the subject belongs to the given collections will be returned. When subjectType is set to 'account', this will be ignored.",
                            items: {
                                type: 'string',
                                format: 'nsid'
                            }
                        },
                        subjectType: {
                            type: 'string',
                            description: "If specified, only events where the subject is of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.",
                            knownValues: [
                                'account',
                                'record'
                            ]
                        },
                        includeAllUserRecords: {
                            type: 'boolean',
                            default: false,
                            description: "If true, events on all record types (posts, lists, profile etc.) or records from given 'collections' param, owned by the did are returned."
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        hasComment: {
                            type: 'boolean',
                            description: 'If true, only events with comments are returned'
                        },
                        comment: {
                            type: 'string',
                            description: 'If specified, only events with comments containing the keyword are returned. Apply || separator to use multiple keywords and match using OR condition.'
                        },
                        addedLabels: {
                            type: 'array',
                            items: {
                                type: 'string'
                            },
                            description: 'If specified, only events where all of these labels were added are returned'
                        },
                        removedLabels: {
                            type: 'array',
                            items: {
                                type: 'string'
                            },
                            description: 'If specified, only events where all of these labels were removed are returned'
                        },
                        addedTags: {
                            type: 'array',
                            items: {
                                type: 'string'
                            },
                            description: 'If specified, only events where all of these tags were added are returned'
                        },
                        removedTags: {
                            type: 'array',
                            items: {
                                type: 'string'
                            },
                            description: 'If specified, only events where all of these tags were removed are returned'
                        },
                        reportTypes: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        policies: {
                            type: 'array',
                            items: {
                                type: 'string',
                                description: 'If specified, only events where the action policies match any of the given policies are returned'
                            }
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'events'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            events: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.moderation.defs#modEventView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneModerationQueryStatuses: {
        lexicon: 1,
        id: 'tools.ozone.moderation.queryStatuses',
        defs: {
            main: {
                type: 'query',
                description: 'View moderation statuses of subjects (record or repo).',
                parameters: {
                    type: 'params',
                    properties: {
                        queueCount: {
                            type: 'integer',
                            description: 'Number of queues being used by moderators. Subjects will be split among all queues.'
                        },
                        queueIndex: {
                            type: 'integer',
                            description: 'Index of the queue to fetch subjects from. Works only when queueCount value is specified.'
                        },
                        queueSeed: {
                            type: 'string',
                            description: 'A seeder to shuffle/balance the queue items.'
                        },
                        includeAllUserRecords: {
                            type: 'boolean',
                            description: "All subjects, or subjects from given 'collections' param, belonging to the account specified in the 'subject' param will be returned."
                        },
                        subject: {
                            type: 'string',
                            format: 'uri',
                            description: 'The subject to get the status for.'
                        },
                        comment: {
                            type: 'string',
                            description: 'Search subjects by keyword from comments'
                        },
                        reportedAfter: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Search subjects reported after a given timestamp'
                        },
                        reportedBefore: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Search subjects reported before a given timestamp'
                        },
                        reviewedAfter: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Search subjects reviewed after a given timestamp'
                        },
                        hostingDeletedAfter: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Search subjects where the associated record/account was deleted after a given timestamp'
                        },
                        hostingDeletedBefore: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Search subjects where the associated record/account was deleted before a given timestamp'
                        },
                        hostingUpdatedAfter: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Search subjects where the associated record/account was updated after a given timestamp'
                        },
                        hostingUpdatedBefore: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Search subjects where the associated record/account was updated before a given timestamp'
                        },
                        hostingStatuses: {
                            type: 'array',
                            items: {
                                type: 'string'
                            },
                            description: 'Search subjects by the status of the associated record/account'
                        },
                        reviewedBefore: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Search subjects reviewed before a given timestamp'
                        },
                        includeMuted: {
                            type: 'boolean',
                            description: "By default, we don't include muted subjects in the results. Set this to true to include them."
                        },
                        onlyMuted: {
                            type: 'boolean',
                            description: 'When set to true, only muted subjects and reporters will be returned.'
                        },
                        reviewState: {
                            type: 'string',
                            description: 'Specify when fetching subjects in a certain state'
                        },
                        ignoreSubjects: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'uri'
                            }
                        },
                        lastReviewedBy: {
                            type: 'string',
                            format: 'did',
                            description: 'Get all subject statuses that were reviewed by a specific moderator'
                        },
                        sortField: {
                            type: 'string',
                            default: 'lastReportedAt',
                            enum: [
                                'lastReviewedAt',
                                'lastReportedAt',
                                'reportedRecordsCount',
                                'takendownRecordsCount',
                                'priorityScore'
                            ]
                        },
                        sortDirection: {
                            type: 'string',
                            default: 'desc',
                            enum: [
                                'asc',
                                'desc'
                            ]
                        },
                        takendown: {
                            type: 'boolean',
                            description: 'Get subjects that were taken down'
                        },
                        appealed: {
                            type: 'boolean',
                            description: 'Get subjects in unresolved appealed status'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        tags: {
                            type: 'array',
                            maxLength: 25,
                            items: {
                                type: 'string',
                                description: 'Items in this array are applied with OR filters. To apply AND filter, put all tags in the same string and separate using && characters'
                            }
                        },
                        excludeTags: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        cursor: {
                            type: 'string'
                        },
                        collections: {
                            type: 'array',
                            maxLength: 20,
                            description: "If specified, subjects belonging to the given collections will be returned. When subjectType is set to 'account', this will be ignored.",
                            items: {
                                type: 'string',
                                format: 'nsid'
                            }
                        },
                        subjectType: {
                            type: 'string',
                            description: "If specified, subjects of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.",
                            knownValues: [
                                'account',
                                'record'
                            ]
                        },
                        minAccountSuspendCount: {
                            type: 'integer',
                            description: 'If specified, only subjects that belong to an account that has at least this many suspensions will be returned.'
                        },
                        minReportedRecordsCount: {
                            type: 'integer',
                            description: 'If specified, only subjects that belong to an account that has at least this many reported records will be returned.'
                        },
                        minTakendownRecordsCount: {
                            type: 'integer',
                            description: 'If specified, only subjects that belong to an account that has at least this many taken down records will be returned.'
                        },
                        minPriorityScore: {
                            minimum: 0,
                            maximum: 100,
                            type: 'integer',
                            description: 'If specified, only subjects that have priority score value above the given value will be returned.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'subjectStatuses'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            subjectStatuses: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.moderation.defs#subjectStatusView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneModerationSearchRepos: {
        lexicon: 1,
        id: 'tools.ozone.moderation.searchRepos',
        defs: {
            main: {
                type: 'query',
                description: 'Find repositories based on a search term.',
                parameters: {
                    type: 'params',
                    properties: {
                        term: {
                            type: 'string',
                            description: "DEPRECATED: use 'q' instead"
                        },
                        q: {
                            type: 'string'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'repos'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            repos: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.moderation.defs#repoView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneServerGetConfig: {
        lexicon: 1,
        id: 'tools.ozone.server.getConfig',
        defs: {
            main: {
                type: 'query',
                description: "Get details about ozone's server configuration.",
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {
                            appview: {
                                type: 'ref',
                                ref: 'lex:tools.ozone.server.getConfig#serviceConfig'
                            },
                            pds: {
                                type: 'ref',
                                ref: 'lex:tools.ozone.server.getConfig#serviceConfig'
                            },
                            blobDivert: {
                                type: 'ref',
                                ref: 'lex:tools.ozone.server.getConfig#serviceConfig'
                            },
                            chat: {
                                type: 'ref',
                                ref: 'lex:tools.ozone.server.getConfig#serviceConfig'
                            },
                            viewer: {
                                type: 'ref',
                                ref: 'lex:tools.ozone.server.getConfig#viewerConfig'
                            },
                            verifierDid: {
                                type: 'string',
                                format: 'did',
                                description: 'The did of the verifier used for verification.'
                            }
                        }
                    }
                }
            },
            serviceConfig: {
                type: 'object',
                properties: {
                    url: {
                        type: 'string',
                        format: 'uri'
                    }
                }
            },
            viewerConfig: {
                type: 'object',
                properties: {
                    role: {
                        type: 'string',
                        knownValues: [
                            'tools.ozone.team.defs#roleAdmin',
                            'tools.ozone.team.defs#roleModerator',
                            'tools.ozone.team.defs#roleTriage',
                            'tools.ozone.team.defs#roleVerifier'
                        ]
                    }
                }
            }
        }
    },
    ToolsOzoneSetAddValues: {
        lexicon: 1,
        id: 'tools.ozone.set.addValues',
        defs: {
            main: {
                type: 'procedure',
                description: 'Add values to a specific set. Attempting to add values to a set that does not exist will result in an error.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'name',
                            'values'
                        ],
                        properties: {
                            name: {
                                type: 'string',
                                description: 'Name of the set to add values to'
                            },
                            values: {
                                type: 'array',
                                minLength: 1,
                                maxLength: 1000,
                                items: {
                                    type: 'string'
                                },
                                description: 'Array of string values to add to the set'
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneSetDefs: {
        lexicon: 1,
        id: 'tools.ozone.set.defs',
        defs: {
            set: {
                type: 'object',
                required: [
                    'name'
                ],
                properties: {
                    name: {
                        type: 'string',
                        minLength: 3,
                        maxLength: 128
                    },
                    description: {
                        type: 'string',
                        maxGraphemes: 1024,
                        maxLength: 10240
                    }
                }
            },
            setView: {
                type: 'object',
                required: [
                    'name',
                    'setSize',
                    'createdAt',
                    'updatedAt'
                ],
                properties: {
                    name: {
                        type: 'string',
                        minLength: 3,
                        maxLength: 128
                    },
                    description: {
                        type: 'string',
                        maxGraphemes: 1024,
                        maxLength: 10240
                    },
                    setSize: {
                        type: 'integer'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    updatedAt: {
                        type: 'string',
                        format: 'datetime'
                    }
                }
            }
        }
    },
    ToolsOzoneSetDeleteSet: {
        lexicon: 1,
        id: 'tools.ozone.set.deleteSet',
        defs: {
            main: {
                type: 'procedure',
                description: 'Delete an entire set. Attempting to delete a set that does not exist will result in an error.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'name'
                        ],
                        properties: {
                            name: {
                                type: 'string',
                                description: 'Name of the set to delete'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {}
                    }
                },
                errors: [
                    {
                        name: 'SetNotFound',
                        description: 'set with the given name does not exist'
                    }
                ]
            }
        }
    },
    ToolsOzoneSetDeleteValues: {
        lexicon: 1,
        id: 'tools.ozone.set.deleteValues',
        defs: {
            main: {
                type: 'procedure',
                description: 'Delete values from a specific set. Attempting to delete values that are not in the set will not result in an error',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'name',
                            'values'
                        ],
                        properties: {
                            name: {
                                type: 'string',
                                description: 'Name of the set to delete values from'
                            },
                            values: {
                                type: 'array',
                                minLength: 1,
                                items: {
                                    type: 'string'
                                },
                                description: 'Array of string values to delete from the set'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'SetNotFound',
                        description: 'set with the given name does not exist'
                    }
                ]
            }
        }
    },
    ToolsOzoneSetGetValues: {
        lexicon: 1,
        id: 'tools.ozone.set.getValues',
        defs: {
            main: {
                type: 'query',
                description: 'Get a specific set and its values',
                parameters: {
                    type: 'params',
                    required: [
                        'name'
                    ],
                    properties: {
                        name: {
                            type: 'string'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 1000,
                            default: 100
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'set',
                            'values'
                        ],
                        properties: {
                            set: {
                                type: 'ref',
                                ref: 'lex:tools.ozone.set.defs#setView'
                            },
                            values: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                }
                            },
                            cursor: {
                                type: 'string'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'SetNotFound',
                        description: 'set with the given name does not exist'
                    }
                ]
            }
        }
    },
    ToolsOzoneSetQuerySets: {
        lexicon: 1,
        id: 'tools.ozone.set.querySets',
        defs: {
            main: {
                type: 'query',
                description: 'Query available sets',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        },
                        namePrefix: {
                            type: 'string'
                        },
                        sortBy: {
                            type: 'string',
                            enum: [
                                'name',
                                'createdAt',
                                'updatedAt'
                            ],
                            default: 'name'
                        },
                        sortDirection: {
                            type: 'string',
                            default: 'asc',
                            enum: [
                                'asc',
                                'desc'
                            ],
                            description: 'Defaults to ascending order of name field.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'sets'
                        ],
                        properties: {
                            sets: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.set.defs#setView'
                                }
                            },
                            cursor: {
                                type: 'string'
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneSetUpsertSet: {
        lexicon: 1,
        id: 'tools.ozone.set.upsertSet',
        defs: {
            main: {
                type: 'procedure',
                description: 'Create or update set metadata',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.set.defs#set'
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.set.defs#setView'
                    }
                }
            }
        }
    },
    ToolsOzoneSettingDefs: {
        lexicon: 1,
        id: 'tools.ozone.setting.defs',
        defs: {
            option: {
                type: 'object',
                required: [
                    'key',
                    'value',
                    'did',
                    'scope',
                    'createdBy',
                    'lastUpdatedBy'
                ],
                properties: {
                    key: {
                        type: 'string',
                        format: 'nsid'
                    },
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    value: {
                        type: 'unknown'
                    },
                    description: {
                        type: 'string',
                        maxGraphemes: 1024,
                        maxLength: 10240
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    updatedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    managerRole: {
                        type: 'string',
                        knownValues: [
                            'tools.ozone.team.defs#roleModerator',
                            'tools.ozone.team.defs#roleTriage',
                            'tools.ozone.team.defs#roleAdmin',
                            'tools.ozone.team.defs#roleVerifier'
                        ]
                    },
                    scope: {
                        type: 'string',
                        knownValues: [
                            'instance',
                            'personal'
                        ]
                    },
                    createdBy: {
                        type: 'string',
                        format: 'did'
                    },
                    lastUpdatedBy: {
                        type: 'string',
                        format: 'did'
                    }
                }
            }
        }
    },
    ToolsOzoneSettingListOptions: {
        lexicon: 1,
        id: 'tools.ozone.setting.listOptions',
        defs: {
            main: {
                type: 'query',
                description: 'List settings with optional filtering',
                parameters: {
                    type: 'params',
                    properties: {
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        },
                        scope: {
                            type: 'string',
                            knownValues: [
                                'instance',
                                'personal'
                            ],
                            default: 'instance'
                        },
                        prefix: {
                            type: 'string',
                            description: 'Filter keys by prefix'
                        },
                        keys: {
                            type: 'array',
                            maxLength: 100,
                            items: {
                                type: 'string',
                                format: 'nsid'
                            },
                            description: 'Filter for only the specified keys. Ignored if prefix is provided'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'options'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            options: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.setting.defs#option'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneSettingRemoveOptions: {
        lexicon: 1,
        id: 'tools.ozone.setting.removeOptions',
        defs: {
            main: {
                type: 'procedure',
                description: 'Delete settings by key',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'keys',
                            'scope'
                        ],
                        properties: {
                            keys: {
                                type: 'array',
                                minLength: 1,
                                maxLength: 200,
                                items: {
                                    type: 'string',
                                    format: 'nsid'
                                }
                            },
                            scope: {
                                type: 'string',
                                knownValues: [
                                    'instance',
                                    'personal'
                                ]
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        properties: {}
                    }
                }
            }
        }
    },
    ToolsOzoneSettingUpsertOption: {
        lexicon: 1,
        id: 'tools.ozone.setting.upsertOption',
        defs: {
            main: {
                type: 'procedure',
                description: 'Create or update setting option',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'key',
                            'scope',
                            'value'
                        ],
                        properties: {
                            key: {
                                type: 'string',
                                format: 'nsid'
                            },
                            scope: {
                                type: 'string',
                                knownValues: [
                                    'instance',
                                    'personal'
                                ]
                            },
                            value: {
                                type: 'unknown'
                            },
                            description: {
                                type: 'string',
                                maxLength: 2000
                            },
                            managerRole: {
                                type: 'string',
                                knownValues: [
                                    'tools.ozone.team.defs#roleModerator',
                                    'tools.ozone.team.defs#roleTriage',
                                    'tools.ozone.team.defs#roleVerifier',
                                    'tools.ozone.team.defs#roleAdmin'
                                ]
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'option'
                        ],
                        properties: {
                            option: {
                                type: 'ref',
                                ref: 'lex:tools.ozone.setting.defs#option'
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneSignatureDefs: {
        lexicon: 1,
        id: 'tools.ozone.signature.defs',
        defs: {
            sigDetail: {
                type: 'object',
                required: [
                    'property',
                    'value'
                ],
                properties: {
                    property: {
                        type: 'string'
                    },
                    value: {
                        type: 'string'
                    }
                }
            }
        }
    },
    ToolsOzoneSignatureFindCorrelation: {
        lexicon: 1,
        id: 'tools.ozone.signature.findCorrelation',
        defs: {
            main: {
                type: 'query',
                description: 'Find all correlated threat signatures between 2 or more accounts.',
                parameters: {
                    type: 'params',
                    required: [
                        'dids'
                    ],
                    properties: {
                        dids: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'details'
                        ],
                        properties: {
                            details: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.signature.defs#sigDetail'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneSignatureFindRelatedAccounts: {
        lexicon: 1,
        id: 'tools.ozone.signature.findRelatedAccounts',
        defs: {
            main: {
                type: 'query',
                description: 'Get accounts that share some matching threat signatures with the root account.',
                parameters: {
                    type: 'params',
                    required: [
                        'did'
                    ],
                    properties: {
                        did: {
                            type: 'string',
                            format: 'did'
                        },
                        cursor: {
                            type: 'string'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'accounts'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            accounts: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.signature.findRelatedAccounts#relatedAccount'
                                }
                            }
                        }
                    }
                }
            },
            relatedAccount: {
                type: 'object',
                required: [
                    'account'
                ],
                properties: {
                    account: {
                        type: 'ref',
                        ref: 'lex:com.atproto.admin.defs#accountView'
                    },
                    similarities: {
                        type: 'array',
                        items: {
                            type: 'ref',
                            ref: 'lex:tools.ozone.signature.defs#sigDetail'
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneSignatureSearchAccounts: {
        lexicon: 1,
        id: 'tools.ozone.signature.searchAccounts',
        defs: {
            main: {
                type: 'query',
                description: 'Search for accounts that match one or more threat signature values.',
                parameters: {
                    type: 'params',
                    required: [
                        'values'
                    ],
                    properties: {
                        values: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        cursor: {
                            type: 'string'
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'accounts'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            accounts: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:com.atproto.admin.defs#accountView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneTeamAddMember: {
        lexicon: 1,
        id: 'tools.ozone.team.addMember',
        defs: {
            main: {
                type: 'procedure',
                description: 'Add a member to the ozone team. Requires admin role.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did',
                            'role'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            role: {
                                type: 'string',
                                knownValues: [
                                    'tools.ozone.team.defs#roleAdmin',
                                    'tools.ozone.team.defs#roleModerator',
                                    'tools.ozone.team.defs#roleVerifier',
                                    'tools.ozone.team.defs#roleTriage'
                                ]
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.team.defs#member'
                    }
                },
                errors: [
                    {
                        name: 'MemberAlreadyExists',
                        description: 'Member already exists in the team.'
                    }
                ]
            }
        }
    },
    ToolsOzoneTeamDefs: {
        lexicon: 1,
        id: 'tools.ozone.team.defs',
        defs: {
            member: {
                type: 'object',
                required: [
                    'did',
                    'role'
                ],
                properties: {
                    did: {
                        type: 'string',
                        format: 'did'
                    },
                    disabled: {
                        type: 'boolean'
                    },
                    profile: {
                        type: 'ref',
                        ref: 'lex:app.bsky.actor.defs#profileViewDetailed'
                    },
                    createdAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    updatedAt: {
                        type: 'string',
                        format: 'datetime'
                    },
                    lastUpdatedBy: {
                        type: 'string'
                    },
                    role: {
                        type: 'string',
                        knownValues: [
                            'lex:tools.ozone.team.defs#roleAdmin',
                            'lex:tools.ozone.team.defs#roleModerator',
                            'lex:tools.ozone.team.defs#roleTriage',
                            'lex:tools.ozone.team.defs#roleVerifier'
                        ]
                    }
                }
            },
            roleAdmin: {
                type: 'token',
                description: 'Admin role. Highest level of access, can perform all actions.'
            },
            roleModerator: {
                type: 'token',
                description: 'Moderator role. Can perform most actions.'
            },
            roleTriage: {
                type: 'token',
                description: 'Triage role. Mostly intended for monitoring and escalating issues.'
            },
            roleVerifier: {
                type: 'token',
                description: 'Verifier role. Only allowed to issue verifications.'
            }
        }
    },
    ToolsOzoneTeamDeleteMember: {
        lexicon: 1,
        id: 'tools.ozone.team.deleteMember',
        defs: {
            main: {
                type: 'procedure',
                description: 'Delete a member from ozone team. Requires admin role.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            }
                        }
                    }
                },
                errors: [
                    {
                        name: 'MemberNotFound',
                        description: 'The member being deleted does not exist'
                    },
                    {
                        name: 'CannotDeleteSelf',
                        description: 'You can not delete yourself from the team'
                    }
                ]
            }
        }
    },
    ToolsOzoneTeamListMembers: {
        lexicon: 1,
        id: 'tools.ozone.team.listMembers',
        defs: {
            main: {
                type: 'query',
                description: 'List all members with access to the ozone service.',
                parameters: {
                    type: 'params',
                    properties: {
                        q: {
                            type: 'string'
                        },
                        disabled: {
                            type: 'boolean'
                        },
                        roles: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        limit: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        cursor: {
                            type: 'string'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'members'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            members: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.team.defs#member'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneTeamUpdateMember: {
        lexicon: 1,
        id: 'tools.ozone.team.updateMember',
        defs: {
            main: {
                type: 'procedure',
                description: 'Update a member in the ozone service. Requires admin role.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'did'
                        ],
                        properties: {
                            did: {
                                type: 'string',
                                format: 'did'
                            },
                            disabled: {
                                type: 'boolean'
                            },
                            role: {
                                type: 'string',
                                knownValues: [
                                    'tools.ozone.team.defs#roleAdmin',
                                    'tools.ozone.team.defs#roleModerator',
                                    'tools.ozone.team.defs#roleVerifier',
                                    'tools.ozone.team.defs#roleTriage'
                                ]
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'ref',
                        ref: 'lex:tools.ozone.team.defs#member'
                    }
                },
                errors: [
                    {
                        name: 'MemberNotFound',
                        description: 'The member being updated does not exist in the team'
                    }
                ]
            }
        }
    },
    ToolsOzoneVerificationDefs: {
        lexicon: 1,
        id: 'tools.ozone.verification.defs',
        defs: {
            verificationView: {
                type: 'object',
                description: 'Verification data for the associated subject.',
                required: [
                    'issuer',
                    'uri',
                    'subject',
                    'handle',
                    'displayName',
                    'createdAt'
                ],
                properties: {
                    issuer: {
                        type: 'string',
                        description: 'The user who issued this verification.',
                        format: 'did'
                    },
                    uri: {
                        type: 'string',
                        description: 'The AT-URI of the verification record.',
                        format: 'at-uri'
                    },
                    subject: {
                        type: 'string',
                        format: 'did',
                        description: 'The subject of the verification.'
                    },
                    handle: {
                        type: 'string',
                        description: 'Handle of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current handle matches the one at the time of verifying.',
                        format: 'handle'
                    },
                    displayName: {
                        type: 'string',
                        description: 'Display name of the subject the verification applies to at the moment of verifying, which might not be the same at the time of viewing. The verification is only valid if the current displayName matches the one at the time of verifying.'
                    },
                    createdAt: {
                        type: 'string',
                        description: 'Timestamp when the verification was created.',
                        format: 'datetime'
                    },
                    revokeReason: {
                        type: 'string',
                        description: 'Describes the reason for revocation, also indicating that the verification is no longer valid.'
                    },
                    revokedAt: {
                        type: 'string',
                        description: 'Timestamp when the verification was revoked.',
                        format: 'datetime'
                    },
                    revokedBy: {
                        type: 'string',
                        description: 'The user who revoked this verification.',
                        format: 'did'
                    },
                    subjectProfile: {
                        type: 'union',
                        refs: []
                    },
                    issuerProfile: {
                        type: 'union',
                        refs: []
                    },
                    subjectRepo: {
                        type: 'union',
                        refs: [
                            'lex:tools.ozone.moderation.defs#repoViewDetail',
                            'lex:tools.ozone.moderation.defs#repoViewNotFound'
                        ]
                    },
                    issuerRepo: {
                        type: 'union',
                        refs: [
                            'lex:tools.ozone.moderation.defs#repoViewDetail',
                            'lex:tools.ozone.moderation.defs#repoViewNotFound'
                        ]
                    }
                }
            }
        }
    },
    ToolsOzoneVerificationGrantVerifications: {
        lexicon: 1,
        id: 'tools.ozone.verification.grantVerifications',
        defs: {
            main: {
                type: 'procedure',
                description: 'Grant verifications to multiple subjects. Allows batch processing of up to 100 verifications at once.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'verifications'
                        ],
                        properties: {
                            verifications: {
                                type: 'array',
                                description: 'Array of verification requests to process',
                                maxLength: 100,
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.verification.grantVerifications#verificationInput'
                                }
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'verifications',
                            'failedVerifications'
                        ],
                        properties: {
                            verifications: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.verification.defs#verificationView'
                                }
                            },
                            failedVerifications: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.verification.grantVerifications#grantError'
                                }
                            }
                        }
                    }
                }
            },
            verificationInput: {
                type: 'object',
                required: [
                    'subject',
                    'handle',
                    'displayName'
                ],
                properties: {
                    subject: {
                        type: 'string',
                        description: 'The did of the subject being verified',
                        format: 'did'
                    },
                    handle: {
                        type: 'string',
                        description: 'Handle of the subject the verification applies to at the moment of verifying.',
                        format: 'handle'
                    },
                    displayName: {
                        type: 'string',
                        description: 'Display name of the subject the verification applies to at the moment of verifying.'
                    },
                    createdAt: {
                        type: 'string',
                        description: 'Timestamp for verification record. Defaults to current time when not specified.'
                    }
                }
            },
            grantError: {
                type: 'object',
                description: 'Error object for failed verifications.',
                required: [
                    'error',
                    'subject'
                ],
                properties: {
                    error: {
                        type: 'string',
                        description: 'Error message describing the reason for failure.'
                    },
                    subject: {
                        type: 'string',
                        description: 'The did of the subject being verified',
                        format: 'did'
                    }
                }
            }
        }
    },
    ToolsOzoneVerificationListVerifications: {
        lexicon: 1,
        id: 'tools.ozone.verification.listVerifications',
        defs: {
            main: {
                type: 'query',
                description: 'List verifications',
                parameters: {
                    type: 'params',
                    properties: {
                        cursor: {
                            type: 'string',
                            description: 'Pagination cursor'
                        },
                        limit: {
                            type: 'integer',
                            description: 'Maximum number of results to return',
                            minimum: 1,
                            maximum: 100,
                            default: 50
                        },
                        createdAfter: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Filter to verifications created after this timestamp'
                        },
                        createdBefore: {
                            type: 'string',
                            format: 'datetime',
                            description: 'Filter to verifications created before this timestamp'
                        },
                        issuers: {
                            type: 'array',
                            maxLength: 100,
                            description: 'Filter to verifications from specific issuers',
                            items: {
                                type: 'string',
                                format: 'did'
                            }
                        },
                        subjects: {
                            type: 'array',
                            description: 'Filter to specific verified DIDs',
                            maxLength: 100,
                            items: {
                                type: 'string',
                                format: 'did'
                            }
                        },
                        sortDirection: {
                            type: 'string',
                            description: 'Sort direction for creation date',
                            enum: [
                                'asc',
                                'desc'
                            ],
                            default: 'desc'
                        },
                        isRevoked: {
                            type: 'boolean',
                            description: 'Filter to verifications that are revoked or not. By default, includes both.'
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'verifications'
                        ],
                        properties: {
                            cursor: {
                                type: 'string'
                            },
                            verifications: {
                                type: 'array',
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.verification.defs#verificationView'
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    ToolsOzoneVerificationRevokeVerifications: {
        lexicon: 1,
        id: 'tools.ozone.verification.revokeVerifications',
        defs: {
            main: {
                type: 'procedure',
                description: 'Revoke previously granted verifications in batches of up to 100.',
                input: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'uris'
                        ],
                        properties: {
                            uris: {
                                type: 'array',
                                description: 'Array of verification record uris to revoke',
                                maxLength: 100,
                                items: {
                                    type: 'string',
                                    description: 'The AT-URI of the verification record to revoke.',
                                    format: 'at-uri'
                                }
                            },
                            revokeReason: {
                                type: 'string',
                                description: 'Reason for revoking the verification. This is optional and can be omitted if not needed.',
                                maxLength: 1000
                            }
                        }
                    }
                },
                output: {
                    encoding: 'application/json',
                    schema: {
                        type: 'object',
                        required: [
                            'revokedVerifications',
                            'failedRevocations'
                        ],
                        properties: {
                            revokedVerifications: {
                                type: 'array',
                                description: 'List of verification uris successfully revoked',
                                items: {
                                    type: 'string',
                                    format: 'at-uri'
                                }
                            },
                            failedRevocations: {
                                type: 'array',
                                description: "List of verification uris that couldn't be revoked, including failure reasons",
                                items: {
                                    type: 'ref',
                                    ref: 'lex:tools.ozone.verification.revokeVerifications#revokeError'
                                }
                            }
                        }
                    }
                }
            },
            revokeError: {
                type: 'object',
                description: 'Error object for failed revocations',
                required: [
                    'uri',
                    'error'
                ],
                properties: {
                    uri: {
                        type: 'string',
                        description: 'The AT-URI of the verification record that failed to revoke.',
                        format: 'at-uri'
                    },
                    error: {
                        type: 'string',
                        description: 'Description of the error that occurred during revocation.'
                    }
                }
            }
        }
    }
};
exports.schemas = Object.values(exports.schemaDict);
exports.lexicons = new lexicon_1.Lexicons(exports.schemas);
function validate(v, id, hash, requiredType) {
    return (requiredType ? util_js_1.is$typed : util_js_1.maybe$typed)(v, id, hash) ? exports.lexicons.validate(`${id}#${hash}`, v) : {
        success: false,
        error: new lexicon_1.ValidationError(`Must be an object with "${hash === 'main' ? id : `${id}#${hash}`}" $type property`)
    };
}
exports.ids = {
    ComAtprotoAdminDefs: 'com.atproto.admin.defs',
    ComAtprotoAdminDeleteAccount: 'com.atproto.admin.deleteAccount',
    ComAtprotoAdminDisableAccountInvites: 'com.atproto.admin.disableAccountInvites',
    ComAtprotoAdminDisableInviteCodes: 'com.atproto.admin.disableInviteCodes',
    ComAtprotoAdminEnableAccountInvites: 'com.atproto.admin.enableAccountInvites',
    ComAtprotoAdminGetAccountInfo: 'com.atproto.admin.getAccountInfo',
    ComAtprotoAdminGetAccountInfos: 'com.atproto.admin.getAccountInfos',
    ComAtprotoAdminGetInviteCodes: 'com.atproto.admin.getInviteCodes',
    ComAtprotoAdminGetSubjectStatus: 'com.atproto.admin.getSubjectStatus',
    ComAtprotoAdminSearchAccounts: 'com.atproto.admin.searchAccounts',
    ComAtprotoAdminSendEmail: 'com.atproto.admin.sendEmail',
    ComAtprotoAdminUpdateAccountEmail: 'com.atproto.admin.updateAccountEmail',
    ComAtprotoAdminUpdateAccountHandle: 'com.atproto.admin.updateAccountHandle',
    ComAtprotoAdminUpdateAccountPassword: 'com.atproto.admin.updateAccountPassword',
    ComAtprotoAdminUpdateAccountSigningKey: 'com.atproto.admin.updateAccountSigningKey',
    ComAtprotoAdminUpdateSubjectStatus: 'com.atproto.admin.updateSubjectStatus',
    ComAtprotoIdentityDefs: 'com.atproto.identity.defs',
    ComAtprotoIdentityGetRecommendedDidCredentials: 'com.atproto.identity.getRecommendedDidCredentials',
    ComAtprotoIdentityRefreshIdentity: 'com.atproto.identity.refreshIdentity',
    ComAtprotoIdentityRequestPlcOperationSignature: 'com.atproto.identity.requestPlcOperationSignature',
    ComAtprotoIdentityResolveDid: 'com.atproto.identity.resolveDid',
    ComAtprotoIdentityResolveHandle: 'com.atproto.identity.resolveHandle',
    ComAtprotoIdentityResolveIdentity: 'com.atproto.identity.resolveIdentity',
    ComAtprotoIdentitySignPlcOperation: 'com.atproto.identity.signPlcOperation',
    ComAtprotoIdentitySubmitPlcOperation: 'com.atproto.identity.submitPlcOperation',
    ComAtprotoIdentityUpdateHandle: 'com.atproto.identity.updateHandle',
    ComAtprotoLabelDefs: 'com.atproto.label.defs',
    ComAtprotoLabelQueryLabels: 'com.atproto.label.queryLabels',
    ComAtprotoLabelSubscribeLabels: 'com.atproto.label.subscribeLabels',
    ComAtprotoLexiconSchema: 'com.atproto.lexicon.schema',
    ComAtprotoModerationCreateReport: 'com.atproto.moderation.createReport',
    ComAtprotoModerationDefs: 'com.atproto.moderation.defs',
    ComAtprotoRepoApplyWrites: 'com.atproto.repo.applyWrites',
    ComAtprotoRepoCreateRecord: 'com.atproto.repo.createRecord',
    ComAtprotoRepoDefs: 'com.atproto.repo.defs',
    ComAtprotoRepoDeleteRecord: 'com.atproto.repo.deleteRecord',
    ComAtprotoRepoDescribeRepo: 'com.atproto.repo.describeRepo',
    ComAtprotoRepoGetRecord: 'com.atproto.repo.getRecord',
    ComAtprotoRepoImportRepo: 'com.atproto.repo.importRepo',
    ComAtprotoRepoListMissingBlobs: 'com.atproto.repo.listMissingBlobs',
    ComAtprotoRepoListRecords: 'com.atproto.repo.listRecords',
    ComAtprotoRepoPutRecord: 'com.atproto.repo.putRecord',
    ComAtprotoRepoStrongRef: 'com.atproto.repo.strongRef',
    ComAtprotoRepoUploadBlob: 'com.atproto.repo.uploadBlob',
    ComAtprotoServerActivateAccount: 'com.atproto.server.activateAccount',
    ComAtprotoServerCheckAccountStatus: 'com.atproto.server.checkAccountStatus',
    ComAtprotoServerConfirmEmail: 'com.atproto.server.confirmEmail',
    ComAtprotoServerCreateAccount: 'com.atproto.server.createAccount',
    ComAtprotoServerCreateAppPassword: 'com.atproto.server.createAppPassword',
    ComAtprotoServerCreateInviteCode: 'com.atproto.server.createInviteCode',
    ComAtprotoServerCreateInviteCodes: 'com.atproto.server.createInviteCodes',
    ComAtprotoServerCreateSession: 'com.atproto.server.createSession',
    ComAtprotoServerDeactivateAccount: 'com.atproto.server.deactivateAccount',
    ComAtprotoServerDefs: 'com.atproto.server.defs',
    ComAtprotoServerDeleteAccount: 'com.atproto.server.deleteAccount',
    ComAtprotoServerDeleteSession: 'com.atproto.server.deleteSession',
    ComAtprotoServerDescribeServer: 'com.atproto.server.describeServer',
    ComAtprotoServerGetAccountInviteCodes: 'com.atproto.server.getAccountInviteCodes',
    ComAtprotoServerGetServiceAuth: 'com.atproto.server.getServiceAuth',
    ComAtprotoServerGetSession: 'com.atproto.server.getSession',
    ComAtprotoServerListAppPasswords: 'com.atproto.server.listAppPasswords',
    ComAtprotoServerRefreshSession: 'com.atproto.server.refreshSession',
    ComAtprotoServerRequestAccountDelete: 'com.atproto.server.requestAccountDelete',
    ComAtprotoServerRequestEmailConfirmation: 'com.atproto.server.requestEmailConfirmation',
    ComAtprotoServerRequestEmailUpdate: 'com.atproto.server.requestEmailUpdate',
    ComAtprotoServerRequestPasswordReset: 'com.atproto.server.requestPasswordReset',
    ComAtprotoServerReserveSigningKey: 'com.atproto.server.reserveSigningKey',
    ComAtprotoServerResetPassword: 'com.atproto.server.resetPassword',
    ComAtprotoServerRevokeAppPassword: 'com.atproto.server.revokeAppPassword',
    ComAtprotoServerUpdateEmail: 'com.atproto.server.updateEmail',
    ComAtprotoSyncDefs: 'com.atproto.sync.defs',
    ComAtprotoSyncGetBlob: 'com.atproto.sync.getBlob',
    ComAtprotoSyncGetBlocks: 'com.atproto.sync.getBlocks',
    ComAtprotoSyncGetCheckout: 'com.atproto.sync.getCheckout',
    ComAtprotoSyncGetHead: 'com.atproto.sync.getHead',
    ComAtprotoSyncGetHostStatus: 'com.atproto.sync.getHostStatus',
    ComAtprotoSyncGetLatestCommit: 'com.atproto.sync.getLatestCommit',
    ComAtprotoSyncGetRecord: 'com.atproto.sync.getRecord',
    ComAtprotoSyncGetRepo: 'com.atproto.sync.getRepo',
    ComAtprotoSyncGetRepoStatus: 'com.atproto.sync.getRepoStatus',
    ComAtprotoSyncListBlobs: 'com.atproto.sync.listBlobs',
    ComAtprotoSyncListHosts: 'com.atproto.sync.listHosts',
    ComAtprotoSyncListRepos: 'com.atproto.sync.listRepos',
    ComAtprotoSyncListReposByCollection: 'com.atproto.sync.listReposByCollection',
    ComAtprotoSyncNotifyOfUpdate: 'com.atproto.sync.notifyOfUpdate',
    ComAtprotoSyncRequestCrawl: 'com.atproto.sync.requestCrawl',
    ComAtprotoSyncSubscribeRepos: 'com.atproto.sync.subscribeRepos',
    ComAtprotoTempAddReservedHandle: 'com.atproto.temp.addReservedHandle',
    ComAtprotoTempCheckSignupQueue: 'com.atproto.temp.checkSignupQueue',
    ComAtprotoTempFetchLabels: 'com.atproto.temp.fetchLabels',
    ComAtprotoTempRequestPhoneVerification: 'com.atproto.temp.requestPhoneVerification',
    AppBskyActorDefs: 'app.bsky.actor.defs',
    AppBskyActorGetPreferences: 'app.bsky.actor.getPreferences',
    AppBskyActorGetProfile: 'app.bsky.actor.getProfile',
    AppBskyActorGetProfiles: 'app.bsky.actor.getProfiles',
    AppBskyActorGetSuggestions: 'app.bsky.actor.getSuggestions',
    AppBskyActorProfile: 'app.bsky.actor.profile',
    AppBskyActorPutPreferences: 'app.bsky.actor.putPreferences',
    AppBskyActorSearchActors: 'app.bsky.actor.searchActors',
    AppBskyActorSearchActorsTypeahead: 'app.bsky.actor.searchActorsTypeahead',
    AppBskyActorStatus: 'app.bsky.actor.status',
    AppBskyEmbedDefs: 'app.bsky.embed.defs',
    AppBskyEmbedExternal: 'app.bsky.embed.external',
    AppBskyEmbedImages: 'app.bsky.embed.images',
    AppBskyEmbedRecord: 'app.bsky.embed.record',
    AppBskyEmbedRecordWithMedia: 'app.bsky.embed.recordWithMedia',
    AppBskyEmbedVideo: 'app.bsky.embed.video',
    AppBskyFeedDefs: 'app.bsky.feed.defs',
    AppBskyFeedDescribeFeedGenerator: 'app.bsky.feed.describeFeedGenerator',
    AppBskyFeedGenerator: 'app.bsky.feed.generator',
    AppBskyFeedGetActorFeeds: 'app.bsky.feed.getActorFeeds',
    AppBskyFeedGetActorLikes: 'app.bsky.feed.getActorLikes',
    AppBskyFeedGetAuthorFeed: 'app.bsky.feed.getAuthorFeed',
    AppBskyFeedGetFeed: 'app.bsky.feed.getFeed',
    AppBskyFeedGetFeedGenerator: 'app.bsky.feed.getFeedGenerator',
    AppBskyFeedGetFeedGenerators: 'app.bsky.feed.getFeedGenerators',
    AppBskyFeedGetFeedSkeleton: 'app.bsky.feed.getFeedSkeleton',
    AppBskyFeedGetLikes: 'app.bsky.feed.getLikes',
    AppBskyFeedGetListFeed: 'app.bsky.feed.getListFeed',
    AppBskyFeedGetPosts: 'app.bsky.feed.getPosts',
    AppBskyFeedGetPostThread: 'app.bsky.feed.getPostThread',
    AppBskyFeedGetQuotes: 'app.bsky.feed.getQuotes',
    AppBskyFeedGetRepostedBy: 'app.bsky.feed.getRepostedBy',
    AppBskyFeedGetSuggestedFeeds: 'app.bsky.feed.getSuggestedFeeds',
    AppBskyFeedGetTimeline: 'app.bsky.feed.getTimeline',
    AppBskyFeedLike: 'app.bsky.feed.like',
    AppBskyFeedPost: 'app.bsky.feed.post',
    AppBskyFeedPostgate: 'app.bsky.feed.postgate',
    AppBskyFeedRepost: 'app.bsky.feed.repost',
    AppBskyFeedSearchPosts: 'app.bsky.feed.searchPosts',
    AppBskyFeedSendInteractions: 'app.bsky.feed.sendInteractions',
    AppBskyFeedThreadgate: 'app.bsky.feed.threadgate',
    AppBskyGraphBlock: 'app.bsky.graph.block',
    AppBskyGraphDefs: 'app.bsky.graph.defs',
    AppBskyGraphFollow: 'app.bsky.graph.follow',
    AppBskyGraphGetActorStarterPacks: 'app.bsky.graph.getActorStarterPacks',
    AppBskyGraphGetBlocks: 'app.bsky.graph.getBlocks',
    AppBskyGraphGetFollowers: 'app.bsky.graph.getFollowers',
    AppBskyGraphGetFollows: 'app.bsky.graph.getFollows',
    AppBskyGraphGetKnownFollowers: 'app.bsky.graph.getKnownFollowers',
    AppBskyGraphGetList: 'app.bsky.graph.getList',
    AppBskyGraphGetListBlocks: 'app.bsky.graph.getListBlocks',
    AppBskyGraphGetListMutes: 'app.bsky.graph.getListMutes',
    AppBskyGraphGetLists: 'app.bsky.graph.getLists',
    AppBskyGraphGetMutes: 'app.bsky.graph.getMutes',
    AppBskyGraphGetRelationships: 'app.bsky.graph.getRelationships',
    AppBskyGraphGetStarterPack: 'app.bsky.graph.getStarterPack',
    AppBskyGraphGetStarterPacks: 'app.bsky.graph.getStarterPacks',
    AppBskyGraphGetSuggestedFollowsByActor: 'app.bsky.graph.getSuggestedFollowsByActor',
    AppBskyGraphList: 'app.bsky.graph.list',
    AppBskyGraphListblock: 'app.bsky.graph.listblock',
    AppBskyGraphListitem: 'app.bsky.graph.listitem',
    AppBskyGraphMuteActor: 'app.bsky.graph.muteActor',
    AppBskyGraphMuteActorList: 'app.bsky.graph.muteActorList',
    AppBskyGraphMuteThread: 'app.bsky.graph.muteThread',
    AppBskyGraphSearchStarterPacks: 'app.bsky.graph.searchStarterPacks',
    AppBskyGraphStarterpack: 'app.bsky.graph.starterpack',
    AppBskyGraphUnmuteActor: 'app.bsky.graph.unmuteActor',
    AppBskyGraphUnmuteActorList: 'app.bsky.graph.unmuteActorList',
    AppBskyGraphUnmuteThread: 'app.bsky.graph.unmuteThread',
    AppBskyGraphVerification: 'app.bsky.graph.verification',
    AppBskyLabelerDefs: 'app.bsky.labeler.defs',
    AppBskyLabelerGetServices: 'app.bsky.labeler.getServices',
    AppBskyLabelerService: 'app.bsky.labeler.service',
    AppBskyNotificationDefs: 'app.bsky.notification.defs',
    AppBskyNotificationGetUnreadCount: 'app.bsky.notification.getUnreadCount',
    AppBskyNotificationListNotifications: 'app.bsky.notification.listNotifications',
    AppBskyNotificationPutPreferences: 'app.bsky.notification.putPreferences',
    AppBskyNotificationRegisterPush: 'app.bsky.notification.registerPush',
    AppBskyNotificationUpdateSeen: 'app.bsky.notification.updateSeen',
    AppBskyRichtextFacet: 'app.bsky.richtext.facet',
    AppBskyUnspeccedDefs: 'app.bsky.unspecced.defs',
    AppBskyUnspeccedGetConfig: 'app.bsky.unspecced.getConfig',
    AppBskyUnspeccedGetPopularFeedGenerators: 'app.bsky.unspecced.getPopularFeedGenerators',
    AppBskyUnspeccedGetSuggestedFeeds: 'app.bsky.unspecced.getSuggestedFeeds',
    AppBskyUnspeccedGetSuggestedFeedsSkeleton: 'app.bsky.unspecced.getSuggestedFeedsSkeleton',
    AppBskyUnspeccedGetSuggestedStarterPacks: 'app.bsky.unspecced.getSuggestedStarterPacks',
    AppBskyUnspeccedGetSuggestedStarterPacksSkeleton: 'app.bsky.unspecced.getSuggestedStarterPacksSkeleton',
    AppBskyUnspeccedGetSuggestedUsers: 'app.bsky.unspecced.getSuggestedUsers',
    AppBskyUnspeccedGetSuggestedUsersSkeleton: 'app.bsky.unspecced.getSuggestedUsersSkeleton',
    AppBskyUnspeccedGetSuggestionsSkeleton: 'app.bsky.unspecced.getSuggestionsSkeleton',
    AppBskyUnspeccedGetTaggedSuggestions: 'app.bsky.unspecced.getTaggedSuggestions',
    AppBskyUnspeccedGetTrendingTopics: 'app.bsky.unspecced.getTrendingTopics',
    AppBskyUnspeccedGetTrends: 'app.bsky.unspecced.getTrends',
    AppBskyUnspeccedGetTrendsSkeleton: 'app.bsky.unspecced.getTrendsSkeleton',
    AppBskyUnspeccedSearchActorsSkeleton: 'app.bsky.unspecced.searchActorsSkeleton',
    AppBskyUnspeccedSearchPostsSkeleton: 'app.bsky.unspecced.searchPostsSkeleton',
    AppBskyUnspeccedSearchStarterPacksSkeleton: 'app.bsky.unspecced.searchStarterPacksSkeleton',
    AppBskyVideoDefs: 'app.bsky.video.defs',
    AppBskyVideoGetJobStatus: 'app.bsky.video.getJobStatus',
    AppBskyVideoGetUploadLimits: 'app.bsky.video.getUploadLimits',
    AppBskyVideoUploadVideo: 'app.bsky.video.uploadVideo',
    ChatBskyActorDeclaration: 'chat.bsky.actor.declaration',
    ChatBskyActorDefs: 'chat.bsky.actor.defs',
    ChatBskyActorDeleteAccount: 'chat.bsky.actor.deleteAccount',
    ChatBskyActorExportAccountData: 'chat.bsky.actor.exportAccountData',
    ChatBskyConvoAcceptConvo: 'chat.bsky.convo.acceptConvo',
    ChatBskyConvoAddReaction: 'chat.bsky.convo.addReaction',
    ChatBskyConvoDefs: 'chat.bsky.convo.defs',
    ChatBskyConvoDeleteMessageForSelf: 'chat.bsky.convo.deleteMessageForSelf',
    ChatBskyConvoGetConvo: 'chat.bsky.convo.getConvo',
    ChatBskyConvoGetConvoAvailability: 'chat.bsky.convo.getConvoAvailability',
    ChatBskyConvoGetConvoForMembers: 'chat.bsky.convo.getConvoForMembers',
    ChatBskyConvoGetLog: 'chat.bsky.convo.getLog',
    ChatBskyConvoGetMessages: 'chat.bsky.convo.getMessages',
    ChatBskyConvoLeaveConvo: 'chat.bsky.convo.leaveConvo',
    ChatBskyConvoListConvos: 'chat.bsky.convo.listConvos',
    ChatBskyConvoMuteConvo: 'chat.bsky.convo.muteConvo',
    ChatBskyConvoRemoveReaction: 'chat.bsky.convo.removeReaction',
    ChatBskyConvoSendMessage: 'chat.bsky.convo.sendMessage',
    ChatBskyConvoSendMessageBatch: 'chat.bsky.convo.sendMessageBatch',
    ChatBskyConvoUnmuteConvo: 'chat.bsky.convo.unmuteConvo',
    ChatBskyConvoUpdateAllRead: 'chat.bsky.convo.updateAllRead',
    ChatBskyConvoUpdateRead: 'chat.bsky.convo.updateRead',
    ChatBskyModerationGetActorMetadata: 'chat.bsky.moderation.getActorMetadata',
    ChatBskyModerationGetMessageContext: 'chat.bsky.moderation.getMessageContext',
    ChatBskyModerationUpdateActorAccess: 'chat.bsky.moderation.updateActorAccess',
    ToolsOzoneCommunicationCreateTemplate: 'tools.ozone.communication.createTemplate',
    ToolsOzoneCommunicationDefs: 'tools.ozone.communication.defs',
    ToolsOzoneCommunicationDeleteTemplate: 'tools.ozone.communication.deleteTemplate',
    ToolsOzoneCommunicationListTemplates: 'tools.ozone.communication.listTemplates',
    ToolsOzoneCommunicationUpdateTemplate: 'tools.ozone.communication.updateTemplate',
    ToolsOzoneHostingGetAccountHistory: 'tools.ozone.hosting.getAccountHistory',
    ToolsOzoneModerationDefs: 'tools.ozone.moderation.defs',
    ToolsOzoneModerationEmitEvent: 'tools.ozone.moderation.emitEvent',
    ToolsOzoneModerationGetEvent: 'tools.ozone.moderation.getEvent',
    ToolsOzoneModerationGetRecord: 'tools.ozone.moderation.getRecord',
    ToolsOzoneModerationGetRecords: 'tools.ozone.moderation.getRecords',
    ToolsOzoneModerationGetRepo: 'tools.ozone.moderation.getRepo',
    ToolsOzoneModerationGetReporterStats: 'tools.ozone.moderation.getReporterStats',
    ToolsOzoneModerationGetRepos: 'tools.ozone.moderation.getRepos',
    ToolsOzoneModerationGetSubjects: 'tools.ozone.moderation.getSubjects',
    ToolsOzoneModerationQueryEvents: 'tools.ozone.moderation.queryEvents',
    ToolsOzoneModerationQueryStatuses: 'tools.ozone.moderation.queryStatuses',
    ToolsOzoneModerationSearchRepos: 'tools.ozone.moderation.searchRepos',
    ToolsOzoneServerGetConfig: 'tools.ozone.server.getConfig',
    ToolsOzoneSetAddValues: 'tools.ozone.set.addValues',
    ToolsOzoneSetDefs: 'tools.ozone.set.defs',
    ToolsOzoneSetDeleteSet: 'tools.ozone.set.deleteSet',
    ToolsOzoneSetDeleteValues: 'tools.ozone.set.deleteValues',
    ToolsOzoneSetGetValues: 'tools.ozone.set.getValues',
    ToolsOzoneSetQuerySets: 'tools.ozone.set.querySets',
    ToolsOzoneSetUpsertSet: 'tools.ozone.set.upsertSet',
    ToolsOzoneSettingDefs: 'tools.ozone.setting.defs',
    ToolsOzoneSettingListOptions: 'tools.ozone.setting.listOptions',
    ToolsOzoneSettingRemoveOptions: 'tools.ozone.setting.removeOptions',
    ToolsOzoneSettingUpsertOption: 'tools.ozone.setting.upsertOption',
    ToolsOzoneSignatureDefs: 'tools.ozone.signature.defs',
    ToolsOzoneSignatureFindCorrelation: 'tools.ozone.signature.findCorrelation',
    ToolsOzoneSignatureFindRelatedAccounts: 'tools.ozone.signature.findRelatedAccounts',
    ToolsOzoneSignatureSearchAccounts: 'tools.ozone.signature.searchAccounts',
    ToolsOzoneTeamAddMember: 'tools.ozone.team.addMember',
    ToolsOzoneTeamDefs: 'tools.ozone.team.defs',
    ToolsOzoneTeamDeleteMember: 'tools.ozone.team.deleteMember',
    ToolsOzoneTeamListMembers: 'tools.ozone.team.listMembers',
    ToolsOzoneTeamUpdateMember: 'tools.ozone.team.updateMember',
    ToolsOzoneVerificationDefs: 'tools.ozone.verification.defs',
    ToolsOzoneVerificationGrantVerifications: 'tools.ozone.verification.grantVerifications',
    ToolsOzoneVerificationListVerifications: 'tools.ozone.verification.listVerifications',
    ToolsOzoneVerificationRevokeVerifications: 'tools.ozone.verification.revokeVerifications'
};

},{"ff9c5300bb49accc":"dXkdv","f3d2814a0b4c0033":"hnRug"}],"hnRug":[function(require,module,exports,__globalThis) {
"use strict";
/**
 * GENERATED CODE - DO NOT MODIFY
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.is$typed = is$typed;
exports.maybe$typed = maybe$typed;
exports.asPredicate = asPredicate;
function isObject(v) {
    return v != null && typeof v === 'object';
}
function is$type($type, id, hash) {
    return hash === 'main' ? $type === id : typeof $type === 'string' && $type.length === id.length + 1 + hash.length && $type.charCodeAt(id.length) === 35 /* '#' */  && $type.startsWith(id) && $type.endsWith(hash);
}
function is$typed(v, id, hash) {
    return isObject(v) && '$type' in v && is$type(v.$type, id, hash);
}
function maybe$typed(v, id, hash) {
    return isObject(v) && ('$type' in v ? v.$type === undefined || is$type(v.$type, id, hash) : true);
}
/**
 * Utility function that allows to convert a "validate*" utility function into a
 * type predicate.
 */ function asPredicate(validate) {
    return function(v) {
        return validate(v).success;
    };
}

},{}],"j3TEa":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"2AA0F":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BSKY_LABELER_DID = void 0;
exports.BSKY_LABELER_DID = 'did:plc:ar7c4by46qjdydhdevvrndac';

},{}],"OcJzf":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.nuxSchema = exports.asDid = exports.isDid = void 0;
exports.sanitizeMutedWordValue = sanitizeMutedWordValue;
exports.savedFeedsToUriArrays = savedFeedsToUriArrays;
exports.getSavedFeedType = getSavedFeedType;
exports.validateSavedFeed = validateSavedFeed;
exports.validateNux = validateNux;
const zod_1 = require("402733ac0436d6ca");
const common_web_1 = require("2cc1c3ca3956bab5");
const syntax_1 = require("1ec9bc248d6e7eb0");
function sanitizeMutedWordValue(value) {
    return value.trim().replace(/^#(?!\ufe0f)/, '')// eslint-disable-next-line no-misleading-character-class
    .replace(/[\r\n\u00AD\u2060\u200D\u200C\u200B]+/, '');
}
function savedFeedsToUriArrays(savedFeeds) {
    const pinned = [];
    const saved = [];
    for (const feed of savedFeeds)if (feed.pinned) {
        pinned.push(feed.value);
        // saved in v1 includes pinned
        saved.push(feed.value);
    } else saved.push(feed.value);
    return {
        pinned,
        saved
    };
}
/**
 * Get the type of a saved feed, used by deprecated methods for backwards
 * compat. Should not be used moving forward. *Invalid URIs will throw.*
 *
 * @param uri - The AT URI of the saved feed
 */ function getSavedFeedType(uri) {
    const urip = new syntax_1.AtUri(uri);
    switch(urip.collection){
        case 'app.bsky.feed.generator':
            return 'feed';
        case 'app.bsky.graph.list':
            return 'list';
        default:
            return 'unknown';
    }
}
function validateSavedFeed(savedFeed) {
    new common_web_1.TID(savedFeed.id);
    if ([
        'feed',
        'list'
    ].includes(savedFeed.type)) {
        const uri = new syntax_1.AtUri(savedFeed.value);
        const isFeed = uri.collection === 'app.bsky.feed.generator';
        const isList = uri.collection === 'app.bsky.graph.list';
        if (savedFeed.type === 'feed' && !isFeed) throw new Error(`Saved feed of type 'feed' must be a feed, got ${uri.collection}`);
        if (savedFeed.type === 'list' && !isList) throw new Error(`Saved feed of type 'list' must be a list, got ${uri.collection}`);
    }
}
// @TODO use tools from @atproto/did
const isDid = (str)=>typeof str === 'string' && str.startsWith('did:') && str.includes(':', 4) && str.length > 8 && str.length <= 2048;
exports.isDid = isDid;
const asDid = (value)=>{
    if ((0, exports.isDid)(value)) return value;
    throw new TypeError(`Invalid DID: ${value}`);
};
exports.asDid = asDid;
exports.nuxSchema = zod_1.z.object({
    id: zod_1.z.string().max(64),
    completed: zod_1.z.boolean(),
    data: zod_1.z.string().max(300).optional(),
    expiresAt: zod_1.z.string().datetime().optional()
}).strict();
function validateNux(nux) {
    exports.nuxSchema.parse(nux);
}

},{"402733ac0436d6ca":"gcE23","2cc1c3ca3956bab5":"2onrJ","1ec9bc248d6e7eb0":"gN2Ao"}],"hHmOB":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function() {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o) {
            var ar = [];
            for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
            for(var k = ownKeys(mod), i = 0; i < k.length; i++)if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ComAtprotoServerCreateInviteCode = exports.ComAtprotoServerCreateAppPassword = exports.ComAtprotoServerCreateAccount = exports.ComAtprotoServerConfirmEmail = exports.ComAtprotoServerCheckAccountStatus = exports.ComAtprotoServerActivateAccount = exports.ComAtprotoRepoUploadBlob = exports.ComAtprotoRepoStrongRef = exports.ComAtprotoRepoPutRecord = exports.ComAtprotoRepoListRecords = exports.ComAtprotoRepoListMissingBlobs = exports.ComAtprotoRepoImportRepo = exports.ComAtprotoRepoGetRecord = exports.ComAtprotoRepoDescribeRepo = exports.ComAtprotoRepoDeleteRecord = exports.ComAtprotoRepoDefs = exports.ComAtprotoRepoCreateRecord = exports.ComAtprotoRepoApplyWrites = exports.ComAtprotoModerationDefs = exports.ComAtprotoModerationCreateReport = exports.ComAtprotoLexiconSchema = exports.ComAtprotoLabelSubscribeLabels = exports.ComAtprotoLabelQueryLabels = exports.ComAtprotoLabelDefs = exports.ComAtprotoIdentityUpdateHandle = exports.ComAtprotoIdentitySubmitPlcOperation = exports.ComAtprotoIdentitySignPlcOperation = exports.ComAtprotoIdentityResolveIdentity = exports.ComAtprotoIdentityResolveHandle = exports.ComAtprotoIdentityResolveDid = exports.ComAtprotoIdentityRequestPlcOperationSignature = exports.ComAtprotoIdentityRefreshIdentity = exports.ComAtprotoIdentityGetRecommendedDidCredentials = exports.ComAtprotoIdentityDefs = exports.ComAtprotoAdminUpdateSubjectStatus = exports.ComAtprotoAdminUpdateAccountSigningKey = exports.ComAtprotoAdminUpdateAccountPassword = exports.ComAtprotoAdminUpdateAccountHandle = exports.ComAtprotoAdminUpdateAccountEmail = exports.ComAtprotoAdminSendEmail = exports.ComAtprotoAdminSearchAccounts = exports.ComAtprotoAdminGetSubjectStatus = exports.ComAtprotoAdminGetInviteCodes = exports.ComAtprotoAdminGetAccountInfos = exports.ComAtprotoAdminGetAccountInfo = exports.ComAtprotoAdminEnableAccountInvites = exports.ComAtprotoAdminDisableInviteCodes = exports.ComAtprotoAdminDisableAccountInvites = exports.ComAtprotoAdminDeleteAccount = exports.ComAtprotoAdminDefs = void 0;
exports.AppBskyActorSearchActorsTypeahead = exports.AppBskyActorSearchActors = exports.AppBskyActorPutPreferences = exports.AppBskyActorProfile = exports.AppBskyActorGetSuggestions = exports.AppBskyActorGetProfiles = exports.AppBskyActorGetProfile = exports.AppBskyActorGetPreferences = exports.AppBskyActorDefs = exports.ComAtprotoTempRequestPhoneVerification = exports.ComAtprotoTempFetchLabels = exports.ComAtprotoTempCheckSignupQueue = exports.ComAtprotoTempAddReservedHandle = exports.ComAtprotoSyncSubscribeRepos = exports.ComAtprotoSyncRequestCrawl = exports.ComAtprotoSyncNotifyOfUpdate = exports.ComAtprotoSyncListReposByCollection = exports.ComAtprotoSyncListRepos = exports.ComAtprotoSyncListHosts = exports.ComAtprotoSyncListBlobs = exports.ComAtprotoSyncGetRepoStatus = exports.ComAtprotoSyncGetRepo = exports.ComAtprotoSyncGetRecord = exports.ComAtprotoSyncGetLatestCommit = exports.ComAtprotoSyncGetHostStatus = exports.ComAtprotoSyncGetHead = exports.ComAtprotoSyncGetCheckout = exports.ComAtprotoSyncGetBlocks = exports.ComAtprotoSyncGetBlob = exports.ComAtprotoSyncDefs = exports.ComAtprotoServerUpdateEmail = exports.ComAtprotoServerRevokeAppPassword = exports.ComAtprotoServerResetPassword = exports.ComAtprotoServerReserveSigningKey = exports.ComAtprotoServerRequestPasswordReset = exports.ComAtprotoServerRequestEmailUpdate = exports.ComAtprotoServerRequestEmailConfirmation = exports.ComAtprotoServerRequestAccountDelete = exports.ComAtprotoServerRefreshSession = exports.ComAtprotoServerListAppPasswords = exports.ComAtprotoServerGetSession = exports.ComAtprotoServerGetServiceAuth = exports.ComAtprotoServerGetAccountInviteCodes = exports.ComAtprotoServerDescribeServer = exports.ComAtprotoServerDeleteSession = exports.ComAtprotoServerDeleteAccount = exports.ComAtprotoServerDefs = exports.ComAtprotoServerDeactivateAccount = exports.ComAtprotoServerCreateSession = exports.ComAtprotoServerCreateInviteCodes = void 0;
exports.AppBskyGraphList = exports.AppBskyGraphGetSuggestedFollowsByActor = exports.AppBskyGraphGetStarterPacks = exports.AppBskyGraphGetStarterPack = exports.AppBskyGraphGetRelationships = exports.AppBskyGraphGetMutes = exports.AppBskyGraphGetLists = exports.AppBskyGraphGetListMutes = exports.AppBskyGraphGetListBlocks = exports.AppBskyGraphGetList = exports.AppBskyGraphGetKnownFollowers = exports.AppBskyGraphGetFollows = exports.AppBskyGraphGetFollowers = exports.AppBskyGraphGetBlocks = exports.AppBskyGraphGetActorStarterPacks = exports.AppBskyGraphFollow = exports.AppBskyGraphDefs = exports.AppBskyGraphBlock = exports.AppBskyFeedThreadgate = exports.AppBskyFeedSendInteractions = exports.AppBskyFeedSearchPosts = exports.AppBskyFeedRepost = exports.AppBskyFeedPostgate = exports.AppBskyFeedPost = exports.AppBskyFeedLike = exports.AppBskyFeedGetTimeline = exports.AppBskyFeedGetSuggestedFeeds = exports.AppBskyFeedGetRepostedBy = exports.AppBskyFeedGetQuotes = exports.AppBskyFeedGetPostThread = exports.AppBskyFeedGetPosts = exports.AppBskyFeedGetListFeed = exports.AppBskyFeedGetLikes = exports.AppBskyFeedGetFeedSkeleton = exports.AppBskyFeedGetFeedGenerators = exports.AppBskyFeedGetFeedGenerator = exports.AppBskyFeedGetFeed = exports.AppBskyFeedGetAuthorFeed = exports.AppBskyFeedGetActorLikes = exports.AppBskyFeedGetActorFeeds = exports.AppBskyFeedGenerator = exports.AppBskyFeedDescribeFeedGenerator = exports.AppBskyFeedDefs = exports.AppBskyEmbedVideo = exports.AppBskyEmbedRecordWithMedia = exports.AppBskyEmbedRecord = exports.AppBskyEmbedImages = exports.AppBskyEmbedExternal = exports.AppBskyEmbedDefs = exports.AppBskyActorStatus = void 0;
exports.ChatBskyConvoDeleteMessageForSelf = exports.ChatBskyConvoDefs = exports.ChatBskyConvoAddReaction = exports.ChatBskyConvoAcceptConvo = exports.ChatBskyActorExportAccountData = exports.ChatBskyActorDeleteAccount = exports.ChatBskyActorDefs = exports.ChatBskyActorDeclaration = exports.AppBskyVideoUploadVideo = exports.AppBskyVideoGetUploadLimits = exports.AppBskyVideoGetJobStatus = exports.AppBskyVideoDefs = exports.AppBskyUnspeccedSearchStarterPacksSkeleton = exports.AppBskyUnspeccedSearchPostsSkeleton = exports.AppBskyUnspeccedSearchActorsSkeleton = exports.AppBskyUnspeccedGetTrendsSkeleton = exports.AppBskyUnspeccedGetTrends = exports.AppBskyUnspeccedGetTrendingTopics = exports.AppBskyUnspeccedGetTaggedSuggestions = exports.AppBskyUnspeccedGetSuggestionsSkeleton = exports.AppBskyUnspeccedGetSuggestedUsersSkeleton = exports.AppBskyUnspeccedGetSuggestedUsers = exports.AppBskyUnspeccedGetSuggestedStarterPacksSkeleton = exports.AppBskyUnspeccedGetSuggestedStarterPacks = exports.AppBskyUnspeccedGetSuggestedFeedsSkeleton = exports.AppBskyUnspeccedGetSuggestedFeeds = exports.AppBskyUnspeccedGetPopularFeedGenerators = exports.AppBskyUnspeccedGetConfig = exports.AppBskyUnspeccedDefs = exports.AppBskyRichtextFacet = exports.AppBskyNotificationUpdateSeen = exports.AppBskyNotificationRegisterPush = exports.AppBskyNotificationPutPreferences = exports.AppBskyNotificationListNotifications = exports.AppBskyNotificationGetUnreadCount = exports.AppBskyNotificationDefs = exports.AppBskyLabelerService = exports.AppBskyLabelerGetServices = exports.AppBskyLabelerDefs = exports.AppBskyGraphVerification = exports.AppBskyGraphUnmuteThread = exports.AppBskyGraphUnmuteActorList = exports.AppBskyGraphUnmuteActor = exports.AppBskyGraphStarterpack = exports.AppBskyGraphSearchStarterPacks = exports.AppBskyGraphMuteThread = exports.AppBskyGraphMuteActorList = exports.AppBskyGraphMuteActor = exports.AppBskyGraphListitem = exports.AppBskyGraphListblock = void 0;
exports.ToolsOzoneSignatureFindRelatedAccounts = exports.ToolsOzoneSignatureFindCorrelation = exports.ToolsOzoneSignatureDefs = exports.ToolsOzoneSettingUpsertOption = exports.ToolsOzoneSettingRemoveOptions = exports.ToolsOzoneSettingListOptions = exports.ToolsOzoneSettingDefs = exports.ToolsOzoneSetUpsertSet = exports.ToolsOzoneSetQuerySets = exports.ToolsOzoneSetGetValues = exports.ToolsOzoneSetDeleteValues = exports.ToolsOzoneSetDeleteSet = exports.ToolsOzoneSetDefs = exports.ToolsOzoneSetAddValues = exports.ToolsOzoneServerGetConfig = exports.ToolsOzoneModerationSearchRepos = exports.ToolsOzoneModerationQueryStatuses = exports.ToolsOzoneModerationQueryEvents = exports.ToolsOzoneModerationGetSubjects = exports.ToolsOzoneModerationGetRepos = exports.ToolsOzoneModerationGetReporterStats = exports.ToolsOzoneModerationGetRepo = exports.ToolsOzoneModerationGetRecords = exports.ToolsOzoneModerationGetRecord = exports.ToolsOzoneModerationGetEvent = exports.ToolsOzoneModerationEmitEvent = exports.ToolsOzoneModerationDefs = exports.ToolsOzoneHostingGetAccountHistory = exports.ToolsOzoneCommunicationUpdateTemplate = exports.ToolsOzoneCommunicationListTemplates = exports.ToolsOzoneCommunicationDeleteTemplate = exports.ToolsOzoneCommunicationDefs = exports.ToolsOzoneCommunicationCreateTemplate = exports.ChatBskyModerationUpdateActorAccess = exports.ChatBskyModerationGetMessageContext = exports.ChatBskyModerationGetActorMetadata = exports.ChatBskyConvoUpdateRead = exports.ChatBskyConvoUpdateAllRead = exports.ChatBskyConvoUnmuteConvo = exports.ChatBskyConvoSendMessageBatch = exports.ChatBskyConvoSendMessage = exports.ChatBskyConvoRemoveReaction = exports.ChatBskyConvoMuteConvo = exports.ChatBskyConvoListConvos = exports.ChatBskyConvoLeaveConvo = exports.ChatBskyConvoGetMessages = exports.ChatBskyConvoGetLog = exports.ChatBskyConvoGetConvoForMembers = exports.ChatBskyConvoGetConvoAvailability = exports.ChatBskyConvoGetConvo = void 0;
exports.AppBskyGraphVerificationRecord = exports.AppBskyGraphStarterpackRecord = exports.AppBskyGraphListitemRecord = exports.AppBskyGraphListblockRecord = exports.AppBskyGraphListRecord = exports.AppBskyGraphFollowRecord = exports.AppBskyGraphBlockRecord = exports.AppBskyGraphNS = exports.AppBskyFeedThreadgateRecord = exports.AppBskyFeedRepostRecord = exports.AppBskyFeedPostgateRecord = exports.AppBskyFeedPostRecord = exports.AppBskyFeedLikeRecord = exports.AppBskyFeedGeneratorRecord = exports.AppBskyFeedNS = exports.AppBskyEmbedNS = exports.AppBskyActorStatusRecord = exports.AppBskyActorProfileRecord = exports.AppBskyActorNS = exports.AppBskyNS = exports.AppNS = exports.ComAtprotoTempNS = exports.ComAtprotoSyncNS = exports.ComAtprotoServerNS = exports.ComAtprotoRepoNS = exports.ComAtprotoModerationNS = exports.ComAtprotoLexiconSchemaRecord = exports.ComAtprotoLexiconNS = exports.ComAtprotoLabelNS = exports.ComAtprotoIdentityNS = exports.ComAtprotoAdminNS = exports.ComAtprotoNS = exports.ComNS = exports.AtpBaseClient = exports.TOOLS_OZONE_TEAM = exports.TOOLS_OZONE_MODERATION = exports.APP_BSKY_GRAPH = exports.APP_BSKY_FEED = exports.APP_BSKY_ACTOR = exports.COM_ATPROTO_MODERATION = exports.ToolsOzoneVerificationRevokeVerifications = exports.ToolsOzoneVerificationListVerifications = exports.ToolsOzoneVerificationGrantVerifications = exports.ToolsOzoneVerificationDefs = exports.ToolsOzoneTeamUpdateMember = exports.ToolsOzoneTeamListMembers = exports.ToolsOzoneTeamDeleteMember = exports.ToolsOzoneTeamDefs = exports.ToolsOzoneTeamAddMember = exports.ToolsOzoneSignatureSearchAccounts = void 0;
exports.ToolsOzoneVerificationNS = exports.ToolsOzoneTeamNS = exports.ToolsOzoneSignatureNS = exports.ToolsOzoneSettingNS = exports.ToolsOzoneSetNS = exports.ToolsOzoneServerNS = exports.ToolsOzoneModerationNS = exports.ToolsOzoneHostingNS = exports.ToolsOzoneCommunicationNS = exports.ToolsOzoneNS = exports.ToolsNS = exports.ChatBskyModerationNS = exports.ChatBskyConvoNS = exports.ChatBskyActorDeclarationRecord = exports.ChatBskyActorNS = exports.ChatBskyNS = exports.ChatNS = exports.AppBskyVideoNS = exports.AppBskyUnspeccedNS = exports.AppBskyRichtextNS = exports.AppBskyNotificationNS = exports.AppBskyLabelerServiceRecord = exports.AppBskyLabelerNS = void 0;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("aa499ff07342141b");
const lexicons_js_1 = require("44e342f747e39c4");
const ComAtprotoIdentityRefreshIdentity = __importStar(require("22ddbbbee6c77f5"));
const ComAtprotoIdentityResolveDid = __importStar(require("e05cd095f980d13c"));
const ComAtprotoIdentityResolveHandle = __importStar(require("9614a2deaa4e89ac"));
const ComAtprotoIdentityResolveIdentity = __importStar(require("5a43379675ac0442"));
const ComAtprotoRepoApplyWrites = __importStar(require("665710e24853268"));
const ComAtprotoRepoCreateRecord = __importStar(require("16720102235ddbcf"));
const ComAtprotoRepoDeleteRecord = __importStar(require("50deb65dcaeacf01"));
const ComAtprotoRepoGetRecord = __importStar(require("e34a7a0eb53af96d"));
const ComAtprotoRepoPutRecord = __importStar(require("65c70857844a42f7"));
const ComAtprotoServerConfirmEmail = __importStar(require("819f0218655b5623"));
const ComAtprotoServerCreateAccount = __importStar(require("bc6885deb341e139"));
const ComAtprotoServerCreateAppPassword = __importStar(require("abc089c9c37ba856"));
const ComAtprotoServerCreateSession = __importStar(require("9bfb61b6ab7a19ff"));
const ComAtprotoServerDeleteAccount = __importStar(require("436334929b8d7001"));
const ComAtprotoServerGetAccountInviteCodes = __importStar(require("89f03786387dc9e5"));
const ComAtprotoServerGetServiceAuth = __importStar(require("442c0dada1294917"));
const ComAtprotoServerListAppPasswords = __importStar(require("91fbe5f4fa086736"));
const ComAtprotoServerRefreshSession = __importStar(require("c4c2f798101bea9a"));
const ComAtprotoServerResetPassword = __importStar(require("7764beddb700606b"));
const ComAtprotoServerUpdateEmail = __importStar(require("dd844f562eabb3db"));
const ComAtprotoSyncGetBlob = __importStar(require("bbdc9cc70d77a100"));
const ComAtprotoSyncGetBlocks = __importStar(require("734960255a23cc3e"));
const ComAtprotoSyncGetHead = __importStar(require("162d6d44d8d84ec"));
const ComAtprotoSyncGetHostStatus = __importStar(require("8c928a320db0814e"));
const ComAtprotoSyncGetLatestCommit = __importStar(require("8ea23a970bc6255b"));
const ComAtprotoSyncGetRecord = __importStar(require("5eb89f75a1cd88ae"));
const ComAtprotoSyncGetRepo = __importStar(require("ea366419c211ff46"));
const ComAtprotoSyncGetRepoStatus = __importStar(require("3ef580dbcc401365"));
const ComAtprotoSyncListBlobs = __importStar(require("42a85ea4dbffe6c9"));
const ComAtprotoSyncRequestCrawl = __importStar(require("b2471611274aac32"));
const AppBskyFeedGetActorLikes = __importStar(require("fd7c8aa2c694804a"));
const AppBskyFeedGetAuthorFeed = __importStar(require("401516c22f956962"));
const AppBskyFeedGetFeed = __importStar(require("77a5ec40630b3fb5"));
const AppBskyFeedGetFeedSkeleton = __importStar(require("1918445165948e32"));
const AppBskyFeedGetListFeed = __importStar(require("db71e6006dad05f1"));
const AppBskyFeedGetPostThread = __importStar(require("9b6a68438287b415"));
const AppBskyFeedSearchPosts = __importStar(require("b139724c57cc3172"));
const AppBskyGraphGetRelationships = __importStar(require("dfdaae1ee3a5f26f"));
const AppBskyUnspeccedSearchActorsSkeleton = __importStar(require("94d4684defe0b5bb"));
const AppBskyUnspeccedSearchPostsSkeleton = __importStar(require("9131fada34399a8c"));
const AppBskyUnspeccedSearchStarterPacksSkeleton = __importStar(require("75fefb4c2f0a1b12"));
const ChatBskyConvoAddReaction = __importStar(require("2d527136b73eb335"));
const ChatBskyConvoRemoveReaction = __importStar(require("b2538c4708fca955"));
const ToolsOzoneCommunicationCreateTemplate = __importStar(require("654398be982ef271"));
const ToolsOzoneCommunicationUpdateTemplate = __importStar(require("9487e165b62ae00a"));
const ToolsOzoneModerationEmitEvent = __importStar(require("26ed163de08d4095"));
const ToolsOzoneModerationGetRecord = __importStar(require("831548f4ae5008b7"));
const ToolsOzoneModerationGetRepo = __importStar(require("11c0b4dd2c120f3d"));
const ToolsOzoneSetDeleteSet = __importStar(require("bc5316802603a82e"));
const ToolsOzoneSetDeleteValues = __importStar(require("cc0b977b6eab91e7"));
const ToolsOzoneSetGetValues = __importStar(require("93f3bca21fb4a301"));
const ToolsOzoneTeamAddMember = __importStar(require("80ddea9bb6cf45bb"));
const ToolsOzoneTeamDeleteMember = __importStar(require("e4aa8abf44ae6cc6"));
const ToolsOzoneTeamUpdateMember = __importStar(require("1e9eb7923588584d"));
exports.ComAtprotoAdminDefs = __importStar(require("2af00aade016046c"));
exports.ComAtprotoAdminDeleteAccount = __importStar(require("2d7d5f06df6005a"));
exports.ComAtprotoAdminDisableAccountInvites = __importStar(require("a2b781a5ee686cf0"));
exports.ComAtprotoAdminDisableInviteCodes = __importStar(require("c58d145201b7503b"));
exports.ComAtprotoAdminEnableAccountInvites = __importStar(require("73be8f4e5eafb98f"));
exports.ComAtprotoAdminGetAccountInfo = __importStar(require("2be4112a86abfab7"));
exports.ComAtprotoAdminGetAccountInfos = __importStar(require("bdbc4cb7c7df0bef"));
exports.ComAtprotoAdminGetInviteCodes = __importStar(require("6d17e9c0163b1016"));
exports.ComAtprotoAdminGetSubjectStatus = __importStar(require("7d01e605b91ccc24"));
exports.ComAtprotoAdminSearchAccounts = __importStar(require("99d3706224942e15"));
exports.ComAtprotoAdminSendEmail = __importStar(require("1c95028e353603c7"));
exports.ComAtprotoAdminUpdateAccountEmail = __importStar(require("3dcefef826c6c398"));
exports.ComAtprotoAdminUpdateAccountHandle = __importStar(require("2b621671388d0d7a"));
exports.ComAtprotoAdminUpdateAccountPassword = __importStar(require("acd1ce3b0ab86c14"));
exports.ComAtprotoAdminUpdateAccountSigningKey = __importStar(require("d4f03ff658e4f031"));
exports.ComAtprotoAdminUpdateSubjectStatus = __importStar(require("2e212a7feefebb91"));
exports.ComAtprotoIdentityDefs = __importStar(require("770e236f970c380e"));
exports.ComAtprotoIdentityGetRecommendedDidCredentials = __importStar(require("ee078d787ceb7de"));
exports.ComAtprotoIdentityRefreshIdentity = __importStar(require("22ddbbbee6c77f5"));
exports.ComAtprotoIdentityRequestPlcOperationSignature = __importStar(require("3625bc11e5ac0038"));
exports.ComAtprotoIdentityResolveDid = __importStar(require("e05cd095f980d13c"));
exports.ComAtprotoIdentityResolveHandle = __importStar(require("9614a2deaa4e89ac"));
exports.ComAtprotoIdentityResolveIdentity = __importStar(require("5a43379675ac0442"));
exports.ComAtprotoIdentitySignPlcOperation = __importStar(require("da2c6050a0c4f6d9"));
exports.ComAtprotoIdentitySubmitPlcOperation = __importStar(require("61e8064094772b54"));
exports.ComAtprotoIdentityUpdateHandle = __importStar(require("60db0ff7a1606201"));
exports.ComAtprotoLabelDefs = __importStar(require("c2ffb5c1559ab923"));
exports.ComAtprotoLabelQueryLabels = __importStar(require("78303507eb00c5d4"));
exports.ComAtprotoLabelSubscribeLabels = __importStar(require("9a1d272c114ffa38"));
exports.ComAtprotoLexiconSchema = __importStar(require("6dadb3d22435b2a6"));
exports.ComAtprotoModerationCreateReport = __importStar(require("696cf92589c51df5"));
exports.ComAtprotoModerationDefs = __importStar(require("2e58e501e0d72af5"));
exports.ComAtprotoRepoApplyWrites = __importStar(require("665710e24853268"));
exports.ComAtprotoRepoCreateRecord = __importStar(require("16720102235ddbcf"));
exports.ComAtprotoRepoDefs = __importStar(require("ebb45a868bdcb44b"));
exports.ComAtprotoRepoDeleteRecord = __importStar(require("50deb65dcaeacf01"));
exports.ComAtprotoRepoDescribeRepo = __importStar(require("60177756828b50a7"));
exports.ComAtprotoRepoGetRecord = __importStar(require("e34a7a0eb53af96d"));
exports.ComAtprotoRepoImportRepo = __importStar(require("a61bbd6b78abd873"));
exports.ComAtprotoRepoListMissingBlobs = __importStar(require("c3167a0d573835c0"));
exports.ComAtprotoRepoListRecords = __importStar(require("6762310893af66e0"));
exports.ComAtprotoRepoPutRecord = __importStar(require("65c70857844a42f7"));
exports.ComAtprotoRepoStrongRef = __importStar(require("6aa00ee88e552c43"));
exports.ComAtprotoRepoUploadBlob = __importStar(require("2d4cf29153faff76"));
exports.ComAtprotoServerActivateAccount = __importStar(require("de61c249d7e26cd"));
exports.ComAtprotoServerCheckAccountStatus = __importStar(require("cb0d7b0fdf5edfde"));
exports.ComAtprotoServerConfirmEmail = __importStar(require("819f0218655b5623"));
exports.ComAtprotoServerCreateAccount = __importStar(require("bc6885deb341e139"));
exports.ComAtprotoServerCreateAppPassword = __importStar(require("abc089c9c37ba856"));
exports.ComAtprotoServerCreateInviteCode = __importStar(require("b20286f1a9c118ad"));
exports.ComAtprotoServerCreateInviteCodes = __importStar(require("59ba64829927a362"));
exports.ComAtprotoServerCreateSession = __importStar(require("9bfb61b6ab7a19ff"));
exports.ComAtprotoServerDeactivateAccount = __importStar(require("fa1257c166d91daf"));
exports.ComAtprotoServerDefs = __importStar(require("69418063631a9050"));
exports.ComAtprotoServerDeleteAccount = __importStar(require("436334929b8d7001"));
exports.ComAtprotoServerDeleteSession = __importStar(require("62b5bff5bacb0d31"));
exports.ComAtprotoServerDescribeServer = __importStar(require("861fe9b235e7cabd"));
exports.ComAtprotoServerGetAccountInviteCodes = __importStar(require("89f03786387dc9e5"));
exports.ComAtprotoServerGetServiceAuth = __importStar(require("442c0dada1294917"));
exports.ComAtprotoServerGetSession = __importStar(require("382ba7481215dd95"));
exports.ComAtprotoServerListAppPasswords = __importStar(require("91fbe5f4fa086736"));
exports.ComAtprotoServerRefreshSession = __importStar(require("c4c2f798101bea9a"));
exports.ComAtprotoServerRequestAccountDelete = __importStar(require("708ffb4d61cf8cd8"));
exports.ComAtprotoServerRequestEmailConfirmation = __importStar(require("647cd563596650e9"));
exports.ComAtprotoServerRequestEmailUpdate = __importStar(require("649bb1211a0ad9c4"));
exports.ComAtprotoServerRequestPasswordReset = __importStar(require("b0a66a3246c355d6"));
exports.ComAtprotoServerReserveSigningKey = __importStar(require("cc764dd955beb301"));
exports.ComAtprotoServerResetPassword = __importStar(require("7764beddb700606b"));
exports.ComAtprotoServerRevokeAppPassword = __importStar(require("6cff89ea25834c6e"));
exports.ComAtprotoServerUpdateEmail = __importStar(require("dd844f562eabb3db"));
exports.ComAtprotoSyncDefs = __importStar(require("a2e671155a3ac19f"));
exports.ComAtprotoSyncGetBlob = __importStar(require("bbdc9cc70d77a100"));
exports.ComAtprotoSyncGetBlocks = __importStar(require("734960255a23cc3e"));
exports.ComAtprotoSyncGetCheckout = __importStar(require("aefc01693e94f8ac"));
exports.ComAtprotoSyncGetHead = __importStar(require("162d6d44d8d84ec"));
exports.ComAtprotoSyncGetHostStatus = __importStar(require("8c928a320db0814e"));
exports.ComAtprotoSyncGetLatestCommit = __importStar(require("8ea23a970bc6255b"));
exports.ComAtprotoSyncGetRecord = __importStar(require("5eb89f75a1cd88ae"));
exports.ComAtprotoSyncGetRepo = __importStar(require("ea366419c211ff46"));
exports.ComAtprotoSyncGetRepoStatus = __importStar(require("3ef580dbcc401365"));
exports.ComAtprotoSyncListBlobs = __importStar(require("42a85ea4dbffe6c9"));
exports.ComAtprotoSyncListHosts = __importStar(require("4bfcda10189cbd96"));
exports.ComAtprotoSyncListRepos = __importStar(require("b5f8c8e3e728eeb4"));
exports.ComAtprotoSyncListReposByCollection = __importStar(require("e69965d3c6157e92"));
exports.ComAtprotoSyncNotifyOfUpdate = __importStar(require("f018bb59415f3185"));
exports.ComAtprotoSyncRequestCrawl = __importStar(require("b2471611274aac32"));
exports.ComAtprotoSyncSubscribeRepos = __importStar(require("8e537f9b2aaca9fa"));
exports.ComAtprotoTempAddReservedHandle = __importStar(require("53cbd0334823d6b3"));
exports.ComAtprotoTempCheckSignupQueue = __importStar(require("d847e52895a0beaf"));
exports.ComAtprotoTempFetchLabels = __importStar(require("ee500f6e8a152ff6"));
exports.ComAtprotoTempRequestPhoneVerification = __importStar(require("1731a210e0c39943"));
exports.AppBskyActorDefs = __importStar(require("1fbfc5e6c5d245ac"));
exports.AppBskyActorGetPreferences = __importStar(require("92c84ac687727ede"));
exports.AppBskyActorGetProfile = __importStar(require("260c569b086ffae"));
exports.AppBskyActorGetProfiles = __importStar(require("ee8481a0e5e34955"));
exports.AppBskyActorGetSuggestions = __importStar(require("7a42e54cd99392ae"));
exports.AppBskyActorProfile = __importStar(require("8dd1f3f1787f8fd6"));
exports.AppBskyActorPutPreferences = __importStar(require("acd4b4aa56feec19"));
exports.AppBskyActorSearchActors = __importStar(require("31f71483cda1d19e"));
exports.AppBskyActorSearchActorsTypeahead = __importStar(require("e010ed06d366a9a2"));
exports.AppBskyActorStatus = __importStar(require("f920de20bdf2c204"));
exports.AppBskyEmbedDefs = __importStar(require("dedc71456e245185"));
exports.AppBskyEmbedExternal = __importStar(require("a36df4c094c4232f"));
exports.AppBskyEmbedImages = __importStar(require("b3bc8e82e328d003"));
exports.AppBskyEmbedRecord = __importStar(require("2358853161012498"));
exports.AppBskyEmbedRecordWithMedia = __importStar(require("d094e044912a528d"));
exports.AppBskyEmbedVideo = __importStar(require("eca21a4b6c2e6a44"));
exports.AppBskyFeedDefs = __importStar(require("8437c7125ae434b6"));
exports.AppBskyFeedDescribeFeedGenerator = __importStar(require("796771fb13ccb4b2"));
exports.AppBskyFeedGenerator = __importStar(require("75d8a323c6f414ab"));
exports.AppBskyFeedGetActorFeeds = __importStar(require("56ea48347f4837f3"));
exports.AppBskyFeedGetActorLikes = __importStar(require("fd7c8aa2c694804a"));
exports.AppBskyFeedGetAuthorFeed = __importStar(require("401516c22f956962"));
exports.AppBskyFeedGetFeed = __importStar(require("77a5ec40630b3fb5"));
exports.AppBskyFeedGetFeedGenerator = __importStar(require("918a8bef3559336f"));
exports.AppBskyFeedGetFeedGenerators = __importStar(require("9c700b7cb7a60688"));
exports.AppBskyFeedGetFeedSkeleton = __importStar(require("1918445165948e32"));
exports.AppBskyFeedGetLikes = __importStar(require("1eadf766847b7d8d"));
exports.AppBskyFeedGetListFeed = __importStar(require("db71e6006dad05f1"));
exports.AppBskyFeedGetPosts = __importStar(require("5a3078cb842f18c7"));
exports.AppBskyFeedGetPostThread = __importStar(require("9b6a68438287b415"));
exports.AppBskyFeedGetQuotes = __importStar(require("595749db27402dfc"));
exports.AppBskyFeedGetRepostedBy = __importStar(require("73a711b0c7039ea1"));
exports.AppBskyFeedGetSuggestedFeeds = __importStar(require("c5572b48e73ecccf"));
exports.AppBskyFeedGetTimeline = __importStar(require("dc13f9ba8224e244"));
exports.AppBskyFeedLike = __importStar(require("96d1c41f592963ed"));
exports.AppBskyFeedPost = __importStar(require("bb1d8c181092adac"));
exports.AppBskyFeedPostgate = __importStar(require("5db7e5840de07849"));
exports.AppBskyFeedRepost = __importStar(require("a888b587fe6b51d"));
exports.AppBskyFeedSearchPosts = __importStar(require("b139724c57cc3172"));
exports.AppBskyFeedSendInteractions = __importStar(require("b96e8b7aa95e3120"));
exports.AppBskyFeedThreadgate = __importStar(require("16a698ce2bb7f6e6"));
exports.AppBskyGraphBlock = __importStar(require("7c8dc90b3c3244b4"));
exports.AppBskyGraphDefs = __importStar(require("55ee1493ac8afa05"));
exports.AppBskyGraphFollow = __importStar(require("38c41493d611ce32"));
exports.AppBskyGraphGetActorStarterPacks = __importStar(require("4a0512b11b4fc178"));
exports.AppBskyGraphGetBlocks = __importStar(require("8bac8fb9b829c272"));
exports.AppBskyGraphGetFollowers = __importStar(require("78db06c65c9137bf"));
exports.AppBskyGraphGetFollows = __importStar(require("65b1db326a3829eb"));
exports.AppBskyGraphGetKnownFollowers = __importStar(require("a774faef9519d904"));
exports.AppBskyGraphGetList = __importStar(require("24ff2e6a5be38067"));
exports.AppBskyGraphGetListBlocks = __importStar(require("da9fe6cf9ff7f19b"));
exports.AppBskyGraphGetListMutes = __importStar(require("248755df88d695c1"));
exports.AppBskyGraphGetLists = __importStar(require("bedbd2d8834722bf"));
exports.AppBskyGraphGetMutes = __importStar(require("e0e281879a4699ca"));
exports.AppBskyGraphGetRelationships = __importStar(require("dfdaae1ee3a5f26f"));
exports.AppBskyGraphGetStarterPack = __importStar(require("7b6ef22d58711ed8"));
exports.AppBskyGraphGetStarterPacks = __importStar(require("3279d98a94c474dd"));
exports.AppBskyGraphGetSuggestedFollowsByActor = __importStar(require("41166094ee8548b2"));
exports.AppBskyGraphList = __importStar(require("5640b25f76fc6a0d"));
exports.AppBskyGraphListblock = __importStar(require("d608378496e3327f"));
exports.AppBskyGraphListitem = __importStar(require("df96166e0688dd87"));
exports.AppBskyGraphMuteActor = __importStar(require("6134cc0624e08c35"));
exports.AppBskyGraphMuteActorList = __importStar(require("41d574984a2cdae2"));
exports.AppBskyGraphMuteThread = __importStar(require("bca1981d89d3277"));
exports.AppBskyGraphSearchStarterPacks = __importStar(require("549f39b49ef06d47"));
exports.AppBskyGraphStarterpack = __importStar(require("6f63bfe4cac627aa"));
exports.AppBskyGraphUnmuteActor = __importStar(require("132a14053a0f82d8"));
exports.AppBskyGraphUnmuteActorList = __importStar(require("1f44a0685739d2ba"));
exports.AppBskyGraphUnmuteThread = __importStar(require("71d2dff944327d77"));
exports.AppBskyGraphVerification = __importStar(require("ba2b82a85918e4e0"));
exports.AppBskyLabelerDefs = __importStar(require("e08b1f11618f4b97"));
exports.AppBskyLabelerGetServices = __importStar(require("adccc6326e83ef33"));
exports.AppBskyLabelerService = __importStar(require("32206e4eefbbcea"));
exports.AppBskyNotificationDefs = __importStar(require("4ff06519c2ae3640"));
exports.AppBskyNotificationGetUnreadCount = __importStar(require("21c3403b83d0f67e"));
exports.AppBskyNotificationListNotifications = __importStar(require("39aea3086f9058fd"));
exports.AppBskyNotificationPutPreferences = __importStar(require("6261b652c4a56e22"));
exports.AppBskyNotificationRegisterPush = __importStar(require("cda204366e4971f"));
exports.AppBskyNotificationUpdateSeen = __importStar(require("a85207b7ebcebd4f"));
exports.AppBskyRichtextFacet = __importStar(require("f407ccbc4d0ff740"));
exports.AppBskyUnspeccedDefs = __importStar(require("de97bd1cec6bb621"));
exports.AppBskyUnspeccedGetConfig = __importStar(require("1eee57b6e5818b6b"));
exports.AppBskyUnspeccedGetPopularFeedGenerators = __importStar(require("ec36852d17d7cdbd"));
exports.AppBskyUnspeccedGetSuggestedFeeds = __importStar(require("bf8d41f1b35bf"));
exports.AppBskyUnspeccedGetSuggestedFeedsSkeleton = __importStar(require("9d7ef18f316e10ab"));
exports.AppBskyUnspeccedGetSuggestedStarterPacks = __importStar(require("fa5e4afb24c66b54"));
exports.AppBskyUnspeccedGetSuggestedStarterPacksSkeleton = __importStar(require("9fde476ca6aa62d4"));
exports.AppBskyUnspeccedGetSuggestedUsers = __importStar(require("7d868c40aec21289"));
exports.AppBskyUnspeccedGetSuggestedUsersSkeleton = __importStar(require("b86ab2476400dafd"));
exports.AppBskyUnspeccedGetSuggestionsSkeleton = __importStar(require("bc0e846ee4027516"));
exports.AppBskyUnspeccedGetTaggedSuggestions = __importStar(require("2f93ddb536325bbf"));
exports.AppBskyUnspeccedGetTrendingTopics = __importStar(require("9af85ae6e1bdb474"));
exports.AppBskyUnspeccedGetTrends = __importStar(require("f053efafe45246a3"));
exports.AppBskyUnspeccedGetTrendsSkeleton = __importStar(require("fb3d26c2266e19b7"));
exports.AppBskyUnspeccedSearchActorsSkeleton = __importStar(require("94d4684defe0b5bb"));
exports.AppBskyUnspeccedSearchPostsSkeleton = __importStar(require("9131fada34399a8c"));
exports.AppBskyUnspeccedSearchStarterPacksSkeleton = __importStar(require("75fefb4c2f0a1b12"));
exports.AppBskyVideoDefs = __importStar(require("2e4330166d836d60"));
exports.AppBskyVideoGetJobStatus = __importStar(require("a71decc802921a48"));
exports.AppBskyVideoGetUploadLimits = __importStar(require("deffddc76599ade1"));
exports.AppBskyVideoUploadVideo = __importStar(require("a7cc36bb600cbd30"));
exports.ChatBskyActorDeclaration = __importStar(require("7e63f2140262084"));
exports.ChatBskyActorDefs = __importStar(require("7a2b573177295ca5"));
exports.ChatBskyActorDeleteAccount = __importStar(require("133e9bd594e9d270"));
exports.ChatBskyActorExportAccountData = __importStar(require("5f19947977b8603b"));
exports.ChatBskyConvoAcceptConvo = __importStar(require("16dc1591aa6f6f9c"));
exports.ChatBskyConvoAddReaction = __importStar(require("2d527136b73eb335"));
exports.ChatBskyConvoDefs = __importStar(require("63efb1da281d6686"));
exports.ChatBskyConvoDeleteMessageForSelf = __importStar(require("8d82e0480bac154f"));
exports.ChatBskyConvoGetConvo = __importStar(require("19ea7217b924a05b"));
exports.ChatBskyConvoGetConvoAvailability = __importStar(require("ddea7dd993c126d0"));
exports.ChatBskyConvoGetConvoForMembers = __importStar(require("2381e2d9a71a7db4"));
exports.ChatBskyConvoGetLog = __importStar(require("93feacca24039585"));
exports.ChatBskyConvoGetMessages = __importStar(require("3cded54d0bf64088"));
exports.ChatBskyConvoLeaveConvo = __importStar(require("f73f7189bb9498dd"));
exports.ChatBskyConvoListConvos = __importStar(require("f30d32c95c7ef0b"));
exports.ChatBskyConvoMuteConvo = __importStar(require("53496e4167f7616f"));
exports.ChatBskyConvoRemoveReaction = __importStar(require("b2538c4708fca955"));
exports.ChatBskyConvoSendMessage = __importStar(require("3d32a7ba9a28a7ee"));
exports.ChatBskyConvoSendMessageBatch = __importStar(require("481d5db0700dc67d"));
exports.ChatBskyConvoUnmuteConvo = __importStar(require("1919859f64973ae9"));
exports.ChatBskyConvoUpdateAllRead = __importStar(require("c2bec5de2cd9ff7c"));
exports.ChatBskyConvoUpdateRead = __importStar(require("37402751cbec1372"));
exports.ChatBskyModerationGetActorMetadata = __importStar(require("f4362a51aeab986c"));
exports.ChatBskyModerationGetMessageContext = __importStar(require("81acf63028fa81e7"));
exports.ChatBskyModerationUpdateActorAccess = __importStar(require("971cb302810a79d5"));
exports.ToolsOzoneCommunicationCreateTemplate = __importStar(require("654398be982ef271"));
exports.ToolsOzoneCommunicationDefs = __importStar(require("9d45c5ce7c4b667"));
exports.ToolsOzoneCommunicationDeleteTemplate = __importStar(require("8e0af4ad9cfc7c5e"));
exports.ToolsOzoneCommunicationListTemplates = __importStar(require("d123e3181f860b65"));
exports.ToolsOzoneCommunicationUpdateTemplate = __importStar(require("9487e165b62ae00a"));
exports.ToolsOzoneHostingGetAccountHistory = __importStar(require("3987238ce716e1ba"));
exports.ToolsOzoneModerationDefs = __importStar(require("c38fac065e86ff5a"));
exports.ToolsOzoneModerationEmitEvent = __importStar(require("26ed163de08d4095"));
exports.ToolsOzoneModerationGetEvent = __importStar(require("fb7d120ab57783df"));
exports.ToolsOzoneModerationGetRecord = __importStar(require("831548f4ae5008b7"));
exports.ToolsOzoneModerationGetRecords = __importStar(require("7c2e128c89db969f"));
exports.ToolsOzoneModerationGetRepo = __importStar(require("11c0b4dd2c120f3d"));
exports.ToolsOzoneModerationGetReporterStats = __importStar(require("eb19effbad0f028a"));
exports.ToolsOzoneModerationGetRepos = __importStar(require("a79666c3e2da75d9"));
exports.ToolsOzoneModerationGetSubjects = __importStar(require("d48c633decf55ca0"));
exports.ToolsOzoneModerationQueryEvents = __importStar(require("fdb9d8b2215e4a5f"));
exports.ToolsOzoneModerationQueryStatuses = __importStar(require("17fb63d2ba0a45e"));
exports.ToolsOzoneModerationSearchRepos = __importStar(require("f43fd24afd5fa435"));
exports.ToolsOzoneServerGetConfig = __importStar(require("109b28c26c1398bd"));
exports.ToolsOzoneSetAddValues = __importStar(require("61bee0bd608ca9b8"));
exports.ToolsOzoneSetDefs = __importStar(require("e80005b79787c321"));
exports.ToolsOzoneSetDeleteSet = __importStar(require("bc5316802603a82e"));
exports.ToolsOzoneSetDeleteValues = __importStar(require("cc0b977b6eab91e7"));
exports.ToolsOzoneSetGetValues = __importStar(require("93f3bca21fb4a301"));
exports.ToolsOzoneSetQuerySets = __importStar(require("7c278aff488c98e8"));
exports.ToolsOzoneSetUpsertSet = __importStar(require("32ab227ced4f49f6"));
exports.ToolsOzoneSettingDefs = __importStar(require("f0d77d0df1493c21"));
exports.ToolsOzoneSettingListOptions = __importStar(require("325a49ac2a2bc089"));
exports.ToolsOzoneSettingRemoveOptions = __importStar(require("3a65b0d274cb4378"));
exports.ToolsOzoneSettingUpsertOption = __importStar(require("b645ad125b93320"));
exports.ToolsOzoneSignatureDefs = __importStar(require("7cf3263b4df4ec23"));
exports.ToolsOzoneSignatureFindCorrelation = __importStar(require("b8e01f441508f48"));
exports.ToolsOzoneSignatureFindRelatedAccounts = __importStar(require("a99767a0523116e4"));
exports.ToolsOzoneSignatureSearchAccounts = __importStar(require("cbbf8ff990d0ab08"));
exports.ToolsOzoneTeamAddMember = __importStar(require("80ddea9bb6cf45bb"));
exports.ToolsOzoneTeamDefs = __importStar(require("c782b6c3fa54f2a3"));
exports.ToolsOzoneTeamDeleteMember = __importStar(require("e4aa8abf44ae6cc6"));
exports.ToolsOzoneTeamListMembers = __importStar(require("3d087ee55b099324"));
exports.ToolsOzoneTeamUpdateMember = __importStar(require("1e9eb7923588584d"));
exports.ToolsOzoneVerificationDefs = __importStar(require("15e8db2922cfeb2d"));
exports.ToolsOzoneVerificationGrantVerifications = __importStar(require("1cb579679fa3584b"));
exports.ToolsOzoneVerificationListVerifications = __importStar(require("2e8ffc59de0e0c20"));
exports.ToolsOzoneVerificationRevokeVerifications = __importStar(require("aae20e42d105e14a"));
exports.COM_ATPROTO_MODERATION = {
    DefsReasonSpam: 'com.atproto.moderation.defs#reasonSpam',
    DefsReasonViolation: 'com.atproto.moderation.defs#reasonViolation',
    DefsReasonMisleading: 'com.atproto.moderation.defs#reasonMisleading',
    DefsReasonSexual: 'com.atproto.moderation.defs#reasonSexual',
    DefsReasonRude: 'com.atproto.moderation.defs#reasonRude',
    DefsReasonOther: 'com.atproto.moderation.defs#reasonOther',
    DefsReasonAppeal: 'com.atproto.moderation.defs#reasonAppeal'
};
exports.APP_BSKY_ACTOR = {
    StatusLive: 'app.bsky.actor.status#live'
};
exports.APP_BSKY_FEED = {
    DefsRequestLess: 'app.bsky.feed.defs#requestLess',
    DefsRequestMore: 'app.bsky.feed.defs#requestMore',
    DefsClickthroughItem: 'app.bsky.feed.defs#clickthroughItem',
    DefsClickthroughAuthor: 'app.bsky.feed.defs#clickthroughAuthor',
    DefsClickthroughReposter: 'app.bsky.feed.defs#clickthroughReposter',
    DefsClickthroughEmbed: 'app.bsky.feed.defs#clickthroughEmbed',
    DefsContentModeUnspecified: 'app.bsky.feed.defs#contentModeUnspecified',
    DefsContentModeVideo: 'app.bsky.feed.defs#contentModeVideo',
    DefsInteractionSeen: 'app.bsky.feed.defs#interactionSeen',
    DefsInteractionLike: 'app.bsky.feed.defs#interactionLike',
    DefsInteractionRepost: 'app.bsky.feed.defs#interactionRepost',
    DefsInteractionReply: 'app.bsky.feed.defs#interactionReply',
    DefsInteractionQuote: 'app.bsky.feed.defs#interactionQuote',
    DefsInteractionShare: 'app.bsky.feed.defs#interactionShare'
};
exports.APP_BSKY_GRAPH = {
    DefsModlist: 'app.bsky.graph.defs#modlist',
    DefsCuratelist: 'app.bsky.graph.defs#curatelist',
    DefsReferencelist: 'app.bsky.graph.defs#referencelist'
};
exports.TOOLS_OZONE_MODERATION = {
    DefsReviewOpen: 'tools.ozone.moderation.defs#reviewOpen',
    DefsReviewEscalated: 'tools.ozone.moderation.defs#reviewEscalated',
    DefsReviewClosed: 'tools.ozone.moderation.defs#reviewClosed',
    DefsReviewNone: 'tools.ozone.moderation.defs#reviewNone'
};
exports.TOOLS_OZONE_TEAM = {
    DefsRoleAdmin: 'tools.ozone.team.defs#roleAdmin',
    DefsRoleModerator: 'tools.ozone.team.defs#roleModerator',
    DefsRoleTriage: 'tools.ozone.team.defs#roleTriage',
    DefsRoleVerifier: 'tools.ozone.team.defs#roleVerifier'
};
class AtpBaseClient extends xrpc_1.XrpcClient {
    constructor(options){
        super(options, lexicons_js_1.schemas);
        Object.defineProperty(this, "com", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "app", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "chat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tools", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.com = new ComNS(this);
        this.app = new AppNS(this);
        this.chat = new ChatNS(this);
        this.tools = new ToolsNS(this);
    }
    /** @deprecated use `this` instead */ get xrpc() {
        return this;
    }
}
exports.AtpBaseClient = AtpBaseClient;
class ComNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "atproto", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.atproto = new ComAtprotoNS(client);
    }
}
exports.ComNS = ComNS;
class ComAtprotoNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "admin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "identity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "label", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "lexicon", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "moderation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "repo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "server", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "sync", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "temp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.admin = new ComAtprotoAdminNS(client);
        this.identity = new ComAtprotoIdentityNS(client);
        this.label = new ComAtprotoLabelNS(client);
        this.lexicon = new ComAtprotoLexiconNS(client);
        this.moderation = new ComAtprotoModerationNS(client);
        this.repo = new ComAtprotoRepoNS(client);
        this.server = new ComAtprotoServerNS(client);
        this.sync = new ComAtprotoSyncNS(client);
        this.temp = new ComAtprotoTempNS(client);
    }
}
exports.ComAtprotoNS = ComAtprotoNS;
class ComAtprotoAdminNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    deleteAccount(data, opts) {
        return this._client.call('com.atproto.admin.deleteAccount', opts?.qp, data, opts);
    }
    disableAccountInvites(data, opts) {
        return this._client.call('com.atproto.admin.disableAccountInvites', opts?.qp, data, opts);
    }
    disableInviteCodes(data, opts) {
        return this._client.call('com.atproto.admin.disableInviteCodes', opts?.qp, data, opts);
    }
    enableAccountInvites(data, opts) {
        return this._client.call('com.atproto.admin.enableAccountInvites', opts?.qp, data, opts);
    }
    getAccountInfo(params, opts) {
        return this._client.call('com.atproto.admin.getAccountInfo', params, undefined, opts);
    }
    getAccountInfos(params, opts) {
        return this._client.call('com.atproto.admin.getAccountInfos', params, undefined, opts);
    }
    getInviteCodes(params, opts) {
        return this._client.call('com.atproto.admin.getInviteCodes', params, undefined, opts);
    }
    getSubjectStatus(params, opts) {
        return this._client.call('com.atproto.admin.getSubjectStatus', params, undefined, opts);
    }
    searchAccounts(params, opts) {
        return this._client.call('com.atproto.admin.searchAccounts', params, undefined, opts);
    }
    sendEmail(data, opts) {
        return this._client.call('com.atproto.admin.sendEmail', opts?.qp, data, opts);
    }
    updateAccountEmail(data, opts) {
        return this._client.call('com.atproto.admin.updateAccountEmail', opts?.qp, data, opts);
    }
    updateAccountHandle(data, opts) {
        return this._client.call('com.atproto.admin.updateAccountHandle', opts?.qp, data, opts);
    }
    updateAccountPassword(data, opts) {
        return this._client.call('com.atproto.admin.updateAccountPassword', opts?.qp, data, opts);
    }
    updateAccountSigningKey(data, opts) {
        return this._client.call('com.atproto.admin.updateAccountSigningKey', opts?.qp, data, opts);
    }
    updateSubjectStatus(data, opts) {
        return this._client.call('com.atproto.admin.updateSubjectStatus', opts?.qp, data, opts);
    }
}
exports.ComAtprotoAdminNS = ComAtprotoAdminNS;
class ComAtprotoIdentityNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    getRecommendedDidCredentials(params, opts) {
        return this._client.call('com.atproto.identity.getRecommendedDidCredentials', params, undefined, opts);
    }
    refreshIdentity(data, opts) {
        return this._client.call('com.atproto.identity.refreshIdentity', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoIdentityRefreshIdentity.toKnownErr(e);
        });
    }
    requestPlcOperationSignature(data, opts) {
        return this._client.call('com.atproto.identity.requestPlcOperationSignature', opts?.qp, data, opts);
    }
    resolveDid(params, opts) {
        return this._client.call('com.atproto.identity.resolveDid', params, undefined, opts).catch((e)=>{
            throw ComAtprotoIdentityResolveDid.toKnownErr(e);
        });
    }
    resolveHandle(params, opts) {
        return this._client.call('com.atproto.identity.resolveHandle', params, undefined, opts).catch((e)=>{
            throw ComAtprotoIdentityResolveHandle.toKnownErr(e);
        });
    }
    resolveIdentity(params, opts) {
        return this._client.call('com.atproto.identity.resolveIdentity', params, undefined, opts).catch((e)=>{
            throw ComAtprotoIdentityResolveIdentity.toKnownErr(e);
        });
    }
    signPlcOperation(data, opts) {
        return this._client.call('com.atproto.identity.signPlcOperation', opts?.qp, data, opts);
    }
    submitPlcOperation(data, opts) {
        return this._client.call('com.atproto.identity.submitPlcOperation', opts?.qp, data, opts);
    }
    updateHandle(data, opts) {
        return this._client.call('com.atproto.identity.updateHandle', opts?.qp, data, opts);
    }
}
exports.ComAtprotoIdentityNS = ComAtprotoIdentityNS;
class ComAtprotoLabelNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    queryLabels(params, opts) {
        return this._client.call('com.atproto.label.queryLabels', params, undefined, opts);
    }
}
exports.ComAtprotoLabelNS = ComAtprotoLabelNS;
class ComAtprotoLexiconNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "schema", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.schema = new ComAtprotoLexiconSchemaRecord(client);
    }
}
exports.ComAtprotoLexiconNS = ComAtprotoLexiconNS;
class ComAtprotoLexiconSchemaRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'com.atproto.lexicon.schema',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'com.atproto.lexicon.schema',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'com.atproto.lexicon.schema';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'com.atproto.lexicon.schema',
            ...params
        }, {
            headers
        });
    }
}
exports.ComAtprotoLexiconSchemaRecord = ComAtprotoLexiconSchemaRecord;
class ComAtprotoModerationNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    createReport(data, opts) {
        return this._client.call('com.atproto.moderation.createReport', opts?.qp, data, opts);
    }
}
exports.ComAtprotoModerationNS = ComAtprotoModerationNS;
class ComAtprotoRepoNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    applyWrites(data, opts) {
        return this._client.call('com.atproto.repo.applyWrites', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoRepoApplyWrites.toKnownErr(e);
        });
    }
    createRecord(data, opts) {
        return this._client.call('com.atproto.repo.createRecord', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoRepoCreateRecord.toKnownErr(e);
        });
    }
    deleteRecord(data, opts) {
        return this._client.call('com.atproto.repo.deleteRecord', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoRepoDeleteRecord.toKnownErr(e);
        });
    }
    describeRepo(params, opts) {
        return this._client.call('com.atproto.repo.describeRepo', params, undefined, opts);
    }
    getRecord(params, opts) {
        return this._client.call('com.atproto.repo.getRecord', params, undefined, opts).catch((e)=>{
            throw ComAtprotoRepoGetRecord.toKnownErr(e);
        });
    }
    importRepo(data, opts) {
        return this._client.call('com.atproto.repo.importRepo', opts?.qp, data, opts);
    }
    listMissingBlobs(params, opts) {
        return this._client.call('com.atproto.repo.listMissingBlobs', params, undefined, opts);
    }
    listRecords(params, opts) {
        return this._client.call('com.atproto.repo.listRecords', params, undefined, opts);
    }
    putRecord(data, opts) {
        return this._client.call('com.atproto.repo.putRecord', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoRepoPutRecord.toKnownErr(e);
        });
    }
    uploadBlob(data, opts) {
        return this._client.call('com.atproto.repo.uploadBlob', opts?.qp, data, opts);
    }
}
exports.ComAtprotoRepoNS = ComAtprotoRepoNS;
class ComAtprotoServerNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    activateAccount(data, opts) {
        return this._client.call('com.atproto.server.activateAccount', opts?.qp, data, opts);
    }
    checkAccountStatus(params, opts) {
        return this._client.call('com.atproto.server.checkAccountStatus', params, undefined, opts);
    }
    confirmEmail(data, opts) {
        return this._client.call('com.atproto.server.confirmEmail', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoServerConfirmEmail.toKnownErr(e);
        });
    }
    createAccount(data, opts) {
        return this._client.call('com.atproto.server.createAccount', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoServerCreateAccount.toKnownErr(e);
        });
    }
    createAppPassword(data, opts) {
        return this._client.call('com.atproto.server.createAppPassword', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoServerCreateAppPassword.toKnownErr(e);
        });
    }
    createInviteCode(data, opts) {
        return this._client.call('com.atproto.server.createInviteCode', opts?.qp, data, opts);
    }
    createInviteCodes(data, opts) {
        return this._client.call('com.atproto.server.createInviteCodes', opts?.qp, data, opts);
    }
    createSession(data, opts) {
        return this._client.call('com.atproto.server.createSession', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoServerCreateSession.toKnownErr(e);
        });
    }
    deactivateAccount(data, opts) {
        return this._client.call('com.atproto.server.deactivateAccount', opts?.qp, data, opts);
    }
    deleteAccount(data, opts) {
        return this._client.call('com.atproto.server.deleteAccount', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoServerDeleteAccount.toKnownErr(e);
        });
    }
    deleteSession(data, opts) {
        return this._client.call('com.atproto.server.deleteSession', opts?.qp, data, opts);
    }
    describeServer(params, opts) {
        return this._client.call('com.atproto.server.describeServer', params, undefined, opts);
    }
    getAccountInviteCodes(params, opts) {
        return this._client.call('com.atproto.server.getAccountInviteCodes', params, undefined, opts).catch((e)=>{
            throw ComAtprotoServerGetAccountInviteCodes.toKnownErr(e);
        });
    }
    getServiceAuth(params, opts) {
        return this._client.call('com.atproto.server.getServiceAuth', params, undefined, opts).catch((e)=>{
            throw ComAtprotoServerGetServiceAuth.toKnownErr(e);
        });
    }
    getSession(params, opts) {
        return this._client.call('com.atproto.server.getSession', params, undefined, opts);
    }
    listAppPasswords(params, opts) {
        return this._client.call('com.atproto.server.listAppPasswords', params, undefined, opts).catch((e)=>{
            throw ComAtprotoServerListAppPasswords.toKnownErr(e);
        });
    }
    refreshSession(data, opts) {
        return this._client.call('com.atproto.server.refreshSession', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoServerRefreshSession.toKnownErr(e);
        });
    }
    requestAccountDelete(data, opts) {
        return this._client.call('com.atproto.server.requestAccountDelete', opts?.qp, data, opts);
    }
    requestEmailConfirmation(data, opts) {
        return this._client.call('com.atproto.server.requestEmailConfirmation', opts?.qp, data, opts);
    }
    requestEmailUpdate(data, opts) {
        return this._client.call('com.atproto.server.requestEmailUpdate', opts?.qp, data, opts);
    }
    requestPasswordReset(data, opts) {
        return this._client.call('com.atproto.server.requestPasswordReset', opts?.qp, data, opts);
    }
    reserveSigningKey(data, opts) {
        return this._client.call('com.atproto.server.reserveSigningKey', opts?.qp, data, opts);
    }
    resetPassword(data, opts) {
        return this._client.call('com.atproto.server.resetPassword', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoServerResetPassword.toKnownErr(e);
        });
    }
    revokeAppPassword(data, opts) {
        return this._client.call('com.atproto.server.revokeAppPassword', opts?.qp, data, opts);
    }
    updateEmail(data, opts) {
        return this._client.call('com.atproto.server.updateEmail', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoServerUpdateEmail.toKnownErr(e);
        });
    }
}
exports.ComAtprotoServerNS = ComAtprotoServerNS;
class ComAtprotoSyncNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    getBlob(params, opts) {
        return this._client.call('com.atproto.sync.getBlob', params, undefined, opts).catch((e)=>{
            throw ComAtprotoSyncGetBlob.toKnownErr(e);
        });
    }
    getBlocks(params, opts) {
        return this._client.call('com.atproto.sync.getBlocks', params, undefined, opts).catch((e)=>{
            throw ComAtprotoSyncGetBlocks.toKnownErr(e);
        });
    }
    getCheckout(params, opts) {
        return this._client.call('com.atproto.sync.getCheckout', params, undefined, opts);
    }
    getHead(params, opts) {
        return this._client.call('com.atproto.sync.getHead', params, undefined, opts).catch((e)=>{
            throw ComAtprotoSyncGetHead.toKnownErr(e);
        });
    }
    getHostStatus(params, opts) {
        return this._client.call('com.atproto.sync.getHostStatus', params, undefined, opts).catch((e)=>{
            throw ComAtprotoSyncGetHostStatus.toKnownErr(e);
        });
    }
    getLatestCommit(params, opts) {
        return this._client.call('com.atproto.sync.getLatestCommit', params, undefined, opts).catch((e)=>{
            throw ComAtprotoSyncGetLatestCommit.toKnownErr(e);
        });
    }
    getRecord(params, opts) {
        return this._client.call('com.atproto.sync.getRecord', params, undefined, opts).catch((e)=>{
            throw ComAtprotoSyncGetRecord.toKnownErr(e);
        });
    }
    getRepo(params, opts) {
        return this._client.call('com.atproto.sync.getRepo', params, undefined, opts).catch((e)=>{
            throw ComAtprotoSyncGetRepo.toKnownErr(e);
        });
    }
    getRepoStatus(params, opts) {
        return this._client.call('com.atproto.sync.getRepoStatus', params, undefined, opts).catch((e)=>{
            throw ComAtprotoSyncGetRepoStatus.toKnownErr(e);
        });
    }
    listBlobs(params, opts) {
        return this._client.call('com.atproto.sync.listBlobs', params, undefined, opts).catch((e)=>{
            throw ComAtprotoSyncListBlobs.toKnownErr(e);
        });
    }
    listHosts(params, opts) {
        return this._client.call('com.atproto.sync.listHosts', params, undefined, opts);
    }
    listRepos(params, opts) {
        return this._client.call('com.atproto.sync.listRepos', params, undefined, opts);
    }
    listReposByCollection(params, opts) {
        return this._client.call('com.atproto.sync.listReposByCollection', params, undefined, opts);
    }
    notifyOfUpdate(data, opts) {
        return this._client.call('com.atproto.sync.notifyOfUpdate', opts?.qp, data, opts);
    }
    requestCrawl(data, opts) {
        return this._client.call('com.atproto.sync.requestCrawl', opts?.qp, data, opts).catch((e)=>{
            throw ComAtprotoSyncRequestCrawl.toKnownErr(e);
        });
    }
}
exports.ComAtprotoSyncNS = ComAtprotoSyncNS;
class ComAtprotoTempNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    addReservedHandle(data, opts) {
        return this._client.call('com.atproto.temp.addReservedHandle', opts?.qp, data, opts);
    }
    checkSignupQueue(params, opts) {
        return this._client.call('com.atproto.temp.checkSignupQueue', params, undefined, opts);
    }
    fetchLabels(params, opts) {
        return this._client.call('com.atproto.temp.fetchLabels', params, undefined, opts);
    }
    requestPhoneVerification(data, opts) {
        return this._client.call('com.atproto.temp.requestPhoneVerification', opts?.qp, data, opts);
    }
}
exports.ComAtprotoTempNS = ComAtprotoTempNS;
class AppNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "bsky", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.bsky = new AppBskyNS(client);
    }
}
exports.AppNS = AppNS;
class AppBskyNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "actor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "embed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "feed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "graph", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "labeler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "notification", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "richtext", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "unspecced", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "video", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.actor = new AppBskyActorNS(client);
        this.embed = new AppBskyEmbedNS(client);
        this.feed = new AppBskyFeedNS(client);
        this.graph = new AppBskyGraphNS(client);
        this.labeler = new AppBskyLabelerNS(client);
        this.notification = new AppBskyNotificationNS(client);
        this.richtext = new AppBskyRichtextNS(client);
        this.unspecced = new AppBskyUnspeccedNS(client);
        this.video = new AppBskyVideoNS(client);
    }
}
exports.AppBskyNS = AppBskyNS;
class AppBskyActorNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "profile", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.profile = new AppBskyActorProfileRecord(client);
        this.status = new AppBskyActorStatusRecord(client);
    }
    getPreferences(params, opts) {
        return this._client.call('app.bsky.actor.getPreferences', params, undefined, opts);
    }
    getProfile(params, opts) {
        return this._client.call('app.bsky.actor.getProfile', params, undefined, opts);
    }
    getProfiles(params, opts) {
        return this._client.call('app.bsky.actor.getProfiles', params, undefined, opts);
    }
    getSuggestions(params, opts) {
        return this._client.call('app.bsky.actor.getSuggestions', params, undefined, opts);
    }
    putPreferences(data, opts) {
        return this._client.call('app.bsky.actor.putPreferences', opts?.qp, data, opts);
    }
    searchActors(params, opts) {
        return this._client.call('app.bsky.actor.searchActors', params, undefined, opts);
    }
    searchActorsTypeahead(params, opts) {
        return this._client.call('app.bsky.actor.searchActorsTypeahead', params, undefined, opts);
    }
}
exports.AppBskyActorNS = AppBskyActorNS;
class AppBskyActorProfileRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.actor.profile',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.actor.profile',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'app.bsky.actor.profile';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            rkey: 'self',
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.actor.profile',
            ...params
        }, {
            headers
        });
    }
}
exports.AppBskyActorProfileRecord = AppBskyActorProfileRecord;
class AppBskyActorStatusRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.actor.status',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.actor.status',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'app.bsky.actor.status';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            rkey: 'self',
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.actor.status',
            ...params
        }, {
            headers
        });
    }
}
exports.AppBskyActorStatusRecord = AppBskyActorStatusRecord;
class AppBskyEmbedNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
}
exports.AppBskyEmbedNS = AppBskyEmbedNS;
class AppBskyFeedNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "generator", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "like", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "post", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "postgate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "repost", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "threadgate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.generator = new AppBskyFeedGeneratorRecord(client);
        this.like = new AppBskyFeedLikeRecord(client);
        this.post = new AppBskyFeedPostRecord(client);
        this.postgate = new AppBskyFeedPostgateRecord(client);
        this.repost = new AppBskyFeedRepostRecord(client);
        this.threadgate = new AppBskyFeedThreadgateRecord(client);
    }
    describeFeedGenerator(params, opts) {
        return this._client.call('app.bsky.feed.describeFeedGenerator', params, undefined, opts);
    }
    getActorFeeds(params, opts) {
        return this._client.call('app.bsky.feed.getActorFeeds', params, undefined, opts);
    }
    getActorLikes(params, opts) {
        return this._client.call('app.bsky.feed.getActorLikes', params, undefined, opts).catch((e)=>{
            throw AppBskyFeedGetActorLikes.toKnownErr(e);
        });
    }
    getAuthorFeed(params, opts) {
        return this._client.call('app.bsky.feed.getAuthorFeed', params, undefined, opts).catch((e)=>{
            throw AppBskyFeedGetAuthorFeed.toKnownErr(e);
        });
    }
    getFeed(params, opts) {
        return this._client.call('app.bsky.feed.getFeed', params, undefined, opts).catch((e)=>{
            throw AppBskyFeedGetFeed.toKnownErr(e);
        });
    }
    getFeedGenerator(params, opts) {
        return this._client.call('app.bsky.feed.getFeedGenerator', params, undefined, opts);
    }
    getFeedGenerators(params, opts) {
        return this._client.call('app.bsky.feed.getFeedGenerators', params, undefined, opts);
    }
    getFeedSkeleton(params, opts) {
        return this._client.call('app.bsky.feed.getFeedSkeleton', params, undefined, opts).catch((e)=>{
            throw AppBskyFeedGetFeedSkeleton.toKnownErr(e);
        });
    }
    getLikes(params, opts) {
        return this._client.call('app.bsky.feed.getLikes', params, undefined, opts);
    }
    getListFeed(params, opts) {
        return this._client.call('app.bsky.feed.getListFeed', params, undefined, opts).catch((e)=>{
            throw AppBskyFeedGetListFeed.toKnownErr(e);
        });
    }
    getPosts(params, opts) {
        return this._client.call('app.bsky.feed.getPosts', params, undefined, opts);
    }
    getPostThread(params, opts) {
        return this._client.call('app.bsky.feed.getPostThread', params, undefined, opts).catch((e)=>{
            throw AppBskyFeedGetPostThread.toKnownErr(e);
        });
    }
    getQuotes(params, opts) {
        return this._client.call('app.bsky.feed.getQuotes', params, undefined, opts);
    }
    getRepostedBy(params, opts) {
        return this._client.call('app.bsky.feed.getRepostedBy', params, undefined, opts);
    }
    getSuggestedFeeds(params, opts) {
        return this._client.call('app.bsky.feed.getSuggestedFeeds', params, undefined, opts);
    }
    getTimeline(params, opts) {
        return this._client.call('app.bsky.feed.getTimeline', params, undefined, opts);
    }
    searchPosts(params, opts) {
        return this._client.call('app.bsky.feed.searchPosts', params, undefined, opts).catch((e)=>{
            throw AppBskyFeedSearchPosts.toKnownErr(e);
        });
    }
    sendInteractions(data, opts) {
        return this._client.call('app.bsky.feed.sendInteractions', opts?.qp, data, opts);
    }
}
exports.AppBskyFeedNS = AppBskyFeedNS;
class AppBskyFeedGeneratorRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.feed.generator',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.feed.generator',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'app.bsky.feed.generator';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.feed.generator',
            ...params
        }, {
            headers
        });
    }
}
exports.AppBskyFeedGeneratorRecord = AppBskyFeedGeneratorRecord;
class AppBskyFeedLikeRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.feed.like',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.feed.like',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'app.bsky.feed.like';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.feed.like',
            ...params
        }, {
            headers
        });
    }
}
exports.AppBskyFeedLikeRecord = AppBskyFeedLikeRecord;
class AppBskyFeedPostRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.feed.post',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.feed.post',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'app.bsky.feed.post';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.feed.post',
            ...params
        }, {
            headers
        });
    }
}
exports.AppBskyFeedPostRecord = AppBskyFeedPostRecord;
class AppBskyFeedPostgateRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.feed.postgate',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.feed.postgate',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'app.bsky.feed.postgate';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.feed.postgate',
            ...params
        }, {
            headers
        });
    }
}
exports.AppBskyFeedPostgateRecord = AppBskyFeedPostgateRecord;
class AppBskyFeedRepostRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.feed.repost',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.feed.repost',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'app.bsky.feed.repost';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.feed.repost',
            ...params
        }, {
            headers
        });
    }
}
exports.AppBskyFeedRepostRecord = AppBskyFeedRepostRecord;
class AppBskyFeedThreadgateRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.feed.threadgate',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.feed.threadgate',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'app.bsky.feed.threadgate';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.feed.threadgate',
            ...params
        }, {
            headers
        });
    }
}
exports.AppBskyFeedThreadgateRecord = AppBskyFeedThreadgateRecord;
class AppBskyGraphNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "block", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "follow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "list", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "listblock", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "listitem", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "starterpack", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "verification", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.block = new AppBskyGraphBlockRecord(client);
        this.follow = new AppBskyGraphFollowRecord(client);
        this.list = new AppBskyGraphListRecord(client);
        this.listblock = new AppBskyGraphListblockRecord(client);
        this.listitem = new AppBskyGraphListitemRecord(client);
        this.starterpack = new AppBskyGraphStarterpackRecord(client);
        this.verification = new AppBskyGraphVerificationRecord(client);
    }
    getActorStarterPacks(params, opts) {
        return this._client.call('app.bsky.graph.getActorStarterPacks', params, undefined, opts);
    }
    getBlocks(params, opts) {
        return this._client.call('app.bsky.graph.getBlocks', params, undefined, opts);
    }
    getFollowers(params, opts) {
        return this._client.call('app.bsky.graph.getFollowers', params, undefined, opts);
    }
    getFollows(params, opts) {
        return this._client.call('app.bsky.graph.getFollows', params, undefined, opts);
    }
    getKnownFollowers(params, opts) {
        return this._client.call('app.bsky.graph.getKnownFollowers', params, undefined, opts);
    }
    getList(params, opts) {
        return this._client.call('app.bsky.graph.getList', params, undefined, opts);
    }
    getListBlocks(params, opts) {
        return this._client.call('app.bsky.graph.getListBlocks', params, undefined, opts);
    }
    getListMutes(params, opts) {
        return this._client.call('app.bsky.graph.getListMutes', params, undefined, opts);
    }
    getLists(params, opts) {
        return this._client.call('app.bsky.graph.getLists', params, undefined, opts);
    }
    getMutes(params, opts) {
        return this._client.call('app.bsky.graph.getMutes', params, undefined, opts);
    }
    getRelationships(params, opts) {
        return this._client.call('app.bsky.graph.getRelationships', params, undefined, opts).catch((e)=>{
            throw AppBskyGraphGetRelationships.toKnownErr(e);
        });
    }
    getStarterPack(params, opts) {
        return this._client.call('app.bsky.graph.getStarterPack', params, undefined, opts);
    }
    getStarterPacks(params, opts) {
        return this._client.call('app.bsky.graph.getStarterPacks', params, undefined, opts);
    }
    getSuggestedFollowsByActor(params, opts) {
        return this._client.call('app.bsky.graph.getSuggestedFollowsByActor', params, undefined, opts);
    }
    muteActor(data, opts) {
        return this._client.call('app.bsky.graph.muteActor', opts?.qp, data, opts);
    }
    muteActorList(data, opts) {
        return this._client.call('app.bsky.graph.muteActorList', opts?.qp, data, opts);
    }
    muteThread(data, opts) {
        return this._client.call('app.bsky.graph.muteThread', opts?.qp, data, opts);
    }
    searchStarterPacks(params, opts) {
        return this._client.call('app.bsky.graph.searchStarterPacks', params, undefined, opts);
    }
    unmuteActor(data, opts) {
        return this._client.call('app.bsky.graph.unmuteActor', opts?.qp, data, opts);
    }
    unmuteActorList(data, opts) {
        return this._client.call('app.bsky.graph.unmuteActorList', opts?.qp, data, opts);
    }
    unmuteThread(data, opts) {
        return this._client.call('app.bsky.graph.unmuteThread', opts?.qp, data, opts);
    }
}
exports.AppBskyGraphNS = AppBskyGraphNS;
class AppBskyGraphBlockRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.graph.block',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.graph.block',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'app.bsky.graph.block';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.graph.block',
            ...params
        }, {
            headers
        });
    }
}
exports.AppBskyGraphBlockRecord = AppBskyGraphBlockRecord;
class AppBskyGraphFollowRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.graph.follow',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.graph.follow',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'app.bsky.graph.follow';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.graph.follow',
            ...params
        }, {
            headers
        });
    }
}
exports.AppBskyGraphFollowRecord = AppBskyGraphFollowRecord;
class AppBskyGraphListRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.graph.list',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.graph.list',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'app.bsky.graph.list';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.graph.list',
            ...params
        }, {
            headers
        });
    }
}
exports.AppBskyGraphListRecord = AppBskyGraphListRecord;
class AppBskyGraphListblockRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.graph.listblock',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.graph.listblock',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'app.bsky.graph.listblock';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.graph.listblock',
            ...params
        }, {
            headers
        });
    }
}
exports.AppBskyGraphListblockRecord = AppBskyGraphListblockRecord;
class AppBskyGraphListitemRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.graph.listitem',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.graph.listitem',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'app.bsky.graph.listitem';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.graph.listitem',
            ...params
        }, {
            headers
        });
    }
}
exports.AppBskyGraphListitemRecord = AppBskyGraphListitemRecord;
class AppBskyGraphStarterpackRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.graph.starterpack',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.graph.starterpack',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'app.bsky.graph.starterpack';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.graph.starterpack',
            ...params
        }, {
            headers
        });
    }
}
exports.AppBskyGraphStarterpackRecord = AppBskyGraphStarterpackRecord;
class AppBskyGraphVerificationRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.graph.verification',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.graph.verification',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'app.bsky.graph.verification';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.graph.verification',
            ...params
        }, {
            headers
        });
    }
}
exports.AppBskyGraphVerificationRecord = AppBskyGraphVerificationRecord;
class AppBskyLabelerNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "service", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.service = new AppBskyLabelerServiceRecord(client);
    }
    getServices(params, opts) {
        return this._client.call('app.bsky.labeler.getServices', params, undefined, opts);
    }
}
exports.AppBskyLabelerNS = AppBskyLabelerNS;
class AppBskyLabelerServiceRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'app.bsky.labeler.service',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'app.bsky.labeler.service',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'app.bsky.labeler.service';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            rkey: 'self',
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'app.bsky.labeler.service',
            ...params
        }, {
            headers
        });
    }
}
exports.AppBskyLabelerServiceRecord = AppBskyLabelerServiceRecord;
class AppBskyNotificationNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    getUnreadCount(params, opts) {
        return this._client.call('app.bsky.notification.getUnreadCount', params, undefined, opts);
    }
    listNotifications(params, opts) {
        return this._client.call('app.bsky.notification.listNotifications', params, undefined, opts);
    }
    putPreferences(data, opts) {
        return this._client.call('app.bsky.notification.putPreferences', opts?.qp, data, opts);
    }
    registerPush(data, opts) {
        return this._client.call('app.bsky.notification.registerPush', opts?.qp, data, opts);
    }
    updateSeen(data, opts) {
        return this._client.call('app.bsky.notification.updateSeen', opts?.qp, data, opts);
    }
}
exports.AppBskyNotificationNS = AppBskyNotificationNS;
class AppBskyRichtextNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
}
exports.AppBskyRichtextNS = AppBskyRichtextNS;
class AppBskyUnspeccedNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    getConfig(params, opts) {
        return this._client.call('app.bsky.unspecced.getConfig', params, undefined, opts);
    }
    getPopularFeedGenerators(params, opts) {
        return this._client.call('app.bsky.unspecced.getPopularFeedGenerators', params, undefined, opts);
    }
    getSuggestedFeeds(params, opts) {
        return this._client.call('app.bsky.unspecced.getSuggestedFeeds', params, undefined, opts);
    }
    getSuggestedFeedsSkeleton(params, opts) {
        return this._client.call('app.bsky.unspecced.getSuggestedFeedsSkeleton', params, undefined, opts);
    }
    getSuggestedStarterPacks(params, opts) {
        return this._client.call('app.bsky.unspecced.getSuggestedStarterPacks', params, undefined, opts);
    }
    getSuggestedStarterPacksSkeleton(params, opts) {
        return this._client.call('app.bsky.unspecced.getSuggestedStarterPacksSkeleton', params, undefined, opts);
    }
    getSuggestedUsers(params, opts) {
        return this._client.call('app.bsky.unspecced.getSuggestedUsers', params, undefined, opts);
    }
    getSuggestedUsersSkeleton(params, opts) {
        return this._client.call('app.bsky.unspecced.getSuggestedUsersSkeleton', params, undefined, opts);
    }
    getSuggestionsSkeleton(params, opts) {
        return this._client.call('app.bsky.unspecced.getSuggestionsSkeleton', params, undefined, opts);
    }
    getTaggedSuggestions(params, opts) {
        return this._client.call('app.bsky.unspecced.getTaggedSuggestions', params, undefined, opts);
    }
    getTrendingTopics(params, opts) {
        return this._client.call('app.bsky.unspecced.getTrendingTopics', params, undefined, opts);
    }
    getTrends(params, opts) {
        return this._client.call('app.bsky.unspecced.getTrends', params, undefined, opts);
    }
    getTrendsSkeleton(params, opts) {
        return this._client.call('app.bsky.unspecced.getTrendsSkeleton', params, undefined, opts);
    }
    searchActorsSkeleton(params, opts) {
        return this._client.call('app.bsky.unspecced.searchActorsSkeleton', params, undefined, opts).catch((e)=>{
            throw AppBskyUnspeccedSearchActorsSkeleton.toKnownErr(e);
        });
    }
    searchPostsSkeleton(params, opts) {
        return this._client.call('app.bsky.unspecced.searchPostsSkeleton', params, undefined, opts).catch((e)=>{
            throw AppBskyUnspeccedSearchPostsSkeleton.toKnownErr(e);
        });
    }
    searchStarterPacksSkeleton(params, opts) {
        return this._client.call('app.bsky.unspecced.searchStarterPacksSkeleton', params, undefined, opts).catch((e)=>{
            throw AppBskyUnspeccedSearchStarterPacksSkeleton.toKnownErr(e);
        });
    }
}
exports.AppBskyUnspeccedNS = AppBskyUnspeccedNS;
class AppBskyVideoNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    getJobStatus(params, opts) {
        return this._client.call('app.bsky.video.getJobStatus', params, undefined, opts);
    }
    getUploadLimits(params, opts) {
        return this._client.call('app.bsky.video.getUploadLimits', params, undefined, opts);
    }
    uploadVideo(data, opts) {
        return this._client.call('app.bsky.video.uploadVideo', opts?.qp, data, opts);
    }
}
exports.AppBskyVideoNS = AppBskyVideoNS;
class ChatNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "bsky", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.bsky = new ChatBskyNS(client);
    }
}
exports.ChatNS = ChatNS;
class ChatBskyNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "actor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "convo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "moderation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.actor = new ChatBskyActorNS(client);
        this.convo = new ChatBskyConvoNS(client);
        this.moderation = new ChatBskyModerationNS(client);
    }
}
exports.ChatBskyNS = ChatBskyNS;
class ChatBskyActorNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "declaration", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.declaration = new ChatBskyActorDeclarationRecord(client);
    }
    deleteAccount(data, opts) {
        return this._client.call('chat.bsky.actor.deleteAccount', opts?.qp, data, opts);
    }
    exportAccountData(params, opts) {
        return this._client.call('chat.bsky.actor.exportAccountData', params, undefined, opts);
    }
}
exports.ChatBskyActorNS = ChatBskyActorNS;
class ChatBskyActorDeclarationRecord {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    async list(params) {
        const res = await this._client.call('com.atproto.repo.listRecords', {
            collection: 'chat.bsky.actor.declaration',
            ...params
        });
        return res.data;
    }
    async get(params) {
        const res = await this._client.call('com.atproto.repo.getRecord', {
            collection: 'chat.bsky.actor.declaration',
            ...params
        });
        return res.data;
    }
    async create(params, record, headers) {
        const collection = 'chat.bsky.actor.declaration';
        const res = await this._client.call('com.atproto.repo.createRecord', undefined, {
            collection,
            rkey: 'self',
            ...params,
            record: {
                ...record,
                $type: collection
            }
        }, {
            encoding: 'application/json',
            headers
        });
        return res.data;
    }
    async delete(params, headers) {
        await this._client.call('com.atproto.repo.deleteRecord', undefined, {
            collection: 'chat.bsky.actor.declaration',
            ...params
        }, {
            headers
        });
    }
}
exports.ChatBskyActorDeclarationRecord = ChatBskyActorDeclarationRecord;
class ChatBskyConvoNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    acceptConvo(data, opts) {
        return this._client.call('chat.bsky.convo.acceptConvo', opts?.qp, data, opts);
    }
    addReaction(data, opts) {
        return this._client.call('chat.bsky.convo.addReaction', opts?.qp, data, opts).catch((e)=>{
            throw ChatBskyConvoAddReaction.toKnownErr(e);
        });
    }
    deleteMessageForSelf(data, opts) {
        return this._client.call('chat.bsky.convo.deleteMessageForSelf', opts?.qp, data, opts);
    }
    getConvo(params, opts) {
        return this._client.call('chat.bsky.convo.getConvo', params, undefined, opts);
    }
    getConvoAvailability(params, opts) {
        return this._client.call('chat.bsky.convo.getConvoAvailability', params, undefined, opts);
    }
    getConvoForMembers(params, opts) {
        return this._client.call('chat.bsky.convo.getConvoForMembers', params, undefined, opts);
    }
    getLog(params, opts) {
        return this._client.call('chat.bsky.convo.getLog', params, undefined, opts);
    }
    getMessages(params, opts) {
        return this._client.call('chat.bsky.convo.getMessages', params, undefined, opts);
    }
    leaveConvo(data, opts) {
        return this._client.call('chat.bsky.convo.leaveConvo', opts?.qp, data, opts);
    }
    listConvos(params, opts) {
        return this._client.call('chat.bsky.convo.listConvos', params, undefined, opts);
    }
    muteConvo(data, opts) {
        return this._client.call('chat.bsky.convo.muteConvo', opts?.qp, data, opts);
    }
    removeReaction(data, opts) {
        return this._client.call('chat.bsky.convo.removeReaction', opts?.qp, data, opts).catch((e)=>{
            throw ChatBskyConvoRemoveReaction.toKnownErr(e);
        });
    }
    sendMessage(data, opts) {
        return this._client.call('chat.bsky.convo.sendMessage', opts?.qp, data, opts);
    }
    sendMessageBatch(data, opts) {
        return this._client.call('chat.bsky.convo.sendMessageBatch', opts?.qp, data, opts);
    }
    unmuteConvo(data, opts) {
        return this._client.call('chat.bsky.convo.unmuteConvo', opts?.qp, data, opts);
    }
    updateAllRead(data, opts) {
        return this._client.call('chat.bsky.convo.updateAllRead', opts?.qp, data, opts);
    }
    updateRead(data, opts) {
        return this._client.call('chat.bsky.convo.updateRead', opts?.qp, data, opts);
    }
}
exports.ChatBskyConvoNS = ChatBskyConvoNS;
class ChatBskyModerationNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    getActorMetadata(params, opts) {
        return this._client.call('chat.bsky.moderation.getActorMetadata', params, undefined, opts);
    }
    getMessageContext(params, opts) {
        return this._client.call('chat.bsky.moderation.getMessageContext', params, undefined, opts);
    }
    updateActorAccess(data, opts) {
        return this._client.call('chat.bsky.moderation.updateActorAccess', opts?.qp, data, opts);
    }
}
exports.ChatBskyModerationNS = ChatBskyModerationNS;
class ToolsNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "ozone", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.ozone = new ToolsOzoneNS(client);
    }
}
exports.ToolsNS = ToolsNS;
class ToolsOzoneNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "communication", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "hosting", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "moderation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "server", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "set", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "setting", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "signature", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "team", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "verification", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
        this.communication = new ToolsOzoneCommunicationNS(client);
        this.hosting = new ToolsOzoneHostingNS(client);
        this.moderation = new ToolsOzoneModerationNS(client);
        this.server = new ToolsOzoneServerNS(client);
        this.set = new ToolsOzoneSetNS(client);
        this.setting = new ToolsOzoneSettingNS(client);
        this.signature = new ToolsOzoneSignatureNS(client);
        this.team = new ToolsOzoneTeamNS(client);
        this.verification = new ToolsOzoneVerificationNS(client);
    }
}
exports.ToolsOzoneNS = ToolsOzoneNS;
class ToolsOzoneCommunicationNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    createTemplate(data, opts) {
        return this._client.call('tools.ozone.communication.createTemplate', opts?.qp, data, opts).catch((e)=>{
            throw ToolsOzoneCommunicationCreateTemplate.toKnownErr(e);
        });
    }
    deleteTemplate(data, opts) {
        return this._client.call('tools.ozone.communication.deleteTemplate', opts?.qp, data, opts);
    }
    listTemplates(params, opts) {
        return this._client.call('tools.ozone.communication.listTemplates', params, undefined, opts);
    }
    updateTemplate(data, opts) {
        return this._client.call('tools.ozone.communication.updateTemplate', opts?.qp, data, opts).catch((e)=>{
            throw ToolsOzoneCommunicationUpdateTemplate.toKnownErr(e);
        });
    }
}
exports.ToolsOzoneCommunicationNS = ToolsOzoneCommunicationNS;
class ToolsOzoneHostingNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    getAccountHistory(params, opts) {
        return this._client.call('tools.ozone.hosting.getAccountHistory', params, undefined, opts);
    }
}
exports.ToolsOzoneHostingNS = ToolsOzoneHostingNS;
class ToolsOzoneModerationNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    emitEvent(data, opts) {
        return this._client.call('tools.ozone.moderation.emitEvent', opts?.qp, data, opts).catch((e)=>{
            throw ToolsOzoneModerationEmitEvent.toKnownErr(e);
        });
    }
    getEvent(params, opts) {
        return this._client.call('tools.ozone.moderation.getEvent', params, undefined, opts);
    }
    getRecord(params, opts) {
        return this._client.call('tools.ozone.moderation.getRecord', params, undefined, opts).catch((e)=>{
            throw ToolsOzoneModerationGetRecord.toKnownErr(e);
        });
    }
    getRecords(params, opts) {
        return this._client.call('tools.ozone.moderation.getRecords', params, undefined, opts);
    }
    getRepo(params, opts) {
        return this._client.call('tools.ozone.moderation.getRepo', params, undefined, opts).catch((e)=>{
            throw ToolsOzoneModerationGetRepo.toKnownErr(e);
        });
    }
    getReporterStats(params, opts) {
        return this._client.call('tools.ozone.moderation.getReporterStats', params, undefined, opts);
    }
    getRepos(params, opts) {
        return this._client.call('tools.ozone.moderation.getRepos', params, undefined, opts);
    }
    getSubjects(params, opts) {
        return this._client.call('tools.ozone.moderation.getSubjects', params, undefined, opts);
    }
    queryEvents(params, opts) {
        return this._client.call('tools.ozone.moderation.queryEvents', params, undefined, opts);
    }
    queryStatuses(params, opts) {
        return this._client.call('tools.ozone.moderation.queryStatuses', params, undefined, opts);
    }
    searchRepos(params, opts) {
        return this._client.call('tools.ozone.moderation.searchRepos', params, undefined, opts);
    }
}
exports.ToolsOzoneModerationNS = ToolsOzoneModerationNS;
class ToolsOzoneServerNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    getConfig(params, opts) {
        return this._client.call('tools.ozone.server.getConfig', params, undefined, opts);
    }
}
exports.ToolsOzoneServerNS = ToolsOzoneServerNS;
class ToolsOzoneSetNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    addValues(data, opts) {
        return this._client.call('tools.ozone.set.addValues', opts?.qp, data, opts);
    }
    deleteSet(data, opts) {
        return this._client.call('tools.ozone.set.deleteSet', opts?.qp, data, opts).catch((e)=>{
            throw ToolsOzoneSetDeleteSet.toKnownErr(e);
        });
    }
    deleteValues(data, opts) {
        return this._client.call('tools.ozone.set.deleteValues', opts?.qp, data, opts).catch((e)=>{
            throw ToolsOzoneSetDeleteValues.toKnownErr(e);
        });
    }
    getValues(params, opts) {
        return this._client.call('tools.ozone.set.getValues', params, undefined, opts).catch((e)=>{
            throw ToolsOzoneSetGetValues.toKnownErr(e);
        });
    }
    querySets(params, opts) {
        return this._client.call('tools.ozone.set.querySets', params, undefined, opts);
    }
    upsertSet(data, opts) {
        return this._client.call('tools.ozone.set.upsertSet', opts?.qp, data, opts);
    }
}
exports.ToolsOzoneSetNS = ToolsOzoneSetNS;
class ToolsOzoneSettingNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    listOptions(params, opts) {
        return this._client.call('tools.ozone.setting.listOptions', params, undefined, opts);
    }
    removeOptions(data, opts) {
        return this._client.call('tools.ozone.setting.removeOptions', opts?.qp, data, opts);
    }
    upsertOption(data, opts) {
        return this._client.call('tools.ozone.setting.upsertOption', opts?.qp, data, opts);
    }
}
exports.ToolsOzoneSettingNS = ToolsOzoneSettingNS;
class ToolsOzoneSignatureNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    findCorrelation(params, opts) {
        return this._client.call('tools.ozone.signature.findCorrelation', params, undefined, opts);
    }
    findRelatedAccounts(params, opts) {
        return this._client.call('tools.ozone.signature.findRelatedAccounts', params, undefined, opts);
    }
    searchAccounts(params, opts) {
        return this._client.call('tools.ozone.signature.searchAccounts', params, undefined, opts);
    }
}
exports.ToolsOzoneSignatureNS = ToolsOzoneSignatureNS;
class ToolsOzoneTeamNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    addMember(data, opts) {
        return this._client.call('tools.ozone.team.addMember', opts?.qp, data, opts).catch((e)=>{
            throw ToolsOzoneTeamAddMember.toKnownErr(e);
        });
    }
    deleteMember(data, opts) {
        return this._client.call('tools.ozone.team.deleteMember', opts?.qp, data, opts).catch((e)=>{
            throw ToolsOzoneTeamDeleteMember.toKnownErr(e);
        });
    }
    listMembers(params, opts) {
        return this._client.call('tools.ozone.team.listMembers', params, undefined, opts);
    }
    updateMember(data, opts) {
        return this._client.call('tools.ozone.team.updateMember', opts?.qp, data, opts).catch((e)=>{
            throw ToolsOzoneTeamUpdateMember.toKnownErr(e);
        });
    }
}
exports.ToolsOzoneTeamNS = ToolsOzoneTeamNS;
class ToolsOzoneVerificationNS {
    constructor(client){
        Object.defineProperty(this, "_client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._client = client;
    }
    grantVerifications(data, opts) {
        return this._client.call('tools.ozone.verification.grantVerifications', opts?.qp, data, opts);
    }
    listVerifications(params, opts) {
        return this._client.call('tools.ozone.verification.listVerifications', params, undefined, opts);
    }
    revokeVerifications(data, opts) {
        return this._client.call('tools.ozone.verification.revokeVerifications', opts?.qp, data, opts);
    }
}
exports.ToolsOzoneVerificationNS = ToolsOzoneVerificationNS;

},{"aa499ff07342141b":"iLJWL","44e342f747e39c4":"b1XzS","22ddbbbee6c77f5":"anhFn","e05cd095f980d13c":"81vnL","9614a2deaa4e89ac":"ewOfY","5a43379675ac0442":"eGDUf","665710e24853268":"lF9iR","16720102235ddbcf":"kzOJs","50deb65dcaeacf01":"eACxP","e34a7a0eb53af96d":"1s2mW","65c70857844a42f7":"g5uuD","819f0218655b5623":"ayvnR","bc6885deb341e139":"b2E1E","abc089c9c37ba856":"70n7E","9bfb61b6ab7a19ff":"hXikj","436334929b8d7001":"8TcqV","89f03786387dc9e5":"5EelL","442c0dada1294917":"kTzgq","91fbe5f4fa086736":"crZy7","c4c2f798101bea9a":"gh56m","7764beddb700606b":"bfsUT","dd844f562eabb3db":"6DuqX","bbdc9cc70d77a100":"aGqST","734960255a23cc3e":"cqNfG","162d6d44d8d84ec":"026xj","8c928a320db0814e":"a3i4V","8ea23a970bc6255b":"5ALfC","5eb89f75a1cd88ae":"43wu8","ea366419c211ff46":"h1ue8","3ef580dbcc401365":"04ssc","42a85ea4dbffe6c9":"gVYtp","b2471611274aac32":"92L0p","fd7c8aa2c694804a":"eNzYs","401516c22f956962":"6hHOu","77a5ec40630b3fb5":"c7QDI","1918445165948e32":"8tppF","db71e6006dad05f1":"ktAzZ","9b6a68438287b415":"bLQiX","b139724c57cc3172":"kf906","dfdaae1ee3a5f26f":"amdDT","94d4684defe0b5bb":"ge1Qy","9131fada34399a8c":"hLyTA","75fefb4c2f0a1b12":"cYa1B","2d527136b73eb335":"3JsiH","b2538c4708fca955":"doR08","654398be982ef271":"kHLes","9487e165b62ae00a":"15acz","26ed163de08d4095":"8CgBN","831548f4ae5008b7":"bj8bl","11c0b4dd2c120f3d":"epy6d","bc5316802603a82e":"78Ath","cc0b977b6eab91e7":"jQan7","93f3bca21fb4a301":"bvf5g","80ddea9bb6cf45bb":"aqsr0","e4aa8abf44ae6cc6":"aHoIN","1e9eb7923588584d":"9m7Gb","2af00aade016046c":"kPYCl","2d7d5f06df6005a":"6O8ZH","a2b781a5ee686cf0":"1Cfkq","c58d145201b7503b":"4odgp","73be8f4e5eafb98f":"aF1hp","2be4112a86abfab7":"eoQaP","bdbc4cb7c7df0bef":"gWQmG","6d17e9c0163b1016":"gIjIq","7d01e605b91ccc24":"jBQXw","99d3706224942e15":"6YqsM","1c95028e353603c7":"htqzg","3dcefef826c6c398":"22cEG","2b621671388d0d7a":"4z2D2","acd1ce3b0ab86c14":"jpyck","d4f03ff658e4f031":"4v5W8","2e212a7feefebb91":"ce8Lr","770e236f970c380e":"11eV5","ee078d787ceb7de":"5IJ3Y","3625bc11e5ac0038":"6Pz76","da2c6050a0c4f6d9":"ffjbJ","61e8064094772b54":"6VjD5","60db0ff7a1606201":"iMiw1","c2ffb5c1559ab923":"e0kFH","78303507eb00c5d4":"1YEbZ","9a1d272c114ffa38":"99xZt","6dadb3d22435b2a6":"lU9cS","696cf92589c51df5":"3DcY9","2e58e501e0d72af5":"ddXNi","ebb45a868bdcb44b":"3THg2","60177756828b50a7":"47wwr","a61bbd6b78abd873":"hNG1j","c3167a0d573835c0":"ciMfw","6762310893af66e0":"6VJ6M","6aa00ee88e552c43":"fTGn4","2d4cf29153faff76":"inla8","de61c249d7e26cd":"2tuP2","cb0d7b0fdf5edfde":"3K1TB","b20286f1a9c118ad":"3ktdb","59ba64829927a362":"3Zxic","fa1257c166d91daf":"j6IGd","69418063631a9050":"lLvfw","62b5bff5bacb0d31":"hQb3B","861fe9b235e7cabd":"iAKAC","382ba7481215dd95":"9uLP2","708ffb4d61cf8cd8":"lcjr1","647cd563596650e9":"7Ctmc","649bb1211a0ad9c4":"eFKte","b0a66a3246c355d6":"e5LcV","cc764dd955beb301":"cPRVU","6cff89ea25834c6e":"9Tgm5","a2e671155a3ac19f":"dico9","aefc01693e94f8ac":"ikEvw","4bfcda10189cbd96":"59xD5","b5f8c8e3e728eeb4":"6D4ag","e69965d3c6157e92":"ayGV8","f018bb59415f3185":"lD7AR","8e537f9b2aaca9fa":"inMEP","53cbd0334823d6b3":"1dxCs","d847e52895a0beaf":"hK5E8","ee500f6e8a152ff6":"39azS","1731a210e0c39943":"h84N5","1fbfc5e6c5d245ac":"8lKGI","92c84ac687727ede":"cbFwe","260c569b086ffae":"gaXHJ","ee8481a0e5e34955":"jiy3Z","7a42e54cd99392ae":"4WsiG","8dd1f3f1787f8fd6":"kCRw4","acd4b4aa56feec19":"87CNn","31f71483cda1d19e":"cOeia","e010ed06d366a9a2":"gxfTS","f920de20bdf2c204":"7n5ao","dedc71456e245185":"fRyIf","a36df4c094c4232f":"bVerh","b3bc8e82e328d003":"hVO1m","2358853161012498":"bC2nz","d094e044912a528d":"4RsLv","eca21a4b6c2e6a44":"3itCs","8437c7125ae434b6":"jMuO8","796771fb13ccb4b2":"s1c8e","75d8a323c6f414ab":"2qoFb","56ea48347f4837f3":"bHvhB","918a8bef3559336f":"7ojas","9c700b7cb7a60688":"ecR7e","1eadf766847b7d8d":"8vi3G","5a3078cb842f18c7":"kEK5h","595749db27402dfc":"gP7uJ","73a711b0c7039ea1":"7UwBu","c5572b48e73ecccf":"cwt8Y","dc13f9ba8224e244":"2ls66","96d1c41f592963ed":"gtFRw","bb1d8c181092adac":"4iFcB","5db7e5840de07849":"6q0DB","a888b587fe6b51d":"569dG","b96e8b7aa95e3120":"6kfUa","16a698ce2bb7f6e6":"kIbyV","7c8dc90b3c3244b4":"ejqQ2","55ee1493ac8afa05":"f7qcC","38c41493d611ce32":"6uRQ1","4a0512b11b4fc178":"jdTbQ","8bac8fb9b829c272":"8T7w0","78db06c65c9137bf":"2nRjs","65b1db326a3829eb":"bMte8","a774faef9519d904":"lEoB8","24ff2e6a5be38067":"6Z74c","da9fe6cf9ff7f19b":"f9DZe","248755df88d695c1":"d3RIo","bedbd2d8834722bf":"a7MXq","e0e281879a4699ca":"5YOXY","7b6ef22d58711ed8":"9DGer","3279d98a94c474dd":"8j87R","41166094ee8548b2":"jsFVo","5640b25f76fc6a0d":"hycr8","d608378496e3327f":"kde8N","df96166e0688dd87":"19cTg","6134cc0624e08c35":"1wJkr","41d574984a2cdae2":"kjXGN","bca1981d89d3277":"iYnNy","549f39b49ef06d47":"O5nB9","6f63bfe4cac627aa":"kKfxH","132a14053a0f82d8":"kOgeY","1f44a0685739d2ba":"2Kllf","71d2dff944327d77":"6KacU","ba2b82a85918e4e0":"eCk7e","e08b1f11618f4b97":"dchcT","adccc6326e83ef33":"923xZ","32206e4eefbbcea":"lp1se","4ff06519c2ae3640":"3kti9","21c3403b83d0f67e":"5C49o","39aea3086f9058fd":"jVvCS","6261b652c4a56e22":"kOd6J","cda204366e4971f":"5RC2Z","a85207b7ebcebd4f":"3Eppf","f407ccbc4d0ff740":"403AH","de97bd1cec6bb621":"2pzck","1eee57b6e5818b6b":"dEGqi","ec36852d17d7cdbd":"ktI2q","bf8d41f1b35bf":"gz0ZI","9d7ef18f316e10ab":"a9hlo","fa5e4afb24c66b54":"212Ar","9fde476ca6aa62d4":"3xkSX","7d868c40aec21289":"9UFQS","b86ab2476400dafd":"hlANj","bc0e846ee4027516":"lCVax","2f93ddb536325bbf":"ebJ4D","9af85ae6e1bdb474":"8C7Q9","f053efafe45246a3":"ystqi","fb3d26c2266e19b7":"3Q3ZU","2e4330166d836d60":"lPrEW","a71decc802921a48":"kSC4Q","deffddc76599ade1":"PhJVA","a7cc36bb600cbd30":"3bV9r","7e63f2140262084":"4PJJP","7a2b573177295ca5":"6sOtl","133e9bd594e9d270":"8D272","5f19947977b8603b":"2CiqN","16dc1591aa6f6f9c":"2TneQ","63efb1da281d6686":"g5pz7","8d82e0480bac154f":"2Pg3V","19ea7217b924a05b":"1oE7v","ddea7dd993c126d0":"84EGq","2381e2d9a71a7db4":"ddDA9","93feacca24039585":"iL8F3","3cded54d0bf64088":"11tiJ","f73f7189bb9498dd":"kSxZd","f30d32c95c7ef0b":"cBRIb","53496e4167f7616f":"600yv","3d32a7ba9a28a7ee":"6lYjl","481d5db0700dc67d":"vS2Vy","1919859f64973ae9":"3ju0Y","c2bec5de2cd9ff7c":"cLagr","37402751cbec1372":"fgk2c","f4362a51aeab986c":"1pwKP","81acf63028fa81e7":"ksVqn","971cb302810a79d5":"4FJve","9d45c5ce7c4b667":"bmigo","8e0af4ad9cfc7c5e":"lzow7","d123e3181f860b65":"1pHhQ","3987238ce716e1ba":"krpEv","c38fac065e86ff5a":"lNOnQ","fb7d120ab57783df":"19Yc2","7c2e128c89db969f":"1Z51I","eb19effbad0f028a":"jfA2D","a79666c3e2da75d9":"41GDY","d48c633decf55ca0":"iSnef","fdb9d8b2215e4a5f":"2USGS","17fb63d2ba0a45e":"c2x9C","f43fd24afd5fa435":"81IY3","109b28c26c1398bd":"hm9l9","61bee0bd608ca9b8":"Pg7Ki","e80005b79787c321":"fdi2W","7c278aff488c98e8":"68p8a","32ab227ced4f49f6":"jz4Tb","f0d77d0df1493c21":"iCpTE","325a49ac2a2bc089":"a3B5q","3a65b0d274cb4378":"a7g8D","b645ad125b93320":"ijsSC","7cf3263b4df4ec23":"9yRds","b8e01f441508f48":"fM1DD","a99767a0523116e4":"4L55G","cbbf8ff990d0ab08":"ae30I","c782b6c3fa54f2a3":"eUX77","3d087ee55b099324":"66EYR","15e8db2922cfeb2d":"8BNqI","1cb579679fa3584b":"kaeuu","2e8ffc59de0e0c20":"egG3s","aae20e42d105e14a":"aDSXg"}],"iLJWL":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = this && this.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(require("a7541419cce05f71"), exports);
__exportStar(require("36d9de43771a37cf"), exports);
__exportStar(require("9f3b35f782a4ee29"), exports);
__exportStar(require("218b54c5687986c"), exports);
__exportStar(require("e8646a25068ef88f"), exports);
/* eslint-disable import/no-deprecated */ const client_1 = require("a7541419cce05f71");
/** @deprecated create a local {@link XrpcClient} instance instead */ const defaultInst = new client_1.Client();
exports.default = defaultInst; /* eslint-enable import/no-deprecated */ 

},{"a7541419cce05f71":"55fMV","36d9de43771a37cf":"hsadf","9f3b35f782a4ee29":"jPD5b","218b54c5687986c":"5ICtP","e8646a25068ef88f":"gQAZ0"}],"55fMV":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ServiceClient = exports.Client = void 0;
const lexicon_1 = require("a139231356be9638");
const util_1 = require("4058c3364726edab");
const xrpc_client_1 = require("7460c304bd200c72");
/** @deprecated Use {@link XrpcClient} instead */ class Client {
    constructor(){
        Object.defineProperty(this, "lex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new lexicon_1.Lexicons()
        });
    }
    /** @deprecated */ get fetch() {
        throw new Error('Client.fetch is no longer supported. Use an XrpcClient instead.');
    }
    /** @deprecated */ set fetch(_) {
        throw new Error('Client.fetch is no longer supported. Use an XrpcClient instead.');
    }
    // method calls
    //
    async call(serviceUri, methodNsid, params, data, opts) {
        return this.service(serviceUri).call(methodNsid, params, data, opts);
    }
    service(serviceUri) {
        return new ServiceClient(this, serviceUri);
    }
    // schemas
    // =
    addLexicon(doc) {
        this.lex.add(doc);
    }
    addLexicons(docs) {
        for (const doc of docs)this.addLexicon(doc);
    }
    removeLexicon(uri) {
        this.lex.remove(uri);
    }
}
exports.Client = Client;
/** @deprecated Use {@link XrpcClient} instead */ class ServiceClient extends xrpc_client_1.XrpcClient {
    constructor(baseClient, serviceUri){
        super(async (input, init)=>{
            const headers = (0, util_1.combineHeaders)(init.headers, Object.entries(this.headers));
            return fetch(new URL(input, this.uri), {
                ...init,
                headers
            });
        }, baseClient.lex);
        Object.defineProperty(this, "baseClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: baseClient
        });
        Object.defineProperty(this, "uri", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.uri = typeof serviceUri === 'string' ? new URL(serviceUri) : serviceUri;
    }
}
exports.ServiceClient = ServiceClient;

},{"a139231356be9638":"dXkdv","4058c3364726edab":"5ICtP","7460c304bd200c72":"gQAZ0"}],"5ICtP":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isErrorResponseBody = isErrorResponseBody;
exports.getMethodSchemaHTTPMethod = getMethodSchemaHTTPMethod;
exports.constructMethodCallUri = constructMethodCallUri;
exports.constructMethodCallUrl = constructMethodCallUrl;
exports.encodeQueryParam = encodeQueryParam;
exports.constructMethodCallHeaders = constructMethodCallHeaders;
exports.combineHeaders = combineHeaders;
exports.isBodyInit = isBodyInit;
exports.isIterable = isIterable;
exports.encodeMethodCallBody = encodeMethodCallBody;
exports.httpResponseBodyParse = httpResponseBodyParse;
const lexicon_1 = require("1cc54154d55fc177");
const types_1 = require("f614fe605977950e");
const ReadableStream = globalThis.ReadableStream || class {
    constructor(){
        // This anonymous class will never pass any "instanceof" check and cannot
        // be instantiated.
        throw new Error('ReadableStream is not supported in this environment');
    }
};
function isErrorResponseBody(v) {
    return types_1.errorResponseBody.safeParse(v).success;
}
function getMethodSchemaHTTPMethod(schema) {
    if (schema.type === 'procedure') return 'post';
    return 'get';
}
function constructMethodCallUri(nsid, schema, serviceUri, params) {
    const uri = new URL(constructMethodCallUrl(nsid, schema, params), serviceUri);
    return uri.toString();
}
function constructMethodCallUrl(nsid, schema, params) {
    const pathname = `/xrpc/${encodeURIComponent(nsid)}`;
    if (!params) return pathname;
    const searchParams = [];
    for (const [key, value] of Object.entries(params)){
        const paramSchema = schema.parameters?.properties?.[key];
        if (!paramSchema) throw new Error(`Invalid query parameter: ${key}`);
        if (value !== undefined) {
            if (paramSchema.type === 'array') {
                const values = Array.isArray(value) ? value : [
                    value
                ];
                for (const val of values)searchParams.push([
                    key,
                    encodeQueryParam(paramSchema.items.type, val)
                ]);
            } else searchParams.push([
                key,
                encodeQueryParam(paramSchema.type, value)
            ]);
        }
    }
    if (!searchParams.length) return pathname;
    return `${pathname}?${new URLSearchParams(searchParams).toString()}`;
}
function encodeQueryParam(type, value) {
    if (type === 'string' || type === 'unknown') return String(value);
    if (type === 'float') return String(Number(value));
    else if (type === 'integer') return String(Number(value) | 0);
    else if (type === 'boolean') return value ? 'true' : 'false';
    else if (type === 'datetime') {
        if (value instanceof Date) return value.toISOString();
        return String(value);
    }
    throw new Error(`Unsupported query param type: ${type}`);
}
function constructMethodCallHeaders(schema, data, opts) {
    // Not using `new Headers(opts?.headers)` to avoid duplicating headers values
    // due to inconsistent casing in headers name. In case of multiple headers
    // with the same name (but using a different case), the last one will be used.
    // new Headers({ 'content-type': 'foo', 'Content-Type': 'bar' }).get('content-type')
    // => 'foo, bar'
    const headers = new Headers();
    if (opts?.headers) for(const name in opts.headers){
        if (headers.has(name)) throw new TypeError(`Duplicate header: ${name}`);
        const value = opts.headers[name];
        if (value != null) headers.set(name, value);
    }
    if (schema.type === 'procedure') {
        if (opts?.encoding) headers.set('content-type', opts.encoding);
        else if (!headers.has('content-type') && typeof data !== 'undefined') {
            // Special handling of BodyInit types before falling back to JSON encoding
            if (data instanceof ArrayBuffer || data instanceof ReadableStream || ArrayBuffer.isView(data)) headers.set('content-type', 'application/octet-stream');
            else if (data instanceof FormData) // Note: The multipart form data boundary is missing from the header
            // we set here, making that header invalid. This special case will be
            // handled in encodeMethodCallBody()
            headers.set('content-type', 'multipart/form-data');
            else if (data instanceof URLSearchParams) headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
            else if (isBlobLike(data)) headers.set('content-type', data.type || 'application/octet-stream');
            else if (typeof data === 'string') headers.set('content-type', 'text/plain;charset=UTF-8');
            else if (isIterable(data)) headers.set('content-type', 'application/octet-stream');
            else if (typeof data === 'boolean' || typeof data === 'number' || typeof data === 'string' || typeof data === 'object' // covers "null"
            ) headers.set('content-type', 'application/json');
            else // symbol, function, bigint
            throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `Unsupported data type: ${typeof data}`);
        }
    }
    return headers;
}
function combineHeaders(headersInit, defaultHeaders) {
    if (!defaultHeaders) return headersInit;
    let headers = undefined;
    for (const [name, definition] of defaultHeaders){
        // Ignore undefined values (allowed for convenience when using
        // Object.entries).
        if (definition === undefined) continue;
        // Lazy initialization of the headers object
        headers ?? (headers = new Headers(headersInit));
        if (headers.has(name)) continue;
        const value = typeof definition === 'function' ? definition() : definition;
        if (typeof value === 'string') headers.set(name, value);
        else if (value === null) headers.delete(name);
        else throw new TypeError(`Invalid "${name}" header value: ${typeof value}`);
    }
    return headers ?? headersInit;
}
function isBlobLike(value) {
    if (value == null) return false;
    if (typeof value !== 'object') return false;
    if (typeof Blob === 'function' && value instanceof Blob) return true;
    // Support for Blobs provided by libraries that don't use the native Blob
    // (e.g. fetch-blob from node-fetch).
    // https://github.com/node-fetch/fetch-blob/blob/a1a182e5978811407bef4ea1632b517567dda01f/index.js#L233-L244
    const tag = value[Symbol.toStringTag];
    if (tag === 'Blob' || tag === 'File') return 'stream' in value && typeof value.stream === 'function';
    return false;
}
function isBodyInit(value) {
    switch(typeof value){
        case 'string':
            return true;
        case 'object':
            return value instanceof ArrayBuffer || value instanceof FormData || value instanceof URLSearchParams || value instanceof ReadableStream || ArrayBuffer.isView(value) || isBlobLike(value);
        default:
            return false;
    }
}
function isIterable(value) {
    return value != null && typeof value === 'object' && (Symbol.iterator in value || Symbol.asyncIterator in value);
}
function encodeMethodCallBody(headers, data) {
    // Silently ignore the body if there is no content-type header.
    const contentType = headers.get('content-type');
    if (!contentType) return undefined;
    if (typeof data === 'undefined') // This error would be returned by the server, but we can catch it earlier
    // to avoid un-necessary requests. Note that a content-length of 0 does not
    // necessary mean that the body is "empty" (e.g. an empty txt file).
    throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `A request body is expected but none was provided`);
    if (isBodyInit(data)) {
        if (data instanceof FormData && contentType === 'multipart/form-data') // fetch() will encode FormData payload itself, but it won't override the
        // content-type header if already present. This would cause the boundary
        // to be missing from the content-type header, resulting in a 400 error.
        // Deleting the content-type header here to let fetch() re-create it.
        headers.delete('content-type');
        // Will be encoded by the fetch API.
        return data;
    }
    if (isIterable(data)) // Note that some environments support using Iterable & AsyncIterable as the
    // body (e.g. Node's fetch), but not all of them do (browsers).
    return iterableToReadableStream(data);
    if (contentType.startsWith('text/')) return new TextEncoder().encode(String(data));
    if (contentType.startsWith('application/json')) {
        const json = (0, lexicon_1.stringifyLex)(data);
        // Server would return a 400 error if the JSON is invalid (e.g. trying to
        // JSONify a function, or an object that implements toJSON() poorly).
        if (json === undefined) throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `Failed to encode request body as JSON`);
        return new TextEncoder().encode(json);
    }
    // At this point, "data" is not a valid BodyInit value, and we don't know how
    // to encode it into one. Passing it to fetch would result in an error. Let's
    // throw our own error instead.
    const type = !data || typeof data !== 'object' ? typeof data : data.constructor !== Object && typeof data.constructor === 'function' && typeof data.constructor?.name === 'string' ? data.constructor.name : 'object';
    throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `Unable to encode ${type} as ${contentType} data`);
}
/**
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/from_static}
 */ function iterableToReadableStream(iterable) {
    // Use the native ReadableStream.from() if available.
    if ('from' in ReadableStream && typeof ReadableStream.from === 'function') return ReadableStream.from(iterable);
    // If you see this error, consider using a polyfill for ReadableStream. For
    // example, the "web-streams-polyfill" package:
    // https://github.com/MattiasBuelens/web-streams-polyfill
    throw new TypeError("ReadableStream.from() is not supported in this environment. It is required to support using iterables as the request body. Consider using a polyfill or re-write your code to use a different body type.");
}
function httpResponseBodyParse(mimeType, data) {
    try {
        if (mimeType) {
            if (mimeType.includes('application/json')) {
                const str = new TextDecoder().decode(data);
                return (0, lexicon_1.jsonStringToLex)(str);
            }
            if (mimeType.startsWith('text/')) return new TextDecoder().decode(data);
        }
        if (data instanceof ArrayBuffer) return new Uint8Array(data);
        return data;
    } catch (cause) {
        throw new types_1.XRPCError(types_1.ResponseType.InvalidResponse, undefined, `Failed to parse response body: ${String(cause)}`, undefined, {
            cause
        });
    }
}

},{"1cc54154d55fc177":"dXkdv","f614fe605977950e":"jPD5b"}],"jPD5b":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.XRPCInvalidResponseError = exports.XRPCError = exports.XRPCResponse = exports.ResponseTypeStrings = exports.ResponseType = exports.errorResponseBody = void 0;
exports.httpResponseCodeToEnum = httpResponseCodeToEnum;
exports.httpResponseCodeToName = httpResponseCodeToName;
exports.httpResponseCodeToString = httpResponseCodeToString;
const zod_1 = require("f2d8820ac6f96864");
exports.errorResponseBody = zod_1.z.object({
    error: zod_1.z.string().optional(),
    message: zod_1.z.string().optional()
});
var ResponseType;
(function(ResponseType) {
    /**
     * Network issue, unable to get response from the server.
     */ ResponseType[ResponseType["Unknown"] = 1] = "Unknown";
    /**
     * Response failed lexicon validation.
     */ ResponseType[ResponseType["InvalidResponse"] = 2] = "InvalidResponse";
    ResponseType[ResponseType["Success"] = 200] = "Success";
    ResponseType[ResponseType["InvalidRequest"] = 400] = "InvalidRequest";
    ResponseType[ResponseType["AuthenticationRequired"] = 401] = "AuthenticationRequired";
    ResponseType[ResponseType["Forbidden"] = 403] = "Forbidden";
    ResponseType[ResponseType["XRPCNotSupported"] = 404] = "XRPCNotSupported";
    ResponseType[ResponseType["NotAcceptable"] = 406] = "NotAcceptable";
    ResponseType[ResponseType["PayloadTooLarge"] = 413] = "PayloadTooLarge";
    ResponseType[ResponseType["UnsupportedMediaType"] = 415] = "UnsupportedMediaType";
    ResponseType[ResponseType["RateLimitExceeded"] = 429] = "RateLimitExceeded";
    ResponseType[ResponseType["InternalServerError"] = 500] = "InternalServerError";
    ResponseType[ResponseType["MethodNotImplemented"] = 501] = "MethodNotImplemented";
    ResponseType[ResponseType["UpstreamFailure"] = 502] = "UpstreamFailure";
    ResponseType[ResponseType["NotEnoughResources"] = 503] = "NotEnoughResources";
    ResponseType[ResponseType["UpstreamTimeout"] = 504] = "UpstreamTimeout";
})(ResponseType || (exports.ResponseType = ResponseType = {}));
function httpResponseCodeToEnum(status) {
    if (status in ResponseType) return status;
    else if (status >= 100 && status < 200) return ResponseType.XRPCNotSupported;
    else if (status >= 200 && status < 300) return ResponseType.Success;
    else if (status >= 300 && status < 400) return ResponseType.XRPCNotSupported;
    else if (status >= 400 && status < 500) return ResponseType.InvalidRequest;
    else return ResponseType.InternalServerError;
}
function httpResponseCodeToName(status) {
    return ResponseType[httpResponseCodeToEnum(status)];
}
exports.ResponseTypeStrings = {
    [ResponseType.Unknown]: 'Unknown',
    [ResponseType.InvalidResponse]: 'Invalid Response',
    [ResponseType.Success]: 'Success',
    [ResponseType.InvalidRequest]: 'Invalid Request',
    [ResponseType.AuthenticationRequired]: 'Authentication Required',
    [ResponseType.Forbidden]: 'Forbidden',
    [ResponseType.XRPCNotSupported]: 'XRPC Not Supported',
    [ResponseType.NotAcceptable]: 'Not Acceptable',
    [ResponseType.PayloadTooLarge]: 'Payload Too Large',
    [ResponseType.UnsupportedMediaType]: 'Unsupported Media Type',
    [ResponseType.RateLimitExceeded]: 'Rate Limit Exceeded',
    [ResponseType.InternalServerError]: 'Internal Server Error',
    [ResponseType.MethodNotImplemented]: 'Method Not Implemented',
    [ResponseType.UpstreamFailure]: 'Upstream Failure',
    [ResponseType.NotEnoughResources]: 'Not Enough Resources',
    [ResponseType.UpstreamTimeout]: 'Upstream Timeout'
};
function httpResponseCodeToString(status) {
    return exports.ResponseTypeStrings[httpResponseCodeToEnum(status)];
}
class XRPCResponse {
    constructor(data, headers){
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: data
        });
        Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: headers
        });
        Object.defineProperty(this, "success", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
    }
}
exports.XRPCResponse = XRPCResponse;
class XRPCError extends Error {
    constructor(statusCode, error = httpResponseCodeToName(statusCode), message, headers, options){
        super(message || error || httpResponseCodeToString(statusCode), options);
        Object.defineProperty(this, "error", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: error
        });
        Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: headers
        });
        Object.defineProperty(this, "success", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.status = httpResponseCodeToEnum(statusCode);
        // Pre 2022 runtimes won't handle the "options" constructor argument
        const cause = options?.cause;
        if (this.cause === undefined && cause !== undefined) this.cause = cause;
    }
    static from(cause, fallbackStatus) {
        if (cause instanceof XRPCError) return cause;
        // Type cast the cause to an Error if it is one
        const causeErr = cause instanceof Error ? cause : undefined;
        // Try and find a Response object in the cause
        const causeResponse = cause instanceof Response ? cause : cause?.['response'] instanceof Response ? cause['response'] : undefined;
        const statusCode = // Extract status code from "http-errors" like errors
        causeErr?.['statusCode'] ?? causeErr?.['status'] ?? // Use the status code from the response object as fallback
        causeResponse?.status;
        // Convert the status code to a ResponseType
        const status = typeof statusCode === 'number' ? httpResponseCodeToEnum(statusCode) : fallbackStatus ?? ResponseType.Unknown;
        const message = causeErr?.message ?? String(cause);
        const headers = causeResponse ? Object.fromEntries(causeResponse.headers.entries()) : undefined;
        return new XRPCError(status, undefined, message, headers, {
            cause
        });
    }
}
exports.XRPCError = XRPCError;
class XRPCInvalidResponseError extends XRPCError {
    constructor(lexiconNsid, validationError, responseBody){
        super(ResponseType.InvalidResponse, // @NOTE: This is probably wrong and should use ResponseTypeNames instead.
        // But it would mean a breaking change.
        exports.ResponseTypeStrings[ResponseType.InvalidResponse], `The server gave an invalid response and may be out of date.`, undefined, {
            cause: validationError
        });
        Object.defineProperty(this, "lexiconNsid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: lexiconNsid
        });
        Object.defineProperty(this, "validationError", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: validationError
        });
        Object.defineProperty(this, "responseBody", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: responseBody
        });
    }
}
exports.XRPCInvalidResponseError = XRPCInvalidResponseError;

},{"f2d8820ac6f96864":"gcE23"}],"gQAZ0":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.XrpcClient = void 0;
const lexicon_1 = require("727cf89db81c2e6b");
const fetch_handler_1 = require("7c4768cd86be5a17");
const types_1 = require("194412f6a72f0dd5");
const util_1 = require("d3d147205b2480e6");
class XrpcClient {
    constructor(fetchHandlerOpts, // "Lexicons" is redundant here (because that class implements
    // "Iterable<LexiconDoc>") but we keep it for explicitness:
    lex){
        Object.defineProperty(this, "fetchHandler", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Map()
        });
        Object.defineProperty(this, "lex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.fetchHandler = (0, fetch_handler_1.buildFetchHandler)(fetchHandlerOpts);
        this.lex = lex instanceof lexicon_1.Lexicons ? lex : new lexicon_1.Lexicons(lex);
    }
    setHeader(key, value) {
        this.headers.set(key.toLowerCase(), value);
    }
    unsetHeader(key) {
        this.headers.delete(key.toLowerCase());
    }
    clearHeaders() {
        this.headers.clear();
    }
    async call(methodNsid, params, data, opts) {
        const def = this.lex.getDefOrThrow(methodNsid);
        if (!def || def.type !== 'query' && def.type !== 'procedure') throw new TypeError(`Invalid lexicon: ${methodNsid}. Must be a query or procedure.`);
        // @TODO: should we validate the params and data here?
        // this.lex.assertValidXrpcParams(methodNsid, params)
        // if (data !== undefined) {
        //   this.lex.assertValidXrpcInput(methodNsid, data)
        // }
        const reqUrl = (0, util_1.constructMethodCallUrl)(methodNsid, def, params);
        const reqMethod = (0, util_1.getMethodSchemaHTTPMethod)(def);
        const reqHeaders = (0, util_1.constructMethodCallHeaders)(def, data, opts);
        const reqBody = (0, util_1.encodeMethodCallBody)(reqHeaders, data);
        // The duplex field is required for streaming bodies, but not yet reflected
        // anywhere in docs or types. See whatwg/fetch#1438, nodejs/node#46221.
        const init = {
            method: reqMethod,
            headers: (0, util_1.combineHeaders)(reqHeaders, this.headers),
            body: reqBody,
            duplex: 'half',
            signal: opts?.signal
        };
        try {
            const response = await this.fetchHandler.call(undefined, reqUrl, init);
            const resStatus = response.status;
            const resHeaders = Object.fromEntries(response.headers.entries());
            const resBodyBytes = await response.arrayBuffer();
            const resBody = (0, util_1.httpResponseBodyParse)(response.headers.get('content-type'), resBodyBytes);
            const resCode = (0, types_1.httpResponseCodeToEnum)(resStatus);
            if (resCode !== types_1.ResponseType.Success) {
                const { error, message } = resBody && (0, util_1.isErrorResponseBody)(resBody) ? resBody : {};
                throw new types_1.XRPCError(resCode, error, message, resHeaders);
            }
            try {
                this.lex.assertValidXrpcOutput(methodNsid, resBody);
            } catch (e) {
                if (e instanceof lexicon_1.ValidationError) throw new types_1.XRPCInvalidResponseError(methodNsid, e, resBody);
                throw e;
            }
            return new types_1.XRPCResponse(resBody, resHeaders);
        } catch (err) {
            throw types_1.XRPCError.from(err);
        }
    }
}
exports.XrpcClient = XrpcClient;

},{"727cf89db81c2e6b":"dXkdv","7c4768cd86be5a17":"hsadf","194412f6a72f0dd5":"jPD5b","d3d147205b2480e6":"5ICtP"}],"hsadf":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.buildFetchHandler = buildFetchHandler;
const util_1 = require("35b34c5c5f59e20e");
function buildFetchHandler(options) {
    // Already a fetch handler (allowed for convenience)
    if (typeof options === 'function') return options;
    if (typeof options === 'object' && 'fetchHandler' in options) return options.fetchHandler.bind(options);
    const { service, headers: defaultHeaders, fetch = globalThis.fetch } = typeof options === 'string' || options instanceof URL ? {
        service: options
    } : options;
    if (typeof fetch !== 'function') throw new TypeError('XrpcDispatcher requires fetch() to be available in your environment.');
    const defaultHeadersEntries = defaultHeaders != null ? Object.entries(defaultHeaders) : undefined;
    return async function(url, init) {
        const base = typeof service === 'function' ? service() : service;
        const fullUrl = new URL(url, base);
        const headers = (0, util_1.combineHeaders)(init.headers, defaultHeadersEntries);
        return fetch(fullUrl, {
            ...init,
            headers
        });
    };
}

},{"35b34c5c5f59e20e":"5ICtP"}],"anhFn":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DidDeactivatedError = exports.DidNotFoundError = exports.HandleNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("af09ecdfad067648");
const lexicons_1 = require("359ba247bc071b10");
const util_1 = require("2f4380d087d9100");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.identity.refreshIdentity';
class HandleNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.HandleNotFoundError = HandleNotFoundError;
class DidNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.DidNotFoundError = DidNotFoundError;
class DidDeactivatedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.DidDeactivatedError = DidDeactivatedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'HandleNotFound') return new HandleNotFoundError(e);
        if (e.error === 'DidNotFound') return new DidNotFoundError(e);
        if (e.error === 'DidDeactivated') return new DidDeactivatedError(e);
    }
    return e;
}

},{"af09ecdfad067648":"iLJWL","359ba247bc071b10":"b1XzS","2f4380d087d9100":"hnRug"}],"81vnL":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DidDeactivatedError = exports.DidNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("1ca6c5225a6bd75b");
const lexicons_1 = require("88a6942234a4910d");
const util_1 = require("3bf51a38987e0629");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.identity.resolveDid';
class DidNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.DidNotFoundError = DidNotFoundError;
class DidDeactivatedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.DidDeactivatedError = DidDeactivatedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'DidNotFound') return new DidNotFoundError(e);
        if (e.error === 'DidDeactivated') return new DidDeactivatedError(e);
    }
    return e;
}

},{"1ca6c5225a6bd75b":"iLJWL","88a6942234a4910d":"b1XzS","3bf51a38987e0629":"hnRug"}],"ewOfY":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HandleNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("acc1f9c04c8b45e3");
const lexicons_1 = require("ea01d31c29a1e74e");
const util_1 = require("9251ec38dea38e22");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.identity.resolveHandle';
class HandleNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.HandleNotFoundError = HandleNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'HandleNotFound') return new HandleNotFoundError(e);
    }
    return e;
}

},{"acc1f9c04c8b45e3":"iLJWL","ea01d31c29a1e74e":"b1XzS","9251ec38dea38e22":"hnRug"}],"eGDUf":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DidDeactivatedError = exports.DidNotFoundError = exports.HandleNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("6eae1e0ffa91fa59");
const lexicons_1 = require("63118893faf2e673");
const util_1 = require("e9fc9cc1d180c426");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.identity.resolveIdentity';
class HandleNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.HandleNotFoundError = HandleNotFoundError;
class DidNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.DidNotFoundError = DidNotFoundError;
class DidDeactivatedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.DidDeactivatedError = DidDeactivatedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'HandleNotFound') return new HandleNotFoundError(e);
        if (e.error === 'DidNotFound') return new DidNotFoundError(e);
        if (e.error === 'DidDeactivated') return new DidDeactivatedError(e);
    }
    return e;
}

},{"6eae1e0ffa91fa59":"iLJWL","63118893faf2e673":"b1XzS","e9fc9cc1d180c426":"hnRug"}],"lF9iR":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidSwapError = void 0;
exports.toKnownErr = toKnownErr;
exports.isCreate = isCreate;
exports.validateCreate = validateCreate;
exports.isUpdate = isUpdate;
exports.validateUpdate = validateUpdate;
exports.isDelete = isDelete;
exports.validateDelete = validateDelete;
exports.isCreateResult = isCreateResult;
exports.validateCreateResult = validateCreateResult;
exports.isUpdateResult = isUpdateResult;
exports.validateUpdateResult = validateUpdateResult;
exports.isDeleteResult = isDeleteResult;
exports.validateDeleteResult = validateDeleteResult;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("79833b45783a4a91");
const lexicons_1 = require("ff67b36d510cb1a8");
const util_1 = require("4ef2e1d64cd94874");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.repo.applyWrites';
class InvalidSwapError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidSwapError = InvalidSwapError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'InvalidSwap') return new InvalidSwapError(e);
    }
    return e;
}
const hashCreate = 'create';
function isCreate(v) {
    return is$typed(v, id, hashCreate);
}
function validateCreate(v) {
    return validate(v, id, hashCreate);
}
const hashUpdate = 'update';
function isUpdate(v) {
    return is$typed(v, id, hashUpdate);
}
function validateUpdate(v) {
    return validate(v, id, hashUpdate);
}
const hashDelete = 'delete';
function isDelete(v) {
    return is$typed(v, id, hashDelete);
}
function validateDelete(v) {
    return validate(v, id, hashDelete);
}
const hashCreateResult = 'createResult';
function isCreateResult(v) {
    return is$typed(v, id, hashCreateResult);
}
function validateCreateResult(v) {
    return validate(v, id, hashCreateResult);
}
const hashUpdateResult = 'updateResult';
function isUpdateResult(v) {
    return is$typed(v, id, hashUpdateResult);
}
function validateUpdateResult(v) {
    return validate(v, id, hashUpdateResult);
}
const hashDeleteResult = 'deleteResult';
function isDeleteResult(v) {
    return is$typed(v, id, hashDeleteResult);
}
function validateDeleteResult(v) {
    return validate(v, id, hashDeleteResult);
}

},{"79833b45783a4a91":"iLJWL","ff67b36d510cb1a8":"b1XzS","4ef2e1d64cd94874":"hnRug"}],"kzOJs":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidSwapError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("c1105518547a6f1a");
const lexicons_1 = require("d06717356ab4782b");
const util_1 = require("2acd494bc9cd683e");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.repo.createRecord';
class InvalidSwapError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidSwapError = InvalidSwapError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'InvalidSwap') return new InvalidSwapError(e);
    }
    return e;
}

},{"c1105518547a6f1a":"iLJWL","d06717356ab4782b":"b1XzS","2acd494bc9cd683e":"hnRug"}],"eACxP":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidSwapError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("aa6d3afd155ae3b7");
const lexicons_1 = require("bb7b348430089e7a");
const util_1 = require("447cd69bc9756ca7");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.repo.deleteRecord';
class InvalidSwapError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidSwapError = InvalidSwapError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'InvalidSwap') return new InvalidSwapError(e);
    }
    return e;
}

},{"aa6d3afd155ae3b7":"iLJWL","bb7b348430089e7a":"b1XzS","447cd69bc9756ca7":"hnRug"}],"1s2mW":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RecordNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("d0d32ac1efb577e4");
const lexicons_1 = require("91dc652092d855a0");
const util_1 = require("64fefa70a99e8b07");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.repo.getRecord';
class RecordNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RecordNotFoundError = RecordNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'RecordNotFound') return new RecordNotFoundError(e);
    }
    return e;
}

},{"d0d32ac1efb577e4":"iLJWL","91dc652092d855a0":"b1XzS","64fefa70a99e8b07":"hnRug"}],"g5uuD":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidSwapError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("d2f2542f0f5f74e7");
const lexicons_1 = require("de195b685a86964d");
const util_1 = require("6857d93ca8702b9f");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.repo.putRecord';
class InvalidSwapError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidSwapError = InvalidSwapError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'InvalidSwap') return new InvalidSwapError(e);
    }
    return e;
}

},{"d2f2542f0f5f74e7":"iLJWL","de195b685a86964d":"b1XzS","6857d93ca8702b9f":"hnRug"}],"ayvnR":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidEmailError = exports.InvalidTokenError = exports.ExpiredTokenError = exports.AccountNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("21ead74218c9ec91");
const lexicons_1 = require("f0babeaaa4b54d35");
const util_1 = require("864282c8379d3328");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.confirmEmail';
class AccountNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.AccountNotFoundError = AccountNotFoundError;
class ExpiredTokenError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.ExpiredTokenError = ExpiredTokenError;
class InvalidTokenError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidTokenError = InvalidTokenError;
class InvalidEmailError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidEmailError = InvalidEmailError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'AccountNotFound') return new AccountNotFoundError(e);
        if (e.error === 'ExpiredToken') return new ExpiredTokenError(e);
        if (e.error === 'InvalidToken') return new InvalidTokenError(e);
        if (e.error === 'InvalidEmail') return new InvalidEmailError(e);
    }
    return e;
}

},{"21ead74218c9ec91":"iLJWL","f0babeaaa4b54d35":"b1XzS","864282c8379d3328":"hnRug"}],"b2E1E":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IncompatibleDidDocError = exports.UnresolvableDidError = exports.UnsupportedDomainError = exports.HandleNotAvailableError = exports.InvalidInviteCodeError = exports.InvalidPasswordError = exports.InvalidHandleError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("d9910ed844a5cca0");
const lexicons_1 = require("bb45fdbe3a211c65");
const util_1 = require("b54ac6be92d619a7");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.createAccount';
class InvalidHandleError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidHandleError = InvalidHandleError;
class InvalidPasswordError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidPasswordError = InvalidPasswordError;
class InvalidInviteCodeError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidInviteCodeError = InvalidInviteCodeError;
class HandleNotAvailableError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.HandleNotAvailableError = HandleNotAvailableError;
class UnsupportedDomainError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.UnsupportedDomainError = UnsupportedDomainError;
class UnresolvableDidError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.UnresolvableDidError = UnresolvableDidError;
class IncompatibleDidDocError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.IncompatibleDidDocError = IncompatibleDidDocError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'InvalidHandle') return new InvalidHandleError(e);
        if (e.error === 'InvalidPassword') return new InvalidPasswordError(e);
        if (e.error === 'InvalidInviteCode') return new InvalidInviteCodeError(e);
        if (e.error === 'HandleNotAvailable') return new HandleNotAvailableError(e);
        if (e.error === 'UnsupportedDomain') return new UnsupportedDomainError(e);
        if (e.error === 'UnresolvableDid') return new UnresolvableDidError(e);
        if (e.error === 'IncompatibleDidDoc') return new IncompatibleDidDocError(e);
    }
    return e;
}

},{"d9910ed844a5cca0":"iLJWL","bb45fdbe3a211c65":"b1XzS","b54ac6be92d619a7":"hnRug"}],"70n7E":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AccountTakedownError = void 0;
exports.toKnownErr = toKnownErr;
exports.isAppPassword = isAppPassword;
exports.validateAppPassword = validateAppPassword;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("2c1957877605c8b4");
const lexicons_1 = require("40f33959aa5da849");
const util_1 = require("94139d7be5964dba");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.createAppPassword';
class AccountTakedownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.AccountTakedownError = AccountTakedownError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'AccountTakedown') return new AccountTakedownError(e);
    }
    return e;
}
const hashAppPassword = 'appPassword';
function isAppPassword(v) {
    return is$typed(v, id, hashAppPassword);
}
function validateAppPassword(v) {
    return validate(v, id, hashAppPassword);
}

},{"2c1957877605c8b4":"iLJWL","40f33959aa5da849":"b1XzS","94139d7be5964dba":"hnRug"}],"hXikj":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AuthFactorTokenRequiredError = exports.AccountTakedownError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("8b42fc0ac07ae596");
const lexicons_1 = require("5a1d3ac639d0c837");
const util_1 = require("3bb89da24a99bffa");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.createSession';
class AccountTakedownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.AccountTakedownError = AccountTakedownError;
class AuthFactorTokenRequiredError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.AuthFactorTokenRequiredError = AuthFactorTokenRequiredError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'AccountTakedown') return new AccountTakedownError(e);
        if (e.error === 'AuthFactorTokenRequired') return new AuthFactorTokenRequiredError(e);
    }
    return e;
}

},{"8b42fc0ac07ae596":"iLJWL","5a1d3ac639d0c837":"b1XzS","3bb89da24a99bffa":"hnRug"}],"8TcqV":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("543e6d3978334c33");
const lexicons_1 = require("cc8c078147228fc2");
const util_1 = require("fa26758dd50a2114");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.deleteAccount';
class ExpiredTokenError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.ExpiredTokenError = ExpiredTokenError;
class InvalidTokenError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidTokenError = InvalidTokenError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'ExpiredToken') return new ExpiredTokenError(e);
        if (e.error === 'InvalidToken') return new InvalidTokenError(e);
    }
    return e;
}

},{"543e6d3978334c33":"iLJWL","cc8c078147228fc2":"b1XzS","fa26758dd50a2114":"hnRug"}],"5EelL":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DuplicateCreateError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("fd8883143f4538b0");
const lexicons_1 = require("1d1f4a63e66d278e");
const util_1 = require("2ea842b7ee5f7a3d");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.getAccountInviteCodes';
class DuplicateCreateError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.DuplicateCreateError = DuplicateCreateError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'DuplicateCreate') return new DuplicateCreateError(e);
    }
    return e;
}

},{"fd8883143f4538b0":"iLJWL","1d1f4a63e66d278e":"b1XzS","2ea842b7ee5f7a3d":"hnRug"}],"kTzgq":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BadExpirationError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("6ff7f278174a40fd");
const lexicons_1 = require("55345a8c95bfddcf");
const util_1 = require("df243b90b331af5a");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.getServiceAuth';
class BadExpirationError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BadExpirationError = BadExpirationError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BadExpiration') return new BadExpirationError(e);
    }
    return e;
}

},{"6ff7f278174a40fd":"iLJWL","55345a8c95bfddcf":"b1XzS","df243b90b331af5a":"hnRug"}],"crZy7":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AccountTakedownError = void 0;
exports.toKnownErr = toKnownErr;
exports.isAppPassword = isAppPassword;
exports.validateAppPassword = validateAppPassword;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("a8061d2b64cda849");
const lexicons_1 = require("f4347d46579f3058");
const util_1 = require("3a59abac79ec4b44");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.listAppPasswords';
class AccountTakedownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.AccountTakedownError = AccountTakedownError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'AccountTakedown') return new AccountTakedownError(e);
    }
    return e;
}
const hashAppPassword = 'appPassword';
function isAppPassword(v) {
    return is$typed(v, id, hashAppPassword);
}
function validateAppPassword(v) {
    return validate(v, id, hashAppPassword);
}

},{"a8061d2b64cda849":"iLJWL","f4347d46579f3058":"b1XzS","3a59abac79ec4b44":"hnRug"}],"gh56m":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AccountTakedownError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("b448ab5a02c62b00");
const lexicons_1 = require("89afa36aa947d404");
const util_1 = require("2ff0453e927d5a6e");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.refreshSession';
class AccountTakedownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.AccountTakedownError = AccountTakedownError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'AccountTakedown') return new AccountTakedownError(e);
    }
    return e;
}

},{"b448ab5a02c62b00":"iLJWL","89afa36aa947d404":"b1XzS","2ff0453e927d5a6e":"hnRug"}],"bfsUT":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("d4ad6d16d81366b");
const lexicons_1 = require("fac3deda86f411d7");
const util_1 = require("102004417fa478b9");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.resetPassword';
class ExpiredTokenError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.ExpiredTokenError = ExpiredTokenError;
class InvalidTokenError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidTokenError = InvalidTokenError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'ExpiredToken') return new ExpiredTokenError(e);
        if (e.error === 'InvalidToken') return new InvalidTokenError(e);
    }
    return e;
}

},{"d4ad6d16d81366b":"iLJWL","fac3deda86f411d7":"b1XzS","102004417fa478b9":"hnRug"}],"6DuqX":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TokenRequiredError = exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("d4e2829bc75ab610");
const lexicons_1 = require("b52f30f2a69de8ff");
const util_1 = require("b494c0e98a8be629");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.updateEmail';
class ExpiredTokenError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.ExpiredTokenError = ExpiredTokenError;
class InvalidTokenError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.InvalidTokenError = InvalidTokenError;
class TokenRequiredError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.TokenRequiredError = TokenRequiredError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'ExpiredToken') return new ExpiredTokenError(e);
        if (e.error === 'InvalidToken') return new InvalidTokenError(e);
        if (e.error === 'TokenRequired') return new TokenRequiredError(e);
    }
    return e;
}

},{"d4e2829bc75ab610":"iLJWL","b52f30f2a69de8ff":"b1XzS","b494c0e98a8be629":"hnRug"}],"aGqST":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = exports.BlobNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("c17eafe035fd705b");
const lexicons_1 = require("1a7e41bcaaa56e66");
const util_1 = require("9aa896d11fd2ab74");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.sync.getBlob';
class BlobNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BlobNotFoundError = BlobNotFoundError;
class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoNotFoundError = RepoNotFoundError;
class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoTakendownError = RepoTakendownError;
class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoSuspendedError = RepoSuspendedError;
class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoDeactivatedError = RepoDeactivatedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BlobNotFound') return new BlobNotFoundError(e);
        if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
        if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
        if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
        if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
}

},{"c17eafe035fd705b":"iLJWL","1a7e41bcaaa56e66":"b1XzS","9aa896d11fd2ab74":"hnRug"}],"cqNfG":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = exports.BlockNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("38c223f30fb29515");
const lexicons_1 = require("7a0032713db7a115");
const util_1 = require("e6861baecfe946ef");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.sync.getBlocks';
class BlockNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BlockNotFoundError = BlockNotFoundError;
class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoNotFoundError = RepoNotFoundError;
class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoTakendownError = RepoTakendownError;
class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoSuspendedError = RepoSuspendedError;
class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoDeactivatedError = RepoDeactivatedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BlockNotFound') return new BlockNotFoundError(e);
        if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
        if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
        if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
        if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
}

},{"38c223f30fb29515":"iLJWL","7a0032713db7a115":"b1XzS","e6861baecfe946ef":"hnRug"}],"026xj":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HeadNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("970826aa37ed02ab");
const lexicons_1 = require("f6bc79054ffd3851");
const util_1 = require("db6107444953948e");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.sync.getHead';
class HeadNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.HeadNotFoundError = HeadNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'HeadNotFound') return new HeadNotFoundError(e);
    }
    return e;
}

},{"970826aa37ed02ab":"iLJWL","f6bc79054ffd3851":"b1XzS","db6107444953948e":"hnRug"}],"a3i4V":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HostNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("d096e540ac67c1ef");
const lexicons_1 = require("f95c2d6e9b55fcba");
const util_1 = require("76666f1587ae097e");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.sync.getHostStatus';
class HostNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.HostNotFoundError = HostNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'HostNotFound') return new HostNotFoundError(e);
    }
    return e;
}

},{"d096e540ac67c1ef":"iLJWL","f95c2d6e9b55fcba":"b1XzS","76666f1587ae097e":"hnRug"}],"5ALfC":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("d8d4bf017f4183c2");
const lexicons_1 = require("d66f7ac0ab8ccee2");
const util_1 = require("6d3282c646e3af37");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.sync.getLatestCommit';
class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoNotFoundError = RepoNotFoundError;
class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoTakendownError = RepoTakendownError;
class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoSuspendedError = RepoSuspendedError;
class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoDeactivatedError = RepoDeactivatedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
        if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
        if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
        if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
}

},{"d8d4bf017f4183c2":"iLJWL","d66f7ac0ab8ccee2":"b1XzS","6d3282c646e3af37":"hnRug"}],"43wu8":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = exports.RecordNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("8ba7bd6fd53a9e35");
const lexicons_1 = require("588fbffb987e4bf0");
const util_1 = require("1eafed963f179ede");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.sync.getRecord';
class RecordNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RecordNotFoundError = RecordNotFoundError;
class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoNotFoundError = RepoNotFoundError;
class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoTakendownError = RepoTakendownError;
class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoSuspendedError = RepoSuspendedError;
class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoDeactivatedError = RepoDeactivatedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'RecordNotFound') return new RecordNotFoundError(e);
        if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
        if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
        if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
        if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
}

},{"8ba7bd6fd53a9e35":"iLJWL","588fbffb987e4bf0":"b1XzS","1eafed963f179ede":"hnRug"}],"h1ue8":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("8081ce6da00fdddc");
const lexicons_1 = require("18edccadf2613b8f");
const util_1 = require("c2b903d70e41eb3a");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.sync.getRepo';
class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoNotFoundError = RepoNotFoundError;
class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoTakendownError = RepoTakendownError;
class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoSuspendedError = RepoSuspendedError;
class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoDeactivatedError = RepoDeactivatedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
        if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
        if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
        if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
}

},{"8081ce6da00fdddc":"iLJWL","18edccadf2613b8f":"b1XzS","c2b903d70e41eb3a":"hnRug"}],"04ssc":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RepoNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("4ce9c83bb211b4bf");
const lexicons_1 = require("209517533f18c5d");
const util_1 = require("d046dff09913ff43");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.sync.getRepoStatus';
class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoNotFoundError = RepoNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
    }
    return e;
}

},{"4ce9c83bb211b4bf":"iLJWL","209517533f18c5d":"b1XzS","d046dff09913ff43":"hnRug"}],"gVYtp":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("c129449069c16320");
const lexicons_1 = require("25fc1a4cd1040922");
const util_1 = require("4ad6ffc5cc7b25c5");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.sync.listBlobs';
class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoNotFoundError = RepoNotFoundError;
class RepoTakendownError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoTakendownError = RepoTakendownError;
class RepoSuspendedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoSuspendedError = RepoSuspendedError;
class RepoDeactivatedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoDeactivatedError = RepoDeactivatedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
        if (e.error === 'RepoTakendown') return new RepoTakendownError(e);
        if (e.error === 'RepoSuspended') return new RepoSuspendedError(e);
        if (e.error === 'RepoDeactivated') return new RepoDeactivatedError(e);
    }
    return e;
}

},{"c129449069c16320":"iLJWL","25fc1a4cd1040922":"b1XzS","4ad6ffc5cc7b25c5":"hnRug"}],"92L0p":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HostBannedError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("e3dd7cf8e5868fc5");
const lexicons_1 = require("ecea47c3393112d5");
const util_1 = require("b9242c560f72b1");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.sync.requestCrawl';
class HostBannedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.HostBannedError = HostBannedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'HostBanned') return new HostBannedError(e);
    }
    return e;
}

},{"e3dd7cf8e5868fc5":"iLJWL","ecea47c3393112d5":"b1XzS","b9242c560f72b1":"hnRug"}],"eNzYs":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BlockedByActorError = exports.BlockedActorError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("4c908b69282e7ed9");
const lexicons_1 = require("4e8fca6750909163");
const util_1 = require("a6c2b2c2635d570f");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.getActorLikes';
class BlockedActorError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BlockedActorError = BlockedActorError;
class BlockedByActorError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BlockedByActorError = BlockedByActorError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BlockedActor') return new BlockedActorError(e);
        if (e.error === 'BlockedByActor') return new BlockedByActorError(e);
    }
    return e;
}

},{"4c908b69282e7ed9":"iLJWL","4e8fca6750909163":"b1XzS","a6c2b2c2635d570f":"hnRug"}],"6hHOu":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BlockedByActorError = exports.BlockedActorError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("89e3c1e9bc8ad7cb");
const lexicons_1 = require("8d46b1a3cac6db0f");
const util_1 = require("6fb540c3e96ba87f");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.getAuthorFeed';
class BlockedActorError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BlockedActorError = BlockedActorError;
class BlockedByActorError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BlockedByActorError = BlockedByActorError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BlockedActor') return new BlockedActorError(e);
        if (e.error === 'BlockedByActor') return new BlockedByActorError(e);
    }
    return e;
}

},{"89e3c1e9bc8ad7cb":"iLJWL","8d46b1a3cac6db0f":"b1XzS","6fb540c3e96ba87f":"hnRug"}],"c7QDI":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UnknownFeedError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("50a9e3aa413c7f51");
const lexicons_1 = require("14aa0277c01b1d0f");
const util_1 = require("f92a2686d6833cf");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.getFeed';
class UnknownFeedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.UnknownFeedError = UnknownFeedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'UnknownFeed') return new UnknownFeedError(e);
    }
    return e;
}

},{"50a9e3aa413c7f51":"iLJWL","14aa0277c01b1d0f":"b1XzS","f92a2686d6833cf":"hnRug"}],"8tppF":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UnknownFeedError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("dddc70c12fb72916");
const lexicons_1 = require("4e25e8a2204fe338");
const util_1 = require("bdda07565fea9154");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.getFeedSkeleton';
class UnknownFeedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.UnknownFeedError = UnknownFeedError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'UnknownFeed') return new UnknownFeedError(e);
    }
    return e;
}

},{"dddc70c12fb72916":"iLJWL","4e25e8a2204fe338":"b1XzS","bdda07565fea9154":"hnRug"}],"ktAzZ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UnknownListError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("151b5fb40f92ebae");
const lexicons_1 = require("6b8657848be3cdac");
const util_1 = require("abc9e692bf740046");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.getListFeed';
class UnknownListError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.UnknownListError = UnknownListError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'UnknownList') return new UnknownListError(e);
    }
    return e;
}

},{"151b5fb40f92ebae":"iLJWL","6b8657848be3cdac":"b1XzS","abc9e692bf740046":"hnRug"}],"bLQiX":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("e96ee3d93a4994ed");
const lexicons_1 = require("6d961b3f573614aa");
const util_1 = require("16cabaa9b8eef8c5");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.getPostThread';
class NotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.NotFoundError = NotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'NotFound') return new NotFoundError(e);
    }
    return e;
}

},{"e96ee3d93a4994ed":"iLJWL","6d961b3f573614aa":"b1XzS","16cabaa9b8eef8c5":"hnRug"}],"kf906":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BadQueryStringError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("fd8a5ac3dd95f627");
const lexicons_1 = require("555f6b6c480383f8");
const util_1 = require("752d9e52a947e1e4");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.searchPosts';
class BadQueryStringError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BadQueryStringError = BadQueryStringError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BadQueryString') return new BadQueryStringError(e);
    }
    return e;
}

},{"fd8a5ac3dd95f627":"iLJWL","555f6b6c480383f8":"b1XzS","752d9e52a947e1e4":"hnRug"}],"amdDT":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ActorNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("e4f2eea5d06c1e7e");
const lexicons_1 = require("13e5de1ad7eda8ab");
const util_1 = require("79883fc5e119e002");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.getRelationships';
class ActorNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.ActorNotFoundError = ActorNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'ActorNotFound') return new ActorNotFoundError(e);
    }
    return e;
}

},{"e4f2eea5d06c1e7e":"iLJWL","13e5de1ad7eda8ab":"b1XzS","79883fc5e119e002":"hnRug"}],"ge1Qy":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BadQueryStringError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("c31d394688245136");
const lexicons_1 = require("7f493726d77ea637");
const util_1 = require("9995e722b13b1e32");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.unspecced.searchActorsSkeleton';
class BadQueryStringError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BadQueryStringError = BadQueryStringError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BadQueryString') return new BadQueryStringError(e);
    }
    return e;
}

},{"c31d394688245136":"iLJWL","7f493726d77ea637":"b1XzS","9995e722b13b1e32":"hnRug"}],"hLyTA":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BadQueryStringError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("9dda23090ed618df");
const lexicons_1 = require("e8f1d9531d3d02f1");
const util_1 = require("4600a2a5de9bd12c");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.unspecced.searchPostsSkeleton';
class BadQueryStringError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BadQueryStringError = BadQueryStringError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BadQueryString') return new BadQueryStringError(e);
    }
    return e;
}

},{"9dda23090ed618df":"iLJWL","e8f1d9531d3d02f1":"b1XzS","4600a2a5de9bd12c":"hnRug"}],"cYa1B":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BadQueryStringError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("cba20a66046421da");
const lexicons_1 = require("d09549a1a20e33");
const util_1 = require("8254ddc8cbf97a26");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.unspecced.searchStarterPacksSkeleton';
class BadQueryStringError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.BadQueryStringError = BadQueryStringError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'BadQueryString') return new BadQueryStringError(e);
    }
    return e;
}

},{"cba20a66046421da":"iLJWL","d09549a1a20e33":"b1XzS","8254ddc8cbf97a26":"hnRug"}],"3JsiH":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ReactionInvalidValueError = exports.ReactionLimitReachedError = exports.ReactionMessageDeletedError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("10770c810110fa79");
const lexicons_1 = require("7f66b1f46b8bbb96");
const util_1 = require("cbd1210929946b3a");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.addReaction';
class ReactionMessageDeletedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.ReactionMessageDeletedError = ReactionMessageDeletedError;
class ReactionLimitReachedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.ReactionLimitReachedError = ReactionLimitReachedError;
class ReactionInvalidValueError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.ReactionInvalidValueError = ReactionInvalidValueError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'ReactionMessageDeleted') return new ReactionMessageDeletedError(e);
        if (e.error === 'ReactionLimitReached') return new ReactionLimitReachedError(e);
        if (e.error === 'ReactionInvalidValue') return new ReactionInvalidValueError(e);
    }
    return e;
}

},{"10770c810110fa79":"iLJWL","7f66b1f46b8bbb96":"b1XzS","cbd1210929946b3a":"hnRug"}],"doR08":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ReactionInvalidValueError = exports.ReactionMessageDeletedError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("6281b013c73b019f");
const lexicons_1 = require("53f3b8348d1eaba9");
const util_1 = require("c62b63de89508af7");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.removeReaction';
class ReactionMessageDeletedError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.ReactionMessageDeletedError = ReactionMessageDeletedError;
class ReactionInvalidValueError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.ReactionInvalidValueError = ReactionInvalidValueError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'ReactionMessageDeleted') return new ReactionMessageDeletedError(e);
        if (e.error === 'ReactionInvalidValue') return new ReactionInvalidValueError(e);
    }
    return e;
}

},{"6281b013c73b019f":"iLJWL","53f3b8348d1eaba9":"b1XzS","c62b63de89508af7":"hnRug"}],"kHLes":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DuplicateTemplateNameError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("eaacf64a6d717af9");
const lexicons_1 = require("520f41630564aee2");
const util_1 = require("452b8553a6ff8f4e");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.communication.createTemplate';
class DuplicateTemplateNameError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.DuplicateTemplateNameError = DuplicateTemplateNameError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'DuplicateTemplateName') return new DuplicateTemplateNameError(e);
    }
    return e;
}

},{"eaacf64a6d717af9":"iLJWL","520f41630564aee2":"b1XzS","452b8553a6ff8f4e":"hnRug"}],"15acz":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DuplicateTemplateNameError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("c1bbb28b26499217");
const lexicons_1 = require("906231842ce7e205");
const util_1 = require("46b8805c4c7adb99");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.communication.updateTemplate';
class DuplicateTemplateNameError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.DuplicateTemplateNameError = DuplicateTemplateNameError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'DuplicateTemplateName') return new DuplicateTemplateNameError(e);
    }
    return e;
}

},{"c1bbb28b26499217":"iLJWL","906231842ce7e205":"b1XzS","46b8805c4c7adb99":"hnRug"}],"8CgBN":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SubjectHasActionError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("7559eff8f894e574");
const lexicons_1 = require("58c6f7bdce00f5db");
const util_1 = require("fc99907fa98f6444");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.moderation.emitEvent';
class SubjectHasActionError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.SubjectHasActionError = SubjectHasActionError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'SubjectHasAction') return new SubjectHasActionError(e);
    }
    return e;
}

},{"7559eff8f894e574":"iLJWL","58c6f7bdce00f5db":"b1XzS","fc99907fa98f6444":"hnRug"}],"bj8bl":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RecordNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("5a56e1cfa09c88d1");
const lexicons_1 = require("1d786aa3dec970da");
const util_1 = require("2105a0c9c27f9202");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.moderation.getRecord';
class RecordNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RecordNotFoundError = RecordNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'RecordNotFound') return new RecordNotFoundError(e);
    }
    return e;
}

},{"5a56e1cfa09c88d1":"iLJWL","1d786aa3dec970da":"b1XzS","2105a0c9c27f9202":"hnRug"}],"epy6d":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RepoNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("c9ca7f11c2f1bb00");
const lexicons_1 = require("fb7ec95accdf9938");
const util_1 = require("40d5f8ce0af4430d");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.moderation.getRepo';
class RepoNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.RepoNotFoundError = RepoNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'RepoNotFound') return new RepoNotFoundError(e);
    }
    return e;
}

},{"c9ca7f11c2f1bb00":"iLJWL","fb7ec95accdf9938":"b1XzS","40d5f8ce0af4430d":"hnRug"}],"78Ath":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SetNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("f39cc6a403162efa");
const lexicons_1 = require("5fe7e2c23397a2e3");
const util_1 = require("92e16354fb29cc78");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.set.deleteSet';
class SetNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.SetNotFoundError = SetNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'SetNotFound') return new SetNotFoundError(e);
    }
    return e;
}

},{"f39cc6a403162efa":"iLJWL","5fe7e2c23397a2e3":"b1XzS","92e16354fb29cc78":"hnRug"}],"jQan7":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SetNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("933ab84889b9a188");
const lexicons_1 = require("cb35c09606bac87e");
const util_1 = require("c8d9ece3e68e1a53");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.set.deleteValues';
class SetNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.SetNotFoundError = SetNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'SetNotFound') return new SetNotFoundError(e);
    }
    return e;
}

},{"933ab84889b9a188":"iLJWL","cb35c09606bac87e":"b1XzS","c8d9ece3e68e1a53":"hnRug"}],"bvf5g":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SetNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("4cbfd78276fc4fe0");
const lexicons_1 = require("4dd6d54cabcd1469");
const util_1 = require("200b864e29e94fcb");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.set.getValues';
class SetNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.SetNotFoundError = SetNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'SetNotFound') return new SetNotFoundError(e);
    }
    return e;
}

},{"4cbfd78276fc4fe0":"iLJWL","4dd6d54cabcd1469":"b1XzS","200b864e29e94fcb":"hnRug"}],"aqsr0":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MemberAlreadyExistsError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("acf1e9676c774ecc");
const lexicons_1 = require("64c38dc7c29f497e");
const util_1 = require("947473bb27cccf14");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.team.addMember';
class MemberAlreadyExistsError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.MemberAlreadyExistsError = MemberAlreadyExistsError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'MemberAlreadyExists') return new MemberAlreadyExistsError(e);
    }
    return e;
}

},{"acf1e9676c774ecc":"iLJWL","64c38dc7c29f497e":"b1XzS","947473bb27cccf14":"hnRug"}],"aHoIN":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CannotDeleteSelfError = exports.MemberNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("fc8a7e55ed6526ad");
const lexicons_1 = require("29794a86eb2fbb47");
const util_1 = require("8c5db3ba035cbdff");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.team.deleteMember';
class MemberNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.MemberNotFoundError = MemberNotFoundError;
class CannotDeleteSelfError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.CannotDeleteSelfError = CannotDeleteSelfError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'MemberNotFound') return new MemberNotFoundError(e);
        if (e.error === 'CannotDeleteSelf') return new CannotDeleteSelfError(e);
    }
    return e;
}

},{"fc8a7e55ed6526ad":"iLJWL","29794a86eb2fbb47":"b1XzS","8c5db3ba035cbdff":"hnRug"}],"9m7Gb":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MemberNotFoundError = void 0;
exports.toKnownErr = toKnownErr;
/**
 * GENERATED CODE - DO NOT MODIFY
 */ const xrpc_1 = require("b556822caca7ad24");
const lexicons_1 = require("b9e5663e5d3e3174");
const util_1 = require("882b93519b8ba4a0");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.team.updateMember';
class MemberNotFoundError extends xrpc_1.XRPCError {
    constructor(src){
        super(src.status, src.error, src.message, src.headers, {
            cause: src
        });
    }
}
exports.MemberNotFoundError = MemberNotFoundError;
function toKnownErr(e) {
    if (e instanceof xrpc_1.XRPCError) {
        if (e.error === 'MemberNotFound') return new MemberNotFoundError(e);
    }
    return e;
}

},{"b556822caca7ad24":"iLJWL","b9e5663e5d3e3174":"b1XzS","882b93519b8ba4a0":"hnRug"}],"kPYCl":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isStatusAttr = isStatusAttr;
exports.validateStatusAttr = validateStatusAttr;
exports.isAccountView = isAccountView;
exports.validateAccountView = validateAccountView;
exports.isRepoRef = isRepoRef;
exports.validateRepoRef = validateRepoRef;
exports.isRepoBlobRef = isRepoBlobRef;
exports.validateRepoBlobRef = validateRepoBlobRef;
exports.isThreatSignature = isThreatSignature;
exports.validateThreatSignature = validateThreatSignature;
const lexicons_1 = require("29e81c33899b163c");
const util_1 = require("ad3e0f15b5f237e6");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.admin.defs';
const hashStatusAttr = 'statusAttr';
function isStatusAttr(v) {
    return is$typed(v, id, hashStatusAttr);
}
function validateStatusAttr(v) {
    return validate(v, id, hashStatusAttr);
}
const hashAccountView = 'accountView';
function isAccountView(v) {
    return is$typed(v, id, hashAccountView);
}
function validateAccountView(v) {
    return validate(v, id, hashAccountView);
}
const hashRepoRef = 'repoRef';
function isRepoRef(v) {
    return is$typed(v, id, hashRepoRef);
}
function validateRepoRef(v) {
    return validate(v, id, hashRepoRef);
}
const hashRepoBlobRef = 'repoBlobRef';
function isRepoBlobRef(v) {
    return is$typed(v, id, hashRepoBlobRef);
}
function validateRepoBlobRef(v) {
    return validate(v, id, hashRepoBlobRef);
}
const hashThreatSignature = 'threatSignature';
function isThreatSignature(v) {
    return is$typed(v, id, hashThreatSignature);
}
function validateThreatSignature(v) {
    return validate(v, id, hashThreatSignature);
}

},{"29e81c33899b163c":"b1XzS","ad3e0f15b5f237e6":"hnRug"}],"6O8ZH":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("5e0cdbd8f988d142");
const util_1 = require("220f6ddb594753be");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.admin.deleteAccount';
function toKnownErr(e) {
    return e;
}

},{"5e0cdbd8f988d142":"b1XzS","220f6ddb594753be":"hnRug"}],"1Cfkq":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("5985d5b361ddb925");
const util_1 = require("986b01d3d4162933");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.admin.disableAccountInvites';
function toKnownErr(e) {
    return e;
}

},{"5985d5b361ddb925":"b1XzS","986b01d3d4162933":"hnRug"}],"4odgp":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("e560620f7dfa2a5e");
const util_1 = require("2c5d781ac5d9123d");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.admin.disableInviteCodes';
function toKnownErr(e) {
    return e;
}

},{"e560620f7dfa2a5e":"b1XzS","2c5d781ac5d9123d":"hnRug"}],"aF1hp":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("1ce3981fb437d642");
const util_1 = require("d4dde53d0147bdaf");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.admin.enableAccountInvites';
function toKnownErr(e) {
    return e;
}

},{"1ce3981fb437d642":"b1XzS","d4dde53d0147bdaf":"hnRug"}],"eoQaP":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("df05f37046dbbbf7");
const util_1 = require("7dfb28f4895a34cd");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.admin.getAccountInfo';
function toKnownErr(e) {
    return e;
}

},{"df05f37046dbbbf7":"b1XzS","7dfb28f4895a34cd":"hnRug"}],"gWQmG":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("c029039c3b19515f");
const util_1 = require("205160cbf95641a5");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.admin.getAccountInfos';
function toKnownErr(e) {
    return e;
}

},{"c029039c3b19515f":"b1XzS","205160cbf95641a5":"hnRug"}],"gIjIq":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("6feea33b4e810364");
const util_1 = require("293edae8d3ed092a");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.admin.getInviteCodes';
function toKnownErr(e) {
    return e;
}

},{"6feea33b4e810364":"b1XzS","293edae8d3ed092a":"hnRug"}],"jBQXw":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("a7fd001ec7ec1ac5");
const util_1 = require("ccc43ede7f55421");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.admin.getSubjectStatus';
function toKnownErr(e) {
    return e;
}

},{"a7fd001ec7ec1ac5":"b1XzS","ccc43ede7f55421":"hnRug"}],"6YqsM":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("8fdf95c5631925fb");
const util_1 = require("59b6318a13b08f12");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.admin.searchAccounts';
function toKnownErr(e) {
    return e;
}

},{"8fdf95c5631925fb":"b1XzS","59b6318a13b08f12":"hnRug"}],"htqzg":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("c038fd460857fce7");
const util_1 = require("858e88d02d58bf75");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.admin.sendEmail';
function toKnownErr(e) {
    return e;
}

},{"c038fd460857fce7":"b1XzS","858e88d02d58bf75":"hnRug"}],"22cEG":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("b26bddc7039f5006");
const util_1 = require("d0c9a25628330dfb");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.admin.updateAccountEmail';
function toKnownErr(e) {
    return e;
}

},{"b26bddc7039f5006":"b1XzS","d0c9a25628330dfb":"hnRug"}],"4z2D2":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("a4647be7efecd6af");
const util_1 = require("4a62eb0390e5491f");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.admin.updateAccountHandle';
function toKnownErr(e) {
    return e;
}

},{"a4647be7efecd6af":"b1XzS","4a62eb0390e5491f":"hnRug"}],"jpyck":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("d3c7422b041700b6");
const util_1 = require("35f87aa7a48c7992");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.admin.updateAccountPassword';
function toKnownErr(e) {
    return e;
}

},{"d3c7422b041700b6":"b1XzS","35f87aa7a48c7992":"hnRug"}],"4v5W8":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("1f94a814ad12231c");
const util_1 = require("a0dc41f62e382b05");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.admin.updateAccountSigningKey';
function toKnownErr(e) {
    return e;
}

},{"1f94a814ad12231c":"b1XzS","a0dc41f62e382b05":"hnRug"}],"ce8Lr":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("eef082a2f144369b");
const util_1 = require("2b64a0d6201ae620");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.admin.updateSubjectStatus';
function toKnownErr(e) {
    return e;
}

},{"eef082a2f144369b":"b1XzS","2b64a0d6201ae620":"hnRug"}],"11eV5":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isIdentityInfo = isIdentityInfo;
exports.validateIdentityInfo = validateIdentityInfo;
const lexicons_1 = require("e394ac5a7ed2f85e");
const util_1 = require("f4476534df132e08");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.identity.defs';
const hashIdentityInfo = 'identityInfo';
function isIdentityInfo(v) {
    return is$typed(v, id, hashIdentityInfo);
}
function validateIdentityInfo(v) {
    return validate(v, id, hashIdentityInfo);
}

},{"e394ac5a7ed2f85e":"b1XzS","f4476534df132e08":"hnRug"}],"5IJ3Y":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("81e3e46a111ca74b");
const util_1 = require("d50515307293465a");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.identity.getRecommendedDidCredentials';
function toKnownErr(e) {
    return e;
}

},{"81e3e46a111ca74b":"b1XzS","d50515307293465a":"hnRug"}],"6Pz76":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("77c346650a96495d");
const util_1 = require("1180077883975492");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.identity.requestPlcOperationSignature';
function toKnownErr(e) {
    return e;
}

},{"77c346650a96495d":"b1XzS","1180077883975492":"hnRug"}],"ffjbJ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("d8874e7cbe12cd6b");
const util_1 = require("1e2dc887757b6152");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.identity.signPlcOperation';
function toKnownErr(e) {
    return e;
}

},{"d8874e7cbe12cd6b":"b1XzS","1e2dc887757b6152":"hnRug"}],"6VjD5":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("a5cb47fa81bd4542");
const util_1 = require("6c6e3d6583979dba");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.identity.submitPlcOperation';
function toKnownErr(e) {
    return e;
}

},{"a5cb47fa81bd4542":"b1XzS","6c6e3d6583979dba":"hnRug"}],"iMiw1":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("af0b267c5620699d");
const util_1 = require("1442fc788bc8b247");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.identity.updateHandle';
function toKnownErr(e) {
    return e;
}

},{"af0b267c5620699d":"b1XzS","1442fc788bc8b247":"hnRug"}],"e0kFH":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isLabel = isLabel;
exports.validateLabel = validateLabel;
exports.isSelfLabels = isSelfLabels;
exports.validateSelfLabels = validateSelfLabels;
exports.isSelfLabel = isSelfLabel;
exports.validateSelfLabel = validateSelfLabel;
exports.isLabelValueDefinition = isLabelValueDefinition;
exports.validateLabelValueDefinition = validateLabelValueDefinition;
exports.isLabelValueDefinitionStrings = isLabelValueDefinitionStrings;
exports.validateLabelValueDefinitionStrings = validateLabelValueDefinitionStrings;
const lexicons_1 = require("127f61c44b297e80");
const util_1 = require("5e701820de459bb3");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.label.defs';
const hashLabel = 'label';
function isLabel(v) {
    return is$typed(v, id, hashLabel);
}
function validateLabel(v) {
    return validate(v, id, hashLabel);
}
const hashSelfLabels = 'selfLabels';
function isSelfLabels(v) {
    return is$typed(v, id, hashSelfLabels);
}
function validateSelfLabels(v) {
    return validate(v, id, hashSelfLabels);
}
const hashSelfLabel = 'selfLabel';
function isSelfLabel(v) {
    return is$typed(v, id, hashSelfLabel);
}
function validateSelfLabel(v) {
    return validate(v, id, hashSelfLabel);
}
const hashLabelValueDefinition = 'labelValueDefinition';
function isLabelValueDefinition(v) {
    return is$typed(v, id, hashLabelValueDefinition);
}
function validateLabelValueDefinition(v) {
    return validate(v, id, hashLabelValueDefinition);
}
const hashLabelValueDefinitionStrings = 'labelValueDefinitionStrings';
function isLabelValueDefinitionStrings(v) {
    return is$typed(v, id, hashLabelValueDefinitionStrings);
}
function validateLabelValueDefinitionStrings(v) {
    return validate(v, id, hashLabelValueDefinitionStrings);
}

},{"127f61c44b297e80":"b1XzS","5e701820de459bb3":"hnRug"}],"1YEbZ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("7775da9f4b3a8248");
const util_1 = require("def963f98b7b210a");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.label.queryLabels';
function toKnownErr(e) {
    return e;
}

},{"7775da9f4b3a8248":"b1XzS","def963f98b7b210a":"hnRug"}],"99xZt":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isLabels = isLabels;
exports.validateLabels = validateLabels;
exports.isInfo = isInfo;
exports.validateInfo = validateInfo;
const lexicons_1 = require("5a43b17e4c3da610");
const util_1 = require("13062729ded84943");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.label.subscribeLabels';
const hashLabels = 'labels';
function isLabels(v) {
    return is$typed(v, id, hashLabels);
}
function validateLabels(v) {
    return validate(v, id, hashLabels);
}
const hashInfo = 'info';
function isInfo(v) {
    return is$typed(v, id, hashInfo);
}
function validateInfo(v) {
    return validate(v, id, hashInfo);
}

},{"5a43b17e4c3da610":"b1XzS","13062729ded84943":"hnRug"}],"lU9cS":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const lexicons_1 = require("278d32799aaea11e");
const util_1 = require("4c5d1592bfe684ac");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.lexicon.schema';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}

},{"278d32799aaea11e":"b1XzS","4c5d1592bfe684ac":"hnRug"}],"3DcY9":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("713ba80ce0d2f500");
const util_1 = require("e827a12843d9f5b2");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.moderation.createReport';
function toKnownErr(e) {
    return e;
}

},{"713ba80ce0d2f500":"b1XzS","e827a12843d9f5b2":"hnRug"}],"ddXNi":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.REASONAPPEAL = exports.REASONOTHER = exports.REASONRUDE = exports.REASONSEXUAL = exports.REASONMISLEADING = exports.REASONVIOLATION = exports.REASONSPAM = void 0;
const lexicons_1 = require("515f2dc3971a89c0");
const util_1 = require("997384d73150fc1d");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.moderation.defs';
/** Spam: frequent unwanted promotion, replies, mentions */ exports.REASONSPAM = `${id}#reasonSpam`;
/** Direct violation of server rules, laws, terms of service */ exports.REASONVIOLATION = `${id}#reasonViolation`;
/** Misleading identity, affiliation, or content */ exports.REASONMISLEADING = `${id}#reasonMisleading`;
/** Unwanted or mislabeled sexual content */ exports.REASONSEXUAL = `${id}#reasonSexual`;
/** Rude, harassing, explicit, or otherwise unwelcoming behavior */ exports.REASONRUDE = `${id}#reasonRude`;
/** Other: reports not falling under another report category */ exports.REASONOTHER = `${id}#reasonOther`;
/** Appeal: appeal a previously taken moderation action */ exports.REASONAPPEAL = `${id}#reasonAppeal`;

},{"515f2dc3971a89c0":"b1XzS","997384d73150fc1d":"hnRug"}],"3THg2":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isCommitMeta = isCommitMeta;
exports.validateCommitMeta = validateCommitMeta;
const lexicons_1 = require("610259059945654e");
const util_1 = require("ca41de4b2d9a5df7");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.repo.defs';
const hashCommitMeta = 'commitMeta';
function isCommitMeta(v) {
    return is$typed(v, id, hashCommitMeta);
}
function validateCommitMeta(v) {
    return validate(v, id, hashCommitMeta);
}

},{"610259059945654e":"b1XzS","ca41de4b2d9a5df7":"hnRug"}],"47wwr":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("f39fabd1036a93f");
const util_1 = require("40838f78d2270b3d");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.repo.describeRepo';
function toKnownErr(e) {
    return e;
}

},{"f39fabd1036a93f":"b1XzS","40838f78d2270b3d":"hnRug"}],"hNG1j":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("40737071df8ed1ee");
const util_1 = require("365dc6c766152993");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.repo.importRepo';
function toKnownErr(e) {
    return e;
}

},{"40737071df8ed1ee":"b1XzS","365dc6c766152993":"hnRug"}],"ciMfw":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isRecordBlob = isRecordBlob;
exports.validateRecordBlob = validateRecordBlob;
const lexicons_1 = require("992e6a6c4adf841a");
const util_1 = require("2821c7031616d6bf");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.repo.listMissingBlobs';
function toKnownErr(e) {
    return e;
}
const hashRecordBlob = 'recordBlob';
function isRecordBlob(v) {
    return is$typed(v, id, hashRecordBlob);
}
function validateRecordBlob(v) {
    return validate(v, id, hashRecordBlob);
}

},{"992e6a6c4adf841a":"b1XzS","2821c7031616d6bf":"hnRug"}],"6VJ6M":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const lexicons_1 = require("21cf0ea7c54ebf56");
const util_1 = require("21064770f02d1e9d");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.repo.listRecords';
function toKnownErr(e) {
    return e;
}
const hashRecord = 'record';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord);
}

},{"21cf0ea7c54ebf56":"b1XzS","21064770f02d1e9d":"hnRug"}],"fTGn4":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMain = isMain;
exports.validateMain = validateMain;
const lexicons_1 = require("795b31a22483b307");
const util_1 = require("f041a0b9020fdfa8");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.repo.strongRef';
const hashMain = 'main';
function isMain(v) {
    return is$typed(v, id, hashMain);
}
function validateMain(v) {
    return validate(v, id, hashMain);
}

},{"795b31a22483b307":"b1XzS","f041a0b9020fdfa8":"hnRug"}],"inla8":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("683cfef33a4c0e41");
const util_1 = require("dce512446d6aed7b");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.repo.uploadBlob';
function toKnownErr(e) {
    return e;
}

},{"683cfef33a4c0e41":"b1XzS","dce512446d6aed7b":"hnRug"}],"2tuP2":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("7fb31841bb66bb80");
const util_1 = require("de6145055e78b01a");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.activateAccount';
function toKnownErr(e) {
    return e;
}

},{"7fb31841bb66bb80":"b1XzS","de6145055e78b01a":"hnRug"}],"3K1TB":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("a1c5b1578b43fadd");
const util_1 = require("4ea629a18643fc39");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.checkAccountStatus';
function toKnownErr(e) {
    return e;
}

},{"a1c5b1578b43fadd":"b1XzS","4ea629a18643fc39":"hnRug"}],"3ktdb":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("6bb049941a9d294f");
const util_1 = require("e4a911818def6130");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.createInviteCode';
function toKnownErr(e) {
    return e;
}

},{"6bb049941a9d294f":"b1XzS","e4a911818def6130":"hnRug"}],"3Zxic":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isAccountCodes = isAccountCodes;
exports.validateAccountCodes = validateAccountCodes;
const lexicons_1 = require("5c8479ebbead2277");
const util_1 = require("72735e2a92b08fcf");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.createInviteCodes';
function toKnownErr(e) {
    return e;
}
const hashAccountCodes = 'accountCodes';
function isAccountCodes(v) {
    return is$typed(v, id, hashAccountCodes);
}
function validateAccountCodes(v) {
    return validate(v, id, hashAccountCodes);
}

},{"5c8479ebbead2277":"b1XzS","72735e2a92b08fcf":"hnRug"}],"j6IGd":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("56935992ea0af5ed");
const util_1 = require("c833d1c216a3c634");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.deactivateAccount';
function toKnownErr(e) {
    return e;
}

},{"56935992ea0af5ed":"b1XzS","c833d1c216a3c634":"hnRug"}],"lLvfw":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isInviteCode = isInviteCode;
exports.validateInviteCode = validateInviteCode;
exports.isInviteCodeUse = isInviteCodeUse;
exports.validateInviteCodeUse = validateInviteCodeUse;
const lexicons_1 = require("1b915872f113e1bb");
const util_1 = require("274951cbe13ac6ac");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.defs';
const hashInviteCode = 'inviteCode';
function isInviteCode(v) {
    return is$typed(v, id, hashInviteCode);
}
function validateInviteCode(v) {
    return validate(v, id, hashInviteCode);
}
const hashInviteCodeUse = 'inviteCodeUse';
function isInviteCodeUse(v) {
    return is$typed(v, id, hashInviteCodeUse);
}
function validateInviteCodeUse(v) {
    return validate(v, id, hashInviteCodeUse);
}

},{"1b915872f113e1bb":"b1XzS","274951cbe13ac6ac":"hnRug"}],"hQb3B":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("a29286be9b392c5f");
const util_1 = require("6cf0fc07cdaa8578");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.deleteSession';
function toKnownErr(e) {
    return e;
}

},{"a29286be9b392c5f":"b1XzS","6cf0fc07cdaa8578":"hnRug"}],"iAKAC":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isLinks = isLinks;
exports.validateLinks = validateLinks;
exports.isContact = isContact;
exports.validateContact = validateContact;
const lexicons_1 = require("fc5ac8feb28691dd");
const util_1 = require("9836315e8027c292");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.describeServer';
function toKnownErr(e) {
    return e;
}
const hashLinks = 'links';
function isLinks(v) {
    return is$typed(v, id, hashLinks);
}
function validateLinks(v) {
    return validate(v, id, hashLinks);
}
const hashContact = 'contact';
function isContact(v) {
    return is$typed(v, id, hashContact);
}
function validateContact(v) {
    return validate(v, id, hashContact);
}

},{"fc5ac8feb28691dd":"b1XzS","9836315e8027c292":"hnRug"}],"9uLP2":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("6496abff3ac8369d");
const util_1 = require("3e7247187960ae3");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.getSession';
function toKnownErr(e) {
    return e;
}

},{"6496abff3ac8369d":"b1XzS","3e7247187960ae3":"hnRug"}],"lcjr1":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("3164ee0ce951f702");
const util_1 = require("24a5c5d788efaa7");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.requestAccountDelete';
function toKnownErr(e) {
    return e;
}

},{"3164ee0ce951f702":"b1XzS","24a5c5d788efaa7":"hnRug"}],"7Ctmc":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("951fc1bff36a864");
const util_1 = require("c728215675710af7");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.requestEmailConfirmation';
function toKnownErr(e) {
    return e;
}

},{"951fc1bff36a864":"b1XzS","c728215675710af7":"hnRug"}],"eFKte":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("a06adef17c577c43");
const util_1 = require("1aefbcf0803acee4");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.requestEmailUpdate';
function toKnownErr(e) {
    return e;
}

},{"a06adef17c577c43":"b1XzS","1aefbcf0803acee4":"hnRug"}],"e5LcV":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("cbf3fa64ac99ab3f");
const util_1 = require("d923e29f09a2aa5c");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.requestPasswordReset';
function toKnownErr(e) {
    return e;
}

},{"cbf3fa64ac99ab3f":"b1XzS","d923e29f09a2aa5c":"hnRug"}],"cPRVU":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("4a159d9690ebb446");
const util_1 = require("e909a61a3829f892");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.reserveSigningKey';
function toKnownErr(e) {
    return e;
}

},{"4a159d9690ebb446":"b1XzS","e909a61a3829f892":"hnRug"}],"9Tgm5":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("9b805eba11906114");
const util_1 = require("c5a815c8d307939b");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.server.revokeAppPassword';
function toKnownErr(e) {
    return e;
}

},{"9b805eba11906114":"b1XzS","c5a815c8d307939b":"hnRug"}],"dico9":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const lexicons_1 = require("6f1063eafb78579b");
const util_1 = require("889b8ac6eb14590b");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.sync.defs';

},{"6f1063eafb78579b":"b1XzS","889b8ac6eb14590b":"hnRug"}],"ikEvw":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("ba297f85f15ccf9a");
const util_1 = require("2b1bdf11f2f9bd62");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.sync.getCheckout';
function toKnownErr(e) {
    return e;
}

},{"ba297f85f15ccf9a":"b1XzS","2b1bdf11f2f9bd62":"hnRug"}],"59xD5":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isHost = isHost;
exports.validateHost = validateHost;
const lexicons_1 = require("8c47f2aab3184f2f");
const util_1 = require("a82cf094b13c0599");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.sync.listHosts';
function toKnownErr(e) {
    return e;
}
const hashHost = 'host';
function isHost(v) {
    return is$typed(v, id, hashHost);
}
function validateHost(v) {
    return validate(v, id, hashHost);
}

},{"8c47f2aab3184f2f":"b1XzS","a82cf094b13c0599":"hnRug"}],"6D4ag":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isRepo = isRepo;
exports.validateRepo = validateRepo;
const lexicons_1 = require("15ab8ecb5c2db778");
const util_1 = require("c7100a368bbaddbd");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.sync.listRepos';
function toKnownErr(e) {
    return e;
}
const hashRepo = 'repo';
function isRepo(v) {
    return is$typed(v, id, hashRepo);
}
function validateRepo(v) {
    return validate(v, id, hashRepo);
}

},{"15ab8ecb5c2db778":"b1XzS","c7100a368bbaddbd":"hnRug"}],"ayGV8":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isRepo = isRepo;
exports.validateRepo = validateRepo;
const lexicons_1 = require("11cd05c4e8a94b76");
const util_1 = require("ef6c763a1057e3d3");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.sync.listReposByCollection';
function toKnownErr(e) {
    return e;
}
const hashRepo = 'repo';
function isRepo(v) {
    return is$typed(v, id, hashRepo);
}
function validateRepo(v) {
    return validate(v, id, hashRepo);
}

},{"11cd05c4e8a94b76":"b1XzS","ef6c763a1057e3d3":"hnRug"}],"lD7AR":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("c20356c2a881f1e4");
const util_1 = require("9de4635568764615");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.sync.notifyOfUpdate';
function toKnownErr(e) {
    return e;
}

},{"c20356c2a881f1e4":"b1XzS","9de4635568764615":"hnRug"}],"inMEP":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isCommit = isCommit;
exports.validateCommit = validateCommit;
exports.isSync = isSync;
exports.validateSync = validateSync;
exports.isIdentity = isIdentity;
exports.validateIdentity = validateIdentity;
exports.isAccount = isAccount;
exports.validateAccount = validateAccount;
exports.isInfo = isInfo;
exports.validateInfo = validateInfo;
exports.isRepoOp = isRepoOp;
exports.validateRepoOp = validateRepoOp;
const lexicons_1 = require("dd16b28983d82fc7");
const util_1 = require("f5e7e5aef001f2b7");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.sync.subscribeRepos';
const hashCommit = 'commit';
function isCommit(v) {
    return is$typed(v, id, hashCommit);
}
function validateCommit(v) {
    return validate(v, id, hashCommit);
}
const hashSync = 'sync';
function isSync(v) {
    return is$typed(v, id, hashSync);
}
function validateSync(v) {
    return validate(v, id, hashSync);
}
const hashIdentity = 'identity';
function isIdentity(v) {
    return is$typed(v, id, hashIdentity);
}
function validateIdentity(v) {
    return validate(v, id, hashIdentity);
}
const hashAccount = 'account';
function isAccount(v) {
    return is$typed(v, id, hashAccount);
}
function validateAccount(v) {
    return validate(v, id, hashAccount);
}
const hashInfo = 'info';
function isInfo(v) {
    return is$typed(v, id, hashInfo);
}
function validateInfo(v) {
    return validate(v, id, hashInfo);
}
const hashRepoOp = 'repoOp';
function isRepoOp(v) {
    return is$typed(v, id, hashRepoOp);
}
function validateRepoOp(v) {
    return validate(v, id, hashRepoOp);
}

},{"dd16b28983d82fc7":"b1XzS","f5e7e5aef001f2b7":"hnRug"}],"1dxCs":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("fefd1a7c3df685d7");
const util_1 = require("f5493742e162a59c");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.temp.addReservedHandle';
function toKnownErr(e) {
    return e;
}

},{"fefd1a7c3df685d7":"b1XzS","f5493742e162a59c":"hnRug"}],"hK5E8":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("d8d36795bbe1386");
const util_1 = require("d8485cfd2d7bc6e5");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.temp.checkSignupQueue';
function toKnownErr(e) {
    return e;
}

},{"d8d36795bbe1386":"b1XzS","d8485cfd2d7bc6e5":"hnRug"}],"39azS":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("770b5e99142fc68d");
const util_1 = require("a96fed47aa6ced8b");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.temp.fetchLabels';
function toKnownErr(e) {
    return e;
}

},{"770b5e99142fc68d":"b1XzS","a96fed47aa6ced8b":"hnRug"}],"h84N5":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("f3b533e14fff39f2");
const util_1 = require("89d9cd1548e83bab");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'com.atproto.temp.requestPhoneVerification';
function toKnownErr(e) {
    return e;
}

},{"f3b533e14fff39f2":"b1XzS","89d9cd1548e83bab":"hnRug"}],"8lKGI":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isProfileViewBasic = isProfileViewBasic;
exports.validateProfileViewBasic = validateProfileViewBasic;
exports.isProfileView = isProfileView;
exports.validateProfileView = validateProfileView;
exports.isProfileViewDetailed = isProfileViewDetailed;
exports.validateProfileViewDetailed = validateProfileViewDetailed;
exports.isProfileAssociated = isProfileAssociated;
exports.validateProfileAssociated = validateProfileAssociated;
exports.isProfileAssociatedChat = isProfileAssociatedChat;
exports.validateProfileAssociatedChat = validateProfileAssociatedChat;
exports.isViewerState = isViewerState;
exports.validateViewerState = validateViewerState;
exports.isKnownFollowers = isKnownFollowers;
exports.validateKnownFollowers = validateKnownFollowers;
exports.isVerificationState = isVerificationState;
exports.validateVerificationState = validateVerificationState;
exports.isVerificationView = isVerificationView;
exports.validateVerificationView = validateVerificationView;
exports.isAdultContentPref = isAdultContentPref;
exports.validateAdultContentPref = validateAdultContentPref;
exports.isContentLabelPref = isContentLabelPref;
exports.validateContentLabelPref = validateContentLabelPref;
exports.isSavedFeed = isSavedFeed;
exports.validateSavedFeed = validateSavedFeed;
exports.isSavedFeedsPrefV2 = isSavedFeedsPrefV2;
exports.validateSavedFeedsPrefV2 = validateSavedFeedsPrefV2;
exports.isSavedFeedsPref = isSavedFeedsPref;
exports.validateSavedFeedsPref = validateSavedFeedsPref;
exports.isPersonalDetailsPref = isPersonalDetailsPref;
exports.validatePersonalDetailsPref = validatePersonalDetailsPref;
exports.isFeedViewPref = isFeedViewPref;
exports.validateFeedViewPref = validateFeedViewPref;
exports.isThreadViewPref = isThreadViewPref;
exports.validateThreadViewPref = validateThreadViewPref;
exports.isInterestsPref = isInterestsPref;
exports.validateInterestsPref = validateInterestsPref;
exports.isMutedWord = isMutedWord;
exports.validateMutedWord = validateMutedWord;
exports.isMutedWordsPref = isMutedWordsPref;
exports.validateMutedWordsPref = validateMutedWordsPref;
exports.isHiddenPostsPref = isHiddenPostsPref;
exports.validateHiddenPostsPref = validateHiddenPostsPref;
exports.isLabelersPref = isLabelersPref;
exports.validateLabelersPref = validateLabelersPref;
exports.isLabelerPrefItem = isLabelerPrefItem;
exports.validateLabelerPrefItem = validateLabelerPrefItem;
exports.isBskyAppStatePref = isBskyAppStatePref;
exports.validateBskyAppStatePref = validateBskyAppStatePref;
exports.isBskyAppProgressGuide = isBskyAppProgressGuide;
exports.validateBskyAppProgressGuide = validateBskyAppProgressGuide;
exports.isNux = isNux;
exports.validateNux = validateNux;
exports.isVerificationPrefs = isVerificationPrefs;
exports.validateVerificationPrefs = validateVerificationPrefs;
exports.isPostInteractionSettingsPref = isPostInteractionSettingsPref;
exports.validatePostInteractionSettingsPref = validatePostInteractionSettingsPref;
exports.isStatusView = isStatusView;
exports.validateStatusView = validateStatusView;
const lexicons_1 = require("91450d251b3d789e");
const util_1 = require("2f4d4164aee28804");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.actor.defs';
const hashProfileViewBasic = 'profileViewBasic';
function isProfileViewBasic(v) {
    return is$typed(v, id, hashProfileViewBasic);
}
function validateProfileViewBasic(v) {
    return validate(v, id, hashProfileViewBasic);
}
const hashProfileView = 'profileView';
function isProfileView(v) {
    return is$typed(v, id, hashProfileView);
}
function validateProfileView(v) {
    return validate(v, id, hashProfileView);
}
const hashProfileViewDetailed = 'profileViewDetailed';
function isProfileViewDetailed(v) {
    return is$typed(v, id, hashProfileViewDetailed);
}
function validateProfileViewDetailed(v) {
    return validate(v, id, hashProfileViewDetailed);
}
const hashProfileAssociated = 'profileAssociated';
function isProfileAssociated(v) {
    return is$typed(v, id, hashProfileAssociated);
}
function validateProfileAssociated(v) {
    return validate(v, id, hashProfileAssociated);
}
const hashProfileAssociatedChat = 'profileAssociatedChat';
function isProfileAssociatedChat(v) {
    return is$typed(v, id, hashProfileAssociatedChat);
}
function validateProfileAssociatedChat(v) {
    return validate(v, id, hashProfileAssociatedChat);
}
const hashViewerState = 'viewerState';
function isViewerState(v) {
    return is$typed(v, id, hashViewerState);
}
function validateViewerState(v) {
    return validate(v, id, hashViewerState);
}
const hashKnownFollowers = 'knownFollowers';
function isKnownFollowers(v) {
    return is$typed(v, id, hashKnownFollowers);
}
function validateKnownFollowers(v) {
    return validate(v, id, hashKnownFollowers);
}
const hashVerificationState = 'verificationState';
function isVerificationState(v) {
    return is$typed(v, id, hashVerificationState);
}
function validateVerificationState(v) {
    return validate(v, id, hashVerificationState);
}
const hashVerificationView = 'verificationView';
function isVerificationView(v) {
    return is$typed(v, id, hashVerificationView);
}
function validateVerificationView(v) {
    return validate(v, id, hashVerificationView);
}
const hashAdultContentPref = 'adultContentPref';
function isAdultContentPref(v) {
    return is$typed(v, id, hashAdultContentPref);
}
function validateAdultContentPref(v) {
    return validate(v, id, hashAdultContentPref);
}
const hashContentLabelPref = 'contentLabelPref';
function isContentLabelPref(v) {
    return is$typed(v, id, hashContentLabelPref);
}
function validateContentLabelPref(v) {
    return validate(v, id, hashContentLabelPref);
}
const hashSavedFeed = 'savedFeed';
function isSavedFeed(v) {
    return is$typed(v, id, hashSavedFeed);
}
function validateSavedFeed(v) {
    return validate(v, id, hashSavedFeed);
}
const hashSavedFeedsPrefV2 = 'savedFeedsPrefV2';
function isSavedFeedsPrefV2(v) {
    return is$typed(v, id, hashSavedFeedsPrefV2);
}
function validateSavedFeedsPrefV2(v) {
    return validate(v, id, hashSavedFeedsPrefV2);
}
const hashSavedFeedsPref = 'savedFeedsPref';
function isSavedFeedsPref(v) {
    return is$typed(v, id, hashSavedFeedsPref);
}
function validateSavedFeedsPref(v) {
    return validate(v, id, hashSavedFeedsPref);
}
const hashPersonalDetailsPref = 'personalDetailsPref';
function isPersonalDetailsPref(v) {
    return is$typed(v, id, hashPersonalDetailsPref);
}
function validatePersonalDetailsPref(v) {
    return validate(v, id, hashPersonalDetailsPref);
}
const hashFeedViewPref = 'feedViewPref';
function isFeedViewPref(v) {
    return is$typed(v, id, hashFeedViewPref);
}
function validateFeedViewPref(v) {
    return validate(v, id, hashFeedViewPref);
}
const hashThreadViewPref = 'threadViewPref';
function isThreadViewPref(v) {
    return is$typed(v, id, hashThreadViewPref);
}
function validateThreadViewPref(v) {
    return validate(v, id, hashThreadViewPref);
}
const hashInterestsPref = 'interestsPref';
function isInterestsPref(v) {
    return is$typed(v, id, hashInterestsPref);
}
function validateInterestsPref(v) {
    return validate(v, id, hashInterestsPref);
}
const hashMutedWord = 'mutedWord';
function isMutedWord(v) {
    return is$typed(v, id, hashMutedWord);
}
function validateMutedWord(v) {
    return validate(v, id, hashMutedWord);
}
const hashMutedWordsPref = 'mutedWordsPref';
function isMutedWordsPref(v) {
    return is$typed(v, id, hashMutedWordsPref);
}
function validateMutedWordsPref(v) {
    return validate(v, id, hashMutedWordsPref);
}
const hashHiddenPostsPref = 'hiddenPostsPref';
function isHiddenPostsPref(v) {
    return is$typed(v, id, hashHiddenPostsPref);
}
function validateHiddenPostsPref(v) {
    return validate(v, id, hashHiddenPostsPref);
}
const hashLabelersPref = 'labelersPref';
function isLabelersPref(v) {
    return is$typed(v, id, hashLabelersPref);
}
function validateLabelersPref(v) {
    return validate(v, id, hashLabelersPref);
}
const hashLabelerPrefItem = 'labelerPrefItem';
function isLabelerPrefItem(v) {
    return is$typed(v, id, hashLabelerPrefItem);
}
function validateLabelerPrefItem(v) {
    return validate(v, id, hashLabelerPrefItem);
}
const hashBskyAppStatePref = 'bskyAppStatePref';
function isBskyAppStatePref(v) {
    return is$typed(v, id, hashBskyAppStatePref);
}
function validateBskyAppStatePref(v) {
    return validate(v, id, hashBskyAppStatePref);
}
const hashBskyAppProgressGuide = 'bskyAppProgressGuide';
function isBskyAppProgressGuide(v) {
    return is$typed(v, id, hashBskyAppProgressGuide);
}
function validateBskyAppProgressGuide(v) {
    return validate(v, id, hashBskyAppProgressGuide);
}
const hashNux = 'nux';
function isNux(v) {
    return is$typed(v, id, hashNux);
}
function validateNux(v) {
    return validate(v, id, hashNux);
}
const hashVerificationPrefs = 'verificationPrefs';
function isVerificationPrefs(v) {
    return is$typed(v, id, hashVerificationPrefs);
}
function validateVerificationPrefs(v) {
    return validate(v, id, hashVerificationPrefs);
}
const hashPostInteractionSettingsPref = 'postInteractionSettingsPref';
function isPostInteractionSettingsPref(v) {
    return is$typed(v, id, hashPostInteractionSettingsPref);
}
function validatePostInteractionSettingsPref(v) {
    return validate(v, id, hashPostInteractionSettingsPref);
}
const hashStatusView = 'statusView';
function isStatusView(v) {
    return is$typed(v, id, hashStatusView);
}
function validateStatusView(v) {
    return validate(v, id, hashStatusView);
}

},{"91450d251b3d789e":"b1XzS","2f4d4164aee28804":"hnRug"}],"cbFwe":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("eb76495a55746e99");
const util_1 = require("afe35643432fd54b");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.actor.getPreferences';
function toKnownErr(e) {
    return e;
}

},{"eb76495a55746e99":"b1XzS","afe35643432fd54b":"hnRug"}],"gaXHJ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("14b84962ad0b0a90");
const util_1 = require("b61972a2f685d43e");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.actor.getProfile';
function toKnownErr(e) {
    return e;
}

},{"14b84962ad0b0a90":"b1XzS","b61972a2f685d43e":"hnRug"}],"jiy3Z":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("ac20f0eb2cef4892");
const util_1 = require("7919cf0207876489");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.actor.getProfiles';
function toKnownErr(e) {
    return e;
}

},{"ac20f0eb2cef4892":"b1XzS","7919cf0207876489":"hnRug"}],"4WsiG":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("4050889dc13d6229");
const util_1 = require("da5aeb0e167cd969");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.actor.getSuggestions';
function toKnownErr(e) {
    return e;
}

},{"4050889dc13d6229":"b1XzS","da5aeb0e167cd969":"hnRug"}],"kCRw4":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const lexicons_1 = require("b2eaa257a87f628d");
const util_1 = require("964d0a0e1e224929");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.actor.profile';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}

},{"b2eaa257a87f628d":"b1XzS","964d0a0e1e224929":"hnRug"}],"87CNn":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("3b1f9894cdf98720");
const util_1 = require("5bce5cc64c494b91");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.actor.putPreferences';
function toKnownErr(e) {
    return e;
}

},{"3b1f9894cdf98720":"b1XzS","5bce5cc64c494b91":"hnRug"}],"cOeia":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("bb4f45941229211");
const util_1 = require("2169e9004475787");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.actor.searchActors';
function toKnownErr(e) {
    return e;
}

},{"bb4f45941229211":"b1XzS","2169e9004475787":"hnRug"}],"gxfTS":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("10984ee23f4e546d");
const util_1 = require("625b38ee9f40021a");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.actor.searchActorsTypeahead';
function toKnownErr(e) {
    return e;
}

},{"10984ee23f4e546d":"b1XzS","625b38ee9f40021a":"hnRug"}],"7n5ao":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LIVE = void 0;
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const lexicons_1 = require("5916fa4ae5f8b7ea");
const util_1 = require("44aa4db01866f327");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.actor.status';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}
/** Advertises an account as currently offering live content. */ exports.LIVE = `${id}#live`;

},{"5916fa4ae5f8b7ea":"b1XzS","44aa4db01866f327":"hnRug"}],"fRyIf":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isAspectRatio = isAspectRatio;
exports.validateAspectRatio = validateAspectRatio;
const lexicons_1 = require("f80d342f720f59ef");
const util_1 = require("b5d632e0c2f229af");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.embed.defs';
const hashAspectRatio = 'aspectRatio';
function isAspectRatio(v) {
    return is$typed(v, id, hashAspectRatio);
}
function validateAspectRatio(v) {
    return validate(v, id, hashAspectRatio);
}

},{"f80d342f720f59ef":"b1XzS","b5d632e0c2f229af":"hnRug"}],"bVerh":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMain = isMain;
exports.validateMain = validateMain;
exports.isExternal = isExternal;
exports.validateExternal = validateExternal;
exports.isView = isView;
exports.validateView = validateView;
exports.isViewExternal = isViewExternal;
exports.validateViewExternal = validateViewExternal;
const lexicons_1 = require("d5dc042c3cccd52a");
const util_1 = require("d52d54bfa0a08db1");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.embed.external';
const hashMain = 'main';
function isMain(v) {
    return is$typed(v, id, hashMain);
}
function validateMain(v) {
    return validate(v, id, hashMain);
}
const hashExternal = 'external';
function isExternal(v) {
    return is$typed(v, id, hashExternal);
}
function validateExternal(v) {
    return validate(v, id, hashExternal);
}
const hashView = 'view';
function isView(v) {
    return is$typed(v, id, hashView);
}
function validateView(v) {
    return validate(v, id, hashView);
}
const hashViewExternal = 'viewExternal';
function isViewExternal(v) {
    return is$typed(v, id, hashViewExternal);
}
function validateViewExternal(v) {
    return validate(v, id, hashViewExternal);
}

},{"d5dc042c3cccd52a":"b1XzS","d52d54bfa0a08db1":"hnRug"}],"hVO1m":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMain = isMain;
exports.validateMain = validateMain;
exports.isImage = isImage;
exports.validateImage = validateImage;
exports.isView = isView;
exports.validateView = validateView;
exports.isViewImage = isViewImage;
exports.validateViewImage = validateViewImage;
const lexicons_1 = require("f856e0d7352ea676");
const util_1 = require("236ceed7801d6a95");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.embed.images';
const hashMain = 'main';
function isMain(v) {
    return is$typed(v, id, hashMain);
}
function validateMain(v) {
    return validate(v, id, hashMain);
}
const hashImage = 'image';
function isImage(v) {
    return is$typed(v, id, hashImage);
}
function validateImage(v) {
    return validate(v, id, hashImage);
}
const hashView = 'view';
function isView(v) {
    return is$typed(v, id, hashView);
}
function validateView(v) {
    return validate(v, id, hashView);
}
const hashViewImage = 'viewImage';
function isViewImage(v) {
    return is$typed(v, id, hashViewImage);
}
function validateViewImage(v) {
    return validate(v, id, hashViewImage);
}

},{"f856e0d7352ea676":"b1XzS","236ceed7801d6a95":"hnRug"}],"bC2nz":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMain = isMain;
exports.validateMain = validateMain;
exports.isView = isView;
exports.validateView = validateView;
exports.isViewRecord = isViewRecord;
exports.validateViewRecord = validateViewRecord;
exports.isViewNotFound = isViewNotFound;
exports.validateViewNotFound = validateViewNotFound;
exports.isViewBlocked = isViewBlocked;
exports.validateViewBlocked = validateViewBlocked;
exports.isViewDetached = isViewDetached;
exports.validateViewDetached = validateViewDetached;
const lexicons_1 = require("5434bcbd4f9799b8");
const util_1 = require("71515224c23b6270");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.embed.record';
const hashMain = 'main';
function isMain(v) {
    return is$typed(v, id, hashMain);
}
function validateMain(v) {
    return validate(v, id, hashMain);
}
const hashView = 'view';
function isView(v) {
    return is$typed(v, id, hashView);
}
function validateView(v) {
    return validate(v, id, hashView);
}
const hashViewRecord = 'viewRecord';
function isViewRecord(v) {
    return is$typed(v, id, hashViewRecord);
}
function validateViewRecord(v) {
    return validate(v, id, hashViewRecord);
}
const hashViewNotFound = 'viewNotFound';
function isViewNotFound(v) {
    return is$typed(v, id, hashViewNotFound);
}
function validateViewNotFound(v) {
    return validate(v, id, hashViewNotFound);
}
const hashViewBlocked = 'viewBlocked';
function isViewBlocked(v) {
    return is$typed(v, id, hashViewBlocked);
}
function validateViewBlocked(v) {
    return validate(v, id, hashViewBlocked);
}
const hashViewDetached = 'viewDetached';
function isViewDetached(v) {
    return is$typed(v, id, hashViewDetached);
}
function validateViewDetached(v) {
    return validate(v, id, hashViewDetached);
}

},{"5434bcbd4f9799b8":"b1XzS","71515224c23b6270":"hnRug"}],"4RsLv":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMain = isMain;
exports.validateMain = validateMain;
exports.isView = isView;
exports.validateView = validateView;
const lexicons_1 = require("dd1dd6b736929a1e");
const util_1 = require("2ba58db192c1c9d7");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.embed.recordWithMedia';
const hashMain = 'main';
function isMain(v) {
    return is$typed(v, id, hashMain);
}
function validateMain(v) {
    return validate(v, id, hashMain);
}
const hashView = 'view';
function isView(v) {
    return is$typed(v, id, hashView);
}
function validateView(v) {
    return validate(v, id, hashView);
}

},{"dd1dd6b736929a1e":"b1XzS","2ba58db192c1c9d7":"hnRug"}],"3itCs":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMain = isMain;
exports.validateMain = validateMain;
exports.isCaption = isCaption;
exports.validateCaption = validateCaption;
exports.isView = isView;
exports.validateView = validateView;
const lexicons_1 = require("8a99e2e928d96b99");
const util_1 = require("4d0c4d1032d9400f");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.embed.video';
const hashMain = 'main';
function isMain(v) {
    return is$typed(v, id, hashMain);
}
function validateMain(v) {
    return validate(v, id, hashMain);
}
const hashCaption = 'caption';
function isCaption(v) {
    return is$typed(v, id, hashCaption);
}
function validateCaption(v) {
    return validate(v, id, hashCaption);
}
const hashView = 'view';
function isView(v) {
    return is$typed(v, id, hashView);
}
function validateView(v) {
    return validate(v, id, hashView);
}

},{"8a99e2e928d96b99":"b1XzS","4d0c4d1032d9400f":"hnRug"}],"jMuO8":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.INTERACTIONSHARE = exports.INTERACTIONQUOTE = exports.INTERACTIONREPLY = exports.INTERACTIONREPOST = exports.INTERACTIONLIKE = exports.INTERACTIONSEEN = exports.CONTENTMODEVIDEO = exports.CONTENTMODEUNSPECIFIED = exports.CLICKTHROUGHEMBED = exports.CLICKTHROUGHREPOSTER = exports.CLICKTHROUGHAUTHOR = exports.CLICKTHROUGHITEM = exports.REQUESTMORE = exports.REQUESTLESS = void 0;
exports.isPostView = isPostView;
exports.validatePostView = validatePostView;
exports.isViewerState = isViewerState;
exports.validateViewerState = validateViewerState;
exports.isThreadContext = isThreadContext;
exports.validateThreadContext = validateThreadContext;
exports.isFeedViewPost = isFeedViewPost;
exports.validateFeedViewPost = validateFeedViewPost;
exports.isReplyRef = isReplyRef;
exports.validateReplyRef = validateReplyRef;
exports.isReasonRepost = isReasonRepost;
exports.validateReasonRepost = validateReasonRepost;
exports.isReasonPin = isReasonPin;
exports.validateReasonPin = validateReasonPin;
exports.isThreadViewPost = isThreadViewPost;
exports.validateThreadViewPost = validateThreadViewPost;
exports.isNotFoundPost = isNotFoundPost;
exports.validateNotFoundPost = validateNotFoundPost;
exports.isBlockedPost = isBlockedPost;
exports.validateBlockedPost = validateBlockedPost;
exports.isBlockedAuthor = isBlockedAuthor;
exports.validateBlockedAuthor = validateBlockedAuthor;
exports.isGeneratorView = isGeneratorView;
exports.validateGeneratorView = validateGeneratorView;
exports.isGeneratorViewerState = isGeneratorViewerState;
exports.validateGeneratorViewerState = validateGeneratorViewerState;
exports.isSkeletonFeedPost = isSkeletonFeedPost;
exports.validateSkeletonFeedPost = validateSkeletonFeedPost;
exports.isSkeletonReasonRepost = isSkeletonReasonRepost;
exports.validateSkeletonReasonRepost = validateSkeletonReasonRepost;
exports.isSkeletonReasonPin = isSkeletonReasonPin;
exports.validateSkeletonReasonPin = validateSkeletonReasonPin;
exports.isThreadgateView = isThreadgateView;
exports.validateThreadgateView = validateThreadgateView;
exports.isInteraction = isInteraction;
exports.validateInteraction = validateInteraction;
const lexicons_1 = require("5b6b222c4beaee11");
const util_1 = require("c093b5d8583a6917");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.defs';
const hashPostView = 'postView';
function isPostView(v) {
    return is$typed(v, id, hashPostView);
}
function validatePostView(v) {
    return validate(v, id, hashPostView);
}
const hashViewerState = 'viewerState';
function isViewerState(v) {
    return is$typed(v, id, hashViewerState);
}
function validateViewerState(v) {
    return validate(v, id, hashViewerState);
}
const hashThreadContext = 'threadContext';
function isThreadContext(v) {
    return is$typed(v, id, hashThreadContext);
}
function validateThreadContext(v) {
    return validate(v, id, hashThreadContext);
}
const hashFeedViewPost = 'feedViewPost';
function isFeedViewPost(v) {
    return is$typed(v, id, hashFeedViewPost);
}
function validateFeedViewPost(v) {
    return validate(v, id, hashFeedViewPost);
}
const hashReplyRef = 'replyRef';
function isReplyRef(v) {
    return is$typed(v, id, hashReplyRef);
}
function validateReplyRef(v) {
    return validate(v, id, hashReplyRef);
}
const hashReasonRepost = 'reasonRepost';
function isReasonRepost(v) {
    return is$typed(v, id, hashReasonRepost);
}
function validateReasonRepost(v) {
    return validate(v, id, hashReasonRepost);
}
const hashReasonPin = 'reasonPin';
function isReasonPin(v) {
    return is$typed(v, id, hashReasonPin);
}
function validateReasonPin(v) {
    return validate(v, id, hashReasonPin);
}
const hashThreadViewPost = 'threadViewPost';
function isThreadViewPost(v) {
    return is$typed(v, id, hashThreadViewPost);
}
function validateThreadViewPost(v) {
    return validate(v, id, hashThreadViewPost);
}
const hashNotFoundPost = 'notFoundPost';
function isNotFoundPost(v) {
    return is$typed(v, id, hashNotFoundPost);
}
function validateNotFoundPost(v) {
    return validate(v, id, hashNotFoundPost);
}
const hashBlockedPost = 'blockedPost';
function isBlockedPost(v) {
    return is$typed(v, id, hashBlockedPost);
}
function validateBlockedPost(v) {
    return validate(v, id, hashBlockedPost);
}
const hashBlockedAuthor = 'blockedAuthor';
function isBlockedAuthor(v) {
    return is$typed(v, id, hashBlockedAuthor);
}
function validateBlockedAuthor(v) {
    return validate(v, id, hashBlockedAuthor);
}
const hashGeneratorView = 'generatorView';
function isGeneratorView(v) {
    return is$typed(v, id, hashGeneratorView);
}
function validateGeneratorView(v) {
    return validate(v, id, hashGeneratorView);
}
const hashGeneratorViewerState = 'generatorViewerState';
function isGeneratorViewerState(v) {
    return is$typed(v, id, hashGeneratorViewerState);
}
function validateGeneratorViewerState(v) {
    return validate(v, id, hashGeneratorViewerState);
}
const hashSkeletonFeedPost = 'skeletonFeedPost';
function isSkeletonFeedPost(v) {
    return is$typed(v, id, hashSkeletonFeedPost);
}
function validateSkeletonFeedPost(v) {
    return validate(v, id, hashSkeletonFeedPost);
}
const hashSkeletonReasonRepost = 'skeletonReasonRepost';
function isSkeletonReasonRepost(v) {
    return is$typed(v, id, hashSkeletonReasonRepost);
}
function validateSkeletonReasonRepost(v) {
    return validate(v, id, hashSkeletonReasonRepost);
}
const hashSkeletonReasonPin = 'skeletonReasonPin';
function isSkeletonReasonPin(v) {
    return is$typed(v, id, hashSkeletonReasonPin);
}
function validateSkeletonReasonPin(v) {
    return validate(v, id, hashSkeletonReasonPin);
}
const hashThreadgateView = 'threadgateView';
function isThreadgateView(v) {
    return is$typed(v, id, hashThreadgateView);
}
function validateThreadgateView(v) {
    return validate(v, id, hashThreadgateView);
}
const hashInteraction = 'interaction';
function isInteraction(v) {
    return is$typed(v, id, hashInteraction);
}
function validateInteraction(v) {
    return validate(v, id, hashInteraction);
}
/** Request that less content like the given feed item be shown in the feed */ exports.REQUESTLESS = `${id}#requestLess`;
/** Request that more content like the given feed item be shown in the feed */ exports.REQUESTMORE = `${id}#requestMore`;
/** User clicked through to the feed item */ exports.CLICKTHROUGHITEM = `${id}#clickthroughItem`;
/** User clicked through to the author of the feed item */ exports.CLICKTHROUGHAUTHOR = `${id}#clickthroughAuthor`;
/** User clicked through to the reposter of the feed item */ exports.CLICKTHROUGHREPOSTER = `${id}#clickthroughReposter`;
/** User clicked through to the embedded content of the feed item */ exports.CLICKTHROUGHEMBED = `${id}#clickthroughEmbed`;
/** Declares the feed generator returns any types of posts. */ exports.CONTENTMODEUNSPECIFIED = `${id}#contentModeUnspecified`;
/** Declares the feed generator returns posts containing app.bsky.embed.video embeds. */ exports.CONTENTMODEVIDEO = `${id}#contentModeVideo`;
/** Feed item was seen by user */ exports.INTERACTIONSEEN = `${id}#interactionSeen`;
/** User liked the feed item */ exports.INTERACTIONLIKE = `${id}#interactionLike`;
/** User reposted the feed item */ exports.INTERACTIONREPOST = `${id}#interactionRepost`;
/** User replied to the feed item */ exports.INTERACTIONREPLY = `${id}#interactionReply`;
/** User quoted the feed item */ exports.INTERACTIONQUOTE = `${id}#interactionQuote`;
/** User shared the feed item */ exports.INTERACTIONSHARE = `${id}#interactionShare`;

},{"5b6b222c4beaee11":"b1XzS","c093b5d8583a6917":"hnRug"}],"s1c8e":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isFeed = isFeed;
exports.validateFeed = validateFeed;
exports.isLinks = isLinks;
exports.validateLinks = validateLinks;
const lexicons_1 = require("6636e2fc1d90a7be");
const util_1 = require("a9c1f733f0e4f80b");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.describeFeedGenerator';
function toKnownErr(e) {
    return e;
}
const hashFeed = 'feed';
function isFeed(v) {
    return is$typed(v, id, hashFeed);
}
function validateFeed(v) {
    return validate(v, id, hashFeed);
}
const hashLinks = 'links';
function isLinks(v) {
    return is$typed(v, id, hashLinks);
}
function validateLinks(v) {
    return validate(v, id, hashLinks);
}

},{"6636e2fc1d90a7be":"b1XzS","a9c1f733f0e4f80b":"hnRug"}],"2qoFb":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const lexicons_1 = require("5bff78443966ded2");
const util_1 = require("16dcd0fdd32ee7ad");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.generator';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}

},{"5bff78443966ded2":"b1XzS","16dcd0fdd32ee7ad":"hnRug"}],"bHvhB":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("55e96871d71f2710");
const util_1 = require("a8f96fb77be6a798");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.getActorFeeds';
function toKnownErr(e) {
    return e;
}

},{"55e96871d71f2710":"b1XzS","a8f96fb77be6a798":"hnRug"}],"7ojas":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("865675ecf2bfc6c7");
const util_1 = require("f6a157453cce9407");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.getFeedGenerator';
function toKnownErr(e) {
    return e;
}

},{"865675ecf2bfc6c7":"b1XzS","f6a157453cce9407":"hnRug"}],"ecR7e":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("93d201e28a20c9c7");
const util_1 = require("e6bae6831c3e086d");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.getFeedGenerators';
function toKnownErr(e) {
    return e;
}

},{"93d201e28a20c9c7":"b1XzS","e6bae6831c3e086d":"hnRug"}],"8vi3G":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isLike = isLike;
exports.validateLike = validateLike;
const lexicons_1 = require("b0cade1a78862e0c");
const util_1 = require("701b7c79f864df71");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.getLikes';
function toKnownErr(e) {
    return e;
}
const hashLike = 'like';
function isLike(v) {
    return is$typed(v, id, hashLike);
}
function validateLike(v) {
    return validate(v, id, hashLike);
}

},{"b0cade1a78862e0c":"b1XzS","701b7c79f864df71":"hnRug"}],"kEK5h":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("84197cdd82ffbf88");
const util_1 = require("2ad5533a45381474");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.getPosts';
function toKnownErr(e) {
    return e;
}

},{"84197cdd82ffbf88":"b1XzS","2ad5533a45381474":"hnRug"}],"gP7uJ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("ec30b5b01a1b8224");
const util_1 = require("e85e51da3e2f3a24");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.getQuotes';
function toKnownErr(e) {
    return e;
}

},{"ec30b5b01a1b8224":"b1XzS","e85e51da3e2f3a24":"hnRug"}],"7UwBu":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("daf0d6df6f6cab2d");
const util_1 = require("2d01d12f1a570b27");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.getRepostedBy';
function toKnownErr(e) {
    return e;
}

},{"daf0d6df6f6cab2d":"b1XzS","2d01d12f1a570b27":"hnRug"}],"cwt8Y":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("64049dbc668c9f0");
const util_1 = require("53104bf116072f6f");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.getSuggestedFeeds';
function toKnownErr(e) {
    return e;
}

},{"64049dbc668c9f0":"b1XzS","53104bf116072f6f":"hnRug"}],"2ls66":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("fbccf594be3711e4");
const util_1 = require("895e0d15f7ed54f");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.getTimeline';
function toKnownErr(e) {
    return e;
}

},{"fbccf594be3711e4":"b1XzS","895e0d15f7ed54f":"hnRug"}],"gtFRw":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const lexicons_1 = require("8b39fc9e42a65b33");
const util_1 = require("da4e751215d5e9c4");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.like';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}

},{"8b39fc9e42a65b33":"b1XzS","da4e751215d5e9c4":"hnRug"}],"4iFcB":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
exports.isReplyRef = isReplyRef;
exports.validateReplyRef = validateReplyRef;
exports.isEntity = isEntity;
exports.validateEntity = validateEntity;
exports.isTextSlice = isTextSlice;
exports.validateTextSlice = validateTextSlice;
const lexicons_1 = require("97e8ee68e862cceb");
const util_1 = require("8ee886f13a498967");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.post';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}
const hashReplyRef = 'replyRef';
function isReplyRef(v) {
    return is$typed(v, id, hashReplyRef);
}
function validateReplyRef(v) {
    return validate(v, id, hashReplyRef);
}
const hashEntity = 'entity';
function isEntity(v) {
    return is$typed(v, id, hashEntity);
}
function validateEntity(v) {
    return validate(v, id, hashEntity);
}
const hashTextSlice = 'textSlice';
function isTextSlice(v) {
    return is$typed(v, id, hashTextSlice);
}
function validateTextSlice(v) {
    return validate(v, id, hashTextSlice);
}

},{"97e8ee68e862cceb":"b1XzS","8ee886f13a498967":"hnRug"}],"6q0DB":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
exports.isDisableRule = isDisableRule;
exports.validateDisableRule = validateDisableRule;
const lexicons_1 = require("393190d6cc613fb5");
const util_1 = require("47f249d711e25377");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.postgate';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}
const hashDisableRule = 'disableRule';
function isDisableRule(v) {
    return is$typed(v, id, hashDisableRule);
}
function validateDisableRule(v) {
    return validate(v, id, hashDisableRule);
}

},{"393190d6cc613fb5":"b1XzS","47f249d711e25377":"hnRug"}],"569dG":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const lexicons_1 = require("3ca9c70ae0680b");
const util_1 = require("8eccb2024c338f96");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.repost';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}

},{"3ca9c70ae0680b":"b1XzS","8eccb2024c338f96":"hnRug"}],"6kfUa":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("4e9b85aa6a413da6");
const util_1 = require("666a59894a7cc817");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.sendInteractions';
function toKnownErr(e) {
    return e;
}

},{"4e9b85aa6a413da6":"b1XzS","666a59894a7cc817":"hnRug"}],"kIbyV":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
exports.isMentionRule = isMentionRule;
exports.validateMentionRule = validateMentionRule;
exports.isFollowerRule = isFollowerRule;
exports.validateFollowerRule = validateFollowerRule;
exports.isFollowingRule = isFollowingRule;
exports.validateFollowingRule = validateFollowingRule;
exports.isListRule = isListRule;
exports.validateListRule = validateListRule;
const lexicons_1 = require("8c00aa217e0d5906");
const util_1 = require("35a1bb8f66eaa737");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.feed.threadgate';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}
const hashMentionRule = 'mentionRule';
function isMentionRule(v) {
    return is$typed(v, id, hashMentionRule);
}
function validateMentionRule(v) {
    return validate(v, id, hashMentionRule);
}
const hashFollowerRule = 'followerRule';
function isFollowerRule(v) {
    return is$typed(v, id, hashFollowerRule);
}
function validateFollowerRule(v) {
    return validate(v, id, hashFollowerRule);
}
const hashFollowingRule = 'followingRule';
function isFollowingRule(v) {
    return is$typed(v, id, hashFollowingRule);
}
function validateFollowingRule(v) {
    return validate(v, id, hashFollowingRule);
}
const hashListRule = 'listRule';
function isListRule(v) {
    return is$typed(v, id, hashListRule);
}
function validateListRule(v) {
    return validate(v, id, hashListRule);
}

},{"8c00aa217e0d5906":"b1XzS","35a1bb8f66eaa737":"hnRug"}],"ejqQ2":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const lexicons_1 = require("923596f223753e57");
const util_1 = require("911e7966d498fa79");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.block';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}

},{"923596f223753e57":"b1XzS","911e7966d498fa79":"hnRug"}],"f7qcC":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.REFERENCELIST = exports.CURATELIST = exports.MODLIST = void 0;
exports.isListViewBasic = isListViewBasic;
exports.validateListViewBasic = validateListViewBasic;
exports.isListView = isListView;
exports.validateListView = validateListView;
exports.isListItemView = isListItemView;
exports.validateListItemView = validateListItemView;
exports.isStarterPackView = isStarterPackView;
exports.validateStarterPackView = validateStarterPackView;
exports.isStarterPackViewBasic = isStarterPackViewBasic;
exports.validateStarterPackViewBasic = validateStarterPackViewBasic;
exports.isListViewerState = isListViewerState;
exports.validateListViewerState = validateListViewerState;
exports.isNotFoundActor = isNotFoundActor;
exports.validateNotFoundActor = validateNotFoundActor;
exports.isRelationship = isRelationship;
exports.validateRelationship = validateRelationship;
const lexicons_1 = require("fb992044b76f0853");
const util_1 = require("27d83fb12ec71cae");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.defs';
const hashListViewBasic = 'listViewBasic';
function isListViewBasic(v) {
    return is$typed(v, id, hashListViewBasic);
}
function validateListViewBasic(v) {
    return validate(v, id, hashListViewBasic);
}
const hashListView = 'listView';
function isListView(v) {
    return is$typed(v, id, hashListView);
}
function validateListView(v) {
    return validate(v, id, hashListView);
}
const hashListItemView = 'listItemView';
function isListItemView(v) {
    return is$typed(v, id, hashListItemView);
}
function validateListItemView(v) {
    return validate(v, id, hashListItemView);
}
const hashStarterPackView = 'starterPackView';
function isStarterPackView(v) {
    return is$typed(v, id, hashStarterPackView);
}
function validateStarterPackView(v) {
    return validate(v, id, hashStarterPackView);
}
const hashStarterPackViewBasic = 'starterPackViewBasic';
function isStarterPackViewBasic(v) {
    return is$typed(v, id, hashStarterPackViewBasic);
}
function validateStarterPackViewBasic(v) {
    return validate(v, id, hashStarterPackViewBasic);
}
/** A list of actors to apply an aggregate moderation action (mute/block) on. */ exports.MODLIST = `${id}#modlist`;
/** A list of actors used for curation purposes such as list feeds or interaction gating. */ exports.CURATELIST = `${id}#curatelist`;
/** A list of actors used for only for reference purposes such as within a starter pack. */ exports.REFERENCELIST = `${id}#referencelist`;
const hashListViewerState = 'listViewerState';
function isListViewerState(v) {
    return is$typed(v, id, hashListViewerState);
}
function validateListViewerState(v) {
    return validate(v, id, hashListViewerState);
}
const hashNotFoundActor = 'notFoundActor';
function isNotFoundActor(v) {
    return is$typed(v, id, hashNotFoundActor);
}
function validateNotFoundActor(v) {
    return validate(v, id, hashNotFoundActor);
}
const hashRelationship = 'relationship';
function isRelationship(v) {
    return is$typed(v, id, hashRelationship);
}
function validateRelationship(v) {
    return validate(v, id, hashRelationship);
}

},{"fb992044b76f0853":"b1XzS","27d83fb12ec71cae":"hnRug"}],"6uRQ1":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const lexicons_1 = require("98e8dd9422b3ef51");
const util_1 = require("6a430b8412b51b4a");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.follow';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}

},{"98e8dd9422b3ef51":"b1XzS","6a430b8412b51b4a":"hnRug"}],"jdTbQ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("9ca7ae0ad1ee804b");
const util_1 = require("3671660c773faf86");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.getActorStarterPacks';
function toKnownErr(e) {
    return e;
}

},{"9ca7ae0ad1ee804b":"b1XzS","3671660c773faf86":"hnRug"}],"8T7w0":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("deff7c3a34220fb7");
const util_1 = require("ab8fb9aaaefec8ae");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.getBlocks';
function toKnownErr(e) {
    return e;
}

},{"deff7c3a34220fb7":"b1XzS","ab8fb9aaaefec8ae":"hnRug"}],"2nRjs":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("8485389a53ff95f");
const util_1 = require("77ae6a08650c4049");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.getFollowers';
function toKnownErr(e) {
    return e;
}

},{"8485389a53ff95f":"b1XzS","77ae6a08650c4049":"hnRug"}],"bMte8":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("a7de1637c704a509");
const util_1 = require("b166fd1c23fcae96");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.getFollows';
function toKnownErr(e) {
    return e;
}

},{"a7de1637c704a509":"b1XzS","b166fd1c23fcae96":"hnRug"}],"lEoB8":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("83649373bbda4700");
const util_1 = require("83f3161d2b814344");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.getKnownFollowers';
function toKnownErr(e) {
    return e;
}

},{"83649373bbda4700":"b1XzS","83f3161d2b814344":"hnRug"}],"6Z74c":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("60d6ad578d747e88");
const util_1 = require("8b7a7d8c7b91ff92");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.getList';
function toKnownErr(e) {
    return e;
}

},{"60d6ad578d747e88":"b1XzS","8b7a7d8c7b91ff92":"hnRug"}],"f9DZe":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("66110767f7f68077");
const util_1 = require("85ed6250cfae8b01");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.getListBlocks';
function toKnownErr(e) {
    return e;
}

},{"66110767f7f68077":"b1XzS","85ed6250cfae8b01":"hnRug"}],"d3RIo":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("5a0c9ba80364de9b");
const util_1 = require("9fca51c12a98be99");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.getListMutes';
function toKnownErr(e) {
    return e;
}

},{"5a0c9ba80364de9b":"b1XzS","9fca51c12a98be99":"hnRug"}],"a7MXq":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("e724788e60f58cf3");
const util_1 = require("8554e180cdd14c75");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.getLists';
function toKnownErr(e) {
    return e;
}

},{"e724788e60f58cf3":"b1XzS","8554e180cdd14c75":"hnRug"}],"5YOXY":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("39d2ec6027cd024c");
const util_1 = require("fc52a66fef8e8377");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.getMutes';
function toKnownErr(e) {
    return e;
}

},{"39d2ec6027cd024c":"b1XzS","fc52a66fef8e8377":"hnRug"}],"9DGer":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("905ba7a30d1a6059");
const util_1 = require("7314c1acbbe1cd49");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.getStarterPack';
function toKnownErr(e) {
    return e;
}

},{"905ba7a30d1a6059":"b1XzS","7314c1acbbe1cd49":"hnRug"}],"8j87R":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("f093d671209ac4ee");
const util_1 = require("eaa8d981626b01ba");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.getStarterPacks';
function toKnownErr(e) {
    return e;
}

},{"f093d671209ac4ee":"b1XzS","eaa8d981626b01ba":"hnRug"}],"jsFVo":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("97fb26177a04e1e4");
const util_1 = require("4699d784c02aae");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.getSuggestedFollowsByActor';
function toKnownErr(e) {
    return e;
}

},{"97fb26177a04e1e4":"b1XzS","4699d784c02aae":"hnRug"}],"hycr8":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const lexicons_1 = require("65d3f02c9664d1c");
const util_1 = require("17eb28171a600607");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.list';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}

},{"65d3f02c9664d1c":"b1XzS","17eb28171a600607":"hnRug"}],"kde8N":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const lexicons_1 = require("be29daefc8b847cf");
const util_1 = require("a3aa213e9333a67a");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.listblock';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}

},{"be29daefc8b847cf":"b1XzS","a3aa213e9333a67a":"hnRug"}],"19cTg":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const lexicons_1 = require("e1239afb6928f73");
const util_1 = require("18bf8e96917b4cd");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.listitem';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}

},{"e1239afb6928f73":"b1XzS","18bf8e96917b4cd":"hnRug"}],"1wJkr":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("908d91cc06d30609");
const util_1 = require("9e12143ab454dfbe");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.muteActor';
function toKnownErr(e) {
    return e;
}

},{"908d91cc06d30609":"b1XzS","9e12143ab454dfbe":"hnRug"}],"kjXGN":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("5c18f9512b578d8e");
const util_1 = require("f5ce887870362a7a");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.muteActorList';
function toKnownErr(e) {
    return e;
}

},{"5c18f9512b578d8e":"b1XzS","f5ce887870362a7a":"hnRug"}],"iYnNy":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("6f6c9c44b1513023");
const util_1 = require("d03b2494ba0e926d");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.muteThread';
function toKnownErr(e) {
    return e;
}

},{"6f6c9c44b1513023":"b1XzS","d03b2494ba0e926d":"hnRug"}],"O5nB9":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("29036d31fb3ecea0");
const util_1 = require("98853f7f328e1966");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.searchStarterPacks';
function toKnownErr(e) {
    return e;
}

},{"29036d31fb3ecea0":"b1XzS","98853f7f328e1966":"hnRug"}],"kKfxH":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
exports.isFeedItem = isFeedItem;
exports.validateFeedItem = validateFeedItem;
const lexicons_1 = require("190df138f0ee1f41");
const util_1 = require("2bdcae1fec55028d");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.starterpack';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}
const hashFeedItem = 'feedItem';
function isFeedItem(v) {
    return is$typed(v, id, hashFeedItem);
}
function validateFeedItem(v) {
    return validate(v, id, hashFeedItem);
}

},{"190df138f0ee1f41":"b1XzS","2bdcae1fec55028d":"hnRug"}],"kOgeY":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("29e265a9c2450137");
const util_1 = require("4b6f1f84cc2b7f08");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.unmuteActor';
function toKnownErr(e) {
    return e;
}

},{"29e265a9c2450137":"b1XzS","4b6f1f84cc2b7f08":"hnRug"}],"2Kllf":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("141231036f9869e0");
const util_1 = require("186a24da2ac83e6e");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.unmuteActorList';
function toKnownErr(e) {
    return e;
}

},{"141231036f9869e0":"b1XzS","186a24da2ac83e6e":"hnRug"}],"6KacU":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("72b3eade9d7eef8d");
const util_1 = require("2dd027ee8ea4e1dd");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.unmuteThread';
function toKnownErr(e) {
    return e;
}

},{"72b3eade9d7eef8d":"b1XzS","2dd027ee8ea4e1dd":"hnRug"}],"eCk7e":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const lexicons_1 = require("c19e0265d9684b32");
const util_1 = require("909cb37c2b24dfc4");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.graph.verification';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}

},{"c19e0265d9684b32":"b1XzS","909cb37c2b24dfc4":"hnRug"}],"dchcT":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isLabelerView = isLabelerView;
exports.validateLabelerView = validateLabelerView;
exports.isLabelerViewDetailed = isLabelerViewDetailed;
exports.validateLabelerViewDetailed = validateLabelerViewDetailed;
exports.isLabelerViewerState = isLabelerViewerState;
exports.validateLabelerViewerState = validateLabelerViewerState;
exports.isLabelerPolicies = isLabelerPolicies;
exports.validateLabelerPolicies = validateLabelerPolicies;
const lexicons_1 = require("14dec8e1b164147a");
const util_1 = require("75ab1bd9240f11d");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.labeler.defs';
const hashLabelerView = 'labelerView';
function isLabelerView(v) {
    return is$typed(v, id, hashLabelerView);
}
function validateLabelerView(v) {
    return validate(v, id, hashLabelerView);
}
const hashLabelerViewDetailed = 'labelerViewDetailed';
function isLabelerViewDetailed(v) {
    return is$typed(v, id, hashLabelerViewDetailed);
}
function validateLabelerViewDetailed(v) {
    return validate(v, id, hashLabelerViewDetailed);
}
const hashLabelerViewerState = 'labelerViewerState';
function isLabelerViewerState(v) {
    return is$typed(v, id, hashLabelerViewerState);
}
function validateLabelerViewerState(v) {
    return validate(v, id, hashLabelerViewerState);
}
const hashLabelerPolicies = 'labelerPolicies';
function isLabelerPolicies(v) {
    return is$typed(v, id, hashLabelerPolicies);
}
function validateLabelerPolicies(v) {
    return validate(v, id, hashLabelerPolicies);
}

},{"14dec8e1b164147a":"b1XzS","75ab1bd9240f11d":"hnRug"}],"923xZ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("76cac0d9d78a3328");
const util_1 = require("57014f1ac186fd94");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.labeler.getServices';
function toKnownErr(e) {
    return e;
}

},{"76cac0d9d78a3328":"b1XzS","57014f1ac186fd94":"hnRug"}],"lp1se":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const lexicons_1 = require("408f7e40dd7c63dc");
const util_1 = require("fb7125470120cbe");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.labeler.service';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}

},{"408f7e40dd7c63dc":"b1XzS","fb7125470120cbe":"hnRug"}],"3kti9":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecordDeleted = isRecordDeleted;
exports.validateRecordDeleted = validateRecordDeleted;
const lexicons_1 = require("3e0adab18d998edd");
const util_1 = require("19ba03bebf803911");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.notification.defs';
const hashRecordDeleted = 'recordDeleted';
function isRecordDeleted(v) {
    return is$typed(v, id, hashRecordDeleted);
}
function validateRecordDeleted(v) {
    return validate(v, id, hashRecordDeleted);
}

},{"3e0adab18d998edd":"b1XzS","19ba03bebf803911":"hnRug"}],"5C49o":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("d6bc422c009e3013");
const util_1 = require("99168a08546c741f");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.notification.getUnreadCount';
function toKnownErr(e) {
    return e;
}

},{"d6bc422c009e3013":"b1XzS","99168a08546c741f":"hnRug"}],"jVvCS":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isNotification = isNotification;
exports.validateNotification = validateNotification;
const lexicons_1 = require("260eba53e530266b");
const util_1 = require("fc3ecac93b95af34");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.notification.listNotifications';
function toKnownErr(e) {
    return e;
}
const hashNotification = 'notification';
function isNotification(v) {
    return is$typed(v, id, hashNotification);
}
function validateNotification(v) {
    return validate(v, id, hashNotification);
}

},{"260eba53e530266b":"b1XzS","fc3ecac93b95af34":"hnRug"}],"kOd6J":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("26d1c30a37ee72b5");
const util_1 = require("b99d9ac019309bec");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.notification.putPreferences';
function toKnownErr(e) {
    return e;
}

},{"26d1c30a37ee72b5":"b1XzS","b99d9ac019309bec":"hnRug"}],"5RC2Z":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("6e501e83c9732eee");
const util_1 = require("f3259c771a412b21");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.notification.registerPush';
function toKnownErr(e) {
    return e;
}

},{"6e501e83c9732eee":"b1XzS","f3259c771a412b21":"hnRug"}],"3Eppf":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("87741b22891a08dd");
const util_1 = require("35b372c43762afe2");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.notification.updateSeen';
function toKnownErr(e) {
    return e;
}

},{"87741b22891a08dd":"b1XzS","35b372c43762afe2":"hnRug"}],"403AH":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMain = isMain;
exports.validateMain = validateMain;
exports.isMention = isMention;
exports.validateMention = validateMention;
exports.isLink = isLink;
exports.validateLink = validateLink;
exports.isTag = isTag;
exports.validateTag = validateTag;
exports.isByteSlice = isByteSlice;
exports.validateByteSlice = validateByteSlice;
const lexicons_1 = require("4bf759ce1d9a7323");
const util_1 = require("4b5c80deb0d081b4");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.richtext.facet';
const hashMain = 'main';
function isMain(v) {
    return is$typed(v, id, hashMain);
}
function validateMain(v) {
    return validate(v, id, hashMain);
}
const hashMention = 'mention';
function isMention(v) {
    return is$typed(v, id, hashMention);
}
function validateMention(v) {
    return validate(v, id, hashMention);
}
const hashLink = 'link';
function isLink(v) {
    return is$typed(v, id, hashLink);
}
function validateLink(v) {
    return validate(v, id, hashLink);
}
const hashTag = 'tag';
function isTag(v) {
    return is$typed(v, id, hashTag);
}
function validateTag(v) {
    return validate(v, id, hashTag);
}
const hashByteSlice = 'byteSlice';
function isByteSlice(v) {
    return is$typed(v, id, hashByteSlice);
}
function validateByteSlice(v) {
    return validate(v, id, hashByteSlice);
}

},{"4bf759ce1d9a7323":"b1XzS","4b5c80deb0d081b4":"hnRug"}],"2pzck":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isSkeletonSearchPost = isSkeletonSearchPost;
exports.validateSkeletonSearchPost = validateSkeletonSearchPost;
exports.isSkeletonSearchActor = isSkeletonSearchActor;
exports.validateSkeletonSearchActor = validateSkeletonSearchActor;
exports.isSkeletonSearchStarterPack = isSkeletonSearchStarterPack;
exports.validateSkeletonSearchStarterPack = validateSkeletonSearchStarterPack;
exports.isTrendingTopic = isTrendingTopic;
exports.validateTrendingTopic = validateTrendingTopic;
exports.isSkeletonTrend = isSkeletonTrend;
exports.validateSkeletonTrend = validateSkeletonTrend;
exports.isTrendView = isTrendView;
exports.validateTrendView = validateTrendView;
const lexicons_1 = require("e44262cb162d709b");
const util_1 = require("5542a80f393a33b");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.unspecced.defs';
const hashSkeletonSearchPost = 'skeletonSearchPost';
function isSkeletonSearchPost(v) {
    return is$typed(v, id, hashSkeletonSearchPost);
}
function validateSkeletonSearchPost(v) {
    return validate(v, id, hashSkeletonSearchPost);
}
const hashSkeletonSearchActor = 'skeletonSearchActor';
function isSkeletonSearchActor(v) {
    return is$typed(v, id, hashSkeletonSearchActor);
}
function validateSkeletonSearchActor(v) {
    return validate(v, id, hashSkeletonSearchActor);
}
const hashSkeletonSearchStarterPack = 'skeletonSearchStarterPack';
function isSkeletonSearchStarterPack(v) {
    return is$typed(v, id, hashSkeletonSearchStarterPack);
}
function validateSkeletonSearchStarterPack(v) {
    return validate(v, id, hashSkeletonSearchStarterPack);
}
const hashTrendingTopic = 'trendingTopic';
function isTrendingTopic(v) {
    return is$typed(v, id, hashTrendingTopic);
}
function validateTrendingTopic(v) {
    return validate(v, id, hashTrendingTopic);
}
const hashSkeletonTrend = 'skeletonTrend';
function isSkeletonTrend(v) {
    return is$typed(v, id, hashSkeletonTrend);
}
function validateSkeletonTrend(v) {
    return validate(v, id, hashSkeletonTrend);
}
const hashTrendView = 'trendView';
function isTrendView(v) {
    return is$typed(v, id, hashTrendView);
}
function validateTrendView(v) {
    return validate(v, id, hashTrendView);
}

},{"e44262cb162d709b":"b1XzS","5542a80f393a33b":"hnRug"}],"dEGqi":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isLiveNowConfig = isLiveNowConfig;
exports.validateLiveNowConfig = validateLiveNowConfig;
const lexicons_1 = require("72e0c0a3c5677dc4");
const util_1 = require("5d33041def85249b");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.unspecced.getConfig';
function toKnownErr(e) {
    return e;
}
const hashLiveNowConfig = 'liveNowConfig';
function isLiveNowConfig(v) {
    return is$typed(v, id, hashLiveNowConfig);
}
function validateLiveNowConfig(v) {
    return validate(v, id, hashLiveNowConfig);
}

},{"72e0c0a3c5677dc4":"b1XzS","5d33041def85249b":"hnRug"}],"ktI2q":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("bfce5f7a9cd4f737");
const util_1 = require("f1175aba4a2f2b94");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.unspecced.getPopularFeedGenerators';
function toKnownErr(e) {
    return e;
}

},{"bfce5f7a9cd4f737":"b1XzS","f1175aba4a2f2b94":"hnRug"}],"gz0ZI":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("e56c18a210555283");
const util_1 = require("1a7d02fa6aafc752");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.unspecced.getSuggestedFeeds';
function toKnownErr(e) {
    return e;
}

},{"e56c18a210555283":"b1XzS","1a7d02fa6aafc752":"hnRug"}],"a9hlo":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("4fb37aa6db84da4d");
const util_1 = require("dd45dc0ce34f1db2");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.unspecced.getSuggestedFeedsSkeleton';
function toKnownErr(e) {
    return e;
}

},{"4fb37aa6db84da4d":"b1XzS","dd45dc0ce34f1db2":"hnRug"}],"212Ar":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("e3f3350a97e3069f");
const util_1 = require("20a82ecfc6977be7");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.unspecced.getSuggestedStarterPacks';
function toKnownErr(e) {
    return e;
}

},{"e3f3350a97e3069f":"b1XzS","20a82ecfc6977be7":"hnRug"}],"3xkSX":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("3cee54e058a959b7");
const util_1 = require("1eaf0b89205fd167");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.unspecced.getSuggestedStarterPacksSkeleton';
function toKnownErr(e) {
    return e;
}

},{"3cee54e058a959b7":"b1XzS","1eaf0b89205fd167":"hnRug"}],"9UFQS":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("c7a60559054c509a");
const util_1 = require("f002dd60b6d8b32b");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.unspecced.getSuggestedUsers';
function toKnownErr(e) {
    return e;
}

},{"c7a60559054c509a":"b1XzS","f002dd60b6d8b32b":"hnRug"}],"hlANj":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("8f856c3b8e07fab8");
const util_1 = require("f5b610b702311ce0");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.unspecced.getSuggestedUsersSkeleton';
function toKnownErr(e) {
    return e;
}

},{"8f856c3b8e07fab8":"b1XzS","f5b610b702311ce0":"hnRug"}],"lCVax":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("5b58ac019e7cf6af");
const util_1 = require("98ed2b6fa4e5e5cc");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.unspecced.getSuggestionsSkeleton';
function toKnownErr(e) {
    return e;
}

},{"5b58ac019e7cf6af":"b1XzS","98ed2b6fa4e5e5cc":"hnRug"}],"ebJ4D":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isSuggestion = isSuggestion;
exports.validateSuggestion = validateSuggestion;
const lexicons_1 = require("98206dd0bb4b1941");
const util_1 = require("d52477da4195efad");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.unspecced.getTaggedSuggestions';
function toKnownErr(e) {
    return e;
}
const hashSuggestion = 'suggestion';
function isSuggestion(v) {
    return is$typed(v, id, hashSuggestion);
}
function validateSuggestion(v) {
    return validate(v, id, hashSuggestion);
}

},{"98206dd0bb4b1941":"b1XzS","d52477da4195efad":"hnRug"}],"8C7Q9":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("9bf5f86db35201fb");
const util_1 = require("7a7bdf4e32d8a8ed");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.unspecced.getTrendingTopics';
function toKnownErr(e) {
    return e;
}

},{"9bf5f86db35201fb":"b1XzS","7a7bdf4e32d8a8ed":"hnRug"}],"ystqi":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("235c76c7f344a1c4");
const util_1 = require("51cbf678a3002d3a");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.unspecced.getTrends';
function toKnownErr(e) {
    return e;
}

},{"235c76c7f344a1c4":"b1XzS","51cbf678a3002d3a":"hnRug"}],"3Q3ZU":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("3146c6dd1e6a30c5");
const util_1 = require("69d519f443551ae6");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.unspecced.getTrendsSkeleton';
function toKnownErr(e) {
    return e;
}

},{"3146c6dd1e6a30c5":"b1XzS","69d519f443551ae6":"hnRug"}],"lPrEW":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isJobStatus = isJobStatus;
exports.validateJobStatus = validateJobStatus;
const lexicons_1 = require("231047e90d4a2e7b");
const util_1 = require("63db9eeb2d60eacb");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.video.defs';
const hashJobStatus = 'jobStatus';
function isJobStatus(v) {
    return is$typed(v, id, hashJobStatus);
}
function validateJobStatus(v) {
    return validate(v, id, hashJobStatus);
}

},{"231047e90d4a2e7b":"b1XzS","63db9eeb2d60eacb":"hnRug"}],"kSC4Q":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("df81408ad89adafa");
const util_1 = require("ae98162b880925e1");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.video.getJobStatus';
function toKnownErr(e) {
    return e;
}

},{"df81408ad89adafa":"b1XzS","ae98162b880925e1":"hnRug"}],"PhJVA":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("d4f94b030bc53e50");
const util_1 = require("983effb4e3590242");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.video.getUploadLimits';
function toKnownErr(e) {
    return e;
}

},{"d4f94b030bc53e50":"b1XzS","983effb4e3590242":"hnRug"}],"3bV9r":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("6d9b3dd6b497d45c");
const util_1 = require("d4c55727656916d8");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'app.bsky.video.uploadVideo';
function toKnownErr(e) {
    return e;
}

},{"6d9b3dd6b497d45c":"b1XzS","d4c55727656916d8":"hnRug"}],"4PJJP":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isRecord = isRecord;
exports.validateRecord = validateRecord;
const lexicons_1 = require("f0136f134a21d8ad");
const util_1 = require("98cdf141b1c080d8");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.actor.declaration';
const hashRecord = 'main';
function isRecord(v) {
    return is$typed(v, id, hashRecord);
}
function validateRecord(v) {
    return validate(v, id, hashRecord, true);
}

},{"f0136f134a21d8ad":"b1XzS","98cdf141b1c080d8":"hnRug"}],"6sOtl":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isProfileViewBasic = isProfileViewBasic;
exports.validateProfileViewBasic = validateProfileViewBasic;
const lexicons_1 = require("c614a8c14815a82c");
const util_1 = require("2ad1e76d4c6570fe");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.actor.defs';
const hashProfileViewBasic = 'profileViewBasic';
function isProfileViewBasic(v) {
    return is$typed(v, id, hashProfileViewBasic);
}
function validateProfileViewBasic(v) {
    return validate(v, id, hashProfileViewBasic);
}

},{"c614a8c14815a82c":"b1XzS","2ad1e76d4c6570fe":"hnRug"}],"8D272":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("e7c9442dbc4deab1");
const util_1 = require("10ccc347be0c470e");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.actor.deleteAccount';
function toKnownErr(e) {
    return e;
}

},{"e7c9442dbc4deab1":"b1XzS","10ccc347be0c470e":"hnRug"}],"2CiqN":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("e79b21a9c9accd03");
const util_1 = require("ec06a853f1c04565");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.actor.exportAccountData';
function toKnownErr(e) {
    return e;
}

},{"e79b21a9c9accd03":"b1XzS","ec06a853f1c04565":"hnRug"}],"2TneQ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("5d2bac2c60b1171b");
const util_1 = require("3c94c0b702dacfa0");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.acceptConvo';
function toKnownErr(e) {
    return e;
}

},{"5d2bac2c60b1171b":"b1XzS","3c94c0b702dacfa0":"hnRug"}],"g5pz7":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMessageRef = isMessageRef;
exports.validateMessageRef = validateMessageRef;
exports.isMessageInput = isMessageInput;
exports.validateMessageInput = validateMessageInput;
exports.isMessageView = isMessageView;
exports.validateMessageView = validateMessageView;
exports.isDeletedMessageView = isDeletedMessageView;
exports.validateDeletedMessageView = validateDeletedMessageView;
exports.isMessageViewSender = isMessageViewSender;
exports.validateMessageViewSender = validateMessageViewSender;
exports.isReactionView = isReactionView;
exports.validateReactionView = validateReactionView;
exports.isReactionViewSender = isReactionViewSender;
exports.validateReactionViewSender = validateReactionViewSender;
exports.isMessageAndReactionView = isMessageAndReactionView;
exports.validateMessageAndReactionView = validateMessageAndReactionView;
exports.isConvoView = isConvoView;
exports.validateConvoView = validateConvoView;
exports.isLogBeginConvo = isLogBeginConvo;
exports.validateLogBeginConvo = validateLogBeginConvo;
exports.isLogAcceptConvo = isLogAcceptConvo;
exports.validateLogAcceptConvo = validateLogAcceptConvo;
exports.isLogLeaveConvo = isLogLeaveConvo;
exports.validateLogLeaveConvo = validateLogLeaveConvo;
exports.isLogMuteConvo = isLogMuteConvo;
exports.validateLogMuteConvo = validateLogMuteConvo;
exports.isLogUnmuteConvo = isLogUnmuteConvo;
exports.validateLogUnmuteConvo = validateLogUnmuteConvo;
exports.isLogCreateMessage = isLogCreateMessage;
exports.validateLogCreateMessage = validateLogCreateMessage;
exports.isLogDeleteMessage = isLogDeleteMessage;
exports.validateLogDeleteMessage = validateLogDeleteMessage;
exports.isLogReadMessage = isLogReadMessage;
exports.validateLogReadMessage = validateLogReadMessage;
exports.isLogAddReaction = isLogAddReaction;
exports.validateLogAddReaction = validateLogAddReaction;
exports.isLogRemoveReaction = isLogRemoveReaction;
exports.validateLogRemoveReaction = validateLogRemoveReaction;
const lexicons_1 = require("3f7849f55e555501");
const util_1 = require("3a80864916ef6816");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.defs';
const hashMessageRef = 'messageRef';
function isMessageRef(v) {
    return is$typed(v, id, hashMessageRef);
}
function validateMessageRef(v) {
    return validate(v, id, hashMessageRef);
}
const hashMessageInput = 'messageInput';
function isMessageInput(v) {
    return is$typed(v, id, hashMessageInput);
}
function validateMessageInput(v) {
    return validate(v, id, hashMessageInput);
}
const hashMessageView = 'messageView';
function isMessageView(v) {
    return is$typed(v, id, hashMessageView);
}
function validateMessageView(v) {
    return validate(v, id, hashMessageView);
}
const hashDeletedMessageView = 'deletedMessageView';
function isDeletedMessageView(v) {
    return is$typed(v, id, hashDeletedMessageView);
}
function validateDeletedMessageView(v) {
    return validate(v, id, hashDeletedMessageView);
}
const hashMessageViewSender = 'messageViewSender';
function isMessageViewSender(v) {
    return is$typed(v, id, hashMessageViewSender);
}
function validateMessageViewSender(v) {
    return validate(v, id, hashMessageViewSender);
}
const hashReactionView = 'reactionView';
function isReactionView(v) {
    return is$typed(v, id, hashReactionView);
}
function validateReactionView(v) {
    return validate(v, id, hashReactionView);
}
const hashReactionViewSender = 'reactionViewSender';
function isReactionViewSender(v) {
    return is$typed(v, id, hashReactionViewSender);
}
function validateReactionViewSender(v) {
    return validate(v, id, hashReactionViewSender);
}
const hashMessageAndReactionView = 'messageAndReactionView';
function isMessageAndReactionView(v) {
    return is$typed(v, id, hashMessageAndReactionView);
}
function validateMessageAndReactionView(v) {
    return validate(v, id, hashMessageAndReactionView);
}
const hashConvoView = 'convoView';
function isConvoView(v) {
    return is$typed(v, id, hashConvoView);
}
function validateConvoView(v) {
    return validate(v, id, hashConvoView);
}
const hashLogBeginConvo = 'logBeginConvo';
function isLogBeginConvo(v) {
    return is$typed(v, id, hashLogBeginConvo);
}
function validateLogBeginConvo(v) {
    return validate(v, id, hashLogBeginConvo);
}
const hashLogAcceptConvo = 'logAcceptConvo';
function isLogAcceptConvo(v) {
    return is$typed(v, id, hashLogAcceptConvo);
}
function validateLogAcceptConvo(v) {
    return validate(v, id, hashLogAcceptConvo);
}
const hashLogLeaveConvo = 'logLeaveConvo';
function isLogLeaveConvo(v) {
    return is$typed(v, id, hashLogLeaveConvo);
}
function validateLogLeaveConvo(v) {
    return validate(v, id, hashLogLeaveConvo);
}
const hashLogMuteConvo = 'logMuteConvo';
function isLogMuteConvo(v) {
    return is$typed(v, id, hashLogMuteConvo);
}
function validateLogMuteConvo(v) {
    return validate(v, id, hashLogMuteConvo);
}
const hashLogUnmuteConvo = 'logUnmuteConvo';
function isLogUnmuteConvo(v) {
    return is$typed(v, id, hashLogUnmuteConvo);
}
function validateLogUnmuteConvo(v) {
    return validate(v, id, hashLogUnmuteConvo);
}
const hashLogCreateMessage = 'logCreateMessage';
function isLogCreateMessage(v) {
    return is$typed(v, id, hashLogCreateMessage);
}
function validateLogCreateMessage(v) {
    return validate(v, id, hashLogCreateMessage);
}
const hashLogDeleteMessage = 'logDeleteMessage';
function isLogDeleteMessage(v) {
    return is$typed(v, id, hashLogDeleteMessage);
}
function validateLogDeleteMessage(v) {
    return validate(v, id, hashLogDeleteMessage);
}
const hashLogReadMessage = 'logReadMessage';
function isLogReadMessage(v) {
    return is$typed(v, id, hashLogReadMessage);
}
function validateLogReadMessage(v) {
    return validate(v, id, hashLogReadMessage);
}
const hashLogAddReaction = 'logAddReaction';
function isLogAddReaction(v) {
    return is$typed(v, id, hashLogAddReaction);
}
function validateLogAddReaction(v) {
    return validate(v, id, hashLogAddReaction);
}
const hashLogRemoveReaction = 'logRemoveReaction';
function isLogRemoveReaction(v) {
    return is$typed(v, id, hashLogRemoveReaction);
}
function validateLogRemoveReaction(v) {
    return validate(v, id, hashLogRemoveReaction);
}

},{"3f7849f55e555501":"b1XzS","3a80864916ef6816":"hnRug"}],"2Pg3V":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("33e01af134f238e2");
const util_1 = require("7f6a5bcdc15f1efd");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.deleteMessageForSelf';
function toKnownErr(e) {
    return e;
}

},{"33e01af134f238e2":"b1XzS","7f6a5bcdc15f1efd":"hnRug"}],"1oE7v":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("200567615ec56b9a");
const util_1 = require("e11a54d5d3496759");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.getConvo';
function toKnownErr(e) {
    return e;
}

},{"200567615ec56b9a":"b1XzS","e11a54d5d3496759":"hnRug"}],"84EGq":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("26a536cfa29e933c");
const util_1 = require("44cec7ac6c2496ba");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.getConvoAvailability';
function toKnownErr(e) {
    return e;
}

},{"26a536cfa29e933c":"b1XzS","44cec7ac6c2496ba":"hnRug"}],"ddDA9":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("41fe1033b00aa47c");
const util_1 = require("1371f40107bbbce5");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.getConvoForMembers';
function toKnownErr(e) {
    return e;
}

},{"41fe1033b00aa47c":"b1XzS","1371f40107bbbce5":"hnRug"}],"iL8F3":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("db7c6d60b93dc2f6");
const util_1 = require("f9100e5ae1db9431");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.getLog';
function toKnownErr(e) {
    return e;
}

},{"db7c6d60b93dc2f6":"b1XzS","f9100e5ae1db9431":"hnRug"}],"11tiJ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("f93ca25d79cbd28c");
const util_1 = require("730553853a7ecae0");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.getMessages';
function toKnownErr(e) {
    return e;
}

},{"f93ca25d79cbd28c":"b1XzS","730553853a7ecae0":"hnRug"}],"kSxZd":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("433aa801bb6d9cd1");
const util_1 = require("ab0575c87d9b72e2");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.leaveConvo';
function toKnownErr(e) {
    return e;
}

},{"433aa801bb6d9cd1":"b1XzS","ab0575c87d9b72e2":"hnRug"}],"cBRIb":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("5b7b66b43ecd2f05");
const util_1 = require("a4c82ea1eecebb93");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.listConvos';
function toKnownErr(e) {
    return e;
}

},{"5b7b66b43ecd2f05":"b1XzS","a4c82ea1eecebb93":"hnRug"}],"600yv":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("7dc7c52a35097f75");
const util_1 = require("ceeae54b8a1c1f8e");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.muteConvo';
function toKnownErr(e) {
    return e;
}

},{"7dc7c52a35097f75":"b1XzS","ceeae54b8a1c1f8e":"hnRug"}],"6lYjl":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("ef5c75b79bc7ab9f");
const util_1 = require("ddd9e29d4b286779");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.sendMessage';
function toKnownErr(e) {
    return e;
}

},{"ef5c75b79bc7ab9f":"b1XzS","ddd9e29d4b286779":"hnRug"}],"vS2Vy":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isBatchItem = isBatchItem;
exports.validateBatchItem = validateBatchItem;
const lexicons_1 = require("9dbbccebbad5557f");
const util_1 = require("f9ef4f4868f6178d");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.sendMessageBatch';
function toKnownErr(e) {
    return e;
}
const hashBatchItem = 'batchItem';
function isBatchItem(v) {
    return is$typed(v, id, hashBatchItem);
}
function validateBatchItem(v) {
    return validate(v, id, hashBatchItem);
}

},{"9dbbccebbad5557f":"b1XzS","f9ef4f4868f6178d":"hnRug"}],"3ju0Y":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("ac5c304bd41d7856");
const util_1 = require("fbd3adfcce09841a");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.unmuteConvo';
function toKnownErr(e) {
    return e;
}

},{"ac5c304bd41d7856":"b1XzS","fbd3adfcce09841a":"hnRug"}],"cLagr":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("6c4b51788e7954a7");
const util_1 = require("eddcab0d972bbb41");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.updateAllRead';
function toKnownErr(e) {
    return e;
}

},{"6c4b51788e7954a7":"b1XzS","eddcab0d972bbb41":"hnRug"}],"fgk2c":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("535175e63cd9d696");
const util_1 = require("9f7cf7b049437103");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.convo.updateRead';
function toKnownErr(e) {
    return e;
}

},{"535175e63cd9d696":"b1XzS","9f7cf7b049437103":"hnRug"}],"1pwKP":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isMetadata = isMetadata;
exports.validateMetadata = validateMetadata;
const lexicons_1 = require("9a3bd09efd4c959a");
const util_1 = require("875a90dc41e3ac17");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.moderation.getActorMetadata';
function toKnownErr(e) {
    return e;
}
const hashMetadata = 'metadata';
function isMetadata(v) {
    return is$typed(v, id, hashMetadata);
}
function validateMetadata(v) {
    return validate(v, id, hashMetadata);
}

},{"9a3bd09efd4c959a":"b1XzS","875a90dc41e3ac17":"hnRug"}],"ksVqn":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("7f34a82f364fd27");
const util_1 = require("62a7dc05363fae1");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.moderation.getMessageContext';
function toKnownErr(e) {
    return e;
}

},{"7f34a82f364fd27":"b1XzS","62a7dc05363fae1":"hnRug"}],"4FJve":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("e9082f366fcc5aa");
const util_1 = require("2c854eb5d82976fc");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'chat.bsky.moderation.updateActorAccess';
function toKnownErr(e) {
    return e;
}

},{"e9082f366fcc5aa":"b1XzS","2c854eb5d82976fc":"hnRug"}],"bmigo":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isTemplateView = isTemplateView;
exports.validateTemplateView = validateTemplateView;
const lexicons_1 = require("a5374f202ea495b0");
const util_1 = require("b717649811ff79d4");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.communication.defs';
const hashTemplateView = 'templateView';
function isTemplateView(v) {
    return is$typed(v, id, hashTemplateView);
}
function validateTemplateView(v) {
    return validate(v, id, hashTemplateView);
}

},{"a5374f202ea495b0":"b1XzS","b717649811ff79d4":"hnRug"}],"lzow7":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("eba78a2a6f4018e");
const util_1 = require("9217ba6b0f1ca36");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.communication.deleteTemplate';
function toKnownErr(e) {
    return e;
}

},{"eba78a2a6f4018e":"b1XzS","9217ba6b0f1ca36":"hnRug"}],"1pHhQ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("24c02493e72d2c69");
const util_1 = require("634a459b372fd373");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.communication.listTemplates';
function toKnownErr(e) {
    return e;
}

},{"24c02493e72d2c69":"b1XzS","634a459b372fd373":"hnRug"}],"krpEv":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isEvent = isEvent;
exports.validateEvent = validateEvent;
exports.isAccountCreated = isAccountCreated;
exports.validateAccountCreated = validateAccountCreated;
exports.isEmailUpdated = isEmailUpdated;
exports.validateEmailUpdated = validateEmailUpdated;
exports.isEmailConfirmed = isEmailConfirmed;
exports.validateEmailConfirmed = validateEmailConfirmed;
exports.isPasswordUpdated = isPasswordUpdated;
exports.validatePasswordUpdated = validatePasswordUpdated;
exports.isHandleUpdated = isHandleUpdated;
exports.validateHandleUpdated = validateHandleUpdated;
const lexicons_1 = require("2ad97ac695529abe");
const util_1 = require("d53a15c9c3f537e6");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.hosting.getAccountHistory';
function toKnownErr(e) {
    return e;
}
const hashEvent = 'event';
function isEvent(v) {
    return is$typed(v, id, hashEvent);
}
function validateEvent(v) {
    return validate(v, id, hashEvent);
}
const hashAccountCreated = 'accountCreated';
function isAccountCreated(v) {
    return is$typed(v, id, hashAccountCreated);
}
function validateAccountCreated(v) {
    return validate(v, id, hashAccountCreated);
}
const hashEmailUpdated = 'emailUpdated';
function isEmailUpdated(v) {
    return is$typed(v, id, hashEmailUpdated);
}
function validateEmailUpdated(v) {
    return validate(v, id, hashEmailUpdated);
}
const hashEmailConfirmed = 'emailConfirmed';
function isEmailConfirmed(v) {
    return is$typed(v, id, hashEmailConfirmed);
}
function validateEmailConfirmed(v) {
    return validate(v, id, hashEmailConfirmed);
}
const hashPasswordUpdated = 'passwordUpdated';
function isPasswordUpdated(v) {
    return is$typed(v, id, hashPasswordUpdated);
}
function validatePasswordUpdated(v) {
    return validate(v, id, hashPasswordUpdated);
}
const hashHandleUpdated = 'handleUpdated';
function isHandleUpdated(v) {
    return is$typed(v, id, hashHandleUpdated);
}
function validateHandleUpdated(v) {
    return validate(v, id, hashHandleUpdated);
}

},{"2ad97ac695529abe":"b1XzS","d53a15c9c3f537e6":"hnRug"}],"lNOnQ":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.REVIEWNONE = exports.REVIEWCLOSED = exports.REVIEWESCALATED = exports.REVIEWOPEN = void 0;
exports.isModEventView = isModEventView;
exports.validateModEventView = validateModEventView;
exports.isModEventViewDetail = isModEventViewDetail;
exports.validateModEventViewDetail = validateModEventViewDetail;
exports.isSubjectStatusView = isSubjectStatusView;
exports.validateSubjectStatusView = validateSubjectStatusView;
exports.isSubjectView = isSubjectView;
exports.validateSubjectView = validateSubjectView;
exports.isAccountStats = isAccountStats;
exports.validateAccountStats = validateAccountStats;
exports.isRecordsStats = isRecordsStats;
exports.validateRecordsStats = validateRecordsStats;
exports.isModEventTakedown = isModEventTakedown;
exports.validateModEventTakedown = validateModEventTakedown;
exports.isModEventReverseTakedown = isModEventReverseTakedown;
exports.validateModEventReverseTakedown = validateModEventReverseTakedown;
exports.isModEventResolveAppeal = isModEventResolveAppeal;
exports.validateModEventResolveAppeal = validateModEventResolveAppeal;
exports.isModEventComment = isModEventComment;
exports.validateModEventComment = validateModEventComment;
exports.isModEventReport = isModEventReport;
exports.validateModEventReport = validateModEventReport;
exports.isModEventLabel = isModEventLabel;
exports.validateModEventLabel = validateModEventLabel;
exports.isModEventPriorityScore = isModEventPriorityScore;
exports.validateModEventPriorityScore = validateModEventPriorityScore;
exports.isModEventAcknowledge = isModEventAcknowledge;
exports.validateModEventAcknowledge = validateModEventAcknowledge;
exports.isModEventEscalate = isModEventEscalate;
exports.validateModEventEscalate = validateModEventEscalate;
exports.isModEventMute = isModEventMute;
exports.validateModEventMute = validateModEventMute;
exports.isModEventUnmute = isModEventUnmute;
exports.validateModEventUnmute = validateModEventUnmute;
exports.isModEventMuteReporter = isModEventMuteReporter;
exports.validateModEventMuteReporter = validateModEventMuteReporter;
exports.isModEventUnmuteReporter = isModEventUnmuteReporter;
exports.validateModEventUnmuteReporter = validateModEventUnmuteReporter;
exports.isModEventEmail = isModEventEmail;
exports.validateModEventEmail = validateModEventEmail;
exports.isModEventDivert = isModEventDivert;
exports.validateModEventDivert = validateModEventDivert;
exports.isModEventTag = isModEventTag;
exports.validateModEventTag = validateModEventTag;
exports.isAccountEvent = isAccountEvent;
exports.validateAccountEvent = validateAccountEvent;
exports.isIdentityEvent = isIdentityEvent;
exports.validateIdentityEvent = validateIdentityEvent;
exports.isRecordEvent = isRecordEvent;
exports.validateRecordEvent = validateRecordEvent;
exports.isRepoView = isRepoView;
exports.validateRepoView = validateRepoView;
exports.isRepoViewDetail = isRepoViewDetail;
exports.validateRepoViewDetail = validateRepoViewDetail;
exports.isRepoViewNotFound = isRepoViewNotFound;
exports.validateRepoViewNotFound = validateRepoViewNotFound;
exports.isRecordView = isRecordView;
exports.validateRecordView = validateRecordView;
exports.isRecordViewDetail = isRecordViewDetail;
exports.validateRecordViewDetail = validateRecordViewDetail;
exports.isRecordViewNotFound = isRecordViewNotFound;
exports.validateRecordViewNotFound = validateRecordViewNotFound;
exports.isModeration = isModeration;
exports.validateModeration = validateModeration;
exports.isModerationDetail = isModerationDetail;
exports.validateModerationDetail = validateModerationDetail;
exports.isBlobView = isBlobView;
exports.validateBlobView = validateBlobView;
exports.isImageDetails = isImageDetails;
exports.validateImageDetails = validateImageDetails;
exports.isVideoDetails = isVideoDetails;
exports.validateVideoDetails = validateVideoDetails;
exports.isAccountHosting = isAccountHosting;
exports.validateAccountHosting = validateAccountHosting;
exports.isRecordHosting = isRecordHosting;
exports.validateRecordHosting = validateRecordHosting;
exports.isReporterStats = isReporterStats;
exports.validateReporterStats = validateReporterStats;
const lexicons_1 = require("5418512da197307");
const util_1 = require("15140336f5d19262");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.moderation.defs';
const hashModEventView = 'modEventView';
function isModEventView(v) {
    return is$typed(v, id, hashModEventView);
}
function validateModEventView(v) {
    return validate(v, id, hashModEventView);
}
const hashModEventViewDetail = 'modEventViewDetail';
function isModEventViewDetail(v) {
    return is$typed(v, id, hashModEventViewDetail);
}
function validateModEventViewDetail(v) {
    return validate(v, id, hashModEventViewDetail);
}
const hashSubjectStatusView = 'subjectStatusView';
function isSubjectStatusView(v) {
    return is$typed(v, id, hashSubjectStatusView);
}
function validateSubjectStatusView(v) {
    return validate(v, id, hashSubjectStatusView);
}
const hashSubjectView = 'subjectView';
function isSubjectView(v) {
    return is$typed(v, id, hashSubjectView);
}
function validateSubjectView(v) {
    return validate(v, id, hashSubjectView);
}
const hashAccountStats = 'accountStats';
function isAccountStats(v) {
    return is$typed(v, id, hashAccountStats);
}
function validateAccountStats(v) {
    return validate(v, id, hashAccountStats);
}
const hashRecordsStats = 'recordsStats';
function isRecordsStats(v) {
    return is$typed(v, id, hashRecordsStats);
}
function validateRecordsStats(v) {
    return validate(v, id, hashRecordsStats);
}
/** Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator */ exports.REVIEWOPEN = `${id}#reviewOpen`;
/** Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator */ exports.REVIEWESCALATED = `${id}#reviewEscalated`;
/** Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator */ exports.REVIEWCLOSED = `${id}#reviewClosed`;
/** Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it */ exports.REVIEWNONE = `${id}#reviewNone`;
const hashModEventTakedown = 'modEventTakedown';
function isModEventTakedown(v) {
    return is$typed(v, id, hashModEventTakedown);
}
function validateModEventTakedown(v) {
    return validate(v, id, hashModEventTakedown);
}
const hashModEventReverseTakedown = 'modEventReverseTakedown';
function isModEventReverseTakedown(v) {
    return is$typed(v, id, hashModEventReverseTakedown);
}
function validateModEventReverseTakedown(v) {
    return validate(v, id, hashModEventReverseTakedown);
}
const hashModEventResolveAppeal = 'modEventResolveAppeal';
function isModEventResolveAppeal(v) {
    return is$typed(v, id, hashModEventResolveAppeal);
}
function validateModEventResolveAppeal(v) {
    return validate(v, id, hashModEventResolveAppeal);
}
const hashModEventComment = 'modEventComment';
function isModEventComment(v) {
    return is$typed(v, id, hashModEventComment);
}
function validateModEventComment(v) {
    return validate(v, id, hashModEventComment);
}
const hashModEventReport = 'modEventReport';
function isModEventReport(v) {
    return is$typed(v, id, hashModEventReport);
}
function validateModEventReport(v) {
    return validate(v, id, hashModEventReport);
}
const hashModEventLabel = 'modEventLabel';
function isModEventLabel(v) {
    return is$typed(v, id, hashModEventLabel);
}
function validateModEventLabel(v) {
    return validate(v, id, hashModEventLabel);
}
const hashModEventPriorityScore = 'modEventPriorityScore';
function isModEventPriorityScore(v) {
    return is$typed(v, id, hashModEventPriorityScore);
}
function validateModEventPriorityScore(v) {
    return validate(v, id, hashModEventPriorityScore);
}
const hashModEventAcknowledge = 'modEventAcknowledge';
function isModEventAcknowledge(v) {
    return is$typed(v, id, hashModEventAcknowledge);
}
function validateModEventAcknowledge(v) {
    return validate(v, id, hashModEventAcknowledge);
}
const hashModEventEscalate = 'modEventEscalate';
function isModEventEscalate(v) {
    return is$typed(v, id, hashModEventEscalate);
}
function validateModEventEscalate(v) {
    return validate(v, id, hashModEventEscalate);
}
const hashModEventMute = 'modEventMute';
function isModEventMute(v) {
    return is$typed(v, id, hashModEventMute);
}
function validateModEventMute(v) {
    return validate(v, id, hashModEventMute);
}
const hashModEventUnmute = 'modEventUnmute';
function isModEventUnmute(v) {
    return is$typed(v, id, hashModEventUnmute);
}
function validateModEventUnmute(v) {
    return validate(v, id, hashModEventUnmute);
}
const hashModEventMuteReporter = 'modEventMuteReporter';
function isModEventMuteReporter(v) {
    return is$typed(v, id, hashModEventMuteReporter);
}
function validateModEventMuteReporter(v) {
    return validate(v, id, hashModEventMuteReporter);
}
const hashModEventUnmuteReporter = 'modEventUnmuteReporter';
function isModEventUnmuteReporter(v) {
    return is$typed(v, id, hashModEventUnmuteReporter);
}
function validateModEventUnmuteReporter(v) {
    return validate(v, id, hashModEventUnmuteReporter);
}
const hashModEventEmail = 'modEventEmail';
function isModEventEmail(v) {
    return is$typed(v, id, hashModEventEmail);
}
function validateModEventEmail(v) {
    return validate(v, id, hashModEventEmail);
}
const hashModEventDivert = 'modEventDivert';
function isModEventDivert(v) {
    return is$typed(v, id, hashModEventDivert);
}
function validateModEventDivert(v) {
    return validate(v, id, hashModEventDivert);
}
const hashModEventTag = 'modEventTag';
function isModEventTag(v) {
    return is$typed(v, id, hashModEventTag);
}
function validateModEventTag(v) {
    return validate(v, id, hashModEventTag);
}
const hashAccountEvent = 'accountEvent';
function isAccountEvent(v) {
    return is$typed(v, id, hashAccountEvent);
}
function validateAccountEvent(v) {
    return validate(v, id, hashAccountEvent);
}
const hashIdentityEvent = 'identityEvent';
function isIdentityEvent(v) {
    return is$typed(v, id, hashIdentityEvent);
}
function validateIdentityEvent(v) {
    return validate(v, id, hashIdentityEvent);
}
const hashRecordEvent = 'recordEvent';
function isRecordEvent(v) {
    return is$typed(v, id, hashRecordEvent);
}
function validateRecordEvent(v) {
    return validate(v, id, hashRecordEvent);
}
const hashRepoView = 'repoView';
function isRepoView(v) {
    return is$typed(v, id, hashRepoView);
}
function validateRepoView(v) {
    return validate(v, id, hashRepoView);
}
const hashRepoViewDetail = 'repoViewDetail';
function isRepoViewDetail(v) {
    return is$typed(v, id, hashRepoViewDetail);
}
function validateRepoViewDetail(v) {
    return validate(v, id, hashRepoViewDetail);
}
const hashRepoViewNotFound = 'repoViewNotFound';
function isRepoViewNotFound(v) {
    return is$typed(v, id, hashRepoViewNotFound);
}
function validateRepoViewNotFound(v) {
    return validate(v, id, hashRepoViewNotFound);
}
const hashRecordView = 'recordView';
function isRecordView(v) {
    return is$typed(v, id, hashRecordView);
}
function validateRecordView(v) {
    return validate(v, id, hashRecordView);
}
const hashRecordViewDetail = 'recordViewDetail';
function isRecordViewDetail(v) {
    return is$typed(v, id, hashRecordViewDetail);
}
function validateRecordViewDetail(v) {
    return validate(v, id, hashRecordViewDetail);
}
const hashRecordViewNotFound = 'recordViewNotFound';
function isRecordViewNotFound(v) {
    return is$typed(v, id, hashRecordViewNotFound);
}
function validateRecordViewNotFound(v) {
    return validate(v, id, hashRecordViewNotFound);
}
const hashModeration = 'moderation';
function isModeration(v) {
    return is$typed(v, id, hashModeration);
}
function validateModeration(v) {
    return validate(v, id, hashModeration);
}
const hashModerationDetail = 'moderationDetail';
function isModerationDetail(v) {
    return is$typed(v, id, hashModerationDetail);
}
function validateModerationDetail(v) {
    return validate(v, id, hashModerationDetail);
}
const hashBlobView = 'blobView';
function isBlobView(v) {
    return is$typed(v, id, hashBlobView);
}
function validateBlobView(v) {
    return validate(v, id, hashBlobView);
}
const hashImageDetails = 'imageDetails';
function isImageDetails(v) {
    return is$typed(v, id, hashImageDetails);
}
function validateImageDetails(v) {
    return validate(v, id, hashImageDetails);
}
const hashVideoDetails = 'videoDetails';
function isVideoDetails(v) {
    return is$typed(v, id, hashVideoDetails);
}
function validateVideoDetails(v) {
    return validate(v, id, hashVideoDetails);
}
const hashAccountHosting = 'accountHosting';
function isAccountHosting(v) {
    return is$typed(v, id, hashAccountHosting);
}
function validateAccountHosting(v) {
    return validate(v, id, hashAccountHosting);
}
const hashRecordHosting = 'recordHosting';
function isRecordHosting(v) {
    return is$typed(v, id, hashRecordHosting);
}
function validateRecordHosting(v) {
    return validate(v, id, hashRecordHosting);
}
const hashReporterStats = 'reporterStats';
function isReporterStats(v) {
    return is$typed(v, id, hashReporterStats);
}
function validateReporterStats(v) {
    return validate(v, id, hashReporterStats);
}

},{"5418512da197307":"b1XzS","15140336f5d19262":"hnRug"}],"19Yc2":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("aeccf533ec9ca5d2");
const util_1 = require("bf8ab50ca0c60fa7");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.moderation.getEvent';
function toKnownErr(e) {
    return e;
}

},{"aeccf533ec9ca5d2":"b1XzS","bf8ab50ca0c60fa7":"hnRug"}],"1Z51I":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("fec76f92bd9ed330");
const util_1 = require("3ae8e006e647f2e7");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.moderation.getRecords';
function toKnownErr(e) {
    return e;
}

},{"fec76f92bd9ed330":"b1XzS","3ae8e006e647f2e7":"hnRug"}],"jfA2D":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("1c274a7775975f9d");
const util_1 = require("49157c3869bfb329");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.moderation.getReporterStats';
function toKnownErr(e) {
    return e;
}

},{"1c274a7775975f9d":"b1XzS","49157c3869bfb329":"hnRug"}],"41GDY":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("2fb2c9a1d543c84");
const util_1 = require("c0fae3d44c930d92");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.moderation.getRepos';
function toKnownErr(e) {
    return e;
}

},{"2fb2c9a1d543c84":"b1XzS","c0fae3d44c930d92":"hnRug"}],"iSnef":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("9a561d223ee6ea5");
const util_1 = require("2a80ebefe562ab9");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.moderation.getSubjects';
function toKnownErr(e) {
    return e;
}

},{"9a561d223ee6ea5":"b1XzS","2a80ebefe562ab9":"hnRug"}],"2USGS":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("9e8bcfde1f787fed");
const util_1 = require("db96b09473ed8f4e");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.moderation.queryEvents';
function toKnownErr(e) {
    return e;
}

},{"9e8bcfde1f787fed":"b1XzS","db96b09473ed8f4e":"hnRug"}],"c2x9C":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("2cd4b4e239d3e53c");
const util_1 = require("1869eb782e35b45c");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.moderation.queryStatuses';
function toKnownErr(e) {
    return e;
}

},{"2cd4b4e239d3e53c":"b1XzS","1869eb782e35b45c":"hnRug"}],"81IY3":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("e7186ac21caf9ced");
const util_1 = require("a0e1cd380958843e");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.moderation.searchRepos';
function toKnownErr(e) {
    return e;
}

},{"e7186ac21caf9ced":"b1XzS","a0e1cd380958843e":"hnRug"}],"hm9l9":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isServiceConfig = isServiceConfig;
exports.validateServiceConfig = validateServiceConfig;
exports.isViewerConfig = isViewerConfig;
exports.validateViewerConfig = validateViewerConfig;
const lexicons_1 = require("d49f51bbacfe79be");
const util_1 = require("9cf7523f9b603b1c");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.server.getConfig';
function toKnownErr(e) {
    return e;
}
const hashServiceConfig = 'serviceConfig';
function isServiceConfig(v) {
    return is$typed(v, id, hashServiceConfig);
}
function validateServiceConfig(v) {
    return validate(v, id, hashServiceConfig);
}
const hashViewerConfig = 'viewerConfig';
function isViewerConfig(v) {
    return is$typed(v, id, hashViewerConfig);
}
function validateViewerConfig(v) {
    return validate(v, id, hashViewerConfig);
}

},{"d49f51bbacfe79be":"b1XzS","9cf7523f9b603b1c":"hnRug"}],"Pg7Ki":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("11e2a1caa7fd3f8b");
const util_1 = require("88c9593851473888");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.set.addValues';
function toKnownErr(e) {
    return e;
}

},{"11e2a1caa7fd3f8b":"b1XzS","88c9593851473888":"hnRug"}],"fdi2W":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isSet = isSet;
exports.validateSet = validateSet;
exports.isSetView = isSetView;
exports.validateSetView = validateSetView;
const lexicons_1 = require("dd51e38f299590a1");
const util_1 = require("feb121eb3d315d6b");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.set.defs';
const hashSet = 'set';
function isSet(v) {
    return is$typed(v, id, hashSet);
}
function validateSet(v) {
    return validate(v, id, hashSet);
}
const hashSetView = 'setView';
function isSetView(v) {
    return is$typed(v, id, hashSetView);
}
function validateSetView(v) {
    return validate(v, id, hashSetView);
}

},{"dd51e38f299590a1":"b1XzS","feb121eb3d315d6b":"hnRug"}],"68p8a":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("b0f560f51d2aba6b");
const util_1 = require("1491c3d33e1a9d4f");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.set.querySets';
function toKnownErr(e) {
    return e;
}

},{"b0f560f51d2aba6b":"b1XzS","1491c3d33e1a9d4f":"hnRug"}],"jz4Tb":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("27131bf0facea021");
const util_1 = require("9fdf10148437ba8b");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.set.upsertSet';
function toKnownErr(e) {
    return e;
}

},{"27131bf0facea021":"b1XzS","9fdf10148437ba8b":"hnRug"}],"iCpTE":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isOption = isOption;
exports.validateOption = validateOption;
const lexicons_1 = require("471be271d355b98e");
const util_1 = require("db216e5e0b4feb6c");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.setting.defs';
const hashOption = 'option';
function isOption(v) {
    return is$typed(v, id, hashOption);
}
function validateOption(v) {
    return validate(v, id, hashOption);
}

},{"471be271d355b98e":"b1XzS","db216e5e0b4feb6c":"hnRug"}],"a3B5q":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("697435ff454a65b5");
const util_1 = require("bd142077ac86fb0a");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.setting.listOptions';
function toKnownErr(e) {
    return e;
}

},{"697435ff454a65b5":"b1XzS","bd142077ac86fb0a":"hnRug"}],"a7g8D":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("3ffeb3e0493f1435");
const util_1 = require("c038c2f55485d3c3");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.setting.removeOptions';
function toKnownErr(e) {
    return e;
}

},{"3ffeb3e0493f1435":"b1XzS","c038c2f55485d3c3":"hnRug"}],"ijsSC":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("da212174e0ac43db");
const util_1 = require("f3142774461c9136");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.setting.upsertOption';
function toKnownErr(e) {
    return e;
}

},{"da212174e0ac43db":"b1XzS","f3142774461c9136":"hnRug"}],"9yRds":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isSigDetail = isSigDetail;
exports.validateSigDetail = validateSigDetail;
const lexicons_1 = require("bae4bc25df39fd75");
const util_1 = require("4e526de2b0e6b2b1");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.signature.defs';
const hashSigDetail = 'sigDetail';
function isSigDetail(v) {
    return is$typed(v, id, hashSigDetail);
}
function validateSigDetail(v) {
    return validate(v, id, hashSigDetail);
}

},{"bae4bc25df39fd75":"b1XzS","4e526de2b0e6b2b1":"hnRug"}],"fM1DD":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("cc8bf8478b839d12");
const util_1 = require("f5cb0d3aefa71818");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.signature.findCorrelation';
function toKnownErr(e) {
    return e;
}

},{"cc8bf8478b839d12":"b1XzS","f5cb0d3aefa71818":"hnRug"}],"4L55G":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isRelatedAccount = isRelatedAccount;
exports.validateRelatedAccount = validateRelatedAccount;
const lexicons_1 = require("b774f11d7eb52ef9");
const util_1 = require("e669f691bade9be2");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.signature.findRelatedAccounts';
function toKnownErr(e) {
    return e;
}
const hashRelatedAccount = 'relatedAccount';
function isRelatedAccount(v) {
    return is$typed(v, id, hashRelatedAccount);
}
function validateRelatedAccount(v) {
    return validate(v, id, hashRelatedAccount);
}

},{"b774f11d7eb52ef9":"b1XzS","e669f691bade9be2":"hnRug"}],"ae30I":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("8a6992b8e176ac3e");
const util_1 = require("a44c50f88a3c19e6");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.signature.searchAccounts';
function toKnownErr(e) {
    return e;
}

},{"8a6992b8e176ac3e":"b1XzS","a44c50f88a3c19e6":"hnRug"}],"eUX77":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ROLEVERIFIER = exports.ROLETRIAGE = exports.ROLEMODERATOR = exports.ROLEADMIN = void 0;
exports.isMember = isMember;
exports.validateMember = validateMember;
const lexicons_1 = require("1ae234f9e15f4be2");
const util_1 = require("8a8cb8dc7dc29104");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.team.defs';
const hashMember = 'member';
function isMember(v) {
    return is$typed(v, id, hashMember);
}
function validateMember(v) {
    return validate(v, id, hashMember);
}
/** Admin role. Highest level of access, can perform all actions. */ exports.ROLEADMIN = `${id}#roleAdmin`;
/** Moderator role. Can perform most actions. */ exports.ROLEMODERATOR = `${id}#roleModerator`;
/** Triage role. Mostly intended for monitoring and escalating issues. */ exports.ROLETRIAGE = `${id}#roleTriage`;
/** Verifier role. Only allowed to issue verifications. */ exports.ROLEVERIFIER = `${id}#roleVerifier`;

},{"1ae234f9e15f4be2":"b1XzS","8a8cb8dc7dc29104":"hnRug"}],"66EYR":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("91aae12d7a6293a9");
const util_1 = require("dcf0a52a0776a946");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.team.listMembers';
function toKnownErr(e) {
    return e;
}

},{"91aae12d7a6293a9":"b1XzS","dcf0a52a0776a946":"hnRug"}],"8BNqI":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isVerificationView = isVerificationView;
exports.validateVerificationView = validateVerificationView;
const lexicons_1 = require("5fca45b0ac8d8414");
const util_1 = require("53b053155be6bbff");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.verification.defs';
const hashVerificationView = 'verificationView';
function isVerificationView(v) {
    return is$typed(v, id, hashVerificationView);
}
function validateVerificationView(v) {
    return validate(v, id, hashVerificationView);
}

},{"5fca45b0ac8d8414":"b1XzS","53b053155be6bbff":"hnRug"}],"kaeuu":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isVerificationInput = isVerificationInput;
exports.validateVerificationInput = validateVerificationInput;
exports.isGrantError = isGrantError;
exports.validateGrantError = validateGrantError;
const lexicons_1 = require("b83fe7024b5ecc68");
const util_1 = require("483a554a75198e4b");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.verification.grantVerifications';
function toKnownErr(e) {
    return e;
}
const hashVerificationInput = 'verificationInput';
function isVerificationInput(v) {
    return is$typed(v, id, hashVerificationInput);
}
function validateVerificationInput(v) {
    return validate(v, id, hashVerificationInput);
}
const hashGrantError = 'grantError';
function isGrantError(v) {
    return is$typed(v, id, hashGrantError);
}
function validateGrantError(v) {
    return validate(v, id, hashGrantError);
}

},{"b83fe7024b5ecc68":"b1XzS","483a554a75198e4b":"hnRug"}],"egG3s":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
const lexicons_1 = require("ef47a3d3c9014e8d");
const util_1 = require("ffe5850c96542a3a");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.verification.listVerifications';
function toKnownErr(e) {
    return e;
}

},{"ef47a3d3c9014e8d":"b1XzS","ffe5850c96542a3a":"hnRug"}],"aDSXg":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.toKnownErr = toKnownErr;
exports.isRevokeError = isRevokeError;
exports.validateRevokeError = validateRevokeError;
const lexicons_1 = require("e7f71e3b4263cb6");
const util_1 = require("6b4bbd84c3527907");
const is$typed = util_1.is$typed, validate = lexicons_1.validate;
const id = 'tools.ozone.verification.revokeVerifications';
function toKnownErr(e) {
    return e;
}
const hashRevokeError = 'revokeError';
function isRevokeError(v) {
    return is$typed(v, id, hashRevokeError);
}
function validateRevokeError(v) {
    return validate(v, id, hashRevokeError);
}

},{"e7f71e3b4263cb6":"b1XzS","6b4bbd84c3527907":"hnRug"}],"2YUaj":[function(require,module,exports,__globalThis) {
"use strict";
/*
= Rich Text Manipulation

When we sanitize rich text, we have to update the entity indices as the
text is modified. This can be modeled as inserts() and deletes() of the
rich text string. The possible scenarios are outlined below, along with
their expected behaviors.

NOTE: Slices are start inclusive, end exclusive

== richTextInsert()

Target string:

   0 1 2 3 4 5 6 7 8 910   // string indices
   h e l l o   w o r l d   // string value
       ^-------^           // target slice {start: 2, end: 7}

Scenarios:

A: ^                       // insert "test" at 0
B:        ^                // insert "test" at 4
C:                 ^       // insert "test" at 8

A = before           -> move both by num added
B = inner            -> move end by num added
C = after            -> noop

Results:

A: 0 1 2 3 4 5 6 7 8 910   // string indices
   t e s t h e l l o   w   // string value
               ^-------^   // target slice {start: 6, end: 11}

B: 0 1 2 3 4 5 6 7 8 910   // string indices
   h e l l t e s t o   w   // string value
       ^---------------^   // target slice {start: 2, end: 11}

C: 0 1 2 3 4 5 6 7 8 910   // string indices
   h e l l o   w o t e s   // string value
       ^-------^           // target slice {start: 2, end: 7}

== richTextDelete()

Target string:

   0 1 2 3 4 5 6 7 8 910   // string indices
   h e l l o   w o r l d   // string value
       ^-------^           // target slice {start: 2, end: 7}

Scenarios:

A: ^---------------^       // remove slice {start: 0, end: 9}
B:               ^-----^   // remove slice {start: 7, end: 11}
C:         ^-----------^   // remove slice {start: 4, end: 11}
D:       ^-^               // remove slice {start: 3, end: 5}
E:   ^-----^               // remove slice {start: 1, end: 5}
F: ^-^                     // remove slice {start: 0, end: 2}

A = entirely outer   -> delete slice
B = entirely after   -> noop
C = partially after  -> move end to remove-start
D = entirely inner   -> move end by num removed
E = partially before -> move start to remove-start index, move end by num removed
F = entirely before  -> move both by num removed

Results:

A: 0 1 2 3 4 5 6 7 8 910   // string indices
   l d                     // string value
                           // target slice (deleted)

B: 0 1 2 3 4 5 6 7 8 910   // string indices
   h e l l o   w           // string value
       ^-------^           // target slice {start: 2, end: 7}

C: 0 1 2 3 4 5 6 7 8 910   // string indices
   h e l l                 // string value
       ^-^                 // target slice {start: 2, end: 4}

D: 0 1 2 3 4 5 6 7 8 910   // string indices
   h e l   w o r l d       // string value
       ^---^               // target slice {start: 2, end: 5}

E: 0 1 2 3 4 5 6 7 8 910   // string indices
   h   w o r l d           // string value
     ^-^                   // target slice {start: 1, end: 3}

F: 0 1 2 3 4 5 6 7 8 910   // string indices
   l l o   w o r l d       // string value
   ^-------^               // target slice {start: 0, end: 5}
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RichText = exports.RichTextSegment = void 0;
const client_1 = require("a17b2b909d853413");
const detection_1 = require("9d02dcba88dca2a0");
const sanitization_1 = require("bb8d749e7b91164");
const unicode_1 = require("4549115d7dc14337");
class RichTextSegment {
    constructor(text, facet){
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: text
        });
        Object.defineProperty(this, "facet", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: facet
        });
    }
    get link() {
        return this.facet?.features.find(client_1.AppBskyRichtextFacet.isLink);
    }
    isLink() {
        return !!this.link;
    }
    get mention() {
        return this.facet?.features.find(client_1.AppBskyRichtextFacet.isMention);
    }
    isMention() {
        return !!this.mention;
    }
    get tag() {
        return this.facet?.features.find(client_1.AppBskyRichtextFacet.isTag);
    }
    isTag() {
        return !!this.tag;
    }
}
exports.RichTextSegment = RichTextSegment;
class RichText {
    constructor(props, opts){
        Object.defineProperty(this, "unicodeText", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "facets", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.unicodeText = new unicode_1.UnicodeString(props.text);
        this.facets = props.facets;
        if (!this.facets?.length && props.entities?.length) this.facets = entitiesToFacets(this.unicodeText, props.entities);
        if (this.facets) this.facets = this.facets.filter(facetFilter).sort(facetSort);
        if (opts?.cleanNewlines) (0, sanitization_1.sanitizeRichText)(this, {
            cleanNewlines: true
        }).copyInto(this);
    }
    get text() {
        return this.unicodeText.toString();
    }
    get length() {
        return this.unicodeText.length;
    }
    get graphemeLength() {
        return this.unicodeText.graphemeLength;
    }
    clone() {
        return new RichText({
            text: this.unicodeText.utf16,
            facets: cloneDeep(this.facets)
        });
    }
    copyInto(target) {
        target.unicodeText = this.unicodeText;
        target.facets = cloneDeep(this.facets);
    }
    *segments() {
        const facets = this.facets || [];
        if (!facets.length) {
            yield new RichTextSegment(this.unicodeText.utf16);
            return;
        }
        let textCursor = 0;
        let facetCursor = 0;
        do {
            const currFacet = facets[facetCursor];
            if (textCursor < currFacet.index.byteStart) yield new RichTextSegment(this.unicodeText.slice(textCursor, currFacet.index.byteStart));
            else if (textCursor > currFacet.index.byteStart) {
                facetCursor++;
                continue;
            }
            if (currFacet.index.byteStart < currFacet.index.byteEnd) {
                const subtext = this.unicodeText.slice(currFacet.index.byteStart, currFacet.index.byteEnd);
                if (!subtext.trim()) // dont empty string entities
                yield new RichTextSegment(subtext);
                else yield new RichTextSegment(subtext, currFacet);
            }
            textCursor = currFacet.index.byteEnd;
            facetCursor++;
        }while (facetCursor < facets.length);
        if (textCursor < this.unicodeText.length) yield new RichTextSegment(this.unicodeText.slice(textCursor, this.unicodeText.length));
    }
    insert(insertIndex, insertText) {
        this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, insertIndex) + insertText + this.unicodeText.slice(insertIndex));
        if (!this.facets?.length) return this;
        const numCharsAdded = insertText.length;
        for (const ent of this.facets){
            // see comment at top of file for labels of each scenario
            // scenario A (before)
            if (insertIndex <= ent.index.byteStart) {
                // move both by num added
                ent.index.byteStart += numCharsAdded;
                ent.index.byteEnd += numCharsAdded;
            } else if (insertIndex >= ent.index.byteStart && insertIndex < ent.index.byteEnd) // move end by num added
            ent.index.byteEnd += numCharsAdded;
        // scenario C (after)
        // noop
        }
        return this;
    }
    delete(removeStartIndex, removeEndIndex) {
        this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, removeStartIndex) + this.unicodeText.slice(removeEndIndex));
        if (!this.facets?.length) return this;
        const numCharsRemoved = removeEndIndex - removeStartIndex;
        for (const ent of this.facets){
            // see comment at top of file for labels of each scenario
            // scenario A (entirely outer)
            if (removeStartIndex <= ent.index.byteStart && removeEndIndex >= ent.index.byteEnd) {
                // delete slice (will get removed in final pass)
                ent.index.byteStart = 0;
                ent.index.byteEnd = 0;
            } else if (removeStartIndex > ent.index.byteEnd) ;
            else if (removeStartIndex > ent.index.byteStart && removeStartIndex <= ent.index.byteEnd && removeEndIndex > ent.index.byteEnd) // move end to remove start
            ent.index.byteEnd = removeStartIndex;
            else if (removeStartIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) // move end by num removed
            ent.index.byteEnd -= numCharsRemoved;
            else if (removeStartIndex < ent.index.byteStart && removeEndIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
                // move start to remove-start index, move end by num removed
                ent.index.byteStart = removeStartIndex;
                ent.index.byteEnd -= numCharsRemoved;
            } else if (removeEndIndex < ent.index.byteStart) {
                // move both by num removed
                ent.index.byteStart -= numCharsRemoved;
                ent.index.byteEnd -= numCharsRemoved;
            }
        }
        // filter out any facets that were made irrelevant
        this.facets = this.facets.filter((ent)=>ent.index.byteStart < ent.index.byteEnd);
        return this;
    }
    /**
     * Detects facets such as links and mentions
     * Note: Overwrites the existing facets with auto-detected facets
     */ async detectFacets(agent) {
        this.facets = (0, detection_1.detectFacets)(this.unicodeText);
        if (this.facets) {
            const promises = [];
            for (const facet of this.facets){
                for (const feature of facet.features)if (client_1.AppBskyRichtextFacet.isMention(feature)) promises.push(agent.com.atproto.identity.resolveHandle({
                    handle: feature.did
                }).then((res)=>res?.data.did).catch((_)=>undefined).then((did)=>{
                    feature.did = did || '';
                }));
            }
            await Promise.allSettled(promises);
            this.facets.sort(facetSort);
        }
    }
    /**
     * Detects facets such as links and mentions but does not resolve them
     * Will produce invalid facets! For instance, mentions will not have their DIDs set.
     * Note: Overwrites the existing facets with auto-detected facets
     */ detectFacetsWithoutResolution() {
        this.facets = (0, detection_1.detectFacets)(this.unicodeText);
        if (this.facets) this.facets.sort(facetSort);
    }
}
exports.RichText = RichText;
const facetSort = (a, b)=>a.index.byteStart - b.index.byteStart;
const facetFilter = (facet)=>// discard negative-length facets. zero-length facets are valid
    facet.index.byteStart <= facet.index.byteEnd;
function entitiesToFacets(text, entities) {
    const facets = [];
    for (const ent of entities){
        if (ent.type === 'link') facets.push({
            $type: 'app.bsky.richtext.facet',
            index: {
                byteStart: text.utf16IndexToUtf8Index(ent.index.start),
                byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
            },
            features: [
                {
                    $type: 'app.bsky.richtext.facet#link',
                    uri: ent.value
                }
            ]
        });
        else if (ent.type === 'mention') facets.push({
            $type: 'app.bsky.richtext.facet',
            index: {
                byteStart: text.utf16IndexToUtf8Index(ent.index.start),
                byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
            },
            features: [
                {
                    $type: 'app.bsky.richtext.facet#mention',
                    did: ent.value
                }
            ]
        });
    }
    return facets;
}
function cloneDeep(v) {
    if (typeof v === 'undefined') return v;
    return JSON.parse(JSON.stringify(v));
}

},{"a17b2b909d853413":"hHmOB","9d02dcba88dca2a0":"8iiPR","bb8d749e7b91164":"chBlz","4549115d7dc14337":"afKwO"}],"8iiPR":[function(require,module,exports,__globalThis) {
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.detectFacets = detectFacets;
const tlds_1 = __importDefault(require("f196b486f3a253c8"));
const util_1 = require("a62b79c54240078e");
function detectFacets(text) {
    let match;
    const facets = [];
    {
        // mentions
        const re = util_1.MENTION_REGEX;
        while(match = re.exec(text.utf16)){
            if (!isValidDomain(match[3]) && !match[3].endsWith('.test')) continue; // probably not a handle
            const start = text.utf16.indexOf(match[3], match.index) - 1;
            facets.push({
                $type: 'app.bsky.richtext.facet',
                index: {
                    byteStart: text.utf16IndexToUtf8Index(start),
                    byteEnd: text.utf16IndexToUtf8Index(start + match[3].length + 1)
                },
                features: [
                    {
                        $type: 'app.bsky.richtext.facet#mention',
                        did: match[3]
                    }
                ]
            });
        }
    }
    {
        // links
        const re = util_1.URL_REGEX;
        while(match = re.exec(text.utf16)){
            let uri = match[2];
            if (!uri.startsWith('http')) {
                const domain = match.groups?.domain;
                if (!domain || !isValidDomain(domain)) continue;
                uri = `https://${uri}`;
            }
            const start = text.utf16.indexOf(match[2], match.index);
            const index = {
                start,
                end: start + match[2].length
            };
            // strip ending puncuation
            if (/[.,;:!?]$/.test(uri)) {
                uri = uri.slice(0, -1);
                index.end--;
            }
            if (/[)]$/.test(uri) && !uri.includes('(')) {
                uri = uri.slice(0, -1);
                index.end--;
            }
            facets.push({
                index: {
                    byteStart: text.utf16IndexToUtf8Index(index.start),
                    byteEnd: text.utf16IndexToUtf8Index(index.end)
                },
                features: [
                    {
                        $type: 'app.bsky.richtext.facet#link',
                        uri
                    }
                ]
            });
        }
    }
    {
        const re = util_1.TAG_REGEX;
        while(match = re.exec(text.utf16)){
            const leading = match[1];
            let tag = match[2];
            if (!tag) continue;
            // strip ending punctuation and any spaces
            tag = tag.trim().replace(util_1.TRAILING_PUNCTUATION_REGEX, '');
            if (tag.length === 0 || tag.length > 64) continue;
            const index = match.index + leading.length;
            facets.push({
                index: {
                    byteStart: text.utf16IndexToUtf8Index(index),
                    byteEnd: text.utf16IndexToUtf8Index(index + 1 + tag.length)
                },
                features: [
                    {
                        $type: 'app.bsky.richtext.facet#tag',
                        tag: tag
                    }
                ]
            });
        }
    }
    return facets.length > 0 ? facets : undefined;
}
function isValidDomain(str) {
    return !!tlds_1.default.find((tld)=>{
        const i = str.lastIndexOf(tld);
        if (i === -1) return false;
        return str.charAt(i - 1) === '.' && i === str.length - tld.length;
    });
}

},{"f196b486f3a253c8":"l6SHm","a62b79c54240078e":"lEmjE"}],"l6SHm":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse('["aaa","aarp","abb","abbott","abbvie","abc","able","abogado","abudhabi","ac","academy","accenture","accountant","accountants","aco","actor","ad","ads","adult","ae","aeg","aero","aetna","af","afl","africa","ag","agakhan","agency","ai","aig","airbus","airforce","airtel","akdn","al","alibaba","alipay","allfinanz","allstate","ally","alsace","alstom","am","amazon","americanexpress","americanfamily","amex","amfam","amica","amsterdam","analytics","android","anquan","anz","ao","aol","apartments","app","apple","aq","aquarelle","ar","arab","aramco","archi","army","arpa","art","arte","as","asda","asia","associates","at","athleta","attorney","au","auction","audi","audible","audio","auspost","author","auto","autos","aw","aws","ax","axa","az","azure","ba","baby","baidu","banamex","band","bank","bar","barcelona","barclaycard","barclays","barefoot","bargains","baseball","basketball","bauhaus","bayern","bb","bbc","bbt","bbva","bcg","bcn","bd","be","beats","beauty","beer","berlin","best","bestbuy","bet","bf","bg","bh","bharti","bi","bible","bid","bike","bing","bingo","bio","biz","bj","black","blackfriday","blockbuster","blog","bloomberg","blue","bm","bms","bmw","bn","bnpparibas","bo","boats","boehringer","bofa","bom","bond","boo","book","booking","bosch","bostik","boston","bot","boutique","box","br","bradesco","bridgestone","broadway","broker","brother","brussels","bs","bt","build","builders","business","buy","buzz","bv","bw","by","bz","bzh","ca","cab","cafe","cal","call","calvinklein","cam","camera","camp","canon","capetown","capital","capitalone","car","caravan","cards","care","career","careers","cars","casa","case","cash","casino","cat","catering","catholic","cba","cbn","cbre","cc","cd","center","ceo","cern","cf","cfa","cfd","cg","ch","chanel","channel","charity","chase","chat","cheap","chintai","christmas","chrome","church","ci","cipriani","circle","cisco","citadel","citi","citic","city","ck","cl","claims","cleaning","click","clinic","clinique","clothing","cloud","club","clubmed","cm","cn","co","coach","codes","coffee","college","cologne","com","commbank","community","company","compare","computer","comsec","condos","construction","consulting","contact","contractors","cooking","cool","coop","corsica","country","coupon","coupons","courses","cpa","cr","credit","creditcard","creditunion","cricket","crown","crs","cruise","cruises","cu","cuisinella","cv","cw","cx","cy","cymru","cyou","cz","dad","dance","data","date","dating","datsun","day","dclk","dds","de","deal","dealer","deals","degree","delivery","dell","deloitte","delta","democrat","dental","dentist","desi","design","dev","dhl","diamonds","diet","digital","direct","directory","discount","discover","dish","diy","dj","dk","dm","dnp","do","docs","doctor","dog","domains","dot","download","drive","dtv","dubai","dunlop","dupont","durban","dvag","dvr","dz","earth","eat","ec","eco","edeka","edu","education","ee","eg","email","emerck","energy","engineer","engineering","enterprises","epson","equipment","er","ericsson","erni","es","esq","estate","et","eu","eurovision","eus","events","exchange","expert","exposed","express","extraspace","fage","fail","fairwinds","faith","family","fan","fans","farm","farmers","fashion","fast","fedex","feedback","ferrari","ferrero","fi","fidelity","fido","film","final","finance","financial","fire","firestone","firmdale","fish","fishing","fit","fitness","fj","fk","flickr","flights","flir","florist","flowers","fly","fm","fo","foo","food","football","ford","forex","forsale","forum","foundation","fox","fr","free","fresenius","frl","frogans","frontier","ftr","fujitsu","fun","fund","furniture","futbol","fyi","ga","gal","gallery","gallo","gallup","game","games","gap","garden","gay","gb","gbiz","gd","gdn","ge","gea","gent","genting","george","gf","gg","ggee","gh","gi","gift","gifts","gives","giving","gl","glass","gle","global","globo","gm","gmail","gmbh","gmo","gmx","gn","godaddy","gold","goldpoint","golf","goo","goodyear","goog","google","gop","got","gov","gp","gq","gr","grainger","graphics","gratis","green","gripe","grocery","group","gs","gt","gu","gucci","guge","guide","guitars","guru","gw","gy","hair","hamburg","hangout","haus","hbo","hdfc","hdfcbank","health","healthcare","help","helsinki","here","hermes","hiphop","hisamitsu","hitachi","hiv","hk","hkt","hm","hn","hockey","holdings","holiday","homedepot","homegoods","homes","homesense","honda","horse","hospital","host","hosting","hot","hotels","hotmail","house","how","hr","hsbc","ht","hu","hughes","hyatt","hyundai","ibm","icbc","ice","icu","id","ie","ieee","ifm","ikano","il","im","imamat","imdb","immo","immobilien","in","inc","industries","infiniti","info","ing","ink","institute","insurance","insure","int","international","intuit","investments","io","ipiranga","iq","ir","irish","is","ismaili","ist","istanbul","it","itau","itv","jaguar","java","jcb","je","jeep","jetzt","jewelry","jio","jll","jm","jmp","jnj","jo","jobs","joburg","jot","joy","jp","jpmorgan","jprs","juegos","juniper","kaufen","kddi","ke","kerryhotels","kerryproperties","kfh","kg","kh","ki","kia","kids","kim","kindle","kitchen","kiwi","km","kn","koeln","komatsu","kosher","kp","kpmg","kpn","kr","krd","kred","kuokgroup","kw","ky","kyoto","kz","la","lacaixa","lamborghini","lamer","land","landrover","lanxess","lasalle","lat","latino","latrobe","law","lawyer","lb","lc","lds","lease","leclerc","lefrak","legal","lego","lexus","lgbt","li","lidl","life","lifeinsurance","lifestyle","lighting","like","lilly","limited","limo","lincoln","link","live","living","lk","llc","llp","loan","loans","locker","locus","lol","london","lotte","lotto","love","lpl","lplfinancial","lr","ls","lt","ltd","ltda","lu","lundbeck","luxe","luxury","lv","ly","ma","madrid","maif","maison","makeup","man","management","mango","map","market","marketing","markets","marriott","marshalls","mattel","mba","mc","mckinsey","md","me","med","media","meet","melbourne","meme","memorial","men","menu","merckmsd","mg","mh","miami","microsoft","mil","mini","mint","mit","mitsubishi","mk","ml","mlb","mls","mm","mma","mn","mo","mobi","mobile","moda","moe","moi","mom","monash","money","monster","mormon","mortgage","moscow","moto","motorcycles","mov","movie","mp","mq","mr","ms","msd","mt","mtn","mtr","mu","museum","music","mv","mw","mx","my","mz","na","nab","nagoya","name","navy","nba","nc","ne","nec","net","netbank","netflix","network","neustar","new","news","next","nextdirect","nexus","nf","nfl","ng","ngo","nhk","ni","nico","nike","nikon","ninja","nissan","nissay","nl","no","nokia","norton","now","nowruz","nowtv","np","nr","nra","nrw","ntt","nu","nyc","nz","obi","observer","office","okinawa","olayan","olayangroup","ollo","om","omega","one","ong","onl","online","ooo","open","oracle","orange","org","organic","origins","osaka","otsuka","ott","ovh","pa","page","panasonic","paris","pars","partners","parts","party","pay","pccw","pe","pet","pf","pfizer","pg","ph","pharmacy","phd","philips","phone","photo","photography","photos","physio","pics","pictet","pictures","pid","pin","ping","pink","pioneer","pizza","pk","pl","place","play","playstation","plumbing","plus","pm","pn","pnc","pohl","poker","politie","porn","post","pr","praxi","press","prime","pro","prod","productions","prof","progressive","promo","properties","property","protection","pru","prudential","ps","pt","pub","pw","pwc","py","qa","qpon","quebec","quest","racing","radio","re","read","realestate","realtor","realty","recipes","red","redstone","redumbrella","rehab","reise","reisen","reit","reliance","ren","rent","rentals","repair","report","republican","rest","restaurant","review","reviews","rexroth","rich","richardli","ricoh","ril","rio","rip","ro","rocks","rodeo","rogers","room","rs","rsvp","ru","rugby","ruhr","run","rw","rwe","ryukyu","sa","saarland","safe","safety","sakura","sale","salon","samsclub","samsung","sandvik","sandvikcoromant","sanofi","sap","sarl","sas","save","saxo","sb","sbi","sbs","sc","scb","schaeffler","schmidt","scholarships","school","schule","schwarz","science","scot","sd","se","search","seat","secure","security","seek","select","sener","services","seven","sew","sex","sexy","sfr","sg","sh","shangrila","sharp","shell","shia","shiksha","shoes","shop","shopping","shouji","show","si","silk","sina","singles","site","sj","sk","ski","skin","sky","skype","sl","sling","sm","smart","smile","sn","sncf","so","soccer","social","softbank","software","sohu","solar","solutions","song","sony","soy","spa","space","sport","spot","sr","srl","ss","st","stada","staples","star","statebank","statefarm","stc","stcgroup","stockholm","storage","store","stream","studio","study","style","su","sucks","supplies","supply","support","surf","surgery","suzuki","sv","swatch","swiss","sx","sy","sydney","systems","sz","tab","taipei","talk","taobao","target","tatamotors","tatar","tattoo","tax","taxi","tc","tci","td","tdk","team","tech","technology","tel","temasek","tennis","teva","tf","tg","th","thd","theater","theatre","tiaa","tickets","tienda","tips","tires","tirol","tj","tjmaxx","tjx","tk","tkmaxx","tl","tm","tmall","tn","to","today","tokyo","tools","top","toray","toshiba","total","tours","town","toyota","toys","tr","trade","trading","training","travel","travelers","travelersinsurance","trust","trv","tt","tube","tui","tunes","tushu","tv","tvs","tw","tz","ua","ubank","ubs","ug","uk","unicom","university","uno","uol","ups","us","uy","uz","va","vacations","vana","vanguard","vc","ve","vegas","ventures","verisign","verm\xf6gensberater","verm\xf6gensberatung","versicherung","vet","vg","vi","viajes","video","vig","viking","villas","vin","vip","virgin","visa","vision","viva","vivo","vlaanderen","vn","vodka","volvo","vote","voting","voto","voyage","vu","wales","walmart","walter","wang","wanggou","watch","watches","weather","weatherchannel","webcam","weber","website","wed","wedding","weibo","weir","wf","whoswho","wien","wiki","williamhill","win","windows","wine","winners","wme","wolterskluwer","woodside","work","works","world","wow","ws","wtc","wtf","xbox","xerox","xihuan","xin","xxx","xyz","yachts","yahoo","yamaxun","yandex","ye","yodobashi","yoga","yokohama","you","youtube","yt","yun","za","zappos","zara","zero","zip","zm","zone","zuerich","zw","\u03B5\u03BB","\u03B5\u03C5","\u0431\u0433","\u0431\u0435\u043B","\u0434\u0435\u0442\u0438","\u0435\u044E","\u043A\u0430\u0442\u043E\u043B\u0438\u043A","\u043A\u043E\u043C","\u043C\u043A\u0434","\u043C\u043E\u043D","\u043C\u043E\u0441\u043A\u0432\u0430","\u043E\u043D\u043B\u0430\u0439\u043D","\u043E\u0440\u0433","\u0440\u0443\u0441","\u0440\u0444","\u0441\u0430\u0439\u0442","\u0441\u0440\u0431","\u0443\u043A\u0440","\u049B\u0430\u0437","\u0570\u0561\u0575","\u05D9\u05E9\u05E8\u05D0\u05DC","\u05E7\u05D5\u05DD","\u0627\u0628\u0648\u0638\u0628\u064A","\u0627\u0631\u0627\u0645\u0643\u0648","\u0627\u0644\u0627\u0631\u062F\u0646","\u0627\u0644\u0628\u062D\u0631\u064A\u0646","\u0627\u0644\u062C\u0632\u0627\u0626\u0631","\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629","\u0627\u0644\u0639\u0644\u064A\u0627\u0646","\u0627\u0644\u0645\u063A\u0631\u0628","\u0627\u0645\u0627\u0631\u0627\u062A","\u0627\u06CC\u0631\u0627\u0646","\u0628\u0627\u0631\u062A","\u0628\u0627\u0632\u0627\u0631","\u0628\u064A\u062A\u0643","\u0628\u06BE\u0627\u0631\u062A","\u062A\u0648\u0646\u0633","\u0633\u0648\u062F\u0627\u0646","\u0633\u0648\u0631\u064A\u0629","\u0634\u0628\u0643\u0629","\u0639\u0631\u0627\u0642","\u0639\u0631\u0628","\u0639\u0645\u0627\u0646","\u0641\u0644\u0633\u0637\u064A\u0646","\u0642\u0637\u0631","\u0643\u0627\u062B\u0648\u0644\u064A\u0643","\u0643\u0648\u0645","\u0645\u0635\u0631","\u0645\u0644\u064A\u0633\u064A\u0627","\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627","\u0645\u0648\u0642\u0639","\u0647\u0645\u0631\u0627\u0647","\u067E\u0627\u06A9\u0633\u062A\u0627\u0646","\u0680\u0627\u0631\u062A","\u0915\u0949\u092E","\u0928\u0947\u091F","\u092D\u093E\u0930\u0924","\u092D\u093E\u0930\u0924\u092E\u094D","\u092D\u093E\u0930\u094B\u0924","\u0938\u0902\u0917\u0920\u0928","\u09AC\u09BE\u0982\u09B2\u09BE","\u09AD\u09BE\u09B0\u09A4","\u09AD\u09BE\u09F0\u09A4","\u0A2D\u0A3E\u0A30\u0A24","\u0AAD\u0ABE\u0AB0\u0AA4","\u0B2D\u0B3E\u0B30\u0B24","\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE","\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8","\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD","\u0C2D\u0C3E\u0C30\u0C24\u0C4D","\u0CAD\u0CBE\u0CB0\u0CA4","\u0D2D\u0D3E\u0D30\u0D24\u0D02","\u0DBD\u0D82\u0D9A\u0DCF","\u0E04\u0E2D\u0E21","\u0E44\u0E17\u0E22","\u0EA5\u0EB2\u0EA7","\u10D2\u10D4","\u307F\u3093\u306A","\u30A2\u30DE\u30BE\u30F3","\u30AF\u30E9\u30A6\u30C9","\u30B0\u30FC\u30B0\u30EB","\u30B3\u30E0","\u30B9\u30C8\u30A2","\u30BB\u30FC\u30EB","\u30D5\u30A1\u30C3\u30B7\u30E7\u30F3","\u30DD\u30A4\u30F3\u30C8","\u4E16\u754C","\u4E2D\u4FE1","\u4E2D\u56FD","\u4E2D\u570B","\u4E2D\u6587\u7F51","\u4E9A\u9A6C\u900A","\u4F01\u4E1A","\u4F5B\u5C71","\u4FE1\u606F","\u5065\u5EB7","\u516B\u5366","\u516C\u53F8","\u516C\u76CA","\u53F0\u6E7E","\u53F0\u7063","\u5546\u57CE","\u5546\u5E97","\u5546\u6807","\u5609\u91CC","\u5609\u91CC\u5927\u9152\u5E97","\u5728\u7EBF","\u5927\u62FF","\u5929\u4E3B\u6559","\u5A31\u4E50","\u5BB6\u96FB","\u5E7F\u4E1C","\u5FAE\u535A","\u6148\u5584","\u6211\u7231\u4F60","\u624B\u673A","\u62DB\u8058","\u653F\u52A1","\u653F\u5E9C","\u65B0\u52A0\u5761","\u65B0\u95FB","\u65F6\u5C1A","\u66F8\u7C4D","\u673A\u6784","\u6DE1\u9A6C\u9521","\u6E38\u620F","\u6FB3\u9580","\u70B9\u770B","\u79FB\u52A8","\u7EC4\u7EC7\u673A\u6784","\u7F51\u5740","\u7F51\u5E97","\u7F51\u7AD9","\u7F51\u7EDC","\u8054\u901A","\u8C37\u6B4C","\u8D2D\u7269","\u901A\u8CA9","\u96C6\u56E2","\u96FB\u8A0A\u76C8\u79D1","\u98DE\u5229\u6D66","\u98DF\u54C1","\u9910\u5385","\u9999\u683C\u91CC\u62C9","\u9999\u6E2F","\uB2F7\uB137","\uB2F7\uCEF4","\uC0BC\uC131","\uD55C\uAD6D"]');

},{}],"lEmjE":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TAG_REGEX = exports.TRAILING_PUNCTUATION_REGEX = exports.URL_REGEX = exports.MENTION_REGEX = void 0;
exports.MENTION_REGEX = /(^|\s|\()(@)([a-zA-Z0-9.-]+)(\b)/g;
exports.URL_REGEX = /(^|\s|\()((https?:\/\/[\S]+)|((?<domain>[a-z][a-z0-9]*(\.[a-z0-9]+)+)[\S]*))/gim;
exports.TRAILING_PUNCTUATION_REGEX = /\p{P}+$/gu;
/**
 * `\ufe0f` emoji modifier
 * `\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2` zero-width spaces (likely incomplete)
 */ exports.TAG_REGEX = // eslint-disable-next-line no-misleading-character-class
/(^|\s)[#＃]((?!\ufe0f)[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*[^\d\s\p{P}\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]+[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*)?/gu;

},{}],"chBlz":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sanitizeRichText = sanitizeRichText;
const unicode_1 = require("20b3e9b1150a0ab5");
// this regex is intentionally matching on the zero-with-separator codepoint
// eslint-disable-next-line no-misleading-character-class
const EXCESS_SPACE_RE = /[\r\n]([\u00AD\u2060\u200D\u200C\u200B\s]*[\r\n]){2,}/;
const REPLACEMENT_STR = '\n\n';
function sanitizeRichText(richText, opts) {
    if (opts.cleanNewlines) richText = clean(richText, EXCESS_SPACE_RE, REPLACEMENT_STR);
    return richText;
}
function clean(richText, targetRegexp, replacementString) {
    richText = richText.clone();
    let match = richText.unicodeText.utf16.match(targetRegexp);
    while(match && typeof match.index !== 'undefined'){
        const oldText = richText.unicodeText;
        const removeStartIndex = richText.unicodeText.utf16IndexToUtf8Index(match.index);
        const removeEndIndex = removeStartIndex + new unicode_1.UnicodeString(match[0]).length;
        richText.delete(removeStartIndex, removeEndIndex);
        if (richText.unicodeText.utf16 === oldText.utf16) break; // sanity check
        richText.insert(removeStartIndex, replacementString);
        match = richText.unicodeText.utf16.match(targetRegexp);
    }
    return richText;
}

},{"20b3e9b1150a0ab5":"afKwO"}],"afKwO":[function(require,module,exports,__globalThis) {
"use strict";
/**
 * Javascript uses utf16-encoded strings while most environments and specs
 * have standardized around utf8 (including JSON).
 *
 * After some lengthy debated we decided that richtext facets need to use
 * utf8 indices. This means we need tools to convert indices between utf8
 * and utf16, and that's precisely what this library handles.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UnicodeString = void 0;
const common_web_1 = require("337a89ad62259593");
const encoder = new TextEncoder();
const decoder = new TextDecoder();
class UnicodeString {
    constructor(utf16){
        Object.defineProperty(this, "utf16", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "utf8", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_graphemeLen", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.utf16 = utf16;
        this.utf8 = encoder.encode(utf16);
    }
    get length() {
        return this.utf8.byteLength;
    }
    get graphemeLength() {
        if (!this._graphemeLen) this._graphemeLen = (0, common_web_1.graphemeLen)(this.utf16);
        return this._graphemeLen;
    }
    slice(start, end) {
        return decoder.decode(this.utf8.slice(start, end));
    }
    utf16IndexToUtf8Index(i) {
        return encoder.encode(this.utf16.slice(0, i)).byteLength;
    }
    toString() {
        return this.utf16;
    }
}
exports.UnicodeString = UnicodeString;

},{"337a89ad62259593":"2onrJ"}],"dQ5lX":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.interpretLabelValueDefinitions = exports.interpretLabelValueDefinition = exports.hasMutedWord = exports.ModerationDecision = exports.ModerationUI = void 0;
exports.moderateProfile = moderateProfile;
exports.moderatePost = moderatePost;
exports.moderateNotification = moderateNotification;
exports.moderateFeedGenerator = moderateFeedGenerator;
exports.moderateUserList = moderateUserList;
const decision_1 = require("3ca373a5f0678246");
const account_1 = require("757581e88ef19aab");
const feed_generator_1 = require("47f66929c785e7d5");
const notification_1 = require("51e9921ce5bea42c");
const post_1 = require("bbe779e19f39f14c");
const profile_1 = require("353f7f17922e99e5");
const user_list_1 = require("e4bb70722097c77e");
var ui_1 = require("2281a8c90f91cef6");
Object.defineProperty(exports, "ModerationUI", {
    enumerable: true,
    get: function() {
        return ui_1.ModerationUI;
    }
});
var decision_2 = require("3ca373a5f0678246");
Object.defineProperty(exports, "ModerationDecision", {
    enumerable: true,
    get: function() {
        return decision_2.ModerationDecision;
    }
});
var mutewords_1 = require("80561d7912c33302");
Object.defineProperty(exports, "hasMutedWord", {
    enumerable: true,
    get: function() {
        return mutewords_1.hasMutedWord;
    }
});
var util_1 = require("c24e99d71b445e70");
Object.defineProperty(exports, "interpretLabelValueDefinition", {
    enumerable: true,
    get: function() {
        return util_1.interpretLabelValueDefinition;
    }
});
Object.defineProperty(exports, "interpretLabelValueDefinitions", {
    enumerable: true,
    get: function() {
        return util_1.interpretLabelValueDefinitions;
    }
});
function moderateProfile(subject, opts) {
    return decision_1.ModerationDecision.merge((0, account_1.decideAccount)(subject, opts), (0, profile_1.decideProfile)(subject, opts));
}
function moderatePost(subject, opts) {
    return (0, post_1.decidePost)(subject, opts);
}
function moderateNotification(subject, opts) {
    return (0, notification_1.decideNotification)(subject, opts);
}
function moderateFeedGenerator(subject, opts) {
    return (0, feed_generator_1.decideFeedGenerator)(subject, opts);
}
function moderateUserList(subject, opts) {
    return (0, user_list_1.decideUserList)(subject, opts);
}

},{"3ca373a5f0678246":"5NayE","757581e88ef19aab":"j6SGk","47f66929c785e7d5":"Pqu8F","51e9921ce5bea42c":"7ntga","bbe779e19f39f14c":"97yro","353f7f17922e99e5":"Qqwuc","e4bb70722097c77e":"bpPgg","2281a8c90f91cef6":"j9Hzo","80561d7912c33302":"eswMr","c24e99d71b445e70":"9sVIq"}],"5NayE":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ModerationDecision = void 0;
const labels_1 = require("350fd414c3b6a6ce");
const types_1 = require("85c28d7ea8fbbf0a");
const ui_1 = require("47a519b0e26c54da");
var ModerationBehaviorSeverity;
(function(ModerationBehaviorSeverity) {
    ModerationBehaviorSeverity[ModerationBehaviorSeverity["High"] = 0] = "High";
    ModerationBehaviorSeverity[ModerationBehaviorSeverity["Medium"] = 1] = "Medium";
    ModerationBehaviorSeverity[ModerationBehaviorSeverity["Low"] = 2] = "Low";
})(ModerationBehaviorSeverity || (ModerationBehaviorSeverity = {}));
class ModerationDecision {
    constructor(){
        Object.defineProperty(this, "did", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ''
        });
        Object.defineProperty(this, "isMe", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "causes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
    }
    static merge(...decisions) {
        const decisionsFiltered = decisions.filter((v)=>v != null);
        const decision = new ModerationDecision();
        if (decisionsFiltered[0]) {
            decision.did = decisionsFiltered[0].did;
            decision.isMe = decisionsFiltered[0].isMe;
        }
        decision.causes = decisionsFiltered.flatMap((d)=>d.causes);
        return decision;
    }
    downgrade() {
        for (const cause of this.causes)cause.downgraded = true;
        return this;
    }
    get blocked() {
        return !!this.blockCause;
    }
    get muted() {
        return !!this.muteCause;
    }
    get blockCause() {
        return this.causes.find((cause)=>cause.type === 'blocking' || cause.type === 'blocked-by' || cause.type === 'block-other');
    }
    get muteCause() {
        return this.causes.find((cause)=>cause.type === 'muted');
    }
    get labelCauses() {
        return this.causes.filter((cause)=>cause.type === 'label');
    }
    ui(context) {
        const ui = new ui_1.ModerationUI();
        for (const cause of this.causes){
            if (cause.type === 'blocking' || cause.type === 'blocked-by' || cause.type === 'block-other') {
                if (this.isMe) continue;
                if (context === 'profileList' || context === 'contentList') ui.filters.push(cause);
                if (!cause.downgraded) {
                    if (types_1.BLOCK_BEHAVIOR[context] === 'blur') {
                        ui.noOverride = true;
                        ui.blurs.push(cause);
                    } else if (types_1.BLOCK_BEHAVIOR[context] === 'alert') ui.alerts.push(cause);
                    else if (types_1.BLOCK_BEHAVIOR[context] === 'inform') ui.informs.push(cause);
                }
            } else if (cause.type === 'muted') {
                if (this.isMe) continue;
                if (context === 'profileList' || context === 'contentList') ui.filters.push(cause);
                if (!cause.downgraded) {
                    if (types_1.MUTE_BEHAVIOR[context] === 'blur') ui.blurs.push(cause);
                    else if (types_1.MUTE_BEHAVIOR[context] === 'alert') ui.alerts.push(cause);
                    else if (types_1.MUTE_BEHAVIOR[context] === 'inform') ui.informs.push(cause);
                }
            } else if (cause.type === 'mute-word') {
                if (this.isMe) continue;
                if (context === 'contentList') ui.filters.push(cause);
                if (!cause.downgraded) {
                    if (types_1.MUTEWORD_BEHAVIOR[context] === 'blur') ui.blurs.push(cause);
                    else if (types_1.MUTEWORD_BEHAVIOR[context] === 'alert') ui.alerts.push(cause);
                    else if (types_1.MUTEWORD_BEHAVIOR[context] === 'inform') ui.informs.push(cause);
                }
            } else if (cause.type === 'hidden') {
                if (context === 'profileList' || context === 'contentList') ui.filters.push(cause);
                if (!cause.downgraded) {
                    if (types_1.HIDE_BEHAVIOR[context] === 'blur') ui.blurs.push(cause);
                    else if (types_1.HIDE_BEHAVIOR[context] === 'alert') ui.alerts.push(cause);
                    else if (types_1.HIDE_BEHAVIOR[context] === 'inform') ui.informs.push(cause);
                }
            } else if (cause.type === 'label') {
                if (context === 'profileList' && cause.target === 'account') {
                    if (cause.setting === 'hide' && !this.isMe) ui.filters.push(cause);
                } else if (context === 'contentList' && (cause.target === 'account' || cause.target === 'content')) {
                    if (cause.setting === 'hide' && !this.isMe) ui.filters.push(cause);
                }
                if (!cause.downgraded) {
                    if (cause.behavior[context] === 'blur') {
                        ui.blurs.push(cause);
                        if (cause.noOverride && !this.isMe) ui.noOverride = true;
                    } else if (cause.behavior[context] === 'alert') ui.alerts.push(cause);
                    else if (cause.behavior[context] === 'inform') ui.informs.push(cause);
                }
            }
        }
        ui.filters.sort(sortByPriority);
        ui.blurs.sort(sortByPriority);
        return ui;
    }
    setDid(did) {
        this.did = did;
    }
    setIsMe(isMe) {
        this.isMe = isMe;
    }
    addHidden(hidden) {
        if (hidden) this.causes.push({
            type: 'hidden',
            source: {
                type: 'user'
            },
            priority: 6
        });
    }
    addMutedWord(mutedWord) {
        if (mutedWord) this.causes.push({
            type: 'mute-word',
            source: {
                type: 'user'
            },
            priority: 6
        });
    }
    addBlocking(blocking) {
        if (blocking) this.causes.push({
            type: 'blocking',
            source: {
                type: 'user'
            },
            priority: 3
        });
    }
    addBlockingByList(blockingByList) {
        if (blockingByList) this.causes.push({
            type: 'blocking',
            source: {
                type: 'list',
                list: blockingByList
            },
            priority: 3
        });
    }
    addBlockedBy(blockedBy) {
        if (blockedBy) this.causes.push({
            type: 'blocked-by',
            source: {
                type: 'user'
            },
            priority: 4
        });
    }
    addBlockOther(blockOther) {
        if (blockOther) this.causes.push({
            type: 'block-other',
            source: {
                type: 'user'
            },
            priority: 4
        });
    }
    addLabel(target, label, opts) {
        // look up the label definition
        const labelDef = types_1.CUSTOM_LABEL_VALUE_RE.test(label.val) ? opts.labelDefs?.[label.src]?.find((def)=>def.identifier === label.val) || labels_1.LABELS[label.val] : labels_1.LABELS[label.val];
        if (!labelDef) // ignore labels we don't understand
        return;
        // look up the label preference
        const isSelf = label.src === this.did;
        const labeler = isSelf ? undefined : opts.prefs.labelers.find((s)=>s.did === label.src);
        if (!isSelf && !labeler) return; // skip labelers not configured by the user
        if (isSelf && labelDef.flags.includes('no-self')) return; // skip self-labels that aren't supported
        // establish the label preference for interpretation
        let labelPref = labelDef.defaultSetting || 'ignore';
        if (!labelDef.configurable) labelPref = labelDef.defaultSetting || 'hide';
        else if (labelDef.flags.includes('adult') && !opts.prefs.adultContentEnabled) labelPref = 'hide';
        else if (labeler?.labels[labelDef.identifier]) labelPref = labeler?.labels[labelDef.identifier];
        else if (opts.prefs.labels[labelDef.identifier]) labelPref = opts.prefs.labels[labelDef.identifier];
        // ignore labels the user has asked to ignore
        if (labelPref === 'ignore') return;
        // ignore 'unauthed' labels when the user is authed
        if (labelDef.flags.includes('unauthed') && !!opts.userDid) return;
        // establish the priority of the label
        let priority;
        const severity = measureModerationBehaviorSeverity(labelDef.behaviors[target]);
        if (labelDef.flags.includes('no-override') || labelDef.flags.includes('adult') && !opts.prefs.adultContentEnabled) priority = 1;
        else if (labelPref === 'hide') priority = 2;
        else if (severity === ModerationBehaviorSeverity.High) // blurring profile view or content view
        priority = 5;
        else if (severity === ModerationBehaviorSeverity.Medium) // blurring content list or content media
        priority = 7;
        else // blurring avatar, adding alerts
        priority = 8;
        let noOverride = false;
        if (labelDef.flags.includes('no-override')) noOverride = true;
        else if (labelDef.flags.includes('adult') && !opts.prefs.adultContentEnabled) noOverride = true;
        this.causes.push({
            type: 'label',
            source: isSelf || !labeler ? {
                type: 'user'
            } : {
                type: 'labeler',
                did: labeler.did
            },
            label,
            labelDef,
            target,
            setting: labelPref,
            behavior: labelDef.behaviors[target] || types_1.NOOP_BEHAVIOR,
            noOverride,
            priority
        });
    }
    addMuted(muted) {
        if (muted) this.causes.push({
            type: 'muted',
            source: {
                type: 'user'
            },
            priority: 6
        });
    }
    addMutedByList(mutedByList) {
        if (mutedByList) this.causes.push({
            type: 'muted',
            source: {
                type: 'list',
                list: mutedByList
            },
            priority: 6
        });
    }
}
exports.ModerationDecision = ModerationDecision;
function measureModerationBehaviorSeverity(beh) {
    if (!beh) return ModerationBehaviorSeverity.Low;
    if (beh.profileView === 'blur' || beh.contentView === 'blur') return ModerationBehaviorSeverity.High;
    if (beh.contentList === 'blur' || beh.contentMedia === 'blur') return ModerationBehaviorSeverity.Medium;
    return ModerationBehaviorSeverity.Low;
}
function sortByPriority(a, b) {
    return a.priority - b.priority;
}

},{"350fd414c3b6a6ce":"36sFr","85c28d7ea8fbbf0a":"c5Es2","47a519b0e26c54da":"j9Hzo"}],"36sFr":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LABELS = exports.DEFAULT_LABEL_SETTINGS = void 0;
exports.DEFAULT_LABEL_SETTINGS = {
    porn: 'hide',
    sexual: 'warn',
    nudity: 'ignore',
    'graphic-media': 'warn'
};
exports.LABELS = {
    '!hide': {
        identifier: '!hide',
        configurable: false,
        defaultSetting: 'hide',
        flags: [
            'no-override',
            'no-self'
        ],
        severity: 'alert',
        blurs: 'content',
        behaviors: {
            account: {
                profileList: 'blur',
                profileView: 'blur',
                avatar: 'blur',
                banner: 'blur',
                displayName: 'blur',
                contentList: 'blur',
                contentView: 'blur'
            },
            profile: {
                avatar: 'blur',
                banner: 'blur',
                displayName: 'blur'
            },
            content: {
                contentList: 'blur',
                contentView: 'blur'
            }
        },
        locales: []
    },
    '!warn': {
        identifier: '!warn',
        configurable: false,
        defaultSetting: 'warn',
        flags: [
            'no-self'
        ],
        severity: 'none',
        blurs: 'content',
        behaviors: {
            account: {
                profileList: 'blur',
                profileView: 'blur',
                avatar: 'blur',
                banner: 'blur',
                contentList: 'blur',
                contentView: 'blur'
            },
            profile: {
                avatar: 'blur',
                banner: 'blur',
                displayName: 'blur'
            },
            content: {
                contentList: 'blur',
                contentView: 'blur'
            }
        },
        locales: []
    },
    '!no-unauthenticated': {
        identifier: '!no-unauthenticated',
        configurable: false,
        defaultSetting: 'hide',
        flags: [
            'no-override',
            'unauthed'
        ],
        severity: 'none',
        blurs: 'content',
        behaviors: {
            account: {
                profileList: 'blur',
                profileView: 'blur',
                avatar: 'blur',
                banner: 'blur',
                displayName: 'blur',
                contentList: 'blur',
                contentView: 'blur'
            },
            profile: {
                avatar: 'blur',
                banner: 'blur',
                displayName: 'blur'
            },
            content: {
                contentList: 'blur',
                contentView: 'blur'
            }
        },
        locales: []
    },
    porn: {
        identifier: 'porn',
        configurable: true,
        defaultSetting: 'hide',
        flags: [
            'adult'
        ],
        severity: 'none',
        blurs: 'media',
        behaviors: {
            account: {
                avatar: 'blur',
                banner: 'blur'
            },
            profile: {
                avatar: 'blur',
                banner: 'blur'
            },
            content: {
                contentMedia: 'blur'
            }
        },
        locales: []
    },
    sexual: {
        identifier: 'sexual',
        configurable: true,
        defaultSetting: 'warn',
        flags: [
            'adult'
        ],
        severity: 'none',
        blurs: 'media',
        behaviors: {
            account: {
                avatar: 'blur',
                banner: 'blur'
            },
            profile: {
                avatar: 'blur',
                banner: 'blur'
            },
            content: {
                contentMedia: 'blur'
            }
        },
        locales: []
    },
    nudity: {
        identifier: 'nudity',
        configurable: true,
        defaultSetting: 'ignore',
        flags: [],
        severity: 'none',
        blurs: 'media',
        behaviors: {
            account: {
                avatar: 'blur',
                banner: 'blur'
            },
            profile: {
                avatar: 'blur',
                banner: 'blur'
            },
            content: {
                contentMedia: 'blur'
            }
        },
        locales: []
    },
    'graphic-media': {
        identifier: 'graphic-media',
        flags: [
            'adult'
        ],
        configurable: true,
        defaultSetting: 'warn',
        severity: 'none',
        blurs: 'media',
        behaviors: {
            account: {
                avatar: 'blur',
                banner: 'blur'
            },
            profile: {
                avatar: 'blur',
                banner: 'blur'
            },
            content: {
                contentMedia: 'blur'
            }
        },
        locales: []
    },
    /** @deprecated alias for `graphic-media` */ gore: {
        identifier: 'gore',
        flags: [
            'adult'
        ],
        configurable: true,
        defaultSetting: 'warn',
        severity: 'none',
        blurs: 'media',
        behaviors: {
            account: {
                avatar: 'blur',
                banner: 'blur'
            },
            profile: {
                avatar: 'blur',
                banner: 'blur'
            },
            content: {
                contentMedia: 'blur'
            }
        },
        locales: []
    }
};

},{}],"c5Es2":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NOOP_BEHAVIOR = exports.HIDE_BEHAVIOR = exports.MUTEWORD_BEHAVIOR = exports.MUTE_BEHAVIOR = exports.BLOCK_BEHAVIOR = exports.CUSTOM_LABEL_VALUE_RE = void 0;
// syntax
// =
exports.CUSTOM_LABEL_VALUE_RE = /^[a-z-]+$/;
exports.BLOCK_BEHAVIOR = {
    profileList: 'blur',
    profileView: 'alert',
    avatar: 'blur',
    banner: 'blur',
    contentList: 'blur',
    contentView: 'blur'
};
exports.MUTE_BEHAVIOR = {
    profileList: 'inform',
    profileView: 'alert',
    contentList: 'blur',
    contentView: 'inform'
};
exports.MUTEWORD_BEHAVIOR = {
    contentList: 'blur',
    contentView: 'blur'
};
exports.HIDE_BEHAVIOR = {
    contentList: 'blur',
    contentView: 'blur'
};
exports.NOOP_BEHAVIOR = {};

},{}],"j9Hzo":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ModerationUI = void 0;
class ModerationUI {
    constructor(){
        Object.defineProperty(this, "noOverride", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "filters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "blurs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "alerts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(this, "informs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
    }
    get filter() {
        return this.filters.length !== 0;
    }
    get blur() {
        return this.blurs.length !== 0;
    }
    get alert() {
        return this.alerts.length !== 0;
    }
    get inform() {
        return this.informs.length !== 0;
    }
}
exports.ModerationUI = ModerationUI;

},{}],"j6SGk":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decideAccount = decideAccount;
exports.filterAccountLabels = filterAccountLabels;
const decision_1 = require("a2c140e9df0e3c03");
function decideAccount(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.did);
    acc.setIsMe(subject.did === opts.userDid);
    if (subject.viewer?.muted) {
        if (subject.viewer?.mutedByList) acc.addMutedByList(subject.viewer?.mutedByList);
        else acc.addMuted(subject.viewer?.muted);
    }
    if (subject.viewer?.blocking) {
        if (subject.viewer?.blockingByList) acc.addBlockingByList(subject.viewer?.blockingByList);
        else acc.addBlocking(subject.viewer?.blocking);
    }
    acc.addBlockedBy(subject.viewer?.blockedBy);
    for (const label of filterAccountLabels(subject.labels))acc.addLabel('account', label, opts);
    return acc;
}
function filterAccountLabels(labels) {
    if (!labels) return [];
    return labels.filter((label)=>!label.uri.endsWith('/app.bsky.actor.profile/self') || label.val === '!no-unauthenticated');
}

},{"a2c140e9df0e3c03":"5NayE"}],"Pqu8F":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decideFeedGenerator = decideFeedGenerator;
const decision_1 = require("f910b296dc7b11e4");
const account_1 = require("34788d0442281034");
const profile_1 = require("2192f99575335eee");
function decideFeedGenerator(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.creator.did);
    acc.setIsMe(subject.creator.did === opts.userDid);
    if (subject.labels?.length) for (const label of subject.labels)acc.addLabel('content', label, opts);
    return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.creator, opts), (0, profile_1.decideProfile)(subject.creator, opts));
}

},{"f910b296dc7b11e4":"5NayE","34788d0442281034":"j6SGk","2192f99575335eee":"Qqwuc"}],"Qqwuc":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decideProfile = decideProfile;
exports.filterProfileLabels = filterProfileLabels;
const decision_1 = require("f0faef01bb6d28f9");
function decideProfile(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.did);
    acc.setIsMe(subject.did === opts.userDid);
    for (const label of filterProfileLabels(subject.labels))acc.addLabel('profile', label, opts);
    return acc;
}
function filterProfileLabels(labels) {
    if (!labels) return [];
    return labels.filter((label)=>label.uri.endsWith('/app.bsky.actor.profile/self'));
}

},{"f0faef01bb6d28f9":"5NayE"}],"7ntga":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decideNotification = decideNotification;
const decision_1 = require("d31595ab4d834927");
const account_1 = require("7a6105344d488202");
const profile_1 = require("a42e685f8ead76b6");
function decideNotification(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.author.did);
    acc.setIsMe(subject.author.did === opts.userDid);
    if (subject.labels?.length) for (const label of subject.labels)acc.addLabel('content', label, opts);
    return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
}

},{"d31595ab4d834927":"5NayE","7a6105344d488202":"j6SGk","a42e685f8ead76b6":"Qqwuc"}],"97yro":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decidePost = decidePost;
const client_1 = require("7cd8988f83f42a05");
const decision_1 = require("63112a26ca3a582");
const mutewords_1 = require("1354466eb63eff5b");
const account_1 = require("de266e915c4a248a");
const profile_1 = require("bad7d2c274a67d5c");
function decidePost(subject, opts) {
    return decision_1.ModerationDecision.merge(decideSubject(subject, opts), decideEmbed(subject.embed, opts)?.downgrade(), (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
}
function decideSubject(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.author.did);
    acc.setIsMe(subject.author.did === opts.userDid);
    if (subject.labels?.length) for (const label of subject.labels)acc.addLabel('content', label, opts);
    acc.addHidden(checkHiddenPost(subject, opts.prefs.hiddenPosts));
    if (!acc.isMe) acc.addMutedWord(checkMutedWords(subject, opts.prefs.mutedWords));
    return acc;
}
function decideEmbed(embed, opts) {
    if (embed) {
        if ((client_1.AppBskyEmbedRecord.isView(embed) || client_1.AppBskyEmbedRecordWithMedia.isView(embed)) && client_1.AppBskyEmbedRecord.isViewRecord(embed.record)) // quote post
        return decideQuotedPost(embed.record, opts);
        else if (client_1.AppBskyEmbedRecordWithMedia.isView(embed) && client_1.AppBskyEmbedRecord.isViewRecord(embed.record.record)) // quoted post with media
        return decideQuotedPost(embed.record.record, opts);
        else if ((client_1.AppBskyEmbedRecord.isView(embed) || client_1.AppBskyEmbedRecordWithMedia.isView(embed)) && client_1.AppBskyEmbedRecord.isViewBlocked(embed.record)) // blocked quote post
        return decideBlockedQuotedPost(embed.record, opts);
        else if (client_1.AppBskyEmbedRecordWithMedia.isView(embed) && client_1.AppBskyEmbedRecord.isViewBlocked(embed.record.record)) // blocked quoted post with media
        return decideBlockedQuotedPost(embed.record.record, opts);
    }
    return undefined;
}
function decideQuotedPost(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.author.did);
    acc.setIsMe(subject.author.did === opts.userDid);
    if (subject.labels?.length) for (const label of subject.labels)acc.addLabel('content', label, opts);
    return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
}
function decideBlockedQuotedPost(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    acc.setDid(subject.author.did);
    acc.setIsMe(subject.author.did === opts.userDid);
    if (subject.author.viewer?.muted) {
        if (subject.author.viewer?.mutedByList) acc.addMutedByList(subject.author.viewer?.mutedByList);
        else acc.addMuted(subject.author.viewer?.muted);
    }
    if (subject.author.viewer?.blocking) {
        if (subject.author.viewer?.blockingByList) acc.addBlockingByList(subject.author.viewer?.blockingByList);
        else acc.addBlocking(subject.author.viewer?.blocking);
    }
    acc.addBlockedBy(subject.author.viewer?.blockedBy);
    return acc;
}
function checkHiddenPost(subject, hiddenPosts) {
    if (!hiddenPosts?.length) return false;
    if (hiddenPosts.includes(subject.uri)) return true;
    if (subject.embed) {
        if (client_1.AppBskyEmbedRecord.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record) && hiddenPosts.includes(subject.embed.record.uri)) return true;
        if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record) && hiddenPosts.includes(subject.embed.record.record.uri)) return true;
    }
    return false;
}
function checkMutedWords(subject, mutedWords) {
    if (!mutedWords?.length) return false;
    const postAuthor = subject.author;
    if (client_1.AppBskyFeedPost.isRecord(subject.record)) {
        const post = subject.record;
        // post text
        if ((0, mutewords_1.hasMutedWord)({
            mutedWords,
            text: post.text,
            facets: post.facets,
            outlineTags: post.tags,
            languages: post.langs,
            actor: postAuthor
        })) return true;
        if (post.embed && client_1.AppBskyEmbedImages.isMain(post.embed)) // post images
        for (const image of post.embed.images){
            if ((0, mutewords_1.hasMutedWord)({
                mutedWords,
                text: image.alt,
                languages: post.langs,
                actor: postAuthor
            })) return true;
        }
    }
    const { embed } = subject;
    if (embed) {
        // quote post
        if ((client_1.AppBskyEmbedRecord.isView(embed) || client_1.AppBskyEmbedRecordWithMedia.isView(embed)) && client_1.AppBskyEmbedRecord.isViewRecord(embed.record)) {
            if (client_1.AppBskyFeedPost.isRecord(embed.record.value)) {
                const embeddedPost = embed.record.value;
                const embedAuthor = embed.record.author;
                // quoted post text
                if ((0, mutewords_1.hasMutedWord)({
                    mutedWords,
                    text: embeddedPost.text,
                    facets: embeddedPost.facets,
                    outlineTags: embeddedPost.tags,
                    languages: embeddedPost.langs,
                    actor: embedAuthor
                })) return true;
                // quoted post's images
                if (client_1.AppBskyEmbedImages.isMain(embeddedPost.embed)) for (const image of embeddedPost.embed.images){
                    if ((0, mutewords_1.hasMutedWord)({
                        mutedWords,
                        text: image.alt,
                        languages: embeddedPost.langs,
                        actor: embedAuthor
                    })) return true;
                }
                // quoted post's link card
                if (client_1.AppBskyEmbedExternal.isMain(embeddedPost.embed)) {
                    const { external } = embeddedPost.embed;
                    if ((0, mutewords_1.hasMutedWord)({
                        mutedWords,
                        text: external.title + ' ' + external.description,
                        languages: [],
                        actor: embedAuthor
                    })) return true;
                }
                if (client_1.AppBskyEmbedRecordWithMedia.isMain(embeddedPost.embed)) {
                    // quoted post's link card when it did a quote + media
                    if (client_1.AppBskyEmbedExternal.isMain(embeddedPost.embed.media)) {
                        const { external } = embeddedPost.embed.media;
                        if ((0, mutewords_1.hasMutedWord)({
                            mutedWords,
                            text: external.title + ' ' + external.description,
                            languages: [],
                            actor: embedAuthor
                        })) return true;
                    }
                    // quoted post's images when it did a quote + media
                    if (client_1.AppBskyEmbedImages.isMain(embeddedPost.embed.media)) for (const image of embeddedPost.embed.media.images){
                        if ((0, mutewords_1.hasMutedWord)({
                            mutedWords,
                            text: image.alt,
                            languages: client_1.AppBskyFeedPost.isRecord(embeddedPost.record) ? embeddedPost.langs : [],
                            actor: embedAuthor
                        })) return true;
                    }
                }
            }
        } else if (client_1.AppBskyEmbedExternal.isView(embed)) {
            const { external } = embed;
            if ((0, mutewords_1.hasMutedWord)({
                mutedWords,
                text: external.title + ' ' + external.description,
                languages: [],
                actor: postAuthor
            })) return true;
        } else if (client_1.AppBskyEmbedRecordWithMedia.isView(embed) && client_1.AppBskyEmbedRecord.isViewRecord(embed.record.record)) {
            const embedAuthor = embed.record.record.author;
            // quoted post text
            if (client_1.AppBskyFeedPost.isRecord(embed.record.record.value)) {
                const post = embed.record.record.value;
                if ((0, mutewords_1.hasMutedWord)({
                    mutedWords,
                    text: post.text,
                    facets: post.facets,
                    outlineTags: post.tags,
                    languages: post.langs,
                    actor: embedAuthor
                })) return true;
            }
            // quoted post images
            if (client_1.AppBskyEmbedImages.isView(embed.media)) for (const image of embed.media.images){
                if ((0, mutewords_1.hasMutedWord)({
                    mutedWords,
                    text: image.alt,
                    languages: client_1.AppBskyFeedPost.isRecord(subject.record) ? subject.record.langs : [],
                    actor: embedAuthor
                })) return true;
            }
            if (client_1.AppBskyEmbedExternal.isView(embed.media)) {
                const { external } = embed.media;
                if ((0, mutewords_1.hasMutedWord)({
                    mutedWords,
                    text: external.title + ' ' + external.description,
                    languages: [],
                    actor: embedAuthor
                })) return true;
            }
        }
    }
    return false;
}

},{"7cd8988f83f42a05":"hHmOB","63112a26ca3a582":"5NayE","1354466eb63eff5b":"eswMr","de266e915c4a248a":"j6SGk","bad7d2c274a67d5c":"Qqwuc"}],"eswMr":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.hasMutedWord = hasMutedWord;
const client_1 = require("b9ec33dd976248f1");
const REGEX = {
    LEADING_TRAILING_PUNCTUATION: /(?:^\p{P}+|\p{P}+$)/gu,
    ESCAPE: /[[\]{}()*+?.\\^$|\s]/g,
    SEPARATORS: /[/\-–—()[\]_]+/g,
    WORD_BOUNDARY: /[\s\n\t\r\f\v]+?/g
};
/**
 * List of 2-letter lang codes for languages that either don't use spaces, or
 * don't use spaces in a way conducive to word-based filtering.
 *
 * For these, we use a simple `String.includes` to check for a match.
 */ const LANGUAGE_EXCEPTIONS = [
    'ja',
    'zh',
    'ko',
    'th',
    'vi'
];
function hasMutedWord({ mutedWords, text, facets, outlineTags, languages, actor }) {
    const exception = LANGUAGE_EXCEPTIONS.includes(languages?.[0] || '');
    const tags = [].concat(outlineTags || []).concat((facets || []).flatMap((facet)=>facet.features.filter(client_1.AppBskyRichtextFacet.isTag).map((tag)=>tag.tag))).map((t)=>t.toLowerCase());
    for (const mute of mutedWords){
        const mutedWord = mute.value.toLowerCase();
        const postText = text.toLowerCase();
        // expired, ignore
        if (mute.expiresAt && mute.expiresAt < new Date().toISOString()) continue;
        if (mute.actorTarget === 'exclude-following' && Boolean(actor?.viewer?.following)) continue;
        // `content` applies to tags as well
        if (tags.includes(mutedWord)) return true;
        // rest of the checks are for `content` only
        if (!mute.targets.includes('content')) continue;
        // single character or other exception, has to use includes
        if ((mutedWord.length === 1 || exception) && postText.includes(mutedWord)) return true;
        // too long
        if (mutedWord.length > postText.length) continue;
        // exact match
        if (mutedWord === postText) return true;
        // any muted phrase with space or punctuation
        if (/(?:\s|\p{P})+?/u.test(mutedWord) && postText.includes(mutedWord)) return true;
        // check individual character groups
        const words = postText.split(REGEX.WORD_BOUNDARY);
        for (const word of words){
            if (word === mutedWord) return true;
            // compare word without leading/trailing punctuation, but allow internal
            // punctuation (such as `s@ssy`)
            const wordTrimmedPunctuation = word.replace(REGEX.LEADING_TRAILING_PUNCTUATION, '');
            if (mutedWord === wordTrimmedPunctuation) return true;
            if (mutedWord.length > wordTrimmedPunctuation.length) continue;
            if (/\p{P}+/u.test(wordTrimmedPunctuation)) {
                const spacedWord = wordTrimmedPunctuation.replace(/\p{P}+/gu, ' ');
                if (spacedWord === mutedWord) return true;
                const contiguousWord = spacedWord.replace(/\s/gu, '');
                if (contiguousWord === mutedWord) return true;
                const wordParts = wordTrimmedPunctuation.split(/\p{P}+/u);
                for (const wordPart of wordParts){
                    if (wordPart === mutedWord) return true;
                }
            }
        }
    }
    return false;
}

},{"b9ec33dd976248f1":"hHmOB"}],"bpPgg":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decideUserList = decideUserList;
const syntax_1 = require("84add2116fe7617d");
const decision_1 = require("9e794942a2dcc18a");
const account_1 = require("34263d05fc547c9a");
const profile_1 = require("70a707552e409ae0");
function decideUserList(subject, opts) {
    const acc = new decision_1.ModerationDecision();
    const creator = // Note: ListViewBasic should not contain a creator field, but let's support it anyway
    'creator' in subject && isProfile(subject.creator) ? subject.creator : undefined;
    if (creator) {
        acc.setDid(creator.did);
        acc.setIsMe(creator.did === opts.userDid);
        if (subject.labels?.length) for (const label of subject.labels)acc.addLabel('content', label, opts);
        return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(creator, opts), (0, profile_1.decideProfile)(creator, opts));
    }
    const creatorDid = new syntax_1.AtUri(subject.uri).hostname;
    acc.setDid(creatorDid);
    acc.setIsMe(creatorDid === opts.userDid);
    if (subject.labels?.length) for (const label of subject.labels)acc.addLabel('content', label, opts);
    return acc;
}
function isProfile(v) {
    return v && typeof v === 'object' && 'did' in v;
}

},{"84add2116fe7617d":"gN2Ao","9e794942a2dcc18a":"5NayE","34263d05fc547c9a":"j6SGk","70a707552e409ae0":"Qqwuc"}],"9sVIq":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isQuotedPost = isQuotedPost;
exports.isQuotedPostWithMedia = isQuotedPostWithMedia;
exports.interpretLabelValueDefinition = interpretLabelValueDefinition;
exports.interpretLabelValueDefinitions = interpretLabelValueDefinitions;
const client_1 = require("3dd0e2647ed0494c");
const util_1 = require("bb7a29ed20628a8");
function isQuotedPost(embed) {
    return Boolean(embed && client_1.AppBskyEmbedRecord.isView(embed));
}
function isQuotedPostWithMedia(embed) {
    return Boolean(embed && client_1.AppBskyEmbedRecordWithMedia.isView(embed));
}
function interpretLabelValueDefinition(def, definedBy) {
    const behaviors = {
        account: {},
        profile: {},
        content: {}
    };
    const alertOrInform = def.severity === 'alert' ? 'alert' : def.severity === 'inform' ? 'inform' : undefined;
    if (def.blurs === 'content') {
        // target=account, blurs=content
        behaviors.account.profileList = alertOrInform;
        behaviors.account.profileView = alertOrInform;
        behaviors.account.contentList = 'blur';
        behaviors.account.contentView = def.adultOnly ? 'blur' : alertOrInform;
        // target=profile, blurs=content
        behaviors.profile.profileList = alertOrInform;
        behaviors.profile.profileView = alertOrInform;
        // target=content, blurs=content
        behaviors.content.contentList = 'blur';
        behaviors.content.contentView = def.adultOnly ? 'blur' : alertOrInform;
    } else if (def.blurs === 'media') {
        // target=account, blurs=media
        behaviors.account.profileList = alertOrInform;
        behaviors.account.profileView = alertOrInform;
        behaviors.account.avatar = 'blur';
        behaviors.account.banner = 'blur';
        // target=profile, blurs=media
        behaviors.profile.profileList = alertOrInform;
        behaviors.profile.profileView = alertOrInform;
        behaviors.profile.avatar = 'blur';
        behaviors.profile.banner = 'blur';
        // target=content, blurs=media
        behaviors.content.contentMedia = 'blur';
    } else if (def.blurs === 'none') {
        // target=account, blurs=none
        behaviors.account.profileList = alertOrInform;
        behaviors.account.profileView = alertOrInform;
        behaviors.account.contentList = alertOrInform;
        behaviors.account.contentView = alertOrInform;
        // target=profile, blurs=none
        behaviors.profile.profileList = alertOrInform;
        behaviors.profile.profileView = alertOrInform;
        // target=content, blurs=none
        behaviors.content.contentList = alertOrInform;
        behaviors.content.contentView = alertOrInform;
    }
    let defaultSetting = 'warn';
    if (def.defaultSetting === 'hide' || def.defaultSetting === 'ignore') defaultSetting = def.defaultSetting;
    const flags = [
        'no-self'
    ];
    if (def.adultOnly) flags.push('adult');
    return {
        ...def,
        definedBy,
        configurable: true,
        defaultSetting,
        flags,
        behaviors
    };
}
function interpretLabelValueDefinitions(labelerView) {
    return (labelerView.policies?.labelValueDefinitions || []).filter((0, util_1.asPredicate)(client_1.ComAtprotoLabelDefs.validateLabelValueDefinition)).map((labelValDef)=>interpretLabelValueDefinition(labelValDef, labelerView.creator.did));
}

},{"3dd0e2647ed0494c":"hHmOB","bb7a29ed20628a8":"hnRug"}],"kJbRR":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mock = void 0;
const FAKE_CID = 'bafyreiclp443lavogvhj3d2ob2cxbfuscni2k5jk7bebjzg7khl3esabwq';
exports.mock = {
    post ({ text, facets, reply, embed }) {
        return {
            $type: 'app.bsky.feed.post',
            text,
            facets,
            reply,
            embed,
            langs: [
                'en'
            ],
            createdAt: new Date().toISOString()
        };
    },
    postView ({ record, author, embed, replyCount, repostCount, likeCount, viewer, labels }) {
        return {
            $type: 'app.bsky.feed.defs#postView',
            uri: `at://${author.did}/app.bsky.feed.post/fake`,
            cid: FAKE_CID,
            author,
            record,
            embed,
            replyCount,
            repostCount,
            likeCount,
            indexedAt: new Date().toISOString(),
            viewer,
            labels
        };
    },
    embedRecordView ({ record, author, labels }) {
        return {
            $type: 'app.bsky.embed.record#view',
            record: {
                $type: 'app.bsky.embed.record#viewRecord',
                uri: `at://${author.did}/app.bsky.feed.post/fake`,
                cid: FAKE_CID,
                author,
                value: record,
                labels,
                indexedAt: new Date().toISOString()
            }
        };
    },
    profileViewBasic ({ handle, displayName, description, viewer, labels }) {
        return {
            did: `did:web:${handle}`,
            handle,
            displayName,
            // @ts-expect-error technically not in ProfileViewBasic but useful in some cases
            description,
            viewer,
            labels
        };
    },
    actorViewerState ({ muted, mutedByList, blockedBy, blocking, blockingByList, following, followedBy }) {
        return {
            muted,
            mutedByList,
            blockedBy,
            blocking,
            blockingByList,
            following,
            followedBy
        };
    },
    listViewBasic ({ name }) {
        return {
            uri: 'at://did:plc:fake/app.bsky.graph.list/fake',
            cid: FAKE_CID,
            name,
            purpose: 'app.bsky.graph.defs#modlist',
            indexedAt: new Date().toISOString()
        };
    },
    replyNotification ({ author, record, labels }) {
        return {
            uri: `at://${author.did}/app.bsky.feed.post/fake`,
            cid: FAKE_CID,
            author,
            reason: 'reply',
            reasonSubject: `at://${author.did}/app.bsky.feed.post/fake-parent`,
            record,
            isRead: false,
            indexedAt: new Date().toISOString(),
            labels
        };
    },
    followNotification ({ author, subjectDid, labels }) {
        return {
            uri: `at://${author.did}/app.bsky.graph.follow/fake`,
            cid: FAKE_CID,
            author,
            reason: 'follow',
            record: {
                $type: 'app.bsky.graph.follow',
                createdAt: new Date().toISOString(),
                subject: subjectDid
            },
            isRead: false,
            indexedAt: new Date().toISOString(),
            labels
        };
    },
    label ({ val, uri, src }) {
        return {
            src: src || 'did:plc:fake-labeler',
            uri,
            val,
            cts: new Date().toISOString()
        };
    }
};

},{}],"hrVL0":[function(require,module,exports,__globalThis) {
"use strict";
var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var __importStar = this && this.__importStar || function() {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o) {
            var ar = [];
            for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
            for(var k = ownKeys(mod), i = 0; i < k.length; i++)if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
    };
}();
var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
var _Agent_prefsLock;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Agent = void 0;
const await_lock_1 = __importDefault(require("981dd472bbcb28f2"));
const common_web_1 = require("2115b4fff6536a35");
const syntax_1 = require("1b787df1587e2852");
const xrpc_1 = require("c68a37dda1a41427");
const index_1 = require("f33eb10c3cebcf98");
const lexicons_1 = require("a1dadabad231f6e8");
const const_1 = require("582def3129c48937");
const moderation_1 = require("4cf77777c1bf38cd");
const labels_1 = require("75a16db80497fd37");
const predicate = __importStar(require("992e0339cc1d1092"));
const util_1 = require("599e46fc72ae7ce4");
const FEED_VIEW_PREF_DEFAULTS = {
    hideReplies: false,
    hideRepliesByUnfollowed: true,
    hideRepliesByLikeCount: 0,
    hideReposts: false,
    hideQuotePosts: false
};
const THREAD_VIEW_PREF_DEFAULTS = {
    sort: 'hotness',
    prioritizeFollowedUsers: true
};
/**
 * An {@link Agent} is an {@link AtpBaseClient} with the following
 * additional features:
 * - AT Protocol labelers configuration utilities
 * - AT Protocol proxy configuration utilities
 * - Cloning utilities
 * - `app.bsky` syntactic sugar
 * - `com.atproto` syntactic sugar
 */ class Agent extends xrpc_1.XrpcClient {
    /**
     * Configures the Agent (or its sub classes) globally.
     */ static configure(opts) {
        if (opts.appLabelers) this.appLabelers = opts.appLabelers.map(util_1.asDid); // Validate & copy
    }
    /** @deprecated use `this` instead */ get xrpc() {
        return this;
    }
    constructor(options){
        const sessionManager = typeof options === 'object' && 'fetchHandler' in options ? options : {
            did: undefined,
            fetchHandler: (0, xrpc_1.buildFetchHandler)(options)
        };
        super((url, init)=>{
            const headers = new Headers(init?.headers);
            if (this.proxy && !headers.has('atproto-proxy')) headers.set('atproto-proxy', this.proxy);
            // Merge the labelers header of this particular request with the app &
            // instance labelers.
            headers.set('atproto-accept-labelers', [
                ...this.appLabelers.map((l)=>`${l};redact`),
                ...this.labelers,
                headers.get('atproto-accept-labelers')?.trim()
            ].filter(Boolean).join(', '));
            return this.sessionManager.fetchHandler(url, {
                ...init,
                headers
            });
        }, lexicons_1.schemas);
        //#endregion
        Object.defineProperty(this, "com", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new index_1.ComNS(this)
        });
        Object.defineProperty(this, "app", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new index_1.AppNS(this)
        });
        Object.defineProperty(this, "chat", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new index_1.ChatNS(this)
        });
        Object.defineProperty(this, "tools", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new index_1.ToolsNS(this)
        });
        Object.defineProperty(this, "sessionManager", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "labelers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        //#endregion
        //#region ATPROTO proxy configuration utilities
        Object.defineProperty(this, "proxy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        //#region "com.atproto" lexicon short hand methods
        /**
         * Upload a binary blob to the server
         */ Object.defineProperty(this, "uploadBlob", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (data, opts)=>this.com.atproto.repo.uploadBlob(data, opts)
        });
        /**
         * Resolve a handle to a DID
         */ Object.defineProperty(this, "resolveHandle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.com.atproto.identity.resolveHandle(params, opts)
        });
        /**
         * Change the user's handle
         */ Object.defineProperty(this, "updateHandle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (data, opts)=>this.com.atproto.identity.updateHandle(data, opts)
        });
        /**
         * Create a moderation report
         */ Object.defineProperty(this, "createModerationReport", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (data, opts)=>this.com.atproto.moderation.createReport(data, opts)
        });
        //#endregion
        //#region "app.bsky" lexicon short hand methods
        Object.defineProperty(this, "getTimeline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.feed.getTimeline(params, opts)
        });
        Object.defineProperty(this, "getAuthorFeed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.feed.getAuthorFeed(params, opts)
        });
        Object.defineProperty(this, "getActorLikes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.feed.getActorLikes(params, opts)
        });
        Object.defineProperty(this, "getPostThread", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.feed.getPostThread(params, opts)
        });
        Object.defineProperty(this, "getPost", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params)=>this.app.bsky.feed.post.get(params)
        });
        Object.defineProperty(this, "getPosts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.feed.getPosts(params, opts)
        });
        Object.defineProperty(this, "getLikes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.feed.getLikes(params, opts)
        });
        Object.defineProperty(this, "getRepostedBy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.feed.getRepostedBy(params, opts)
        });
        Object.defineProperty(this, "getFollows", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.graph.getFollows(params, opts)
        });
        Object.defineProperty(this, "getFollowers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.graph.getFollowers(params, opts)
        });
        Object.defineProperty(this, "getProfile", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.actor.getProfile(params, opts)
        });
        Object.defineProperty(this, "getProfiles", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.actor.getProfiles(params, opts)
        });
        Object.defineProperty(this, "getSuggestions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.actor.getSuggestions(params, opts)
        });
        Object.defineProperty(this, "searchActors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.actor.searchActors(params, opts)
        });
        Object.defineProperty(this, "searchActorsTypeahead", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.actor.searchActorsTypeahead(params, opts)
        });
        Object.defineProperty(this, "listNotifications", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.notification.listNotifications(params, opts)
        });
        Object.defineProperty(this, "countUnreadNotifications", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.notification.getUnreadCount(params, opts)
        });
        Object.defineProperty(this, "getLabelers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (params, opts)=>this.app.bsky.labeler.getServices(params, opts)
        });
        //- Private methods
        _Agent_prefsLock.set(this, new await_lock_1.default());
        this.sessionManager = sessionManager;
    }
    //#region Cloning utilities
    clone() {
        return this.copyInto(new Agent(this.sessionManager));
    }
    copyInto(inst) {
        inst.configureLabelers(this.labelers);
        inst.configureProxy(this.proxy ?? null);
        inst.clearHeaders();
        for (const [key, value] of this.headers)inst.setHeader(key, value);
        return inst;
    }
    withProxy(serviceType, did) {
        const inst = this.clone();
        inst.configureProxy(`${(0, util_1.asDid)(did)}#${serviceType}`);
        return inst;
    }
    //#endregion
    //#region ATPROTO labelers configuration utilities
    /**
     * The labelers statically configured on the class of the current instance.
     */ get appLabelers() {
        return this.constructor.appLabelers;
    }
    configureLabelers(labelerDids) {
        this.labelers = labelerDids.map(util_1.asDid); // Validate & copy
    }
    /** @deprecated use {@link configureLabelers} instead */ configureLabelersHeader(labelerDids) {
        // Filtering non-did values for backwards compatibility
        this.configureLabelers(labelerDids.filter(util_1.isDid));
    }
    configureProxy(value) {
        if (value === null) this.proxy = undefined;
        else if ((0, util_1.isDid)(value)) this.proxy = value;
        else throw new TypeError('Invalid proxy DID');
    }
    /** @deprecated use {@link configureProxy} instead */ configureProxyHeader(serviceType, did) {
        // Ignoring non-did values for backwards compatibility
        if ((0, util_1.isDid)(did)) this.configureProxy(`${did}#${serviceType}`);
    }
    //#endregion
    //#region Session management
    /**
     * Get the authenticated user's DID, if any.
     */ get did() {
        return this.sessionManager.did;
    }
    /** @deprecated Use {@link Agent.assertDid} instead */ get accountDid() {
        return this.assertDid;
    }
    /**
     * Get the authenticated user's DID, or throw an error if not authenticated.
     */ get assertDid() {
        this.assertAuthenticated();
        return this.did;
    }
    /**
     * Assert that the user is authenticated.
     */ assertAuthenticated() {
        if (!this.did) throw new Error('Not logged in');
    }
    //#endregion
    /** @deprecated use "this" instead */ get api() {
        return this;
    }
    async getLabelDefinitions(prefs) {
        // collect the labeler dids
        const dids = [
            ...this.appLabelers
        ];
        if (isBskyPrefs(prefs)) dids.push(...prefs.moderationPrefs.labelers.map((l)=>l.did));
        else if (isModPrefs(prefs)) dids.push(...prefs.labelers.map((l)=>l.did));
        else dids.push(...prefs);
        // fetch their definitions
        const labelers = await this.getLabelers({
            dids,
            detailed: true
        });
        // assemble a map of labeler dids to the interpreted label value definitions
        const labelDefs = {};
        if (labelers.data) for (const labeler of labelers.data.views)labelDefs[labeler.creator.did] = (0, moderation_1.interpretLabelValueDefinitions)(labeler);
        return labelDefs;
    }
    async post(record) {
        record.createdAt || (record.createdAt = new Date().toISOString());
        return this.app.bsky.feed.post.create({
            repo: this.accountDid
        }, record);
    }
    async deletePost(postUri) {
        this.assertAuthenticated();
        const postUrip = new syntax_1.AtUri(postUri);
        return this.app.bsky.feed.post.delete({
            repo: postUrip.hostname,
            rkey: postUrip.rkey
        });
    }
    async like(uri, cid) {
        return this.app.bsky.feed.like.create({
            repo: this.accountDid
        }, {
            subject: {
                uri,
                cid
            },
            createdAt: new Date().toISOString()
        });
    }
    async deleteLike(likeUri) {
        this.assertAuthenticated();
        const likeUrip = new syntax_1.AtUri(likeUri);
        return this.app.bsky.feed.like.delete({
            repo: likeUrip.hostname,
            rkey: likeUrip.rkey
        });
    }
    async repost(uri, cid) {
        return this.app.bsky.feed.repost.create({
            repo: this.accountDid
        }, {
            subject: {
                uri,
                cid
            },
            createdAt: new Date().toISOString()
        });
    }
    async deleteRepost(repostUri) {
        this.assertAuthenticated();
        const repostUrip = new syntax_1.AtUri(repostUri);
        return this.app.bsky.feed.repost.delete({
            repo: repostUrip.hostname,
            rkey: repostUrip.rkey
        });
    }
    async follow(subjectDid) {
        return this.app.bsky.graph.follow.create({
            repo: this.accountDid
        }, {
            subject: subjectDid,
            createdAt: new Date().toISOString()
        });
    }
    async deleteFollow(followUri) {
        this.assertAuthenticated();
        const followUrip = new syntax_1.AtUri(followUri);
        return this.app.bsky.graph.follow.delete({
            repo: followUrip.hostname,
            rkey: followUrip.rkey
        });
    }
    /**
     * @note: Using this method will reset the whole profile record if it
     * previously contained invalid values (wrt to the profile lexicon).
     */ async upsertProfile(updateFn) {
        const upsert = async ()=>{
            const repo = this.assertDid;
            const collection = 'app.bsky.actor.profile';
            const existing = await this.com.atproto.repo.getRecord({
                repo,
                collection,
                rkey: 'self'
            }).catch((_)=>undefined);
            const existingRecord = existing && predicate.isValidProfile(existing.data.value) ? existing.data.value : undefined;
            // run the update
            const updated = await updateFn(existingRecord);
            // validate the value returned by the update function
            const validation = index_1.AppBskyActorProfile.validateRecord({
                $type: collection,
                ...updated
            });
            if (!validation.success) throw validation.error;
            await this.com.atproto.repo.putRecord({
                repo,
                collection,
                rkey: 'self',
                record: validation.value,
                swapRecord: existing?.data.cid || null
            });
        };
        return (0, common_web_1.retry)(upsert, {
            maxRetries: 5,
            retryable: (e)=>e instanceof index_1.ComAtprotoRepoPutRecord.InvalidSwapError
        });
    }
    async mute(actor) {
        return this.app.bsky.graph.muteActor({
            actor
        });
    }
    async unmute(actor) {
        return this.app.bsky.graph.unmuteActor({
            actor
        });
    }
    async muteModList(uri) {
        return this.app.bsky.graph.muteActorList({
            list: uri
        });
    }
    async unmuteModList(uri) {
        return this.app.bsky.graph.unmuteActorList({
            list: uri
        });
    }
    async blockModList(uri) {
        return this.app.bsky.graph.listblock.create({
            repo: this.accountDid
        }, {
            subject: uri,
            createdAt: new Date().toISOString()
        });
    }
    async unblockModList(uri) {
        const repo = this.accountDid;
        const listInfo = await this.app.bsky.graph.getList({
            list: uri,
            limit: 1
        });
        const blocked = listInfo.data.list.viewer?.blocked;
        if (blocked) {
            const { rkey } = new syntax_1.AtUri(blocked);
            return this.app.bsky.graph.listblock.delete({
                repo,
                rkey
            });
        }
    }
    async updateSeenNotifications(seenAt = new Date().toISOString()) {
        return this.app.bsky.notification.updateSeen({
            seenAt
        });
    }
    async getPreferences() {
        const prefs = {
            feeds: {
                saved: undefined,
                pinned: undefined
            },
            // @ts-ignore populating below
            savedFeeds: undefined,
            feedViewPrefs: {
                home: {
                    ...FEED_VIEW_PREF_DEFAULTS
                }
            },
            threadViewPrefs: {
                ...THREAD_VIEW_PREF_DEFAULTS
            },
            moderationPrefs: {
                adultContentEnabled: false,
                labels: {
                    ...labels_1.DEFAULT_LABEL_SETTINGS
                },
                labelers: this.appLabelers.map((did)=>({
                        did,
                        labels: {}
                    })),
                mutedWords: [],
                hiddenPosts: []
            },
            birthDate: undefined,
            interests: {
                tags: []
            },
            bskyAppState: {
                queuedNudges: [],
                activeProgressGuide: undefined,
                nuxs: []
            },
            postInteractionSettings: {
                threadgateAllowRules: undefined,
                postgateEmbeddingRules: undefined
            },
            verificationPrefs: {
                hideBadges: false
            }
        };
        const res = await this.app.bsky.actor.getPreferences({});
        const labelPrefs = [];
        for (const pref of res.data.preferences){
            if (predicate.isValidAdultContentPref(pref)) // adult content preferences
            prefs.moderationPrefs.adultContentEnabled = pref.enabled;
            else if (predicate.isValidContentLabelPref(pref)) {
                // content label preference
                const adjustedPref = adjustLegacyContentLabelPref(pref);
                labelPrefs.push(adjustedPref);
            } else if (predicate.isValidLabelersPref(pref)) // labelers preferences
            prefs.moderationPrefs.labelers = this.appLabelers.map((did)=>({
                    did,
                    labels: {}
                })).concat(pref.labelers.map((labeler)=>({
                    ...labeler,
                    labels: {}
                })));
            else if (predicate.isValidSavedFeedsPrefV2(pref)) prefs.savedFeeds = pref.items;
            else if (predicate.isValidSavedFeedsPref(pref)) {
                // saved and pinned feeds
                prefs.feeds.saved = pref.saved;
                prefs.feeds.pinned = pref.pinned;
            } else if (predicate.isValidPersonalDetailsPref(pref)) // birth date (irl)
            {
                if (pref.birthDate) prefs.birthDate = new Date(pref.birthDate);
            } else if (predicate.isValidFeedViewPref(pref)) {
                // feed view preferences
                const { $type: _, feed, ...v } = pref;
                prefs.feedViewPrefs[feed] = {
                    ...FEED_VIEW_PREF_DEFAULTS,
                    ...v
                };
            } else if (predicate.isValidThreadViewPref(pref)) {
                // thread view preferences
                const { $type: _, ...v } = pref;
                prefs.threadViewPrefs = {
                    ...prefs.threadViewPrefs,
                    ...v
                };
            } else if (predicate.isValidInterestsPref(pref)) {
                const { $type: _, ...v } = pref;
                prefs.interests = {
                    ...prefs.interests,
                    ...v
                };
            } else if (predicate.isValidMutedWordsPref(pref)) {
                prefs.moderationPrefs.mutedWords = pref.items;
                if (prefs.moderationPrefs.mutedWords.length) prefs.moderationPrefs.mutedWords = prefs.moderationPrefs.mutedWords.map((word)=>{
                    word.actorTarget = word.actorTarget || 'all';
                    return word;
                });
            } else if (predicate.isValidHiddenPostsPref(pref)) prefs.moderationPrefs.hiddenPosts = pref.items;
            else if (predicate.isValidBskyAppStatePref(pref)) {
                prefs.bskyAppState.queuedNudges = pref.queuedNudges || [];
                prefs.bskyAppState.activeProgressGuide = pref.activeProgressGuide;
                prefs.bskyAppState.nuxs = pref.nuxs || [];
            } else if (predicate.isValidPostInteractionSettingsPref(pref)) {
                prefs.postInteractionSettings.threadgateAllowRules = pref.threadgateAllowRules;
                prefs.postInteractionSettings.postgateEmbeddingRules = pref.postgateEmbeddingRules;
            } else if (predicate.isValidVerificationPrefs(pref)) prefs.verificationPrefs = {
                hideBadges: pref.hideBadges
            };
        }
        /*
         * If `prefs.savedFeeds` is undefined, no `savedFeedsPrefV2` exists, which
         * means we want to try to migrate if needed.
         *
         * If v1 prefs exist, they will be migrated to v2.
         *
         * If no v1 prefs exist, the user is either new, or could be old and has
         * never edited their feeds.
         */ if (prefs.savedFeeds == null) {
            const { saved, pinned } = prefs.feeds;
            if (saved && pinned) {
                const uniqueMigratedSavedFeeds = new Map();
                // insert Following feed first
                uniqueMigratedSavedFeeds.set('timeline', {
                    id: common_web_1.TID.nextStr(),
                    type: 'timeline',
                    value: 'following',
                    pinned: true
                });
                // use pinned as source of truth for feed order
                for (const uri of pinned){
                    const type = (0, util_1.getSavedFeedType)(uri);
                    // only want supported types
                    if (type === 'unknown') continue;
                    uniqueMigratedSavedFeeds.set(uri, {
                        id: common_web_1.TID.nextStr(),
                        type,
                        value: uri,
                        pinned: true
                    });
                }
                for (const uri of saved)if (!uniqueMigratedSavedFeeds.has(uri)) {
                    const type = (0, util_1.getSavedFeedType)(uri);
                    // only want supported types
                    if (type === 'unknown') continue;
                    uniqueMigratedSavedFeeds.set(uri, {
                        id: common_web_1.TID.nextStr(),
                        type,
                        value: uri,
                        pinned: false
                    });
                }
                prefs.savedFeeds = Array.from(uniqueMigratedSavedFeeds.values());
            } else prefs.savedFeeds = [
                {
                    id: common_web_1.TID.nextStr(),
                    type: 'timeline',
                    value: 'following',
                    pinned: true
                }
            ];
            // save to user preferences so this migration doesn't re-occur
            await this.overwriteSavedFeeds(prefs.savedFeeds);
        }
        // apply the label prefs
        for (const pref of labelPrefs)if (pref.labelerDid) {
            const labeler = prefs.moderationPrefs.labelers.find((labeler)=>labeler.did === pref.labelerDid);
            if (!labeler) continue;
            labeler.labels[pref.label] = pref.visibility;
        } else prefs.moderationPrefs.labels[pref.label] = pref.visibility;
        prefs.moderationPrefs.labels = remapLegacyLabels(prefs.moderationPrefs.labels);
        // automatically configure the client
        this.configureLabelers(prefsArrayToLabelerDids(res.data.preferences));
        return prefs;
    }
    async overwriteSavedFeeds(savedFeeds) {
        savedFeeds.forEach(util_1.validateSavedFeed);
        const uniqueSavedFeeds = new Map();
        savedFeeds.forEach((feed)=>{
            // remove and re-insert to preserve order
            if (uniqueSavedFeeds.has(feed.id)) uniqueSavedFeeds.delete(feed.id);
            uniqueSavedFeeds.set(feed.id, feed);
        });
        return this.updateSavedFeedsV2Preferences(()=>Array.from(uniqueSavedFeeds.values()));
    }
    async updateSavedFeeds(savedFeedsToUpdate) {
        savedFeedsToUpdate.map(util_1.validateSavedFeed);
        return this.updateSavedFeedsV2Preferences((savedFeeds)=>{
            return savedFeeds.map((savedFeed)=>{
                const updatedVersion = savedFeedsToUpdate.find((updated)=>savedFeed.id === updated.id);
                if (updatedVersion) return {
                    ...savedFeed,
                    // only update pinned
                    pinned: updatedVersion.pinned
                };
                return savedFeed;
            });
        });
    }
    async addSavedFeeds(savedFeeds) {
        const toSave = savedFeeds.map((f)=>({
                ...f,
                id: common_web_1.TID.nextStr()
            }));
        toSave.forEach(util_1.validateSavedFeed);
        return this.updateSavedFeedsV2Preferences((savedFeeds)=>[
                ...savedFeeds,
                ...toSave
            ]);
    }
    async removeSavedFeeds(ids) {
        return this.updateSavedFeedsV2Preferences((savedFeeds)=>[
                ...savedFeeds.filter((feed)=>!ids.find((id)=>feed.id === id))
            ]);
    }
    /**
     * @deprecated use `overwriteSavedFeeds`
     */ async setSavedFeeds(saved, pinned) {
        return this.updateFeedPreferences(()=>({
                saved,
                pinned
            }));
    }
    /**
     * @deprecated use `addSavedFeeds`
     */ async addSavedFeed(v) {
        return this.updateFeedPreferences((saved, pinned)=>({
                saved: [
                    ...saved.filter((uri)=>uri !== v),
                    v
                ],
                pinned
            }));
    }
    /**
     * @deprecated use `removeSavedFeeds`
     */ async removeSavedFeed(v) {
        return this.updateFeedPreferences((saved, pinned)=>({
                saved: saved.filter((uri)=>uri !== v),
                pinned: pinned.filter((uri)=>uri !== v)
            }));
    }
    /**
     * @deprecated use `addSavedFeeds` or `updateSavedFeeds`
     */ async addPinnedFeed(v) {
        return this.updateFeedPreferences((saved, pinned)=>({
                saved: [
                    ...saved.filter((uri)=>uri !== v),
                    v
                ],
                pinned: [
                    ...pinned.filter((uri)=>uri !== v),
                    v
                ]
            }));
    }
    /**
     * @deprecated use `updateSavedFeeds` or `removeSavedFeeds`
     */ async removePinnedFeed(v) {
        return this.updateFeedPreferences((saved, pinned)=>({
                saved,
                pinned: pinned.filter((uri)=>uri !== v)
            }));
    }
    async setAdultContentEnabled(v) {
        await this.updatePreferences((prefs)=>{
            const adultContentPref = prefs.findLast(predicate.isValidAdultContentPref) || {
                $type: 'app.bsky.actor.defs#adultContentPref',
                enabled: v
            };
            adultContentPref.enabled = v;
            return prefs.filter((pref)=>!index_1.AppBskyActorDefs.isAdultContentPref(pref)).concat(adultContentPref);
        });
    }
    async setContentLabelPref(key, value, labelerDid) {
        if (labelerDid) (0, syntax_1.ensureValidDid)(labelerDid);
        await this.updatePreferences((prefs)=>{
            const labelPref = prefs.filter(predicate.isValidContentLabelPref).findLast((pref)=>pref.label === key && pref.labelerDid === labelerDid) || {
                $type: 'app.bsky.actor.defs#contentLabelPref',
                label: key,
                labelerDid,
                visibility: value
            };
            labelPref.visibility = value;
            let legacyLabelPref;
            if (index_1.AppBskyActorDefs.isContentLabelPref(labelPref)) // is global
            {
                if (!labelPref.labelerDid) {
                    const legacyLabelValue = {
                        'graphic-media': 'gore',
                        porn: 'nsfw',
                        sexual: 'suggestive',
                        // Protect against using toString, hasOwnProperty, etc. as a label:
                        __proto__: null
                    }[labelPref.label];
                    // if it's a legacy label, double-write the legacy label
                    if (legacyLabelValue) {
                        legacyLabelPref = prefs.filter(predicate.isValidContentLabelPref).findLast((pref)=>pref.label === legacyLabelValue && pref.labelerDid === undefined) || {
                            $type: 'app.bsky.actor.defs#contentLabelPref',
                            label: legacyLabelValue,
                            labelerDid: undefined,
                            visibility: value
                        };
                        legacyLabelPref.visibility = value;
                    }
                }
            }
            return prefs.filter((pref)=>!index_1.AppBskyActorDefs.isContentLabelPref(pref) || !(pref.label === key && pref.labelerDid === labelerDid)).concat(labelPref).filter((pref)=>{
                if (!legacyLabelPref) return true;
                return !index_1.AppBskyActorDefs.isContentLabelPref(pref) || !(pref.label === legacyLabelPref.label && pref.labelerDid === undefined);
            }).concat(legacyLabelPref ? [
                legacyLabelPref
            ] : []);
        });
    }
    async addLabeler(did) {
        const prefs = await this.updatePreferences((prefs)=>{
            const labelersPref = prefs.findLast(predicate.isValidLabelersPref) || {
                $type: 'app.bsky.actor.defs#labelersPref',
                labelers: []
            };
            if (!labelersPref.labelers.some((labeler)=>labeler.did === did)) labelersPref.labelers.push({
                did
            });
            return prefs.filter((pref)=>!index_1.AppBskyActorDefs.isLabelersPref(pref)).concat(labelersPref);
        });
        // automatically configure the client
        this.configureLabelers(prefsArrayToLabelerDids(prefs));
    }
    async removeLabeler(did) {
        const prefs = await this.updatePreferences((prefs)=>{
            const labelersPref = prefs.findLast(predicate.isValidLabelersPref) || {
                $type: 'app.bsky.actor.defs#labelersPref',
                labelers: []
            };
            labelersPref.labelers = labelersPref.labelers.filter((l)=>l.did !== did);
            return prefs.filter((pref)=>!index_1.AppBskyActorDefs.isLabelersPref(pref)).concat(labelersPref);
        });
        // automatically configure the client
        this.configureLabelers(prefsArrayToLabelerDids(prefs));
    }
    async setPersonalDetails({ birthDate }) {
        await this.updatePreferences((prefs)=>{
            const personalDetailsPref = prefs.findLast(predicate.isValidPersonalDetailsPref) || {
                $type: 'app.bsky.actor.defs#personalDetailsPref'
            };
            personalDetailsPref.birthDate = birthDate instanceof Date ? birthDate.toISOString() : birthDate;
            return prefs.filter((pref)=>!index_1.AppBskyActorDefs.isPersonalDetailsPref(pref)).concat(personalDetailsPref);
        });
    }
    async setFeedViewPrefs(feed, pref) {
        await this.updatePreferences((prefs)=>{
            const existing = prefs.filter(predicate.isValidFeedViewPref).findLast((pref)=>pref.feed === feed);
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isFeedViewPref(p) || p.feed !== feed).concat({
                ...existing,
                ...pref,
                $type: 'app.bsky.actor.defs#feedViewPref',
                feed
            });
        });
    }
    async setThreadViewPrefs(pref) {
        await this.updatePreferences((prefs)=>{
            const existing = prefs.findLast(predicate.isValidThreadViewPref);
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isThreadViewPref(p)).concat({
                ...existing,
                ...pref,
                $type: 'app.bsky.actor.defs#threadViewPref'
            });
        });
    }
    async setInterestsPref(pref) {
        await this.updatePreferences((prefs)=>{
            const existing = prefs.findLast(predicate.isValidInterestsPref);
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isInterestsPref(p)).concat({
                ...existing,
                ...pref,
                $type: 'app.bsky.actor.defs#interestsPref'
            });
        });
    }
    /**
     * Add a muted word to user preferences.
     */ async addMutedWord(mutedWord) {
        const sanitizedValue = (0, util_1.sanitizeMutedWordValue)(mutedWord.value);
        if (!sanitizedValue) return;
        await this.updatePreferences((prefs)=>{
            let mutedWordsPref = prefs.findLast(predicate.isValidMutedWordsPref);
            const newMutedWord = {
                id: common_web_1.TID.nextStr(),
                value: sanitizedValue,
                targets: mutedWord.targets || [],
                actorTarget: mutedWord.actorTarget || 'all',
                expiresAt: mutedWord.expiresAt || undefined
            };
            if (mutedWordsPref) {
                mutedWordsPref.items.push(newMutedWord);
                /**
                 * Migrate any old muted words that don't have an id
                 */ mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
            } else // if the pref doesn't exist, create it
            mutedWordsPref = {
                $type: 'app.bsky.actor.defs#mutedWordsPref',
                items: [
                    newMutedWord
                ]
            };
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isMutedWordsPref(p)).concat(mutedWordsPref);
        });
    }
    /**
     * Convenience method to add muted words to user preferences
     */ async addMutedWords(newMutedWords) {
        await Promise.all(newMutedWords.map((word)=>this.addMutedWord(word)));
    }
    /**
     * @deprecated use `addMutedWords` or `addMutedWord` instead
     */ async upsertMutedWords(mutedWords) {
        await this.addMutedWords(mutedWords);
    }
    /**
     * Update a muted word in user preferences.
     */ async updateMutedWord(mutedWord) {
        await this.updatePreferences((prefs)=>{
            const mutedWordsPref = prefs.findLast(predicate.isValidMutedWordsPref);
            if (mutedWordsPref) {
                mutedWordsPref.items = mutedWordsPref.items.map((existingItem)=>{
                    const match = matchMutedWord(existingItem, mutedWord);
                    if (match) {
                        const updated = {
                            ...existingItem,
                            ...mutedWord
                        };
                        return {
                            id: existingItem.id || common_web_1.TID.nextStr(),
                            value: (0, util_1.sanitizeMutedWordValue)(updated.value) || existingItem.value,
                            targets: updated.targets || [],
                            actorTarget: updated.actorTarget || 'all',
                            expiresAt: updated.expiresAt || undefined
                        };
                    } else return existingItem;
                });
                /**
                 * Migrate any old muted words that don't have an id
                 */ mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
                return prefs.filter((p)=>!index_1.AppBskyActorDefs.isMutedWordsPref(p)).concat(mutedWordsPref);
            }
            return prefs;
        });
    }
    /**
     * Remove a muted word from user preferences.
     */ async removeMutedWord(mutedWord) {
        await this.updatePreferences((prefs)=>{
            const mutedWordsPref = prefs.findLast(predicate.isValidMutedWordsPref);
            if (mutedWordsPref) {
                for(let i = 0; i < mutedWordsPref.items.length; i++){
                    const match = matchMutedWord(mutedWordsPref.items[i], mutedWord);
                    if (match) {
                        mutedWordsPref.items.splice(i, 1);
                        break;
                    }
                }
                /**
                 * Migrate any old muted words that don't have an id
                 */ mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
                return prefs.filter((p)=>!index_1.AppBskyActorDefs.isMutedWordsPref(p)).concat(mutedWordsPref);
            }
            return prefs;
        });
    }
    /**
     * Convenience method to remove muted words from user preferences
     */ async removeMutedWords(mutedWords) {
        await Promise.all(mutedWords.map((word)=>this.removeMutedWord(word)));
    }
    async hidePost(postUri) {
        await this.updateHiddenPost(postUri, 'hide');
    }
    async unhidePost(postUri) {
        await this.updateHiddenPost(postUri, 'unhide');
    }
    async bskyAppQueueNudges(nudges) {
        await this.updatePreferences((prefs)=>{
            const pref = prefs.findLast(predicate.isValidBskyAppStatePref) || {
                $type: 'app.bsky.actor.defs#bskyAppStatePref'
            };
            pref.queuedNudges = (pref.queuedNudges || []).concat(nudges);
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat(pref);
        });
    }
    async bskyAppDismissNudges(nudges) {
        await this.updatePreferences((prefs)=>{
            const pref = prefs.findLast(predicate.isValidBskyAppStatePref) || {
                $type: 'app.bsky.actor.defs#bskyAppStatePref'
            };
            nudges = Array.isArray(nudges) ? nudges : [
                nudges
            ];
            pref.queuedNudges = (pref.queuedNudges || []).filter((nudge)=>!nudges.includes(nudge));
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat(pref);
        });
    }
    async bskyAppSetActiveProgressGuide(guide) {
        if (guide) {
            const result = index_1.AppBskyActorDefs.validateBskyAppProgressGuide(guide);
            if (!result.success) throw result.error;
        }
        await this.updatePreferences((prefs)=>{
            const pref = prefs.findLast(predicate.isValidBskyAppStatePref) || {
                $type: 'app.bsky.actor.defs#bskyAppStatePref'
            };
            pref.activeProgressGuide = guide;
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat(pref);
        });
    }
    /**
     * Insert or update a NUX in user prefs
     */ async bskyAppUpsertNux(nux) {
        (0, util_1.validateNux)(nux);
        await this.updatePreferences((prefs)=>{
            const pref = prefs.findLast(predicate.isValidBskyAppStatePref) || {
                $type: 'app.bsky.actor.defs#bskyAppStatePref'
            };
            pref.nuxs = pref.nuxs || [];
            const existing = pref.nuxs?.find((n)=>{
                return n.id === nux.id;
            });
            let next;
            if (existing) next = {
                id: existing.id,
                completed: nux.completed,
                data: nux.data,
                expiresAt: nux.expiresAt
            };
            else next = nux;
            // remove duplicates and append
            pref.nuxs = pref.nuxs.filter((n)=>n.id !== nux.id).concat(next);
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat(pref);
        });
    }
    /**
     * Removes NUXs from user preferences.
     */ async bskyAppRemoveNuxs(ids) {
        await this.updatePreferences((prefs)=>{
            const pref = prefs.findLast(predicate.isValidBskyAppStatePref) || {
                $type: 'app.bsky.actor.defs#bskyAppStatePref'
            };
            pref.nuxs = (pref.nuxs || []).filter((nux)=>!ids.includes(nux.id));
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isBskyAppStatePref(p)).concat(pref);
        });
    }
    async setPostInteractionSettings(settings) {
        const result = index_1.AppBskyActorDefs.validatePostInteractionSettingsPref(settings);
        // Fool-proofing (should not be needed because of type safety)
        if (!result.success) throw result.error;
        await this.updatePreferences((prefs)=>{
            const pref = prefs.findLast(predicate.isValidPostInteractionSettingsPref) || {
                $type: 'app.bsky.actor.defs#postInteractionSettingsPref'
            };
            /**
             * Matches handling of `threadgate.allow` where `undefined` means "everyone"
             */ pref.threadgateAllowRules = settings.threadgateAllowRules;
            pref.postgateEmbeddingRules = settings.postgateEmbeddingRules;
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isPostInteractionSettingsPref(p)).concat(pref);
        });
    }
    async setVerificationPrefs(settings) {
        const result = index_1.AppBskyActorDefs.validateVerificationPrefs(settings);
        // Fool-proofing (should not be needed because of type safety)
        if (!result.success) throw result.error;
        await this.updatePreferences((prefs)=>{
            const pref = prefs.findLast(predicate.isValidVerificationPrefs) || {
                $type: 'app.bsky.actor.defs#verificationPrefs',
                hideBadges: false
            };
            pref.hideBadges = settings.hideBadges;
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isVerificationPrefs(p)).concat(pref);
        });
    }
    /**
     * This function updates the preferences of a user and allows for a callback function to be executed
     * before the update.
     * @param cb - cb is a callback function that takes in a single parameter of type
     * AppBskyActorDefs.Preferences and returns either a boolean or void. This callback function is used to
     * update the preferences of the user. The function is called with the current preferences as an
     * argument and if the callback returns false, the preferences are not updated.
     */ async updatePreferences(cb) {
        try {
            await __classPrivateFieldGet(this, _Agent_prefsLock, "f").acquireAsync();
            const res = await this.app.bsky.actor.getPreferences({});
            const newPrefs = cb(res.data.preferences);
            if (newPrefs === false) return res.data.preferences;
            await this.app.bsky.actor.putPreferences({
                preferences: newPrefs
            });
            return newPrefs;
        } finally{
            __classPrivateFieldGet(this, _Agent_prefsLock, "f").release();
        }
    }
    async updateHiddenPost(postUri, action) {
        await this.updatePreferences((prefs)=>{
            const pref = prefs.findLast(predicate.isValidHiddenPostsPref) || {
                $type: 'app.bsky.actor.defs#hiddenPostsPref',
                items: []
            };
            const hiddenItems = new Set(pref.items);
            if (action === 'hide') hiddenItems.add(postUri);
            else hiddenItems.delete(postUri);
            pref.items = [
                ...hiddenItems
            ];
            return prefs.filter((p)=>!index_1.AppBskyActorDefs.isHiddenPostsPref(p)).concat(pref);
        });
    }
    /**
     * A helper specifically for updating feed preferences
     */ async updateFeedPreferences(cb) {
        let res;
        await this.updatePreferences((prefs)=>{
            const feedsPref = prefs.findLast(predicate.isValidSavedFeedsPref) || {
                $type: 'app.bsky.actor.defs#savedFeedsPref',
                saved: [],
                pinned: []
            };
            res = cb(feedsPref.saved, feedsPref.pinned);
            feedsPref.saved = res.saved;
            feedsPref.pinned = res.pinned;
            return prefs.filter((pref)=>!index_1.AppBskyActorDefs.isSavedFeedsPref(pref)).concat(feedsPref);
        });
        return res;
    }
    async updateSavedFeedsV2Preferences(cb) {
        let maybeMutatedSavedFeeds = [];
        await this.updatePreferences((prefs)=>{
            const existingV2Pref = prefs.findLast(predicate.isValidSavedFeedsPrefV2) || {
                $type: 'app.bsky.actor.defs#savedFeedsPrefV2',
                items: []
            };
            const newSavedFeeds = cb(existingV2Pref.items);
            // enforce ordering: pinned first, then saved
            existingV2Pref.items = [
                ...newSavedFeeds
            ].sort((a, b)=>// @NOTE: preserve order of items with the same pinned status
                a.pinned === b.pinned ? 0 : a.pinned ? -1 : 1);
            // Store the return value
            maybeMutatedSavedFeeds = newSavedFeeds;
            let updatedPrefs = prefs.filter((pref)=>!index_1.AppBskyActorDefs.isSavedFeedsPrefV2(pref)).concat(existingV2Pref);
            /*
             * If there's a v2 pref present, it means this account was migrated from v1
             * to v2. During the transition period, we double write v2 prefs back to
             * v1, but NOT the other way around.
             */ let existingV1Pref = prefs.findLast(predicate.isValidSavedFeedsPref);
            if (existingV1Pref) {
                const { saved, pinned } = existingV1Pref;
                const v2Compat = (0, util_1.savedFeedsToUriArrays)(// v1 only supports feeds and lists
                existingV2Pref.items.filter((i)=>[
                        'feed',
                        'list'
                    ].includes(i.type)));
                existingV1Pref = {
                    ...existingV1Pref,
                    saved: Array.from(new Set([
                        ...saved,
                        ...v2Compat.saved
                    ])),
                    pinned: Array.from(new Set([
                        ...pinned,
                        ...v2Compat.pinned
                    ]))
                };
                updatedPrefs = updatedPrefs.filter((pref)=>!index_1.AppBskyActorDefs.isSavedFeedsPref(pref)).concat(existingV1Pref);
            }
            return updatedPrefs;
        });
        return maybeMutatedSavedFeeds;
    }
}
exports.Agent = Agent;
_Agent_prefsLock = new WeakMap();
//#region Static configuration
/**
 * The labelers to be used across all requests with the takedown capability
 */ Object.defineProperty(Agent, "appLabelers", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: [
        const_1.BSKY_LABELER_DID
    ]
});
/**
 * Helper to transform the legacy content preferences.
 */ function adjustLegacyContentLabelPref(pref) {
    let visibility = pref.visibility;
    // adjust legacy values
    if (visibility === 'show') visibility = 'ignore';
    return {
        ...pref,
        visibility
    };
}
/**
 * Re-maps legacy labels to new labels on READ. Does not save these changes to
 * the user's preferences.
 */ function remapLegacyLabels(labels) {
    const _labels = {
        ...labels
    };
    const legacyToNewMap = {
        gore: 'graphic-media',
        nsfw: 'porn',
        suggestive: 'sexual'
    };
    for(const labelName in _labels){
        const newLabelName = legacyToNewMap[labelName];
        if (newLabelName) _labels[newLabelName] = _labels[labelName];
    }
    return _labels;
}
/**
 * A helper to get the currently enabled labelers from the full preferences array
 */ function prefsArrayToLabelerDids(prefs) {
    const labelersPref = prefs.findLast(predicate.isValidLabelersPref);
    let dids = [];
    if (labelersPref) dids = labelersPref.labelers.map((labeler)=>labeler.did);
    return dids;
}
function isBskyPrefs(v) {
    return v && typeof v === 'object' && 'moderationPrefs' in v && isModPrefs(v.moderationPrefs);
}
function isModPrefs(v) {
    return v && typeof v === 'object' && 'labelers' in v;
}
function migrateLegacyMutedWordsItems(items) {
    return items.map((item)=>({
            ...item,
            id: item.id || common_web_1.TID.nextStr()
        }));
}
function matchMutedWord(existingWord, newWord) {
    // id is undefined in legacy implementation
    const existingId = existingWord.id;
    // prefer matching based on id
    const matchById = existingId && existingId === newWord.id;
    // handle legacy case where id is not set
    const legacyMatchByValue = !existingId && existingWord.value === newWord.value;
    return matchById || legacyMatchByValue;
}

},{"981dd472bbcb28f2":"aO16e","2115b4fff6536a35":"2onrJ","1b787df1587e2852":"gN2Ao","c68a37dda1a41427":"iLJWL","f33eb10c3cebcf98":"hHmOB","a1dadabad231f6e8":"b1XzS","582def3129c48937":"2AA0F","4cf77777c1bf38cd":"dQ5lX","75a16db80497fd37":"36sFr","992e0339cc1d1092":"33Feg","599e46fc72ae7ce4":"OcJzf"}],"aO16e":[function(require,module,exports,__globalThis) {
"use strict";
var __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var _AwaitLock_acquired, _AwaitLock_waitingResolvers;
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * A mutex lock for coordination across async functions
 */ class AwaitLock {
    constructor(){
        _AwaitLock_acquired.set(this, false);
        _AwaitLock_waitingResolvers.set(this, new Set());
    }
    /**
     * Whether the lock is currently acquired or not. Accessing this property does not affect the
     * status of the lock.
     */ get acquired() {
        return __classPrivateFieldGet(this, _AwaitLock_acquired, "f");
    }
    /**
     * Acquires the lock, waiting if necessary for it to become free if it is already locked. The
     * returned promise is fulfilled once the lock is acquired.
     *
     * A timeout (in milliseconds) may be optionally provided. If the lock cannot be acquired before
     * the timeout elapses, the returned promise is rejected with an error. The behavior of invalid
     * timeout values depends on how `setTimeout` handles those values.
     *
     * After acquiring the lock, you **must** call `release` when you are done with it.
     */ acquireAsync({ timeout } = {}) {
        if (!__classPrivateFieldGet(this, _AwaitLock_acquired, "f")) {
            __classPrivateFieldSet(this, _AwaitLock_acquired, true, "f");
            return Promise.resolve();
        }
        if (timeout == null) return new Promise((resolve)=>{
            __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").add(resolve);
        });
        let resolver;
        let timer;
        return Promise.race([
            new Promise((resolve)=>{
                resolver = ()=>{
                    clearTimeout(timer);
                    resolve();
                };
                __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").add(resolver);
            }),
            new Promise((_, reject)=>{
                timer = setTimeout(()=>{
                    __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").delete(resolver);
                    reject(new Error(`Timed out waiting for lock`));
                }, timeout);
            })
        ]);
    }
    /**
     * Acquires the lock if it is free and otherwise returns immediately without waiting. Returns
     * `true` if the lock was free and is now acquired, and `false` otherwise.
     *
     * This method differs from calling `acquireAsync` with a zero-millisecond timeout in that it runs
     * synchronously without waiting for the JavaScript task queue.
     */ tryAcquire() {
        if (!__classPrivateFieldGet(this, _AwaitLock_acquired, "f")) {
            __classPrivateFieldSet(this, _AwaitLock_acquired, true, "f");
            return true;
        }
        return false;
    }
    /**
     * Releases the lock and gives it to the next waiting acquirer, if there is one. Each acquirer
     * must release the lock exactly once.
     */ release() {
        if (!__classPrivateFieldGet(this, _AwaitLock_acquired, "f")) throw new Error(`Cannot release an unacquired lock`);
        if (__classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").size > 0) {
            // Sets preserve insertion order like a queue
            const [resolve] = __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f");
            __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").delete(resolve);
            resolve();
        } else __classPrivateFieldSet(this, _AwaitLock_acquired, false, "f");
    }
}
exports.default = AwaitLock;
_AwaitLock_acquired = new WeakMap(), _AwaitLock_waitingResolvers = new WeakMap();

},{}],"33Feg":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isValidVerificationPrefs = exports.isValidThreadViewPref = exports.isValidSavedFeedsPrefV2 = exports.isValidSavedFeedsPref = exports.isValidPostInteractionSettingsPref = exports.isValidPersonalDetailsPref = exports.isValidMutedWordsPref = exports.isValidLabelersPref = exports.isValidInterestsPref = exports.isValidHiddenPostsPref = exports.isValidFeedViewPref = exports.isValidContentLabelPref = exports.isValidBskyAppStatePref = exports.isValidAdultContentPref = exports.isValidProfile = void 0;
const index_1 = require("e834686cd990e81c");
const util_1 = require("92787cc3665f993d");
exports.isValidProfile = (0, util_1.asPredicate)(index_1.AppBskyActorProfile.validateRecord);
exports.isValidAdultContentPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateAdultContentPref);
exports.isValidBskyAppStatePref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateBskyAppStatePref);
exports.isValidContentLabelPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateContentLabelPref);
exports.isValidFeedViewPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateFeedViewPref);
exports.isValidHiddenPostsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateHiddenPostsPref);
exports.isValidInterestsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateInterestsPref);
exports.isValidLabelersPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateLabelersPref);
exports.isValidMutedWordsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateMutedWordsPref);
exports.isValidPersonalDetailsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validatePersonalDetailsPref);
exports.isValidPostInteractionSettingsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validatePostInteractionSettingsPref);
exports.isValidSavedFeedsPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateSavedFeedsPref);
exports.isValidSavedFeedsPrefV2 = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateSavedFeedsPrefV2);
exports.isValidThreadViewPref = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateThreadViewPref);
exports.isValidVerificationPrefs = (0, util_1.asPredicate)(index_1.AppBskyActorDefs.validateVerificationPrefs);

},{"e834686cd990e81c":"hHmOB","92787cc3665f993d":"hnRug"}],"8iA5h":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CredentialSession = exports.AtpAgent = void 0;
const common_web_1 = require("6f6c50e87e32254a");
const xrpc_1 = require("de70f59f0620b027");
const agent_1 = require("5fa90bef3b13343d");
const client_1 = require("10b37bac7a7ac207");
const lexicons_1 = require("9ad761b8e8d769c7");
const ReadableStream = globalThis.ReadableStream;
/**
 * A wrapper around the {@link Agent} class that uses credential based session
 * management. This class also exposes most of the session management methods
 * directly.
 *
 * This class will be deprecated in the near future. Use {@link Agent} directly
 * with a {@link CredentialSession} instead:
 *
 *  ```ts
 *  const session = new CredentialSession({
 *    service: new URL('https://example.com'),
 *  })
 *
 *  const agent = new Agent(session)
 *  ```
 */ class AtpAgent extends agent_1.Agent {
    constructor(options){
        const sessionManager = options instanceof CredentialSession ? options : new CredentialSession(new URL(options.service), options.fetch, options.persistSession);
        super(sessionManager);
        Object.defineProperty(this, "sessionManager", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // This assignment is already being done in the super constructor, but we
        // need to do it here to make TypeScript happy.
        this.sessionManager = sessionManager;
        if (!(options instanceof CredentialSession) && options.headers) for (const [key, value] of options.headers)this.setHeader(key, value);
    }
    clone() {
        return this.copyInto(new AtpAgent(this.sessionManager));
    }
    get session() {
        return this.sessionManager.session;
    }
    get hasSession() {
        return this.sessionManager.hasSession;
    }
    get did() {
        return this.sessionManager.did;
    }
    get serviceUrl() {
        return this.sessionManager.serviceUrl;
    }
    get pdsUrl() {
        return this.sessionManager.pdsUrl;
    }
    get dispatchUrl() {
        return this.sessionManager.dispatchUrl;
    }
    /** @deprecated use {@link serviceUrl} instead */ get service() {
        return this.serviceUrl;
    }
    get persistSession() {
        throw new Error('Cannot set persistSession directly. "persistSession" is defined through the constructor and will be invoked automatically when session data changes.');
    }
    set persistSession(v) {
        throw new Error('Cannot set persistSession directly. "persistSession" must be defined in the constructor and can no longer be changed.');
    }
    /** @deprecated use {@link AtpAgent.serviceUrl} instead */ getServiceUrl() {
        return this.serviceUrl;
    }
    async resumeSession(session) {
        return this.sessionManager.resumeSession(session);
    }
    async createAccount(data, opts) {
        return this.sessionManager.createAccount(data, opts);
    }
    async login(opts) {
        return this.sessionManager.login(opts);
    }
    async logout() {
        return this.sessionManager.logout();
    }
}
exports.AtpAgent = AtpAgent;
/**
 * Credentials (username / password) based session manager. Instances of this
 * class will typically be used as the session manager for an {@link AtpAgent}.
 * They can also be used with an {@link XrpcClient}, if you want to use you
 * own Lexicons.
 */ class CredentialSession {
    constructor(serviceUrl, fetch = globalThis.fetch, persistSession){
        Object.defineProperty(this, "serviceUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: serviceUrl
        });
        Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: fetch
        });
        Object.defineProperty(this, "persistSession", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: persistSession
        });
        Object.defineProperty(this, "pdsUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        }); // The PDS URL, driven by the did doc
        Object.defineProperty(this, "session", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "refreshSessionPromise", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Private {@link ComAtprotoServerNS} used to perform session management API
         * calls on the service endpoint. Calls performed by this agent will not be
         * authenticated using the user's session to allow proper manual configuration
         * of the headers when performing session management operations.
         */ Object.defineProperty(this, "server", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new client_1.ComAtprotoServerNS(// Note that the use of the codegen "schemas" (to instantiate `this.api`),
            // as well as the use of `ComAtprotoServerNS` will cause this class to
            // reference (way) more code than it actually needs. It is not possible,
            // with the current state of the codegen, to generate a client that only
            // includes the methods that are actually used by this class. This is a
            // known limitation that should be addressed in a future version of the
            // codegen.
            new xrpc_1.XrpcClient((url, init)=>{
                return (0, this.fetch)(new URL(url, this.serviceUrl), init);
            }, lexicons_1.schemas))
        });
    }
    get did() {
        return this.session?.did;
    }
    get dispatchUrl() {
        return this.pdsUrl || this.serviceUrl;
    }
    get hasSession() {
        return !!this.session;
    }
    /**
     * Sets a WhatWG "fetch()" function to be used for making HTTP requests.
     */ setFetch(fetch = globalThis.fetch) {
        this.fetch = fetch;
    }
    async fetchHandler(url, init) {
        // wait for any active session-refreshes to finish
        await this.refreshSessionPromise;
        const initialUri = new URL(url, this.dispatchUrl);
        const initialReq = new Request(initialUri, init);
        const initialToken = this.session?.accessJwt;
        if (!initialToken || initialReq.headers.has('authorization')) return (0, this.fetch)(initialReq);
        initialReq.headers.set('authorization', `Bearer ${initialToken}`);
        const initialRes = await (0, this.fetch)(initialReq);
        if (!this.session?.refreshJwt) return initialRes;
        const isExpiredToken = await isErrorResponse(initialRes, [
            400
        ], [
            'ExpiredToken'
        ]);
        if (!isExpiredToken) return initialRes;
        try {
            await this.refreshSession();
        } catch  {
            return initialRes;
        }
        if (init?.signal?.aborted) return initialRes;
        // The stream was already consumed. We cannot retry the request. A solution
        // would be to tee() the input stream but that would bufferize the entire
        // stream in memory which can lead to memory starvation. Instead, we will
        // return the original response and let the calling code handle retries.
        if (ReadableStream && init?.body instanceof ReadableStream) return initialRes;
        // Return initial "ExpiredToken" response if the session was not refreshed.
        const updatedToken = this.session?.accessJwt;
        if (!updatedToken || updatedToken === initialToken) return initialRes;
        // Make sure the initial request is cancelled to avoid leaking resources
        // (NodeJS 👀): https://undici.nodejs.org/#/?id=garbage-collection
        await initialRes.body?.cancel();
        // We need to re-compute the URI in case the PDS endpoint has changed
        const updatedUri = new URL(url, this.dispatchUrl);
        const updatedReq = new Request(updatedUri, init);
        updatedReq.headers.set('authorization', `Bearer ${updatedToken}`);
        return await (0, this.fetch)(updatedReq);
    }
    /**
     * Create a new account and hydrate its session in this agent.
     */ async createAccount(data, opts) {
        try {
            const res = await this.server.createAccount(data, opts);
            this.session = {
                accessJwt: res.data.accessJwt,
                refreshJwt: res.data.refreshJwt,
                handle: res.data.handle,
                did: res.data.did,
                email: data.email,
                emailConfirmed: false,
                emailAuthFactor: false,
                active: true
            };
            this.persistSession?.('create', this.session);
            this._updateApiEndpoint(res.data.didDoc);
            return res;
        } catch (e) {
            this.session = undefined;
            this.persistSession?.('create-failed', undefined);
            throw e;
        }
    }
    /**
     * Start a new session with this agent.
     */ async login(opts) {
        try {
            const res = await this.server.createSession({
                identifier: opts.identifier,
                password: opts.password,
                authFactorToken: opts.authFactorToken,
                allowTakendown: opts.allowTakendown
            });
            this.session = {
                accessJwt: res.data.accessJwt,
                refreshJwt: res.data.refreshJwt,
                handle: res.data.handle,
                did: res.data.did,
                email: res.data.email,
                emailConfirmed: res.data.emailConfirmed,
                emailAuthFactor: res.data.emailAuthFactor,
                active: res.data.active ?? true,
                status: res.data.status
            };
            this._updateApiEndpoint(res.data.didDoc);
            this.persistSession?.('create', this.session);
            return res;
        } catch (e) {
            this.session = undefined;
            this.persistSession?.('create-failed', undefined);
            throw e;
        }
    }
    async logout() {
        if (this.session) try {
            await this.server.deleteSession(undefined, {
                headers: {
                    authorization: `Bearer ${this.session.refreshJwt}`
                }
            });
        } catch  {
        // Ignore errors
        } finally{
            this.session = undefined;
            this.persistSession?.('expired', undefined);
        }
    }
    /**
     * Resume a pre-existing session with this agent.
     */ async resumeSession(session) {
        this.session = session;
        try {
            const res = await this.server.getSession(undefined, {
                headers: {
                    authorization: `Bearer ${session.accessJwt}`
                }
            }).catch(async (err)=>{
                if (err instanceof xrpc_1.XRPCError && [
                    'ExpiredToken',
                    'InvalidToken'
                ].includes(err.error) && session.refreshJwt) try {
                    const res = await this.server.refreshSession(undefined, {
                        headers: {
                            authorization: `Bearer ${session.refreshJwt}`
                        }
                    });
                    session.accessJwt = res.data.accessJwt;
                    session.refreshJwt = res.data.refreshJwt;
                    return this.server.getSession(undefined, {
                        headers: {
                            authorization: `Bearer ${session.accessJwt}`
                        }
                    });
                } catch  {
                // Noop, we'll throw the original error
                }
                throw err;
            });
            if (res.data.did !== session.did) throw new xrpc_1.XRPCError(xrpc_1.ResponseType.InvalidRequest, 'Invalid session', 'InvalidDID');
            session.email = res.data.email;
            session.handle = res.data.handle;
            session.emailConfirmed = res.data.emailConfirmed;
            session.emailAuthFactor = res.data.emailAuthFactor;
            session.active = res.data.active ?? true;
            session.status = res.data.status;
            // protect against concurrent session updates
            if (this.session === session) {
                this._updateApiEndpoint(res.data.didDoc);
                this.persistSession?.('update', session);
            }
            return res;
        } catch (err) {
            // protect against concurrent session updates
            if (this.session === session) {
                this.session = undefined;
                this.persistSession?.(err instanceof xrpc_1.XRPCError && [
                    'ExpiredToken',
                    'InvalidToken'
                ].includes(err.error) ? 'expired' : 'network-error', undefined);
            }
            throw err;
        }
    }
    /**
     * Internal helper to refresh sessions
     * - Wraps the actual implementation in a promise-guard to ensure only
     *   one refresh is attempted at a time.
     */ async refreshSession() {
        return this.refreshSessionPromise || (this.refreshSessionPromise = this._refreshSessionInner().finally(()=>{
            this.refreshSessionPromise = undefined;
        }));
    }
    /**
     * Internal helper to refresh sessions (actual behavior)
     */ async _refreshSessionInner() {
        if (!this.session?.refreshJwt) return;
        try {
            const res = await this.server.refreshSession(undefined, {
                headers: {
                    authorization: `Bearer ${this.session.refreshJwt}`
                }
            });
            // succeeded, update the session
            this.session = {
                ...this.session,
                accessJwt: res.data.accessJwt,
                refreshJwt: res.data.refreshJwt,
                handle: res.data.handle,
                did: res.data.did
            };
            this._updateApiEndpoint(res.data.didDoc);
            this.persistSession?.('update', this.session);
        } catch (err) {
            if (err instanceof xrpc_1.XRPCError && err.error && [
                'ExpiredToken',
                'InvalidToken'
            ].includes(err.error)) {
                // failed due to a bad refresh token
                this.session = undefined;
                this.persistSession?.('expired', undefined);
            }
        // else: other failures should be ignored - the issue will
        // propagate in the _dispatch() second attempt to run
        // the request
        }
    }
    /**
     * Helper to update the pds endpoint dynamically.
     *
     * The session methods (create, resume, refresh) may respond with the user's
     * did document which contains the user's canonical PDS endpoint. That endpoint
     * may differ from the endpoint used to contact the server. We capture that
     * PDS endpoint and update the client to use that given endpoint for future
     * requests. (This helps ensure smooth migrations between PDSes, especially
     * when the PDSes are operated by a single org.)
     */ _updateApiEndpoint(didDoc) {
        if ((0, common_web_1.isValidDidDoc)(didDoc)) {
            const endpoint = (0, common_web_1.getPdsEndpoint)(didDoc);
            this.pdsUrl = endpoint ? new URL(endpoint) : undefined;
        } else // If the did doc is invalid, we clear the pdsUrl (should never happen)
        this.pdsUrl = undefined;
    }
}
exports.CredentialSession = CredentialSession;
function isErrorObject(v) {
    return xrpc_1.errorResponseBody.safeParse(v).success;
}
async function isErrorResponse(response, status, errorNames) {
    if (!status.includes(response.status)) return false;
    // Some engines (react-native 👀) don't expose a response.body property...
    // if (!response.body) return false
    try {
        const json = await peekJson(response, 10240);
        return isErrorObject(json) && errorNames.includes(json.error);
    } catch (err) {
        return false;
    }
}
async function peekJson(response, maxSize = Infinity) {
    if (extractType(response) !== 'application/json') throw new Error('Not JSON');
    if (extractLength(response) > maxSize) throw new Error('Response too large');
    return response.clone().json();
}
function extractLength({ headers }) {
    return headers.get('Content-Length') ? Number(headers.get('Content-Length')) : NaN;
}
function extractType({ headers }) {
    return headers.get('Content-Type')?.split(';')[0]?.trim();
}

},{"6f6c50e87e32254a":"2onrJ","de70f59f0620b027":"iLJWL","5fa90bef3b13343d":"hrVL0","10b37bac7a7ac207":"hHmOB","9ad761b8e8d769c7":"b1XzS"}],"1WlmE":[function(require,module,exports,__globalThis) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BskyAgent = void 0;
const atp_agent_1 = require("617942f16605b479");
/** @deprecated use {@link AtpAgent} instead */ class BskyAgent extends atp_agent_1.AtpAgent {
    clone() {
        if (this.constructor === BskyAgent) {
            const agent = new BskyAgent(this.sessionManager);
            return this.copyInto(agent);
        }
        // sub-classes should override this method
        throw new TypeError('Cannot clone a subclass of BskyAgent');
    }
}
exports.BskyAgent = BskyAgent;

},{"617942f16605b479":"8iA5h"}]},["eZFTg","9Fk10"], "9Fk10", "parcelRequire1ddf", {})

//# sourceMappingURL=bluesky-verifier-copla.c9112ede.js.map
